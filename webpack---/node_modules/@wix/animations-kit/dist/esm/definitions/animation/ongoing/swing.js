import { getElementTransformedPosition, getEasingFamily, getAdjacentDifferences, } from '../../../utils/animationsUtils';
import { deg2rad } from '@wix/wow-utils';
const name = 'Swing';
const properties = {
    schema: {},
};
const powerMap = {
    soft: { swingFactor: 1 },
    medium: { swingFactor: 2 },
    hard: { swingFactor: 3 },
};
const directionMap = {
    top: { trnX: 50, trnY: 0 },
    right: { trnX: 100, trnY: 50 },
    bottom: { trnX: 50, trnY: 100 },
    left: { trnX: 0, trnY: 50 },
};
function getDelaySequence(swingDeg, timeToFrame, startingAngle) {
    return [
        { angle: startingAngle, timeToFrame: 0 },
        { angle: swingDeg * 0.6, timeToFrame },
        { angle: swingDeg * -0.3, timeToFrame },
        { angle: swingDeg * 0.2, timeToFrame },
        { angle: swingDeg * -0.05, timeToFrame },
        { angle: 0, timeToFrame: timeToFrame * 0.8 },
    ];
}
/**
 * Swing animation object
 */
function animate(kit, elements, duration, repeatDelay, { power, swing = 20, direction = 'top', easing = 'sineInOut', ...params } = {}) {
    const sequence = kit.sequence(params);
    const ease = getEasingFamily(easing);
    const { trnX, trnY } = directionMap[direction];
    const swingDeg = typeof power !== 'undefined' ? 20 * powerMap[power].swingFactor : swing;
    elements.forEach((element) => {
        const elementAngleInDeg = Number(kit.engine.getProperty(element, '--comp-rotate-z') || 0);
        const { x, y } = getElementTransformedPosition({ x: `${trnX}%`, y: `${trnY}%` }, kit.engine.getBoundingRect(element), deg2rad(elementAngleInDeg));
        sequence.add(kit.engine.set(element, {
            x,
            y,
            transformOrigin: `${trnX}% ${trnY}%`,
        }));
    });
    sequence
        .add(kit.animate('BaseRotate', elements, duration / 4, 0, {
        to: { rotation: `+=${swingDeg}deg` },
        ease: ease.out,
    }))
        .add(kit.animate('BaseRotate', elements, duration / 2, 0, {
        to: { rotation: `-=${2 * swingDeg}deg` },
        ease: ease.inOut,
    }));
    if (repeatDelay) {
        const delaySequence = getDelaySequence(swingDeg, duration / 2, -swingDeg);
        const angles = getAdjacentDifferences(delaySequence.map((e) => e.angle));
        angles.forEach((angle, idx) => {
            const rotation = angle > 0 ? `+=${angle}deg` : `-=${-angle}deg`;
            sequence.add(kit.animate('BaseRotate', elements, delaySequence[idx + 1].timeToFrame, 0, {
                to: { rotation },
                ease: 'sineInOut',
            }));
        });
        sequence.add(kit.animate('BaseNone', elements, repeatDelay, 0)); // add repeat delay
    }
    else {
        sequence.add(kit.animate('BaseRotate', elements, duration / 4, 0, {
            to: { rotation: `+=${swingDeg}deg` },
            ease: ease.in,
        }));
    }
    return sequence.get();
}
export { name, properties, animate };
//# sourceMappingURL=swing.js.map