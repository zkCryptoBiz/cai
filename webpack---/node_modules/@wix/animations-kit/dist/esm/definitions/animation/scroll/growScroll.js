import { deg2rad } from '@wix/wow-utils';
import { getAdjustedDirection, getElementTransformedPosition, } from '../../../utils/animationsUtils';
const name = 'GrowScroll';
const properties = {
    schema: {},
};
const MAX_Y_TRAVEL = 40;
const powerMap = {
    soft: { scaleFrom: 0.8, scaleTo: 1.2, travelY: 0 },
    medium: { scaleFrom: 0.3, scaleTo: 1.7, travelY: 0.75 },
    hard: { scaleFrom: 0, scaleTo: 4, travelY: 1 },
};
const directionMap = {
    top: { origin: '50% 0', idx: 0 },
    'top-right': { origin: '100% 0', idx: 1 },
    right: { origin: '100% 50%', idx: 2 },
    'bottom-right': { origin: '100% 100%', idx: 3 },
    bottom: { origin: '50% 100%', idx: 4 },
    'bottom-left': { origin: '0 100%', idx: 5 },
    left: { origin: '0 50%', idx: 6 },
    'top-left': { origin: '0 0', idx: 7 },
    // center: { origin: '50% 50%' },
};
const rangeValues = {
    in: (scaleFrom, _scaleTo, travelY) => ({
        fromValues: { scale: scaleFrom, travel: travelY },
        toValues: { scale: 1, travel: 0 },
        scaleDelay: 600,
        scaleEase: 'sineIn',
    }),
    out: (_scaleFrom, scaleTo, travelY) => ({
        fromValues: { scale: 1, travel: 0 },
        toValues: { scale: scaleTo, travel: -travelY },
        scaleDelay: 0,
        scaleEase: 'linear',
    }),
    continuous: (scaleFrom, scaleTo, travelY) => ({
        fromValues: { scale: scaleFrom, travel: travelY },
        toValues: { scale: scaleTo, travel: -travelY },
        scaleDelay: 220,
        scaleEase: 'sineInOut',
    }),
};
/**
 * Grow Scroll
 */
function animate(kit, elements, _duration, _delay, { power, range = 'in', scale = range === 'in' ? powerMap.hard.scaleFrom : powerMap.hard.scaleTo, direction = 'center', speed = 0, ...params } = {}) {
    const sequence = kit.sequence(params);
    const { scaleFrom, scaleTo, travelY } = typeof power !== 'undefined'
        ? powerMap[power]
        : {
            scaleFrom: scale,
            scaleTo: scale,
            travelY: speed,
        };
    const { fromValues, toValues, scaleDelay, scaleEase } = rangeValues[range](scaleFrom, scaleTo, travelY * -MAX_Y_TRAVEL);
    const delay = power === 'hard' && range !== 'out' ? scaleDelay : 0;
    const duration = range === 'out' ? 700 : 1000 - delay;
    let yPositionOffset = 0; // rotated element's position is affected when changing direction (transform origin)
    if (direction !== 'center') {
        elements.forEach((element) => {
            const elementAngleInDeg = Number(element.getAttribute('data-angle')) || 0;
            let adjDirection = direction;
            adjDirection = getAdjustedDirection(directionMap, direction, elementAngleInDeg);
            const [trOriginX, trOriginY] = directionMap[adjDirection].origin.split(' ');
            const { x, y } = getElementTransformedPosition({ x: trOriginX, y: trOriginY }, kit.engine.getBoundingRect(element), deg2rad(elementAngleInDeg));
            const windowHeight = window.innerHeight; // Get the viewport height in pixels
            yPositionOffset = (y / windowHeight) * 100; // Get y offset in vh
            sequence.add(kit.engine.set(element, {
                x,
                y,
                transformOrigin: directionMap[adjDirection].origin,
            }));
        });
    }
    sequence.add([
        kit.animate('BaseScale', elements, duration, delay, {
            from: { scale: fromValues.scale },
            to: { scale: toValues.scale },
            ease: scaleEase,
        }),
        kit.animate('BasePosition', elements, 1000, 0, {
            from: { y: `${fromValues.travel + yPositionOffset}vh` },
            to: { y: `${toValues.travel + yPositionOffset}vh` },
            ease: 'linear',
        }),
    ]);
    return sequence.get();
}
const api = {
    getScrubOffsets({ power, range = 'in', speed = 0, }) {
        const offset = (typeof power !== 'undefined'
            ? powerMap[power].travelY
            : Math.abs(speed)) * MAX_Y_TRAVEL;
        return {
            start: range === 'out' ? '0px' : `${-offset}vh`,
            end: range === 'in' ? '0px' : `${offset}vh`,
        };
    },
};
export { name, properties, animate, api };
//# sourceMappingURL=growScroll.js.map