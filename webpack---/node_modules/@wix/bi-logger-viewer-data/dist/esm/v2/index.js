/**
 * A function to create a log object for the 'webVitalsReportSrc11Evid180' event (evid: 180)
 *
 * Event description: The event will be sent 1 time for any load from the viewer / BM. the web vitals can be change over time and will be sent in a json dictionary.
 *
 * @param {webVitalsReportSrc11Evid180Params} params - The parameters for this event
 * @property {number} inpProcessingStart - inp_processing_start
 * @property {number} inpValue - inp_value
 * @property {string} clsComponentType - cls_component_type
 * @property {string} inpApplicationId - inp_application_id
 * @property {number} lcp - lcp
 * @property {string} inpWidgetId - inp_widget_id
 * @property {number} inpProcessingEnd - inp_processing_end
 * @property {number} inpInteractionId - inp_interaction_id
 * @property {string} clsLargestShiftVal - cls_largest_shift_val
 * @property {Url} url - The site url
 * @property {number} ttfb - ttfb
 * @property {string} clsLargestShiftTarget - cls_largest_shift_target
 * @property {number} fcp - fcp
 * @property {string} inpUrl - inp_url
 * @property {number} lcpSize - lcp_size
 * @property {number} lcpResourceLoadDelay - lcp_resource_load_delay
 * @property {string} inpTargetSelector - inp_target_selector
 * @property {string} lcpComponentType - lcp_component_type
 * @property {string} webVitals - A Json dictionary of all the web vitals google is following on. example -  {“Measure”:value,” Measure:value”..}
 * @property {string} clsApplicationId - cls_application_id
 * @property {number} lcpResourceLoadTime - lcp_resource_load_time
 * @property {string} inpEventType - inp_event_type
 * @property {string} lcpUrl - lcp_url
 * @property {string} lcpTag - lcp_tag
 * @property {string} clsRating - cls_rating
 * @property {string} navType - nav_type
 * @property {string} lcpWidgetId - lcp_widget_id
 * @property {GUID} sessionId - session_id
 * @property {boolean} isSoftNavEnabled - is_soft_nav_enabled
 * @property {string} metadata - Json dictionary of metadata
 * @property {string} lcpApplicationId - lcp_application_id
 * @property {string} inpComponentType - inp_component_type
 * @property {string} lcpRating - lcp_rating
 * @property {number} clsLargestShiftTime - cls_largest_shift_time
 * @property {string} lcpContentType - lcp_content_type
 * @property {number} inpStartTime - inp_start_time
 * @property {string} inpLoadState - inp_load_state
 * @property {number} lcpElementRenderDelay - lcp_element_render_delay
 * @property {string} clsWidgetId - cls_widget_id
 * @property {string} clsVal - cls_val
 * @property {string} platform - viewer / BM
 * @property {string} lcpInitiatorType - lcp_initiator_type
 * @property {string} inpRating - inp_rating
 * @property {string} navigationId - navigation_id
 * @return {LogObject<webVitalsReportSrc11Evid180Params>} LogObject<webVitalsReportSrc11Evid180Params>
 */
export function webVitalsReportSrc11Evid180(params) {
    return { evid: 180, src: 11, endpoint: '', params };
}
/**
 * A function to create a log object for the 'beatPageView' event (evid: 3)
 *
 * Event description: Sent from the viewer to indicate page load start/finish. Used for success rate monitoring, site analytics and various reports.
 *
 * @param {beatPageViewParams} params - The parameters for this event
 * @property {DateTime} date_created - date_created
 * @property {string} bsi - bsi_container
 * @property {string} _bsi - bsi_container
 * @property {number} st - 1 - WixSite, 2 - UGC, 3 - Template
 * @property {boolean} is_rollout - (1,0)
 * @property {string} city - city
 * @property {string} rid - request_id
 * @property {string} device_id - device_id
 * @property {string} ip - ip
 * @property {boolean} ispp - If site has been migrated to styles per page
 * @property {boolean} is_platform_loaded - (1,0)
 * @property {string} sar - Screen available size. E.g. 1920x1200
 * @property {boolean} is_cached - flag to indicate if the page is_cached
 * @property {string} vid - Unique visitor id. Persistent across sessions.
 * @property {string} bitwalker_browser_name - bitwalker_browser_name
 * @property {string} udger_ua_class - udger_ua_class
 * @property {string} ssr_fb - reason why the site is not rendered in server
 * @property {string} wr - Browser window size. E.g. 1920x1000
 * @property {Url} url - Full page url. E.g. leramishurova.com/
 * @property {string} dc - app05.tam, app4.vac.aws ...
 * @property {number} is_sav_rollout - is site assets module version
 * @property {number} tts - loading_time + network time
 * @property {GUID} mid - Site member id
 * @property {number} pn -  Page number in the current session. Increased with every page switch.
 * @property {GUID} uuid - Site owner id
 * @property {string} host - host
 * @property {boolean} isp - Indicates if the site is premium.
 * @property {string} sr - Screen size. E.g. 1920x1200
 * @property {number} ts -  (Available in 'Finish' event only) The time it took for page to load (the time between Start and Finish events). For Start event it's always 0.
 * @property {string} bitwalker_browser_family - bitwalker_browser_family
 * @property {GUID} vidTmp - Temporary field for new visitor id (the value will be moved to "vid" eventually)
 * @property {string} event_name - beat name correlated to event_type (for example "interactive")
 * @property {string} os_name - os_name
 * @property {Url} ref - The page the visitor came from. E.g. google.com
 * @property {string} udger_ua_family - udger_ua_family
 * @property {boolean} fis - new session marker (can be true only when event_type=3 and previous session has expired)
 * @property {GUID} client_id - client_id
 * @property {string} siterev - site revision (or cached revision) that the visitor gets on request
 * @property {number} et - 1 - Start (Navigation started), 2 - visible, 3 - Finish (Page loaded), 12 - Partially visible
 * @property {boolean} im - sends 1 if the site is eligible for css layout (MESH)
 * @property {string} data_center - app05.tam, app4.vac.aws ...
 * @property {number} catalog_version - catalog_version
 * @property {string} user_agent - user_agent
 * @property {string} device_type - device_type
 * @property {string} event_platform - event_platform
 * @property {string} pod - pod
 * @property {string} udger_os_name - udger_os_name
 * @property {string} country_code - country_code
 * @property {string} v - Santa version
 * @property {string} viewer_name - name of viewer version ("santa" for example)
 * @property {number} bsiPageNumber - bsi_page_number
 * @property {string} browsing_session - bsi
 * @property {string} udger_device_marketname - udger_device_marketname
 * @property {number} is_dac_rollout - is dac rollout
 * @property {string} udger_ua - udger_ua
 * @property {string} pid - Id of the current page.
 * @property {string} browser_family - browser_family
 * @property {string} bot_name - bot_name
 * @property {string} vsi - Viewer session. it's a pseudo-GUID generated randomly for every viewing session. so, it's only available in viewer mode, across any BI sent. if a site is refreshed in the browser, that will generate a new vsi.
 * @property {boolean} ita - sends 1 if the tab has been constantly visible from when the site was opened until that time
 * @property {string} bitwalker_browser_version - bitwalker_browser_version
 * @property {string} udger_ua_version - udger_ua_version
 * @property {string} udger_device_class - udger_device_class
 * @property {string} wor - window outer size. E.g. 1920x1200
 * @property {string} udger_crawler_category - udger_crawler_category
 * @property {string} sessionId - new session identifier that is be available both on server and client (vsi only on client). Used for server AB tests and more
 * @property {string} bitwalker_device_type - bitwalker_device_type
 * @property {string} postal_code - postal_code
 * @property {string} region - region
 * @property {string} cruncher_pod - cruncher_pod
 * @property {Url} http_referrer - http_referrer
 * @property {GUID} _event_hash - event_hash
 * @property {string} caching - "miss" or "hit" or "hit,miss" or "hit,hit" depending on Redis and Varnish
 * @property {string} browser_version - browser_version
 * @property {string} microPop - {}
 * @property {GUID} msid - msid
 * @property {string} browser_name - browser_name
 * @property {GUID} vuuid - *** DEPRECATED ***
 * @property {boolean} udger_is_bot - udger_is_bot
 * @property {boolean} isjp - used as bot indicator true=bot, null or false=not a bot. . will be true if   session is from iFrame or headless browser or identified as bot
 * @property {number} base_version - X.Y.Z
 * @property {GUID} sid - Site id
 * @property {boolean} iss - is_server_side
 * @property {number} siterevision - DEPRECATED site revision (or cached revision) that the visitor gets on request
 * @property {number} nt - NAVIGATION = 1, // successful navigation    DYNAMIC_REDIRECT = 2, // redirect finished    INNER_ROUTE = 3, // inner route finish    NAVIGATION_ERROR = 4, // for protected page | dynamic route errors
 * @property {string} bitwalker_os_name - bitwalker_os_name
 * @property {boolean} ism - Is site using mash layout
 * @return {LogObject<beatPageViewParams>} LogObject<beatPageViewParams>
 */
export function beatPageView(params) {
    return { evid: 3, src: 29, endpoint: '', params };
}
/**
 * A function to create a log object for the 'corvidSsrCacheInvalidation' event (evid: 300)
 *
 * Event description: corvid developer can determine UoU actions that trigger ssr cache  invalidation
 *
 * @param {corvidSsrCacheInvalidationParams} params - The parameters for this event
 * @property {number} duration - The duration it took to fetch the value
 * @property {number} responseCode - Response code from ssr set
 * @property {string} user_agent - user agent
 * @property {GUID} msid - metaSiteId
 * @return {LogObject<corvidSsrCacheInvalidationParams>} LogObject<corvidSsrCacheInvalidationParams>
 */
export function corvidSsrCacheInvalidation(params) {
    return { evid: 300, src: 29, endpoint: '', params };
}
/**
 * A function to create a log object for the 'clientDeviceInfo' event (evid: 31)
 *
 * Event description: General information about client device
 *
 * @param {clientDeviceInfoParams} params - The parameters for this event
 * @property {string} rid - Request id
 * @property {boolean} saveData - Is data saver mode enabled
 * @property {GUID} vid - Unique visitor id. Persistent across sessions.
 * @property {string} availScreenRes - Available screen resolution
 * @property {number} cores - Number of CPU cores
 * @property {string} windowInner - Inner size of browser window
 * @property {string} pid - Id of landing page
 * @property {GUID} vsi - Viewer session. it's a pseudo-GUID generated randomly for every viewing session. so, it's only available in viewer mode, across any BI sent. if a site is refreshed in the browser, that will generate a new vsi.
 * @property {string} entryType - Unique name of BI event
 * @property {string} orientation - Device orientation, e.g. landscape-primary
 * @property {string} screenRes - Device screen resolution
 * @property {number} rtt - Effective network round-trip time in ms
 * @property {string} type - WiFi, cellular, etc
 * @property {string} effectiveType - Effective network quality: 4g, 3g, 2g, slow-2g, lte, unknown
 * @property {GUID} msid - Metasite id
 * @property {number} download - Effective bandwidth estimate in megabits per second
 * @property {GUID} sid - Site id
 * @property {string} windowOuter - Onner size of browser window
 * @property {number} memory - Amount of memory in MB
 * @return {LogObject<clientDeviceInfoParams>} LogObject<clientDeviceInfoParams>
 */
export function clientDeviceInfo(params) {
    return { evid: 31, src: 29, endpoint: '', params };
}
/**
 * A function to create a log object for the 'wixInfo' event (evid: 32)
 *
 * Event description: Information about Wix session
 *
 * @param {wixInfoParams} params - The parameters for this event
 * @property {boolean} is_rollout - Is new version being rolled out
 * @property {string} rid - Request id
 * @property {boolean} is_platform_loaded - Is landing page using Platform
 * @property {number} ssrDuration - SSR duration in ms
 * @property {GUID} vid - Unique visitor id. Persistent across sessions.
 * @property {string} dc - Name of data center
 * @property {boolean} is_ssr - Is SSR in use
 * @property {boolean} maybeBot - Is client a potential bot
 * @property {string} v - Wix client version
 * @property {string} viewer_name - New of Viewer: bolt, ...
 * @property {string} pid - Id of landing page
 * @property {GUID} vsi - Viewer session. it's a pseudo-GUID generated randomly for every viewing session. so, it's only available in viewer mode, across any BI sent. if a site is refreshed in the browser, that will generate a new vsi.
 * @property {string} entryType - Unique name of BI event
 * @property {string} cdn - Name of CDN provider
 * @property {string} caching - SSR Caching type
 * @property {string} microPop - Name of micro-pop
 * @property {GUID} msid - Metasite id
 * @property {GUID} sid - Site id
 * @return {LogObject<wixInfoParams>} LogObject<wixInfoParams>
 */
export function wixInfo(params) {
    return { evid: 32, src: 29, endpoint: '', params };
}
/**
 * A function to create a log object for the 'downloadedScripts' event (evid: 33)
 *
 * Event description: Details of scripts downloaded by page
 *
 * @param {downloadedScriptsParams} params - The parameters for this event
 * @property {number} duration - Total download duration in ms
 * @property {string} rid - Request id
 * @property {number} count - Number of downloaded scripts
 * @property {GUID} vid - Unique visitor id. Persistent across sessions.
 * @property {number} startTime - Time when first byte of script was received in ms
 * @property {number} attfb - Average TTFB of all scripts
 * @property {number} mttfb - Median TTFB of all scripts
 * @property {string} pid - Id of landing page
 * @property {GUID} vsi - Viewer session. it's a pseudo-GUID generated randomly for every viewing session. so, it's only available in viewer mode, across any BI sent. if a site is refreshed in the browser, that will generate a new vsi.
 * @property {number} tbd - Total number of bytes in downloaded scripts
 * @property {string} entryType - Unique name of BI event
 * @property {GUID} msid - Metasite id
 * @property {GUID} sid - Site id
 * @return {LogObject<downloadedScriptsParams>} LogObject<downloadedScriptsParams>
 */
export function downloadedScripts(params) {
    return { evid: 33, src: 29, endpoint: '', params };
}
/**
 * A function to create a log object for the 'downloadedImages' event (evid: 34)
 *
 * Event description: Details of scripts downloaded by page
 *
 * @param {downloadedImagesParams} params - The parameters for this event
 * @property {number} duration - Total download duration in ms
 * @property {string} rid - Request id
 * @property {number} count - Number of downloaded images
 * @property {GUID} vid - Unique visitor id. Persistent across sessions.
 * @property {number} startTime - Time when first byte of an image was received in ms
 * @property {number} attfb - Average TTFB of all images
 * @property {number} mttfb - Median TTFB of all images
 * @property {string} pid - Id of landing page
 * @property {GUID} vsi - Viewer session. it's a pseudo-GUID generated randomly for every viewing session. so, it's only available in viewer mode, across any BI sent. if a site is refreshed in the browser, that will generate a new vsi.
 * @property {number} tbd - Total number of bytes in downloaded images
 * @property {string} entryType - Unique name of BI event
 * @property {GUID} msid - Metasite id
 * @property {GUID} sid - Site id
 * @return {LogObject<downloadedImagesParams>} LogObject<downloadedImagesParams>
 */
export function downloadedImages(params) {
    return { evid: 34, src: 29, endpoint: '', params };
}
/**
 * A function to create a log object for the 'navigationInfo' event (evid: 35)
 *
 * Event description: General information about page navigation (HTML load)
 *
 * @param {navigationInfoParams} params - The parameters for this event
 * @property {number} dns - DNS lookup time in ms
 * @property {number} duration - Total HTML load duration in ms
 * @property {string} rid - Request id
 * @property {GUID} vid - Unique visitor id. Persistent across sessions.
 * @property {number} ttlb - Time until HTML downloaded from navigation start in ms
 * @property {Url} url - URL of landing page
 * @property {number} ttfb - Time until HTML first byte from navigation start in ms
 * @property {number} transferSize - Size over the network in bytes
 * @property {string} pid - Id of landing page
 * @property {GUID} vsi - Viewer session. it's a pseudo-GUID generated randomly for every viewing session. so, it's only available in viewer mode, across any BI sent. if a site is refreshed in the browser, that will generate a new vsi.
 * @property {string} entryType - Unique name of BI event
 * @property {number} dcl - Time until HTML downloaded and parsed from navigation start in ms
 * @property {number} decodedBodySize - Body size in browser in bytes
 * @property {Url} referrer - URL of referrer (excluding params)
 * @property {string} caching - Type of caching: browser, eTag, maybe eTag, unknown
 * @property {string} type - Navigation operation: navigate, reload, back_forward,
 * @property {GUID} msid - Metasite id
 * @property {GUID} sid - Site id
 * @property {string} protocol - Last hop protocol: http/1.1, h2, ...
 * @return {LogObject<navigationInfoParams>} LogObject<navigationInfoParams>
 */
export function navigationInfo(params) {
    return { evid: 35, src: 29, endpoint: '', params };
}
/**
 * A function to create a log object for the 'downloadedFonts' event (evid: 36)
 *
 * Event description: Details of scripts downloaded by page
 *
 * @param {downloadedFontsParams} params - The parameters for this event
 * @property {number} duration - Total download duration in ms
 * @property {string} rid - Request id
 * @property {number} count - Number of downloaded fonts
 * @property {GUID} vid - Unique visitor id. Persistent across sessions.
 * @property {number} startTime - Time when first byte of a font was received in ms
 * @property {number} attfb - Average TTFB of all fonts
 * @property {number} mttfb - Median TTFB of all fonts
 * @property {string} pid - Id of landing page
 * @property {GUID} vsi - Viewer session. it's a pseudo-GUID generated randomly for every viewing session. so, it's only available in viewer mode, across any BI sent. if a site is refreshed in the browser, that will generate a new vsi.
 * @property {number} tbd - Total number of bytes in downloaded fonts
 * @property {string} entryType - Unique name of BI event
 * @property {GUID} msid - Metasite id
 * @property {GUID} sid - Site id
 * @return {LogObject<downloadedFontsParams>} LogObject<downloadedFontsParams>
 */
export function downloadedFonts(params) {
    return { evid: 36, src: 29, endpoint: '', params };
}
/**
 * A function to create a log object for the 'paintInfo' event (evid: 37)
 *
 * Event description: FP and FCP
 *
 * @param {paintInfoParams} params - The parameters for this event
 * @property {string} rid - Request id
 * @property {GUID} vid - Unique visitor id. Persistent across sessions.
 * @property {number} first_contentful_paint - Time to First Contentful Paints in ms
 * @property {number} first_paint - Time to First Paints in ms
 * @property {string} pid - Id of landing page
 * @property {GUID} vsi - Viewer session. it's a pseudo-GUID generated randomly for every viewing session. so, it's only available in viewer mode, across any BI sent. if a site is refreshed in the browser, that will generate a new vsi.
 * @property {string} entryType - Unique name of BI event
 * @property {GUID} msid - Metasite id
 * @property {GUID} sid - Site id
 * @return {LogObject<paintInfoParams>} LogObject<paintInfoParams>
 */
export function paintInfo(params) {
    return { evid: 37, src: 29, endpoint: '', params };
}
/**
 * A function to create a log object for the 'interactivityInfo' event (evid: 38)
 *
 * Event description: TTI and TBT
 *
 * @param {interactivityInfoParams} params - The parameters for this event
 * @property {string} rid - Request id
 * @property {GUID} vid - Unique visitor id. Persistent across sessions.
 * @property {number} screens - Total number of screen viewports in page (rounded)
 * @property {number} tbt - Total Blocking Time in ms
 * @property {number} tti - Time To Interactive in ms
 * @property {number} iframes - Number of top-level iframes in page
 * @property {string} pid - Id of landing page
 * @property {GUID} vsi - Viewer session. it's a pseudo-GUID generated randomly for every viewing session. so, it's only available in viewer mode, across any BI sent. if a site is refreshed in the browser, that will generate a new vsi.
 * @property {string} entryType - Unique name of BI event
 * @property {GUID} msid - Metasite id
 * @property {GUID} sid - Site id
 * @return {LogObject<interactivityInfoParams>} LogObject<interactivityInfoParams>
 */
export function interactivityInfo(params) {
    return { evid: 38, src: 29, endpoint: '', params };
}
/**
 * A function to create a log object for the 'layoutShiftInfo' event (evid: 40)
 *
 * Event description: CLS
 *
 * @param {layoutShiftInfoParams} params - The parameters for this event
 * @property {string} rid - Request id
 * @property {number} count - Number of layout shifts
 * @property {GUID} vid - Unique visitor id. Persistent across sessions.
 * @property {string} pid - Id of landing page
 * @property {GUID} vsi - Viewer session. it's a pseudo-GUID generated randomly for every viewing session. so, it's only available in viewer mode, across any BI sent. if a site is refreshed in the browser, that will generate a new vsi.
 * @property {string} entryType - Unique name of BI event
 * @property {number} cls - Cumulative Layout Shift, times 10000 and rounded
 * @property {GUID} msid - Metasite id
 * @property {GUID} sid - Site id
 * @return {LogObject<layoutShiftInfoParams>} LogObject<layoutShiftInfoParams>
 */
export function layoutShiftInfo(params) {
    return { evid: 40, src: 29, endpoint: '', params };
}
/**
 * A function to create a log object for the 'visibilityStateSrc29Evid41' event (evid: 41)
 *
 * Event description: When page looses visibility due to becoming hidden or unloading
 *
 * @param {visibilityStateSrc29Evid41Params} params - The parameters for this event
 * @property {string} rid - Request id
 * @property {GUID} vid - Unique visitor id. Persistent across sessions.
 * @property {number} startTime - Time when hidden relative to navigation start in ms
 * @property {string} pid - Id of landing page
 * @property {GUID} vsi - Viewer session. it's a pseudo-GUID generated randomly for every viewing session. so, it's only available in viewer mode, across any BI sent. if a site is refreshed in the browser, that will generate a new vsi.
 * @property {string} entryType - Unique name of BI event
 * @property {string} type - Operation that caused page to become hidden: visibilitychange, unload
 * @property {GUID} msid - Metasite id
 * @property {GUID} sid - Site id
 * @return {LogObject<visibilityStateSrc29Evid41Params>} LogObject<visibilityStateSrc29Evid41Params>
 */
export function visibilityStateSrc29Evid41(params) {
    return { evid: 41, src: 29, endpoint: '', params };
}
/**
 * A function to create a log object for the 'firstInputDelaySrc29Evid42' event (evid: 42)
 *
 * Event description: FID
 *
 * @param {firstInputDelaySrc29Evid42Params} params - The parameters for this event
 * @property {number} duration - Duration of processing of first input in ms
 * @property {string} rid - Request id
 * @property {GUID} vid - Unique visitor id. Persistent across sessions.
 * @property {number} startTime - Time of first input relative to navigation start in ms
 * @property {string} pid - Id of landing page
 * @property {GUID} vsi - Viewer session. it's a pseudo-GUID generated randomly for every viewing session. so, it's only available in viewer mode, across any BI sent. if a site is refreshed in the browser, that will generate a new vsi.
 * @property {string} entryType - Unique name of BI event
 * @property {GUID} msid - Metasite id
 * @property {string} action - First input action
 * @property {GUID} sid - Site id
 * @return {LogObject<firstInputDelaySrc29Evid42Params>} LogObject<firstInputDelaySrc29Evid42Params>
 */
export function firstInputDelaySrc29Evid42(params) {
    return { evid: 42, src: 29, endpoint: '', params };
}
/**
 * A function to create a log object for the 'viewerRouterStart' event (evid: 1201)
 *
 * Event description: request entered the new artifact
 *
 * @param {viewerRouterStartParams} params - The parameters for this event
 * @property {string} flowType - render site =b ,a = render
 * @property {GUID} sessionId - session id
 * @property {string} queryParams - the query params on the url of specific  session
 * @property {GUID} msid - msid
 * @property {string} thunderboltExperiments - experiments conduction
 * @return {LogObject<viewerRouterStartParams>} LogObject<viewerRouterStartParams>
 */
export function viewerRouterStart(params) {
    return { evid: 1201, src: 42, endpoint: '', params };
}
/**
 * A function to create a log object for the 'viewerRouterEndHeadBody' event (evid: 1202)
 *
 * Event description: head or body of the request sent from artifact to client
 *
 * @param {viewerRouterEndHeadBodyParams} params - The parameters for this event
 * @property {string} streamType - head or body
 * @property {GUID} sessionId - session id
 * @property {GUID} msid - msid
 * @property {string} statusCode - status code (404, 500, 200 etc)
 * @property {string} cacheable - if the site cacheable
 * @property {string} queryParams - {}
 * @return {LogObject<viewerRouterEndHeadBodyParams>} LogObject<viewerRouterEndHeadBodyParams>
 */
export function viewerRouterEndHeadBody(params) {
    return { evid: 1202, src: 42, endpoint: '', params };
}
/**
 * A function to create a log object for the 'viewerRouterExperimentsSrc42Evid1203' event (evid: 1203)
 *
 * Event description: request entered the new artifact
 *
 * @param {viewerRouterExperimentsSrc42Evid1203Params} params - The parameters for this event
 * @property {string} flowType - render site =b ,a = render
 * @property {GUID} sessionId - session id
 * @property {string} queryParams - the query params on the url of specific  session
 * @property {GUID} msid - msid
 * @property {string} thunderboltExperiments - experiments conduction under TB spec
 * @property {string} dfExperiments - Data fixers conduction under Non TB spec
 * @return {LogObject<viewerRouterExperimentsSrc42Evid1203Params>} LogObject<viewerRouterExperimentsSrc42Evid1203Params>
 */
export function viewerRouterExperimentsSrc42Evid1203(params) {
    return { evid: 1203, src: 42, endpoint: '', params };
}
/**
 * A function to create a log object for the 'webVitalsReport' event (evid: 180)
 *
 * Event description: The event will be sent 1 time for any load from the viewer / BM. the web vitals can be change over time and will be sent in a json dictionary.
 *
 * @param {webVitalsReportParams} params - The parameters for this event
 * @property {number} inpValue - The inp value
 * @property {number} inpInputDelay - Time that passed between the interaction until the browser was able to trigger event dispatch
 * @property {string} clsComponentType - Eclosing component type of an element that CAUSED largest layout shift
 * @property {string} inpApplicationId - Application ID of an app in which the interacted html element is rendered
 * @property {number} lcp - The lcp Value
 * @property {string} inpWidgetId - Enclosing widget id of an element that was interacted with
 * @property {number} lcpResourceLoadDuration - The total time it takes to load the LCP resource itself (if there is one, otherwise 0)
 * @property {number} ttfbDnsDuration - The total time to resolve the DNS for the current request.
 * @property {number} inpNextPaintTime - Timestamp of when the next frame was painted on a screen
 * @property {string} clsLargestShiftVal - The clsLargestShift value
 * @property {boolean} inpIsDuringNavigation - Whether the INP happens during a navigation
 * @property {Url} url - The canonical page URL
 * @property {number} ttfb - The ttfb Value
 * @property {number} ttfbConnectionDuration - The total time to create the connection to the requested domain.
 * @property {string} clsLargestShiftTarget - The cls_largest_shift_target value
 * @property {number} fcp - The fcp Value
 * @property {string} inpUrl - inp Url
 * @property {number} lcpSize - The intrinsic size of the element returned as the area (width * height).
 * @property {number} lcpResourceLoadDelay - The delta between TTFB and when the browser starts loading the LCP resource (if there is one, otherwise 0)
 * @property {string} lcpResourceDeliveryType - Indicates how the resource was delivered — for example from the browser cache or from a navigational prefetch.
 * @property {string} inpInteractionType - The type of interaction, based on the event type of the `event` entry  that corresponds to the interaction (i.e. the first `event` entry containing an `interactionId` dispatched in a given animation frame).  For "pointerdown", "pointerup", or "click" events this will be "pointer",  and for "keydown" or "keyup" events this will be "keyboard".
 * @property {number} ttfbRequestDuration - The total time from when the request was sent until the first byte of the response was received. This includes network time as well as server processing time.
 * @property {string} inpTargetSelector - The inpTargetSelector value
 * @property {string} inpLoafs - JSON array of INP related Long Animation Frames
 * @property {number} ttfbWaitingDuration - The total time from when the user initiates loading the page to when the DNS lookup begins. This includes redirects, service worker startup, and HTTP cache lookup times.
 * @property {string} lcpComponentType - Eclosing component type of the LCP element
 * @property {number} lcpResourceTransferSize - Size of the fetched LCP resource in bytes.
 * @property {string} clsApplicationId - Application ID of an app in which the interacted html element is rendered
 * @property {string} lcpUrl - The URL (if applicable) of the LCP image resource
 * @property {string} lcpTag - HTML Element type (span/p/img/picture etc.)
 * @property {number} lcpResourceResponseStart - A timestamp immediately after the browser receives the first byte of the response from the server, cache, or local resource.
 * @property {string} clsRating - 'good' | 'needs-improvement' | 'poor'
 * @property {string} navType - 'navigate' | 'reload' | 'back-forward' | 'back-forward-cache' | 'prerender' | 'restore' | 'soft-navigation'
 * @property {number} inpProcessingDuration - Time that passed between first event dispatch until the last event handler has finished its execution
 * @property {string} lcpWidgetId - Enclosing widget id of the LCP element
 * @property {GUID} sessionId - session id
 * @property {string} lcpLoafs - JSON array of LCP related Long Animation Frames.
 * @property {number} lcpResourceRequestStart - A timestamp of the time immediately before the browser starts requesting the resource from the server, cache, or local resource
 * @property {string} metadata - Stringified JSON object containing dynamic data
 * @property {string} lcpResourceServerTiming - A semicolon separated list of server timings. These are set by server that is sending the LCP resource and can be used to determine cache hits/misses.
 * @property {string} lcpApplicationId - Application ID of an app in which the interacted html element is rendered
 * @property {string} inpComponentType - Eclosing component type of an element that was interacted with
 * @property {number} inpPresentationDelay - Time that passed between last event handler execution until the next frame is painted on the screen
 * @property {string} lcpRating - 'good' | 'needs-improvement' | 'poor'
 * @property {number} clsLargestShiftTime - When the largest layout shift occured
 * @property {number} deviceMemory - The approximate amount of device memory in gigabytes. Our only way to estimate device compute power.
 * @property {number} inpStartTime - The time when the user interacted for the event corresponding to INP
 * @property {string} inpLoadState - The inp_load_state value
 * @property {number} lcpElementRenderDelay - The delta between when the LCP resource finishes loading until the LCP element is fully rendered
 * @property {string} effectiveNetworkType - The effective type of the connection meaning one of slow-2g, 2g, 3g, or 4g. This value is determined using a combination of recently observed, round-trip time and downlink values.
 * @property {string} clsWidgetId - Enclosing widget id of an element that CAUSED largest layout shift
 * @property {string} clsVal - The cls value
 * @property {string} platform - viewer / BM
 * @property {string} lcpInitiatorType - A string representing the web platform feature that initiated the performance entry (css, fetch, body etc.)
 * @property {string} inpRating - 'good' | 'needs-improvement' | 'poor'
 * @property {string} navigationId - The navigation Id
 * @property {number} pageTransferSize - Represents the size (in bytes) of the HTML document that was transferred over the network. This includes the response headers and the body of the document.
 * @property {string} pageTransferProtocol - Indicates the protocol used for the network transfer of the HTML document. Examples include HTTP/1.1, HTTP/2, and HTTP/3.
 * @property {number} pageTTLB - Stands for “Time to Last Byte.” This is the duration (in milliseconds) from the start of the navigation until the browser receives the last byte of the response from the server.
 * @property {number} pageFontCount - The number of font files (e.g., .woff, .woff2, .ttf, .otf, .eot) that were loaded as part of the page’s resources.
 * @property {number} pageFontBytes - The total size (in bytes) of all the font files loaded as part of the page’s resources.
 * @property {number} pageImageCount - The number of image files (e.g., .jpg, .jpeg, .png, .gif, .webp, .svg) that were loaded as part of the page’s resources.
 * @property {number} pageImageBytes - The total size (in bytes) of all the image files loaded as part of the page’s resources.
 * @property {number} pageScriptCount - The number of JavaScript files (e.g., .js, .mjs, .cjs) that were loaded as part of the page’s resources.
 * @property {number} pageScriptBytes - The total size (in bytes) of all the JavaScript files loaded as part of the page’s resources.
 * @property {number} pageBlockingTime - The total blocking time (in milliseconds) caused by long animation frames. This is the sum of the blocking durations of all long tasks (tasks that block the main thread for more than 50 milliseconds) that occurred during the animation frames.
 * @property {string} lcpElementSelector - CSS selector for the LCP element
 * @property {boolean} lcpIsElementAnimated - Indicates wether the LCP element was animated which might cause LCP delay
 * @property {string} lcpLoafsTotals - json contains:
 * totalDuration
 * totalBlockingDuration
 * totalCount
 * @return {LogObject<webVitalsReportParams>} LogObject<webVitalsReportParams>
 */
export function webVitalsReport(params) {
    return { evid: 180, src: 72, endpoint: '', params };
}
/**
 * A function to create a log object for the 'pulseInitialized' event (evid: 181)
 *
 * Event description: This event is sent when Pulse library has been initialized
 *
 * @param {pulseInitializedParams} params - The parameters for this event
 * @property {GUID} sessionId - session id
 * @property {string} platform - viewer / BM
 * @return {LogObject<pulseInitializedParams>} LogObject<pulseInitializedParams>
 */
export function pulseInitialized(params) {
    return { evid: 181, src: 72, endpoint: '', params };
}
/**
 * A function to create a log object for the 'pulseUpdated' event (evid: 182)
 *
 * Event description: Sent when pulse library is updated
 *
 * @param {pulseUpdatedParams} params - The parameters for this event
 * @property {GUID} sessionId - session id
 * @property {string} platform - viewer / BM
 * @return {LogObject<pulseUpdatedParams>} LogObject<pulseUpdatedParams>
 */
export function pulseUpdated(params) {
    return { evid: 182, src: 72, endpoint: '', params };
}
/**
 * A function to create a log object for the 'pulseError' event (evid: 183)
 *
 * Event description: Sent when an error happens in Pulse library
 *
 * @param {pulseErrorParams} params - The parameters for this event
 * @property {string} step - Where the error happens in the code
 * @property {GUID} sessionId - session id
 * @property {string} message - Error message
 * @property {string} platform - viewer / BM
 * @return {LogObject<pulseErrorParams>} LogObject<pulseErrorParams>
 */
export function pulseError(params) {
    return { evid: 183, src: 72, endpoint: '', params };
}
/**
 * A function to create a log object for the 'webVitalsReportCopySrc72Evid186' event (evid: 186)
 *
 * Event description: DUPLICATE OF 72:180
 *
 * The event will be sent 1 time for any load from the viewer / BM. the web vitals can be change over time and will be sent in a json dictionary.
 *
 * @param {webVitalsReportCopySrc72Evid186Params} params - The parameters for this event
 * @property {number} inpProcessingStart - The time at which event triggered by the interaction is dispatched. This is when event handlers are about to be executed.
 * @property {number} inpValue - The inp value
 * @property {string} clsComponentType - Eclosing component type of an element that CAUSED largest layout shift
 * @property {string} inpApplicationId - Application ID of an app in which the interacted html element is rendered
 * @property {number} lcp - The lcp Value
 * @property {string} inpWidgetId - Enclosing widget id of an element that was interacted with
 * @property {number} inpProcessingEnd - inp_processing_end
 * @property {number} inpInteractionId - Uniquely identifies a user interaction which triggered a series of associated events. For example a click will trigger a sequence of events - pointerdown, pointerup, and click.
 * @property {string} clsLargestShiftVal - The clsLargestShift value
 * @property {Url} url - The canonical page URL
 * @property {number} ttfb - The ttfb Value
 * @property {string} clsLargestShiftTarget - The cls_largest_shift_target value
 * @property {number} fcp - The fcp Value
 * @property {number} lcpSize - The intrinsic size of the element returned as the area (width * height).
 * @property {number} lcpResourceLoadDelay - The delta between TTFB and when the browser starts loading the LCP resource (if there is one, otherwise 0)
 * @property {string} inpTargetSelector - The inpTargetSelector value
 * @property {string} lcpComponentType - Eclosing component type of the LCP element
 * @property {string} webVitals - A Json dictionary of all the web vitals google is following on. example - {“Measure”:value,” Measure:value”..}
 * @property {string} clsApplicationId - Application ID of an app in which the interacted html element is rendered
 * @property {number} lcpResourceLoadTime - The total time it takes to load the LCP resource itself (if there is one, otherwise 0)
 * @property {string} inpEventType - The `type` of the `event` dispatched corresponding to INP
 * @property {string} lcpUrl - The URL (if applicable) of the LCP image resource
 * @property {string} lcpTag - HTML Element type (span/p/img/picture etc.)
 * @property {string} clsRating - 'good' | 'needs-improvement' | 'poor'
 * @property {string} navType - 'navigate' | 'reload' | 'back-forward' | 'back-forward-cache' | 'prerender' | 'restore' | 'soft-navigation'
 * @property {string} lcpWidgetId - Enclosing widget id of the LCP element
 * @property {GUID} sessionId - session id
 * @property {boolean} isSoftNavEnabled - True is it is Soft Nav Enabled
 * @property {string} metadata - Stringified JSON object containing dynamic data
 * @property {string} lcpApplicationId - Application ID of an app in which the interacted html element is rendered
 * @property {string} inpComponentType - Eclosing component type of an element that was interacted with
 * @property {string} lcpRating - 'good' | 'needs-improvement' | 'poor'
 * @property {number} clsLargestShiftTime - When the largest layout shift occured
 * @property {string} lcpContentType - jpeg | png | gif | svg | webp | other
 * @property {number} inpStartTime - The time when the user interacted for the event corresponding to INP
 * @property {string} inpLoadState - The inp_load_state value
 * @property {number} lcpElementRenderDelay - The delta between when the LCP resource finishes loading until the LCP element is fully rendered
 * @property {string} clsWidgetId - Enclosing widget id of an element that CAUSED largest layout shift
 * @property {string} clsVal - The cls value
 * @property {string} platform - viewer / BM
 * @property {string} lcpInitiatorType - A string representing the web platform feature that initiated the performance entry (css, fetch, body etc.)
 * @property {string} inpRating - 'good' | 'needs-improvement' | 'poor'
 * @property {string} navigationId - The navigation Id
 * @return {LogObject<webVitalsReportCopySrc72Evid186Params>} LogObject<webVitalsReportCopySrc72Evid186Params>
 */
export function webVitalsReportCopySrc72Evid186(params) {
    return { evid: 186, src: 72, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dummyName' event (evid: 20)
 *
 * Event description: dummy-name.
 *
 * @param {dummyNameParams} params - The parameters for this event
 * @property {number} st - site_type
 * @property {boolean} is_rollout - is_rollout
 * @property {boolean} is_cached - hit = true | miss = false
 * @property {string} dc - data_center
 * @property {boolean} isp - is_premium
 * @property {boolean} ish - is_headless
 * @property {boolean} isSsr - is_ssr
 * @return {LogObject<dummyNameParams>} LogObject<dummyNameParams>
 */
export function dummyName(params) {
    return { evid: 20, src: 72, endpoint: '', params };
}
/**
 * A function to create a log object for the 'loadStarted' event (evid: 21)
 *
 * Event description: Should be fired at the earliest stage possible of application load. Preferably should be a part of vm output.
 *
 * @param {loadStartedParams} params - The parameters for this event
 * @property {number} isDacRollout - is dac rollout
 * @property {number} isSavRollout - is site assets rollout
 * @property {number} st - site_type
 * @property {boolean} is_rollout - is_rollout
 * @property {boolean} platformOnSite - is platform On Site
 * @property {boolean} isFirstNavigation - true / false
 * @property {boolean} is_cached - hit = true | miss = false
 * @property {string} widgetId - widget_id
 * @property {GUID} session_id - partition key
 * @property {string} customParams - customParams
 * @property {boolean} isServerSide - {}
 * @property {Url} url - page_url
 * @property {string} dc - data_center
 * @property {number} is_sav_rollout - is site assets rollout
 * @property {string} appName - app name
 * @property {number} pn - page number
 * @property {boolean} isp - is_premium
 * @property {number} ts - time from first bit in ms
 * @property {number} tsn - time from bit 0 (start navigation)
 * @property {boolean} is_lightbox - was there a lightbox
 * @property {string} user_agent - user_agent
 * @property {string} pageId - page id
 * @property {string} v - ver
 * @property {number} is_dac_rollout - is dac rollout
 * @property {string} corrId - logger instance id
 * @property {boolean} ish - is_headless
 * @property {boolean} isSsr - is_ssr
 * @property {string} caching - caching type
 * @property {string} appId - app_id
 * @property {string} microPop - {}
 * @property {boolean} isIncognito - {}
 * @property {boolean} isSuccessfulSSR - indication where server side rendering was success
 * @return {LogObject<loadStartedParams>} LogObject<loadStartedParams>
 */
export function loadStarted(params) {
    return { evid: 21, src: 72, endpoint: '', params };
}
/**
 * A function to create a log object for the 'loadPhase' event (evid: 22)
 *
 * Event description: custom load phase. between load start and load finish
 *
 * @param {loadPhaseParams} params - The parameters for this event
 * @property {number} isDacRollout - is dac rollout
 * @property {number} isSavRollout - is site assets rollout
 * @property {number} st - site_type
 * @property {number} duration - measurement duration
 * @property {boolean} is_rollout - is_rollout
 * @property {string} name - measurement name
 * @property {boolean} isFirstNavigation - true / false
 * @property {boolean} is_cached - hit = true | miss = false
 * @property {string} widgetId - widget_id
 * @property {GUID} session_id - partition key
 * @property {Url} url - page url
 * @property {string} dc - data_center
 * @property {number} is_sav_rollout - is site assets rollout
 * @property {string} appName - application name
 * @property {number} pn - page number
 * @property {boolean} isp - is_premium
 * @property {number} ts - time from first bit in ms
 * @property {number} tsn - network time + time from first bit in ms
 * @property {boolean} is_lightbox - was there a lightbox
 * @property {string} pageId - page id
 * @property {string} v - version
 * @property {number} is_dac_rollout - is dac rollout
 * @property {string} corrId - correlation_id
 * @property {boolean} ish - is_headless
 * @property {boolean} isSsr - is_ssr
 * @property {boolean} isBlocks - indicates if the loading element is Blocks widget
 * @property {string} caching - caching type
 * @property {string} appId - app_id
 * @property {string} microPop - {}
 * @property {boolean} isIncognito - {}
 * @return {LogObject<loadPhaseParams>} LogObject<loadPhaseParams>
 */
export function loadPhase(params) {
    return { evid: 22, src: 72, endpoint: '', params };
}
/**
 * A function to create a log object for the 'loadFinished' event (evid: 23)
 *
 * Event description: Should be fired when application is considered as loaded. (E.g. user is able to see content)
 *
 * @param {loadFinishedParams} params - The parameters for this event
 * @property {number} is_dac_rollout - is_dac_rollout
 * @property {number} isSavRollout - is dac rollout
 * @property {number} st - site_type
 * @property {number} duration - duration of initial load
 * @property {boolean} is_rollout - is_rollout
 * @property {string} sar - Screen available size. E.g. 1920x1200
 * @property {boolean} isFirstNavigation - is_first_navigation
 * @property {boolean} is_cached - hit = true | miss = false
 * @property {string} widgetId - widget_id
 * @property {GUID} session_id - partition key
 * @property {string} customParams - stringified object with custom parameters
 * @property {string} wr - Browser window size. E.g. 1920x1000
 * @property {boolean} isServerSide - {}
 * @property {Url} url - page_url
 * @property {string} dc - data_center
 * @property {number} is_sav_rollout - is dac rollout
 * @property {string} appName - app name
 * @property {number} pn - page number
 * @property {boolean} isp - is_premium
 * @property {string} sr - Screen size. E.g. 1920x1200
 * @property {number} ts - time from first beat in ms
 * @property {string} reactVersion - The React version we use in the viewer
 * @property {number} longTasksNumber - number of long tasks
 * @property {number} tsn - network time + time from first beat in ms
 * @property {boolean} is_lightbox - was there a lightbox
 * @property {string} user_agent - user_agent
 * @property {number} frd - First request duration (network time)
 * @property {number} countScripts - count Scripts on page
 * @property {string} pageId - page id
 * @property {string} v - ver
 * @property {string} longTasksItems - long tasks
 * @property {string} corrId - logger instance id
 * @property {string} wor - window outer size. E.g. 1920x1200
 * @property {number} totalCssSize - total Css Size
 * @property {number} isDacRollout - is_dac_rollout
 * @property {boolean} ish - is_headless
 * @property {boolean} isSsr - is_ssr
 * @property {number} totalScriptsSize - total scripts size of the chunks grouping
 * @property {string} caching - caching type
 * @property {string} appId - app_id
 * @property {string} microPop - []
 * @property {boolean} isIncognito - {}
 * @property {boolean} isSuccessfulSSR - {}
 * @property {number} bi_test_value - bi_test_value
 * @return {LogObject<loadFinishedParams>} LogObject<loadFinishedParams>
 */
export function loadFinished(params) {
    return { evid: 23, src: 72, endpoint: '', params };
}
/**
 * A function to create a log object for the 'interactionStarted' event (evid: 24)
 *
 * Event description: mark start of interaction
 *
 * @param {interactionStartedParams} params - The parameters for this event
 * @property {number} is_dac_rollout - is_dac_rollout
 * @property {number} isSavRollout - is sav rollout
 * @property {number} st - site_type
 * @property {boolean} is_rollout - is_rollout
 * @property {string} name - interaction name (e.g. "form.submit")
 * @property {boolean} is_cached - hit = true | miss = false
 * @property {string} widgetId - widget id
 * @property {GUID} session_id - copied from client_id
 * @property {string} customParams - custom params JSON as provided by the platform/app/widget
 * @property {string} siteAssetsCacheType - the cache type we had from sites assets
 * @property {boolean} isServerSide - indicator for SSR
 * @property {Url} url - page_url
 * @property {string} dc - data_center
 * @property {number} is_sav_rollout - is sav rollout
 * @property {string} appName - app name
 * @property {number} pn - page number
 * @property {boolean} isp - is_premium
 * @property {number} ts - time from first bit in ms
 * @property {boolean} is_first_navigation - isFirstNavigation
 * @property {number} tsn - network time + time from first bit in ms
 * @property {boolean} is_lightbox - was there a lightbox
 * @property {string} pageId - page id
 * @property {string} v - ver
 * @property {number} isDacRollout - is_dac_rollout
 * @property {boolean} ish - is_headless
 * @property {string} siteAssetsModule - the module name in Site assets
 * @property {boolean} isSsr - is_ssr
 * @property {string} caching - caching type
 * @property {string} appId - app def id
 * @return {LogObject<interactionStartedParams>} LogObject<interactionStartedParams>
 */
export function interactionStarted(params) {
    return { evid: 24, src: 72, endpoint: '', params };
}
/**
 * A function to create a log object for the 'interactionFinished' event (evid: 25)
 *
 * Event description: mark end of interaction
 *
 * @param {interactionFinishedParams} params - The parameters for this event
 * @property {number} is_dac_rollout - is_dac_rollout
 * @property {number} isSavRollout - is sav rollout
 * @property {number} st - site_type
 * @property {number} duration - interaction duration
 * @property {boolean} is_rollout - is_rollout
 * @property {string} name - interaction name (e.g. 'form.submit')
 * @property {boolean} isFirstNavigation - true/ false
 * @property {boolean} is_cached - hit = true | miss = false
 * @property {string} widgetId - widget_id
 * @property {GUID} session_id - copied from client_id
 * @property {string} customParams - custom params JSON as provided by the platform/app/widget
 * @property {boolean} isServerSide - indicator for SSR
 * @property {Url} url - page_url
 * @property {string} dc - data_center
 * @property {number} is_sav_rollout - is sav rollout
 * @property {string} appName - app name
 * @property {number} pn - page number
 * @property {boolean} isp - is_premium
 * @property {number} ts - time from start in ms
 * @property {string} label - interaction label (A, B or C), for better interactions granularity
 * @property {number} tsn - network time + time from first bit in ms
 * @property {boolean} is_lightbox - was there a lightbox
 * @property {string} pageId - page id
 * @property {string} v - ver
 * @property {number} isDacRollout - is_dac_rollout
 * @property {boolean} ish - is_headless
 * @property {boolean} isSsr - is_ssr
 * @property {string} caching - caching type
 * @property {string} appId - app_id
 * @return {LogObject<interactionFinishedParams>} LogObject<interactionFinishedParams>
 */
export function interactionFinished(params) {
    return { evid: 25, src: 72, endpoint: '', params };
}
/**
 * A function to create a log object for the 'interactionError' event (evid: 26)
 *
 * Event description: should be sent when error occurs between interaction start and finish
 *
 * @param {interactionErrorParams} params - The parameters for this event
 * @property {number} st - site_type
 * @property {boolean} is_rollout - is_rollout
 * @property {boolean} is_cached - hit = true | miss = false
 * @property {string} errorInfo - error info (finite number of values)
 * @property {GUID} session_id - session id
 * @property {boolean} isServerSide - indicator for SSR
 * @property {string} interactionName - interaction name
 * @property {string} dc - data_center
 * @property {number} is_sav_rollout - is sav rollout
 * @property {string} appName - app name
 * @property {string} tags - error tags
 * @property {boolean} isp - is_premium
 * @property {string} user_agent - user_agent
 * @property {string} errorType - error type (finite number of values)
 * @property {number} is_dac_rollout - is dac rollout
 * @property {boolean} ish - is_headless
 * @property {boolean} isSsr - is_ssr
 * @property {string} eventString - sentry event string
 * @property {string} microPop - {}
 * @return {LogObject<interactionErrorParams>} LogObject<interactionErrorParams>
 */
export function interactionError(params) {
    return { evid: 26, src: 72, endpoint: '', params };
}
/**
 * A function to create a log object for the 'metadataAppLoadNetworkAnalysis' event (evid: 27)
 *
 * Event description: Provides application metadata. Should be fired once per session
 *
 * @param {metadataAppLoadNetworkAnalysisParams} params - The parameters for this event
 * @property {number} isDacRollout - is dac rollout
 * @property {number} isSavRollout - is sav rollout
 * @property {number} cachedJs - cached_scripts_percentage
 * @property {number} downlink - downlink
 * @property {number} st - site_type
 * @property {boolean} is_rollout - is_rollout
 * @property {number} h2Other - percentage of other requests over http2
 * @property {number} countCss - css_loaded
 * @property {boolean} is_cached - hit = true | miss = false
 * @property {number} unsprtImg - unsupported_images_percentage
 * @property {GUID} session_id - session_id
 * @property {number} h2Fetch - percentage of fetch requests over http2
 * @property {Url} url - page url
 * @property {number} timeXhr - xhr_requested_total_time
 * @property {string} dc - data_center
 * @property {number} is_sav_rollout - is sav rollout
 * @property {number} countXhr - xhr_requested
 * @property {string} appName - app_name
 * @property {number} sizeFetch - total size (kb) of all fetch requests
 * @property {number} unsprtXhr - unsupported_xhr_percentage
 * @property {boolean} isp - is_premium
 * @property {number} h2Css - http2_css_percentage
 * @property {number} longXhr - xhr_request_longest
 * @property {number} timeOther - total duration (milisec) of all other requests
 * @property {number} cachedCss - cached_css_percentage
 * @property {number} unsprtJs - unsupported_scripts_percentage
 * @property {number} sizeOther - total size (kb) of all other requests
 * @property {number} countImg - images_loaded
 * @property {number} cachedImages - cached_images_percentage
 * @property {number} timeFetch - total duration (milisec) of all fetch requests
 * @property {number} h2Xhr - http2_xhr_percentage
 * @property {number} h2Images - http2_images_percentage
 * @property {number} countOther - total number of resources requested using other
 * @property {number} overhead - calc_overhead
 * @property {number} cachedFetch - percentage of cached fetch
 * @property {number} countJs - scripts_loaded
 * @property {number} h2Js - http2_scripts_percentage
 * @property {string} v - version
 * @property {number} timeJs - scripts_requested_total_time
 * @property {number} is_dac_rollout - is dac rollout
 * @property {number} cachedOther - percentage of cached other
 * @property {number} sizeXhr - total_size_of_xhr_requested
 * @property {boolean} ish - is_headless
 * @property {number} unsprtOther - percentage of other resource requests without valid data
 * @property {number} countFetch - total number of resources requested using fetch
 * @property {number} rtt - rtt
 * @property {number} unsprtFetch - percentage of fetch resource requests without valid data
 * @property {boolean} isSsr - is_ssr
 * @property {string} caching - caching type
 * @property {number} sizeCss - total_size_of_css_requested
 * @property {number} timeCss - css_requested_total_time
 * @property {number} unsprtCss - unsupported_css_percentage
 * @property {number} sizeImg - total_size_of_images_requested
 * @property {number} sizeJs - total_size_of_scripts_requested
 * @property {number} timeImg - images_requested_total_time
 * @return {LogObject<metadataAppLoadNetworkAnalysisParams>} LogObject<metadataAppLoadNetworkAnalysisParams>
 */
export function metadataAppLoadNetworkAnalysis(params) {
    return { evid: 27, src: 72, endpoint: '', params };
}
/**
 * A function to create a log object for the 'loadPhaseStart' event (evid: 28)
 *
 * Event description: custom load phase. between load start and load finish
 *
 * @param {loadPhaseStartParams} params - The parameters for this event
 * @property {number} isDacRollout - is dac rollout
 * @property {number} isSavRollout - is sav rollout
 * @property {number} st - site type
 * @property {boolean} is_rollout - is rollout
 * @property {string} name - measurement name
 * @property {boolean} isFirstNavigation - {}
 * @property {boolean} is_cached - hit = true | miss = false
 * @property {string} widgetId - widget id
 * @property {GUID} session_id - partition key
 * @property {boolean} isServerSide - indicator for SSR
 * @property {Url} url - page_url
 * @property {string} dc - data center
 * @property {number} is_sav_rollout - is sav rollout
 * @property {string} appName - application name
 * @property {number} pn - page number
 * @property {boolean} isp - is premium
 * @property {number} ts - time from first bit in ms
 * @property {number} tsn - network time + time from first bit in ms
 * @property {boolean} is_lightbox - was there a lightbox
 * @property {string} pageId - page id
 * @property {string} v - ver
 * @property {number} is_dac_rollout - is dac rollout
 * @property {string} corrId - correlation_id
 * @property {boolean} ish - is headless
 * @property {boolean} isSsr - is_ssr
 * @property {boolean} isBlocks - {}
 * @property {string} caching - caching type
 * @property {string} appId - app id
 * @property {string} microPop - {}
 * @property {boolean} isIncognito - {}
 * @property {string} supportedFeatures - {}
 * @property {boolean} isSuccessfulSSR - {}
 * @return {LogObject<loadPhaseStartParams>} LogObject<loadPhaseStartParams>
 */
export function loadPhaseStart(params) {
    return { evid: 28, src: 72, endpoint: '', params };
}
/**
 * A function to create a log object for the 'webVitalsLoaded' event (evid: 29)
 *
 * Event description: Some Web Vitals metrics, reported per app
 *
 * @param {webVitalsLoadedParams} params - The parameters for this event
 * @property {number} st - site type
 * @property {boolean} is_rollout - is rollout
 * @property {boolean} is_cached - hit = true | miss = false
 * @property {GUID} session_id - partition key
 * @property {number} lcp - LCP time in ms
 * @property {string} dc - data center
 * @property {string} appName - app name
 * @property {boolean} isp - is premium
 * @property {GUID} corrId - correlation_id
 * @property {number} cls - Cumulative Layout Shift
 * @property {number} isDacRollout - is dac rollout
 * @property {boolean} ish - is headless
 * @property {boolean} isSsr - is_ssr
 * @property {number} isSavRollout - is sav rollout
 * @property {string} caching - caching type
 * @return {LogObject<webVitalsLoadedParams>} LogObject<webVitalsLoadedParams>
 */
export function webVitalsLoaded(params) {
    return { evid: 29, src: 72, endpoint: '', params };
}
/**
 * A function to create a log object for the 'webVitalsInput' event (evid: 39)
 *
 * Event description: Web Vitals metrics related to user-input, reported per app
 *
 * @param {webVitalsInputParams} params - The parameters for this event
 * @property {number} st - site type
 * @property {boolean} is_rollout - is rollout
 * @property {number} fid - First Input Delay
 * @property {boolean} is_cached - hit = true | miss = false
 * @property {GUID} session_id - partition key
 * @property {string} dc - data center
 * @property {string} appName - app name
 * @property {boolean} isp - is premium
 * @property {string} corrId - correlation_id
 * @property {number} isDacRollout - is dac rollout
 * @property {boolean} ish - is headless
 * @property {boolean} isSsr - is_ssr
 * @property {number} isSavRollout - is sav rollout
 * @property {string} caching - caching type
 * @return {LogObject<webVitalsInputParams>} LogObject<webVitalsInputParams>
 */
export function webVitalsInput(params) {
    return { evid: 39, src: 72, endpoint: '', params };
}
/**
 * A function to create a log object for the 'ciInteractionError' event (evid: 40)
 *
 * Event description: should be sent when error occurs between In CI
 *
 * @param {ciInteractionErrorParams} params - The parameters for this event
 * @property {number} st - /
 * @property {boolean} is_rollout - /
 * @property {boolean} is_cached - hit = true | miss = false
 * @property {string} errorInfo - error info (finite number of values)
 * @property {GUID} session_id - session id
 * @property {boolean} isServerSide - indicator for SSR
 * @property {string} interactionName - interaction name
 * @property {string} dc - {}
 * @property {number} is_sav_rollout - is sav rollout
 * @property {string} appName - app name
 * @property {string} tags - error tags
 * @property {boolean} isp - /
 * @property {string} errorType - error type (finite number of values)
 * @property {number} is_dac_rollout - is dac rollout
 * @property {boolean} ish - /
 * @property {boolean} isSsr - /
 * @property {string} eventString - sentry event string
 * @property {string} microPop - {}
 * @return {LogObject<ciInteractionErrorParams>} LogObject<ciInteractionErrorParams>
 */
export function ciInteractionError(params) {
    return { evid: 40, src: 72, endpoint: '', params };
}
/**
 * A function to create a log object for the 'environment' event (evid: 500)
 *
 * Event description: Triggered immediately when wix-perf-measure script is loaded. Contains page, device, Wix, and network info that's initially available.
 *
 * @param {environmentParams} params - The parameters for this event
 * @property {number} dns - DNS lookup duration ms
 * @property {boolean} saveData - Is data saver mode enabled
 * @property {boolean} lowBattery - Is battery below 10%, and potentially in battery saver mode
 * @property {string} networkType - If available one of: bluetooth, cellular, ethernet, none, wifi, wimax, other, unknown
 * @property {number} redirect - redirects duration in ms
 * @property {string} url - URL of landing page
 * @property {string} dc - Data center
 * @property {number} ttfb - Time to first byte
 * @property {string} availScreenRes - Available screen resolution
 * @property {number} cores - Name of Data Center
 * @property {number} ssl - SSL / TLS handshake duration ms
 * @property {string} windowInner - Inner size of browser window
 * @property {number} fetchStart - fetch start in ms (relative to navigation start)
 * @property {boolean} maybeBot - Is client a potential bot
 * @property {string} navigationType - If available one of: navigate, reload, back_forward
 * @property {number} devicePixelRatio - Device pixel ratio
 * @property {string} pageId - id of landing page
 * @property {string} v - Wix client version
 * @property {number} response - Duration from HTTP request until response start in ms
 * @property {number} is_dac_rollout - true if session is part of a gradual rollout
 * @property {string} clientType - Client type: ugc, ...
 * @property {GUID} vsi - Visitor session ID
 * @property {string} entryType - Unique name of the BI event
 * @property {number} tcp - TCP handshake duration ms
 * @property {string} viewerName - New of Viewer: bolt, ...
 * @property {string} orientation - orientation
 * @property {string} screenRes - Device screen resolution
 * @property {number} rtt - Effective network round-trip time in ms
 * @property {boolean} isSsr - Is SSR in use
 * @property {boolean} analytics - Is analytics allowed in consent policy
 * @property {string} caching - Type of caching: browser, eTag, maybe eTag, unknown
 * @property {string} effectiveType - Effective network quality: 4g, 3g, 2g, slow-2g, lte, unknown
 * @property {string} microPop - Name of micro-pop if used
 * @property {GUID} msid - Metasite ID
 * @property {boolean} reducedMotion - Is browser configured for reduced motion mode
 * @property {number} download - Download of something
 * @property {string} protocol - Protocol
 * @property {number} colorDepth - Color depth
 * @property {string} windowOuter - Outer size of browser window
 * @return {LogObject<environmentParams>} LogObject<environmentParams>
 */
export function environment(params) {
    return { evid: 500, src: 72, endpoint: '', params };
}
/**
 * A function to create a log object for the 'initialPaint' event (evid: 501)
 *
 * Event description: Initial paint info
 *
 * @param {initialPaintParams} params - The parameters for this event
 * @property {Url} url - the page url
 * @property {number} fcp - Time to First Contentful Paints in ms
 * @property {number} fp - Time to first paint in ms
 * @property {string} clientType - Client type: ugc, ...
 * @property {GUID} vsi - Visitor session ID
 * @property {string} entryType - Unique name of the BI event
 * @property {boolean} analytics - Is analytics allowed in consent policy
 * @property {GUID} msid - Metasite ID
 * @return {LogObject<initialPaintParams>} LogObject<initialPaintParams>
 */
export function initialPaint(params) {
    return { evid: 501, src: 72, endpoint: '', params };
}
/**
 * A function to create a log object for the 'loaded' event (evid: 502)
 *
 * Event description: Triggered once the site was loaded, contains resource download stats, layout shift, time to interactive
 *
 * @param {loadedParams} params - The parameters for this event
 * @property {number} mttfbFonts - Median time to first byte of fonts
 * @property {number} duration - Total HTML load duration in ms
 * @property {number} startTimeImages - Time when first byte of image was received in ms
 * @property {number} countFonts - Number of downloaded fonts
 * @property {number} ssrDuration - ssr_duration
 * @property {boolean} isMobile - Is LH score calculated as mobile device
 * @property {number} ttlb - Time until HTML downloaded from navigation start in ms
 * @property {number} lcp - LCP time in ms
 * @property {number} countCls - Cumulative Layout Shift, times 10000 and rounded
 * @property {number} startTimeFonts - Time when first byte of font was received in ms
 * @property {string} ssrCaching - ssr_caching
 * @property {GUID} visitorId - visitor_id
 * @property {boolean} isPlatformLoaded - is_platform_loaded
 * @property {number} screens - Total number of screen viewports in page (rounded)
 * @property {Url} url - Page URL
 * @property {number} mttfbImages - Median time to first byte of images
 * @property {boolean} isRollout - is_rollout
 * @property {string} lcpResourceType - Possible values: jpg, png, gif, webp, svg, other or null (e.g. for text)
 * @property {number} durationScripts - Total scripts download duration in ms
 * @property {boolean} isWelcome - Does site use a welcome screen
 * @property {number} lcpSize - Size of LCP
 * @property {number} sessionDelta - Delta between sessions (ms)
 * @property {string} lcpFontClass - font_0, font_1, ...
 * @property {number} mttfbScripts - Median time to first byte of scripts
 * @property {number} tbt - Total Blocking Time in ms
 * @property {string} clsTag - HTML tag name of element which contributed most to CLS
 * @property {number} transferSize - Transfer size total KB= html+images+js+css… etc
 * @property {number} tbdImages - Total number of bytes in downloaded images
 * @property {number} tbdScripts - Total number of bytes in downloaded scripts
 * @property {number} attfbImages - Average time to first byte of images
 * @property {boolean} maybeBot - maybe_bot
 * @property {number} tbdFonts - Total number of bytes in downloaded fonts
 * @property {number} simLH6 - Simulated Lighthouse score v6
 * @property {number} tti - Time to interactive in ms
 * @property {number} countScripts - Number of downloaded scripts
 * @property {string} closestId - Id of closest component, which generated the LCP
 * @property {number} durationFonts - Total fonts download duration in ms
 * @property {string} pageId - page_id
 * @property {number} iframes - Number of top-level iframes in page
 * @property {number} is_dac_rollout - is_dac_rollout
 * @property {string} lcpTag - HTML tag name of element that caused LCP
 * @property {string} clientType - Client type: ugc, ...
 * @property {number} countImages - Number of downloaded images
 * @property {GUID} vsi - Visitor session ID
 * @property {string} pageCaching - Caching from browser perspective
 * @property {number} durationImages - images_load_duration
 * @property {number} startTimeScripts - Time when first byte of script was received in ms
 * @property {string} entryType - Unique name of BI event
 * @property {number} dcl - Time until HTML downloaded and parsed from navigation start in ms
 * @property {string} cdn - cdn
 * @property {string} clsId - Id of closest component, which contributed most to CLS
 * @property {number} cls - Cumulative Layout Shift, times 10000 and rounded
 * @property {string} cssResourcesFonts - google fonts
 * @property {number} ssrTimestamp - SSR timestamp UNIX epoch (seconds)
 * @property {boolean} isSsr - is_server_side_rendering
 * @property {number} attfbFonts - Average time to first byte of fonts
 * @property {number} decodedBodySize - Body size in browser in bytes
 * @property {boolean} analytics - analytics_allowed
 * @property {string} caching - Browser or CDN caching
 * @property {string} btype - Reason session was identified as possible bot
 * @property {string} microPop - micro_pop
 * @property {number} attfbScripts - Average time to first byte of scripts
 * @property {GUID} msid - Metasite ID
 * @property {boolean} lcpInLightbox - lcp_in_lightbox
 * @return {LogObject<loadedParams>} LogObject<loadedParams>
 */
export function loaded(params) {
    return { evid: 502, src: 72, endpoint: '', params };
}
/**
 * A function to create a log object for the 'visibilityState' event (evid: 503)
 *
 * Event description: When the page loses visibility due to becoming hidden or unloading
 *
 * @param {visibilityStateParams} params - The parameters for this event
 * @property {number} startTime - Time when hidden relative to navigation start in ms
 * @property {string} clientType - Client type: ugc, ...
 * @property {GUID} vsi - Visitor session ID
 * @property {string} entryType - Unique name of BI event
 * @property {boolean} analytics - Is analytics allowed in consent policy
 * @property {string} type - Operation that caused page to become hidden: visibilitychange, unload
 * @property {GUID} msid - Metasite ID
 * @return {LogObject<visibilityStateParams>} LogObject<visibilityStateParams>
 */
export function visibilityState(params) {
    return { evid: 503, src: 72, endpoint: '', params };
}
/**
 * A function to create a log object for the 'firstInputDelay' event (evid: 504)
 *
 * Event description: First input delay (FID) measures the time from when a user first interacts with your site (i.e. when they click a link, tap on a button, or use a custom, JavaScript-powered control) to the time when the browser is actually able to respond to that interaction.
 *
 * @param {firstInputDelayParams} params - The parameters for this event
 * @property {number} duration - Use delay. Entire duration of FID in ms: from event until rendering
 * @property {number} delay - Delay from user interaction until event handler is invoked in ms.
 * @property {number} startTime - Time of first input relative to navigation start in ms
 * @property {Url} url - {}
 * @property {string} clientType - Client type: ugc, ...
 * @property {GUID} vsi - Visitor session ID
 * @property {string} entryType - Unique name of BI event
 * @property {boolean} analytics - Is analytics allowed in consent policy
 * @property {GUID} msid - Metasite ID
 * @property {string} action - First input action
 * @return {LogObject<firstInputDelayParams>} LogObject<firstInputDelayParams>
 */
export function firstInputDelay(params) {
    return { evid: 504, src: 72, endpoint: '', params };
}
/**
 * A function to create a log object for the 'pageTransition' event (evid: 505)
 *
 * Event description: Fired when a page navigation is being made
 *
 * @param {pageTransitionParams} params - The parameters for this event
 * @property {number} duration - Page transition duration
 * @property {number} delay - Delay time
 * @property {number} startTime - Navigation start time
 * @property {number} screens - Screens number
 * @property {number} pn - Page load number
 * @property {number} tbt - Total blocking time
 * @property {number} tti - Time to interactive
 * @property {number} iframes - Number of iframes on page
 * @property {string} clientType - Client type: ugc, ...
 * @property {string} entryType - Entry type
 * @property {string} origin - Origin page url
 * @property {boolean} analytics - Is analytics allowed in consent policy
 * @property {string} destination - Destination page url
 * @property {string} action - Action name
 * @return {LogObject<pageTransitionParams>} LogObject<pageTransitionParams>
 */
export function pageTransition(params) {
    return { evid: 505, src: 72, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cruxOnUnload' event (evid: 506)
 *
 * Event description: Simulate CrUX behavior by reporting CLS and LCP at page unload. Since Wix is SPA this means site unload
 *
 * @param {cruxOnUnloadParams} params - The parameters for this event
 * @property {number} startTime - Time of page unload
 * @property {number} lcp - LCP time in ms
 * @property {number} countCls - Number of layout shifts
 * @property {Url} url - {}
 * @property {string} lcpResourceType - Possible values: jpg, png, gif, webp, svg, other or null (e.g. for text)
 * @property {number} pn - Page load number
 * @property {number} lcpSize - Area of LCP
 * @property {string} lcpFontClass - font_0, font_1, ...
 * @property {string} clsTag - HTML tag of main CLS element
 * @property {string} closestId - Id of closest component, which generated the LCP
 * @property {string} lcpTag - HTML tag of LCP element
 * @property {string} entryType - Unique name of the BI event
 * @property {number} lcpOld - LCP time as measured in wix-perf-measure library without web-vitals
 * @property {string} clsId - Id of closest component, which contributed most to CLS
 * @property {number} cls - Cumulative Layout Shift, times 10,000 and rounded
 * @property {boolean} analytics - Is analytics allowed in consent policy
 * @property {string} lcpContentType - e.g. image/webp
 * @property {boolean} lcpInLightbox - Is LCP element inside lightbox
 * @return {LogObject<cruxOnUnloadParams>} LogObject<cruxOnUnloadParams>
 */
export function cruxOnUnload(params) {
    return { evid: 506, src: 72, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cruxClsUpdate' event (evid: 507)
 *
 * Event description: Send updates to CLS every time page is hidden after initial hide, but only if CLS value actually changes
 *
 * @param {cruxClsUpdateParams} params - The parameters for this event
 * @property {number} count - Number of times CLS updated, inclusive
 * @property {number} startTime - Time of page hide
 * @property {number} countCls - Number of layout shifts
 * @property {Url} url - page url
 * @property {string} clsTag - HTML tag of main CLS element
 * @property {string} entryType - Unique name of the BI event
 * @property {string} clsId - d of closest component, which contributed most to CLS
 * @property {number} cls - Cumulative Layout Shift, times 10000 and rounded
 * @return {LogObject<cruxClsUpdateParams>} LogObject<cruxClsUpdateParams>
 */
export function cruxClsUpdate(params) {
    return { evid: 507, src: 72, endpoint: '', params };
}
/**
 * A function to create a log object for the 'responsiveness' event (evid: 508)
 *
 * Event description: Send responsiveness measurements every time a new interaction exceeds the current max interaction's latency in a session
 *
 * @param {responsivenessParams} params - The parameters for this event
 * @property {boolean} domTreeLimitReach - Did reach the top of the DOM tree
 * @property {number} startTime - The earliest startTime of all INP metric entries. Value is relative to performance.timeOrigin
 * @property {Url} url - {}
 * @property {number} totalLatencyOverBudget - whole session totalLatencyOverBudget
 * @property {number} worstLatency - interaction worstLatency
 * @property {boolean} isAnchor - Was an anchor element recognized
 * @property {string} loadState - A state of the browser
 * @property {string} entryType - event_name
 * @property {number} numOfResponsivenessEvents - whole session numOfResponsivenessEvents
 * @property {number} worstLatencyOverBudget - interaction worstLatencyOverBudget
 * @property {string} compId - Lowest compId found
 * @property {string} actions - interaction's different actions (pointerup, scroll, click, etc.)
 * @property {string} href - href value detected
 * @property {string} interactionWaterfall - all the elements from the root of the document to the element that was interacted with, separated by '>'
 * @property {string} elementType - interaction elementType (button, a, p, etc.)
 * @property {boolean} is_navigation - indicates if the interaction led to a navigation
 * @property {number} worstLatencyByEntry - worstLatency detected by entry
 * @return {LogObject<responsivenessParams>} LogObject<responsivenessParams>
 */
export function responsiveness(params) {
    return { evid: 508, src: 72, endpoint: '', params };
}
/**
 * A function to create a log object for the 'widgetsOnPage' event (evid: 520)
 *
 * Event description: Send the list of widgets the platform is loading
 *
 * @param {widgetsOnPageParams} params - The parameters for this event
 * @property {number} widgets_count - number of widgets loaded on page
 * @property {string} widgets_ids - list of widget ids
 * @property {string} slotsToWidgets - An array of JSONs that contain all the data regarding slots rendering in the page. [{...},{slotId:”ID” , widgetId:”ID” , slotName:”NAME”}]
 * @property {string} apps_ids - list of app ids
 * @property {GUID} vsi - vsi
 * @property {boolean} hasBlocksWidget - indicates if the page contains blocks widget
 * @property {number} pageNumber - {}
 * @return {LogObject<widgetsOnPageParams>} LogObject<widgetsOnPageParams>
 */
export function widgetsOnPage(params) {
    return { evid: 520, src: 72, endpoint: '', params };
}
//# sourceMappingURL=index.js.map