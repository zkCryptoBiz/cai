import { hex2rgb, isHex, isRgb, isRgba, lerp, rgb2hex, str2rgba } from '@wix/wow-utils';

/**
 *
 * @param {string} value
 * @param {number} opacity
 * @returns {string} wix rgba data format '0..255, 0..255, 0..255, 0..1`
 */
export function normalizeWixColorFormat(value, opacity) {
  if (value === void 0) {
    value = '';
  }
  if (opacity === void 0) {
    opacity = 1;
  }
  let r = 0,
    g = 0,
    b = 0,
    a = 0;
  if (isHex(value)) {
    [r, g, b, a = opacity] = hex2rgb(value);
  } else {
    [r, g, b, a = opacity] = str2rgba(value);
  }
  return [r, g, b, a];
}

/**
 *
 * @param {string} value
 * @returns {string} '#RRGGBB`
 */
export function normalizeHexFormat(value) {
  if (value === void 0) {
    value = '';
  }
  const [r, g, b] = normalizeWixColorFormat(value);
  return rgb2hex(r, g, b);
}
export function normalizeWixFormatToVector(rgba) {
  return [...rgba.slice(0, 3).map(c => c / 255), rgba[3]];
}
export function interpolateColor(a, b, x) {
  const [aR, aG, aB, aA] = normalizeWixFormatToVector(a);
  const [bR, bG, bB, bA] = normalizeWixFormatToVector(b);
  const alpha = lerp(aA, bA, x);

  /* https://drafts.csswg.org/css-images/#coloring-gradient-line
   * interpolate in premultiplied RGBA space
   * And: https://bugs.webkit.org/show_bug.cgi?id=150940#c0
   * Normalize the resulted color by dividing by the interpolated alpha
   */
  return {
    color: rgb2hex(Math.round(lerp(aR * aA, bR * bA, x) / alpha * 255), Math.round(lerp(aG * aA, bG * bA, x) / alpha * 255), Math.round(lerp(aB * aA, bB * bA, x) / alpha * 255)),
    opacity: alpha
  };
}
export function isWixRgba(color) {
  return /^(\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3}),\s*(\d*(?:\.\d+)?)$/.test(color);
}
export function isWixThemeColor(color) {
  return /[[{]?color_\d{1,2}[\]}]?$/.test(color);
}
export function cleanThemeColor(color) {
  return color.replace(/[[\]{}]/g, '');
}
export function isValidCSSColor(color) {
  return isHex(color) || isRgb(color) || isRgba(color);
}
//# sourceMappingURL=color.js.map