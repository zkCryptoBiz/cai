const PANORAMA_BI_URL = 'https://frog.wix.com/panorama';

// Will report a BI event using a direct http request because we don't want to bundle the BI logger
// https://bo.wix.com/bi-catalog-webapp/#/sources/11/events/114700
export const reportFallbackBiEvent = (payload, serializedPayload) => {
  var _payload$, _payload$2;
  const url = new URL(PANORAMA_BI_URL);
  const batchLength = payload.length;
  const batchSize = serializedPayload.length;
  const batchItems = payload.map(_ref => {
    let {
      logLevel,
      fullArtifactId,
      componentId,
      message
    } = _ref;
    return [logLevel, fullArtifactId, componentId, message].join('|');
  }).join(',');
  const keyValue = [['src', 11], ['evid', 114700], ['sessionId', (_payload$ = payload[0]) == null ? void 0 : _payload$.sessionId], ['platform', (_payload$2 = payload[0]) == null ? void 0 : _payload$2.platform], ['batchLength', batchLength], ['batchSize', batchSize], ['batchItems', batchItems], ['_', Date.now()] // This is the standard way to implement a cache buster ("_" is ignored by default by the BI backend)
  ];
  keyValue.forEach(_ref2 => {
    let [key, value] = _ref2;
    return url.searchParams.set(key, (value ?? '').toString());
  });

  // Can't use sendBeacon here because this is a fallback flow and it will probably also fail
  // Image() is used to prevent any potential CORS issues when using fetch()
  new Image().src = url.toString();
};
//# sourceMappingURL=bi.js.map