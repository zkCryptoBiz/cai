import { ConverterType } from './serializer/domain';
import { schemaSerializer } from './serializer/serializer';
import { protobufConverters } from './serializer/protobuf-converters/converters';
import { typeToConverterSet } from './serializer/utils';
const ambassadorConverters = typeToConverterSet([...protobufConverters]);
export function serializer(rootSchema, depSchemas = {}) {
    const transform = schemaSerializer(rootSchema, depSchemas, ambassadorConverters);
    return {
        fromJSON(jsonOrString) {
            const jsonOrText = safeJsonParse(jsonOrString) || jsonOrString;
            return transform(jsonOrText, ConverterType.FROM_JSON);
        },
        toJSON(json) {
            return transform(json, ConverterType.TO_JSON);
        },
    };
}
function safeJsonParse(someString) {
    try {
        return JSON.parse(someString);
    }
    catch (error) { }
}
//# sourceMappingURL=ambassador-index.js.map