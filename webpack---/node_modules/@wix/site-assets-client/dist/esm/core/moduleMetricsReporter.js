var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
export var ModuleMetricsReporter = function (metricsReporter, module, seo) {
    if (seo === void 0) { seo = false; }
    var moduleName = seo ? "".concat(module.name, "-seo") : module.name;
    var formatMetricName = function (metric) { return "".concat(metric, "-").concat(moduleName); };
    var formatParams = function (params) {
        if (params === void 0) { params = {}; }
        return ({
            paramsOverrides: __assign(__assign({}, params), { siteAssetsModule: moduleName })
        });
    };
    return {
        meter: function (metricName, params) {
            return metricsReporter.meter(formatMetricName(metricName), formatParams(params));
        },
        runAsyncAndReport: function (asyncMethod, methodName, params) {
            return metricsReporter.runAsyncAndReport(asyncMethod, formatMetricName(methodName), formatParams(params));
        },
        reportError: function (err, params) {
            metricsReporter.meter(formatMetricName("error-".concat(err.name)));
            return metricsReporter.reportError(err, formatParams(params));
        },
        histogram: function (metricName, value, params) {
            return metricsReporter.histogram(formatMetricName(metricName), value, formatParams(params));
        }
    };
};
