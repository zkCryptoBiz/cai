import { truncate } from '../../utils/math';
export function toPageMetric() {
    const navEntries = performance.getEntriesByType('navigation');
    const pageInfo = getPageInfo(navEntries);
    const resourceEntries = performance.getEntriesByType('resource');
    const pageResourcesInfo = getPageResourcesInfo(resourceEntries);
    const allLoafEntries = performance.getEntriesByType('long-animation-frame');
    const pageBlockingTime = getPageBlockingTime(allLoafEntries);
    return {
        ...pageInfo,
        ...pageResourcesInfo,
        pageBlockingTime,
    };
}
function getPageInfo(navigationEntries) {
    // There should be at least one entry, so if there are none, return undefined for all so that it won't skew the data
    if (navigationEntries?.length === 0) {
        return {
            pageTransferSize: undefined,
            pageTransferProtocol: undefined,
            pageTTLB: undefined,
        };
    }
    const { transferSize, responseEnd, nextHopProtocol } = navigationEntries[0];
    return {
        pageTransferSize: transferSize,
        pageTransferProtocol: nextHopProtocol,
        pageTTLB: truncate(responseEnd),
    };
}
function getPageResourcesInfo(entries) {
    // There should be at least one entry, so if there are none, return undefined for all so that it won't skew the data
    if (entries?.length === 0) {
        return {
            pageFontCount: undefined,
            pageFontBytes: undefined,
            pageImageCount: undefined,
            pageImageBytes: undefined,
            pageScriptCount: undefined,
            pageScriptBytes: undefined,
        };
    }
    let pageFontCount = 0, pageFontBytes = 0;
    let pageImageCount = 0, pageImageBytes = 0;
    let pageScriptCount = 0, pageScriptBytes = 0;
    entries.forEach((entry) => {
        if (entry.name.match(/\.(woff|woff2|ttf|otf|eot)$/i)) {
            pageFontCount++;
            pageFontBytes += entry.encodedBodySize;
        }
        else if (entry.name.match(/\.(jpg|jpeg|png|gif|webp|svg)$/i)) {
            pageImageCount++;
            pageImageBytes += entry.encodedBodySize;
        }
        else if (entry.name.match(/\.(m|c?)(js)$/i)) {
            pageScriptCount++;
            pageScriptBytes += entry.encodedBodySize;
        }
    });
    return {
        pageFontCount,
        pageFontBytes,
        pageImageCount,
        pageImageBytes,
        pageScriptCount,
        pageScriptBytes,
    };
}
function getPageBlockingTime(entries) {
    // As opposed to other functions here, it's OK to return 0 if there are no entries since it means there was no LoAFs
    return Math.trunc(entries.reduce((sum, { blockingDuration }) => sum + blockingDuration, 0));
}
//# sourceMappingURL=page.js.map