import { getLcpLoafs, getLcpLoafsTotals } from '../../utils/loaf-utils';
import { truncate } from '../../utils/math';
const getServerTimings = (lcpResource) => lcpResource.serverTiming.reduce((all, t) => `${all};${t.description}`, '');
const getResourceDeliveryType = (lcpResource) => {
    // @ts-expect-error - It's experimental so the type does not exist yet in TS
    // https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/deliveryType
    const deliveryType = lcpResource?.deliveryType;
    return deliveryType === '' ? 'none' : deliveryType;
};
export const toLcpMetric = (metric, getHtmlElementMetadata) => {
    const { value, attribution: { lcpResourceEntry, lcpEntry, url: lcpUrl, resourceLoadDelay, resourceLoadDuration, elementRenderDelay, element, }, } = metric;
    const htmlElementMetadata = getHtmlElementMetadata(lcpEntry?.element);
    // https://github.com/wix-private/wix-perf-measure/blob/master/packages/wix-perf-measure/src/entries/lcp.js#L96
    return {
        lcp: truncate(value),
        lcpElementSelector: element,
        lcpSize: truncate(lcpEntry?.size),
        lcpTag: lcpEntry?.element?.tagName,
        lcpRating: metric.rating,
        lcpResourceLoadDelay: truncate(resourceLoadDelay),
        lcpResourceLoadDuration: truncate(resourceLoadDuration),
        lcpElementRenderDelay: truncate(elementRenderDelay),
        lcpUrl,
        lcpInitiatorType: lcpResourceEntry?.initiatorType,
        lcpComponentType: htmlElementMetadata.compType,
        lcpWidgetId: htmlElementMetadata.widgetId,
        lcpApplicationId: htmlElementMetadata.applicationId,
        lcpIsElementAnimated: !!htmlElementMetadata.isAnimated,
        lcpResourceRequestStart: truncate(lcpResourceEntry?.requestStart),
        lcpResourceResponseStart: truncate(lcpResourceEntry?.responseStart),
        lcpResourceTransferSize: truncate(lcpResourceEntry?.transferSize),
        lcpResourceServerTiming: lcpResourceEntry
            ? getServerTimings(lcpResourceEntry)
            : undefined,
        lcpResourceDeliveryType: getResourceDeliveryType(lcpResourceEntry),
        lcpLoafs: JSON.stringify(getLcpLoafs(metric)),
        lcpLoafsTotals: JSON.stringify(getLcpLoafsTotals(metric)),
        metadata: {
            lcpResourceNetworkProtocol: lcpResourceEntry?.nextHopProtocol,
        },
    };
};
//# sourceMappingURL=lcp.js.map