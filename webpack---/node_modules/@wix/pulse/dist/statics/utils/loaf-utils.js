const getLongestLoafs = (loafs, amount = 1) => {
    if (!loafs.length) {
        return [];
    }
    // Sort the array based on blockingDuration in descending order
    const sortedEntries = loafs.sort((a, b) => b.blockingDuration - a.blockingDuration);
    // Take the first n elements
    return sortedEntries.slice(0, amount);
};
export const getLcpLoafsTotals = ({ attribution: { lcpResourceEntry, lcpEntry } }) => {
    // Get all loafs that happened before the LCP render (thus potentially blocking LCP)
    let lcpLoafs = performance
        .getEntriesByType('long-animation-frame')
        .filter(({ startTime }) => startTime < (lcpEntry?.renderTime || 0));
    // If there is an LCP resource, such as image/video, filter out loafs that happened during its download
    if (lcpResourceEntry) {
        lcpLoafs = lcpLoafs.filter(({ startTime, duration }) => startTime < lcpResourceEntry.requestStart ||
            startTime + duration > lcpResourceEntry.responseEnd);
    }
    const totalDuration = lcpLoafs.reduce((acc, loaf) => acc + loaf.duration, 0);
    const totalBlockingDuration = lcpLoafs.reduce((acc, loaf) => acc + loaf.blockingDuration, 0);
    const totalCount = lcpLoafs.length;
    return {
        totalDuration,
        totalBlockingDuration,
        totalCount,
    };
};
export const getLcpLoafs = ({ attribution: { lcpResourceEntry, lcpEntry }, }) => {
    // Get all loafs that happened before the LCP render (thus potentially blocking LCP)
    let lcpLoafs = performance
        .getEntriesByType('long-animation-frame')
        .filter(({ startTime }) => startTime < (lcpEntry?.renderTime || 0));
    // If there is an LCP resource, such as image/video, filter out loafs that happened during its download
    if (lcpResourceEntry) {
        lcpLoafs = lcpLoafs.filter(({ startTime, duration }) => startTime < lcpResourceEntry.requestStart ||
            startTime + duration > lcpResourceEntry.responseEnd);
    }
    // Get two loafs with the longest blocking duration
    return getLongestLoafs(lcpLoafs, 2);
};
//# sourceMappingURL=loaf-utils.js.map