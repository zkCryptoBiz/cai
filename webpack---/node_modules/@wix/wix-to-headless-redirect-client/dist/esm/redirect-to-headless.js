import JSURL from 'jsurl';
export let NavigationType = /*#__PURE__*/function (NavigationType) {
  NavigationType["LOGIN"] = "login";
  NavigationType["PAID_PLANS"] = "paid-plans";
  NavigationType["PLANS_THANK_YOU_PAGE"] = "plans-typ";
  NavigationType["ECOM_THANK_YOU_PAGE"] = "ecom-typ";
  NavigationType["ECOM_CART"] = "ecom-cart";
  NavigationType["EVENTS_THANK_YOU_PAGE"] = "events-typ";
  NavigationType["BOOKINGS_SERVICE_LIST"] = "bookings-srv-list";
  NavigationType["ECOM_CONTINUE_BROWSING"] = "home";
  NavigationType["PAID_PLANS_CONTINUE_BROWSING"] = "home";
  NavigationType["HOME"] = "home";
  return NavigationType;
}({});
export const navigateToHeadlessIfNeeded = _ref => {
  let {
    navParams,
    location,
    fallbackNavigation
  } = _ref;
  const url = getHeadlessUrl({
    query: location.query,
    baseUrl: location.baseUrl,
    navParams
  });
  if (url) {
    location.to(url);
    return {
      navigatedToHeadless: true
    };
  } else {
    fallbackNavigation == null || fallbackNavigation();
    return {
      navigatedToHeadless: false
    };
  }
};
export const createWixToHeadlessUrl = _ref2 => {
  let {
    wixBaseUrl,
    targetBaseUrl,
    clientId,
    navigationParams,
    navigationData
  } = _ref2;
  return `${wixBaseUrl}/_serverless/wix-to-headless-redirect/redirect?targetUrl=${encodeURIComponent(targetBaseUrl)}&redirectLogicalName=${navigationParams.logicalName}&params=${JSURL.stringify(navigationParams.params ?? {})}&clientId=${clientId}&navigationData=${JSURL.stringify(navigationData ?? {})}`;
};
export const getHeadlessUrl = _ref3 => {
  let {
    query,
    baseUrl,
    navParams
  } = _ref3;
  const redirectUrls = JSURL.tryParse(query == null ? void 0 : query.headlessExternalUrls, {}) ?? {};
  if (redirectUrls[navParams.logicalName]) {
    return createWixToHeadlessUrl({
      wixBaseUrl: baseUrl,
      targetBaseUrl: redirectUrls[navParams.logicalName],
      navigationParams: navParams,
      clientId: redirectUrls.headlessClientId,
      navigationData: redirectUrls.navigationData
    });
  }
  return undefined;
};
export const getHeadlessClientId = _ref4 => {
  let {
    query
  } = _ref4;
  const redirectUrls = JSURL.tryParse(query == null ? void 0 : query.headlessExternalUrls, {}) ?? {};
  return redirectUrls == null ? void 0 : redirectUrls.headlessClientId;
};
//# sourceMappingURL=redirect-to-headless.js.map