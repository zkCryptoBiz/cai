"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isIphone = exports.getIsIpad = exports.isInstagramApp = exports.isFacebookApp = exports.getIOSVersion = exports.isIOS = exports.isIOS11Device = exports.isChromeOnIos = exports.isChrome = exports.getSafariMajorVersion = exports.isSafari = exports.isFirefox = exports.isEdge = exports.isIE = void 0;
/**
 * @deprecated util method.
 * Prefer using feature detection over browser detection when possible.
 * see documentation on documentMode: https://www.geeksforgeeks.org/html-dom-documentmode-property/
 */
const isIE = (window) => {
    // @ts-ignore - documentMode is a feature only in IE
    return !!window && !!window.document && !!window.document.documentMode;
};
exports.isIE = isIE;
/**
 * @deprecated util method.
 * Prefer using feature detection over browser detection when possible.
 * see documentation on edge user agent: https://docs.microsoft.com/en-us/microsoft-edge/web-platform/user-agent-string
 */
const isEdge = (window) => getUserAgent(window).indexOf('edg') > -1;
exports.isEdge = isEdge;
/**
 * @deprecated util method.
 * Prefer using feature detection over browser detection when possible.
 * see documentation on firefox user agent: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/User-Agent/Firefox
 */
const isFirefox = (window) => getUserAgent(window).indexOf('firefox') > -1;
exports.isFirefox = isFirefox;
/**
 * @deprecated util method.
 * Prefer using feature detection over browser detection when possible.
 * see documentation on safari user agent: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/User-Agent#Safari_UA_string
 * notice that safari user agent has "Version" directive
 */
const isSafari = (window) => {
    const userAgent = getUserAgent(window);
    return userAgent.indexOf('safari') > -1 && userAgent.indexOf('version') > -1;
};
exports.isSafari = isSafari;
/**
 * @deprecated util method.
 * Prefer using feature detection over browser detection when possible.
 * see documentation on safari user agent: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/User-Agent#Safari_UA_string
 */
const getSafariMajorVersion = (window) => {
    if ((0, exports.isSafari)(window)) {
        const userAgent = getUserAgent(window);
        let version = userAgent.split(' ');
        version = version.find((directive) => directive.startsWith('version/'));
        version = version.split('/')[1];
        return parseInt(version, 10);
    }
    return -1;
};
exports.getSafariMajorVersion = getSafariMajorVersion;
/**
 * @deprecated util method.
 * Prefer using feature detection over browser detection when possible.
 * see documentation on chrome user agent: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/User-Agent#chrome_ua_string
 */
const isChrome = (window) => getUserAgent(window).indexOf('chrome') > -1;
exports.isChrome = isChrome;
/**
 *
 * Chrome on ios user agent https://developer.chrome.com/multidevice/user-agent#chrome_for_ios_user_agent
 */
const isChromeOnIos = (window) => {
    const userAgent = getUserAgent(window);
    return userAgent.indexOf('safari') > -1 && userAgent.indexOf('crios') > -1;
};
exports.isChromeOnIos = isChromeOnIos;
const getUserAgent = (window) => window && window.navigator && window.navigator.userAgent ? window.navigator.userAgent.toLowerCase() : '';
const getPlatform = (window) => (window && window.navigator && window.navigator.platform) || '';
const isIOS11Device = (window) => {
    const userAgent = getUserAgent(window);
    return /ip(hone|od|ad).*os 11/.test(userAgent);
};
exports.isIOS11Device = isIOS11Device;
const isIOS = (window) => {
    const platform = getPlatform(window);
    return !!platform && /iPad|iPhone|iPod/.test(platform);
};
exports.isIOS = isIOS;
const getIOSVersion = (window) => {
    const userAgent = getUserAgent(window);
    const iOSRegex = /(iphone|ipod|ipad).*os (\d+)_/;
    if (!iOSRegex.test(userAgent)) {
        return NaN;
    }
    const iOSgroups = userAgent.match(iOSRegex);
    return iOSgroups && Number(iOSgroups[2]);
};
exports.getIOSVersion = getIOSVersion;
const isFacebookApp = (window) => {
    const userAgent = getUserAgent(window);
    return userAgent.includes('fban') || userAgent.includes('fbav');
};
exports.isFacebookApp = isFacebookApp;
const isInstagramApp = (window) => {
    const userAgent = getUserAgent(window);
    return userAgent.includes('instagram');
};
exports.isInstagramApp = isInstagramApp;
/**
 * Specific check for iPad as Safari on iOS >=13 uses desktop user-agent
 */
const getIsIpad = (window) => {
    const userAgent = window.navigator.userAgent.toLowerCase();
    const ipadInUserAgent = userAgent.indexOf('ipad') !== -1;
    const macInUserAgent = userAgent.indexOf('mac') !== -1;
    if (!ipadInUserAgent && macInUserAgent && window.navigator.maxTouchPoints && window.navigator.maxTouchPoints > 2) {
        return true;
    }
    return ipadInUserAgent;
};
exports.getIsIpad = getIsIpad;
function isIphone(window) {
    return /iPhone/.test(window.navigator.userAgent);
}
exports.isIphone = isIphone;
//# sourceMappingURL=deprecatedBrowserUtils.js.map