import { fullArtifactIdToArtifactId } from './artifact-utils';
import { getQueryParamValue, hasQueryParam } from './url-utils';
import { getCookieOverrideValue } from './cookie-utils';
export let RuntimeEnvironment = /*#__PURE__*/function (RuntimeEnvironment) {
  RuntimeEnvironment["PRODUCTION"] = "production";
  RuntimeEnvironment["DEVELOPMENT"] = "development";
  RuntimeEnvironment["BOT"] = "bot";
  RuntimeEnvironment["INVALID_USER_AGENT"] = "invalid_useragent";
  RuntimeEnvironment["SLED"] = "sled";
  RuntimeEnvironment["SERVER"] = "server";
  RuntimeEnvironment["TEST"] = "test";
  return RuntimeEnvironment;
}({});
const FORCE_PANORAMA_REPORT_QUERY_PARAM = 'forcePanoramaReport';
const ENABLE_PANORAMA_LOGS_QUERY_PARAM = 'enablePanoramaLogs';
export const hasForcePanoramaReportQueryParam = () => {
  return hasQueryParam(FORCE_PANORAMA_REPORT_QUERY_PARAM);
};
export const hasEnablePanoramaLogsQueryParam = () => {
  return hasQueryParam(ENABLE_PANORAMA_LOGS_QUERY_PARAM);
};
export const checkIsLocalMode = fullArtifactId => {
  const artifactId = fullArtifactIdToArtifactId(fullArtifactId);
  if (!artifactId) {
    return false;
  }
  const queryParamOverrideValue = getQueryParamValue(`${artifactId}-override`);
  const isLocalQueryParamOverride = queryParamOverrideValue && queryParamOverrideValue.includes('localhost');
  if (isLocalQueryParamOverride) {
    return true;
  }
  const wixStaticCookieValue = getCookieOverrideValue(artifactId);
  return !!wixStaticCookieValue && wixStaticCookieValue.includes('localhost');
};
export function calculateEnvironment() {
  if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {
    // it's not clear for now how to safely determine the env in a worker given its limited API access, so we return the safest value
    return RuntimeEnvironment.PRODUCTION;
  }
  if (typeof window === 'undefined') {
    try {
      return process.env.NODE_ENV || RuntimeEnvironment.SERVER;
    } catch {
      return RuntimeEnvironment.SERVER;
    }
  }
  const {
    hostname
  } = window.location;
  const {
    userAgent
  } = window.navigator;
  const {
    cookie
  } = window.document;

  // https://github.com/wix-private/sled/blob/c07286aac964a5acc4a1cb1e8c213c3b1fc0bf5d/packages/sled-test-runner/src/jest-runtime/lib/sled-global.ts#L134
  const isSled = /(^|;)\s*automation\s*=\s*sled:/.test(cookie);
  const isLocalhost = /localhost|127\.0\.0\.1|::1|\.local|local\.wix\.com|^$/i.test(hostname);
  const isBot = /Googlebot|AdsBot-Google-Mobile|bingbot|BingPreview|facebookexternalhit|Baiduspider|YandexBot/i.test(userAgent);
  const isNotValidUserAgent = /BonEcho|NewsGator|SeaMonkey|iTunes|Epiphany|Konqueror|Sleipnir|IceWeasel/i.test(userAgent);
  switch (true) {
    case isSled:
      return RuntimeEnvironment.SLED;
    case process.env.NODE_ENV === 'test':
      return RuntimeEnvironment.TEST;
    case process.env.NODE_ENV === 'development' || isLocalhost:
      return RuntimeEnvironment.DEVELOPMENT;
    case isBot:
      return RuntimeEnvironment.BOT;
    case isNotValidUserAgent:
      return RuntimeEnvironment.INVALID_USER_AGENT;
    default:
      return RuntimeEnvironment.PRODUCTION;
  }
}
//# sourceMappingURL=environment-utils.js.map