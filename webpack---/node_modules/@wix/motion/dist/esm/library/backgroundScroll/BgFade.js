const RANGE_OFFSETS_MAP = {
  in: {
    startOffset: {
      name: 'cover',
      offset: {
        type: 'percentage',
        value: 0
      }
    },
    // TODO: this is not necessarily "CENTER_TO_CENTER", it could be extended if the comp is sticky
    // so may need to use something like `calc(0% + 50vh + var(--comp-height) / 2)`
    endOffset: {
      name: 'cover',
      offset: {
        type: 'percentage',
        value: 50
      }
    }
  },
  out: {
    startOffset: {
      name: 'exit',
      offset: {
        type: 'percentage',
        value: 0
      }
    },
    endOffset: {
      name: 'exit',
      offset: {
        type: 'percentage',
        value: 100
      }
    }
  }
};
const EASE_IN = 'sineIn';
const EASE_OUT = 'sineOut';
export default function create(options) {
  const {
    range = 'in'
  } = options.namedEffect;
  const isOut = range === 'out';
  const fromValue = isOut ? 1 : 0;
  const toValue = isOut ? 0 : 1;
  const easing = isOut ? EASE_OUT : EASE_IN;
  const ranges = RANGE_OFFSETS_MAP[range];
  return [{
    ...options,
    part: 'BG_LAYER',
    easing,
    ...ranges,
    keyframes: [{
      opacity: fromValue
    }, {
      opacity: toValue
    }]
  }];
  /*
   * @keyframes <name> {
   *   from {
   *     opacity: <fromValue>;
   *   }
   *   to {
   *     opacity: <toValue>;
   *   }
   * }
   */
}
//# sourceMappingURL=BgFade.js.map