const DIRECTION_TO_TRANSFORM_MAP = {
  top: {
    rotateX: '80deg'
  },
  right: {
    rotateY: '80deg'
  },
  bottom: {
    rotateX: '-80deg'
  },
  left: {
    rotateY: '-80deg'
  }
};
const EASING_MAP = {
  soft: 'cubicInOut',
  medium: 'quintInOut',
  hard: 'backOut'
};
export default function create(options, dom) {
  const {
    direction = 'right',
    power
  } = options.namedEffect;
  const easing = power && EASING_MAP[power] || options.easing || 'quintInOut';

  // we can remove dependency on measurement here if we use a "layout wrapper" as a `container`: https://jsbin.com/mulojuwogi/edit?css,output
  // we could also consider a fixed value for z, e.g. 300px like in ArcScroll
  // const { width, height } = element.getBoundingClientRect();

  const {
    rotateX,
    rotateY
  } = DIRECTION_TO_TRANSFORM_MAP[direction];
  // const z = rotateX ? height / 2 : width / 2;
  const z = `calc(-1 * var(${rotateX ? '--motion-height' : '--motion-width'}, 100v${rotateX ? 'h' : 'w'}) / 2)`;
  if (dom) {
    dom.measure(target => {
      if (!target) {
        return;
      }
      const {
        width,
        height
      } = target.getBoundingClientRect();
      dom.mutate(() => {
        if (rotateX) {
          target.style.setProperty('--motion-height', `${height}px`);
        } else {
          target.style.setProperty('--motion-width', `${width}px`);
        }
      });
    });
  }
  return [{
    ...options,
    duration: options.duration * 0.7,
    easing: 'sineIn',
    keyframes: [{
      opacity: 0
    }, {
      opacity: 'var(--comp-opacity, 1)'
    }]
  }, {
    ...options,
    easing,
    keyframes: [{
      transform: `perspective(800px) translateZ(${z}) ${rotateX ? 'rotateX' : 'rotateY'}(${rotateX || rotateY}) translateZ(calc(-1 * ${z})) rotate(var(--comp-rotate-z, 0deg))`
    }, {
      transform: `perspective(800px) translateZ(${z}) ${rotateX ? 'rotateX' : 'rotateY'}(0deg) translateZ(calc(-1 * ${z})) rotate(var(--comp-rotate-z, 0deg))`
    }]
  }];
  /*
   * @keyframes <name> {
   *   from {
   *     transform: perspective(800px) translateZ(<z>) <rotateAxis>(<fromValue>) translateZ(-<z>) rotate(<rotation>);
   *   }
   *   to {
   *     transform: perspective(800px) translateZ(<z>) <rotateAxis>(0deg) translateZ(-<z>) rotate(<rotation>);
   *   }
   * }
   *
   * @keyframes <name>-fade {
   *   from {
   *     opacity: 0;
   *   }
   *   to {
   *     opacity: 1;
   *   }
   * }
   *
   * #target {
   *   animation: <name> <duration> <delay> <easing> backwards,
   *              <name>-fade <duration * 0.7> <delay> sineIn backwards;
   * }
   */
}
//# sourceMappingURL=ArcIn.js.map