const ROTATION = 45;
export default function create(options, dom) {
  const {
    direction = 'right'
  } = options.namedEffect;
  const x = direction === 'right' ? 'calc(100vw - var(--motion-left, 0px))' : 'calc(var(--motion-left, calc(100vw - 100%)) * -1 - 100%)';
  const y = 'min(calc(100% * -1.5), max(-300px, calc(100% * -5.5)))';
  if (dom) {
    let left = 0;
    dom.measure(target => {
      if (!target) {
        return;
      }
      left = target.getBoundingClientRect().left;
    });
    dom.mutate(target => {
      target == null || target.style.setProperty('--motion-left', `${left}px`);
    });
  }
  return [{
    ...options,
    easing: 'circOut',
    keyframes: [{
      translate: x
    }, {
      translate: '0'
    }]
  }, {
    ...options,
    easing: 'linear',
    keyframes: [{
      opacity: 0,
      transform: `translateY(${y}) rotate(calc(var(--comp-rotate-z, 0deg) ${direction === 'right' ? '+' : '-'} ${ROTATION}deg))`
    }, {
      opacity: 'var(--comp-opacity, 1)',
      transform: `translateY(0) rotate(var(--comp-rotate-z, 0deg))`
    }]
  }];

  /*
   * @keyframes <name>-position-x {
   *   from {
   *     translate: <x>
   *   }
   *   to {
   *     translate: 0
   *   }
   * }
   *
   * @keyframes <name>-position-y {
   *   from {
   *     opacity: 0;
   *     transform: translateY(<x>) rotate(<transformRotate>)
   *   }
   *   to {
   *     opacity: 1;
   *     transform: translateY(0) rotate(<initialRotation>)
   *   }
   * }
   *
   * #target {
   *   animation: <name>-position-x <duration> <delay> circOut backwards;
   *              <name>-position-y <duration> <delay> linear backwards;
   * }
   */
}
//# sourceMappingURL=CircleIn.js.map