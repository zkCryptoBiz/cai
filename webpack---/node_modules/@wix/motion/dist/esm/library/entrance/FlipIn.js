import { getAdjustedDirection } from '../../utils';
const DIRECTIONS = ['top', 'right', 'bottom', 'left'];
const POWER_TO_ROTATE_MAP = {
  soft: 45,
  medium: 90,
  hard: 270
};
function getRotateFrom(direction, rotate) {
  return {
    x: ROTATE_MAP[direction].x * rotate,
    y: ROTATE_MAP[direction].y * rotate
  };
}
const ROTATE_MAP = {
  top: {
    x: 1,
    y: 0
  },
  right: {
    x: 0,
    y: 1
  },
  bottom: {
    x: -1,
    y: 0
  },
  left: {
    x: 0,
    y: -1
  }
};
export default function create(options, dom) {
  const {
    direction = 'top',
    power,
    initialRotate = 90
  } = options.namedEffect;
  const easing = options.easing || 'backOut';
  const rotate = power && POWER_TO_ROTATE_MAP[power] || initialRotate;
  let from = getRotateFrom(direction, rotate);
  if (dom) {
    dom.measure(target => {
      if (!target) {
        return;
      }
      const rotation = getComputedStyle(target).getPropertyValue('--comp-rotate-z') || '0deg';
      const adjustedDirection = getAdjustedDirection(DIRECTIONS, direction, parseInt(rotation, 10));
      dom.mutate(() => {
        from = getRotateFrom(adjustedDirection, rotate);
        target.style.setProperty('--motion-rotate-x', `${from.x}deg`);
        target.style.setProperty('--motion-rotate-y', `${from.y}deg`);
      });
    });
  }
  return [{
    ...options,
    easing: 'quadOut',
    keyframes: [{
      opacity: 0
    }, {
      opacity: 'var(--comp-opacity, 1)'
    }]
  }, {
    ...options,
    easing,
    keyframes: [{
      transform: `perspective(800px) rotate(var(--comp-rotate-z, 0deg)) rotateX(var(--motion-rotate-x , ${from.x}deg)) rotateY(var(--motion-rotate-y , ${from.y}deg))`
    }, {
      transform: `perspective(800px) rotate(var(--comp-rotate-z, 0deg)) rotateX(0deg) rotateY(0deg)`
    }]
  }];

  /*
   * * @keyframes <name>-fade {
   *   from {
   *     opacity: 0
   *   }
   *   to {
   *     opacity: 1
   *   }
   * }
   *
   * @keyframes <name>-flip {
   *   from {
   *    transform: perspective(800px) rotateZ(<rotation>) rotateX(<from.x>deg) rotateY(<from.y>deg);
   *   }
   *   to {
   *     transform: perspective(800px) rotateZ(<rotation>) rotateX(0deg) rotateY(0deg);
   *   }
   * }
   *
   *
   *
   *
   * #target {
   *   animation: <name>-flip <duration> <delay> <easing> backwards,
   *              <name>-fade <duration> <delay> quadOut backwards;
   * }
   */
}
//# sourceMappingURL=FlipIn.js.map