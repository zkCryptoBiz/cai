import { getEasingFamily, getEasing } from '../../utils';
import easings from '../../easings';
const TRANSLATION_FACTORS_MAP = {
  'top-left': {
    y: -1,
    x: -1
  },
  'top-right': {
    y: -1,
    x: 1
  },
  'bottom-right': {
    y: 1,
    x: 1
  },
  'bottom-left': {
    y: 1,
    x: -1
  },
  center: {
    y: 0,
    x: 0
  }
};
const POWER_MAP = {
  soft: 'sine',
  medium: 'quad',
  hard: 'quint'
};
function getMidPoint(x, y, factor) {
  return {
    x: `calc(var(--motion-width, 100%) * 1.1 / 3 * ${x} * ${factor})`,
    y: `calc(var(--motion-height, 100%) * 1.1 / 3 * ${y} * ${factor})`
  };
}
export default function create(options, dom) {
  const {
    direction = 'top-right',
    power = 'medium'
  } = options.namedEffect;
  const {
    in: _in,
    out: _out
  } = getEasingFamily(POWER_MAP[power]);
  const translationFactors = TRANSLATION_FACTORS_MAP[direction];
  const sourcePoint = {
    x: `calc(var(--motion-width, 100%) * 1.1 / 2 * ${translationFactors.x})`,
    y: `calc(var(--motion-height, 100%) * 1.1 / 2 * ${translationFactors.y})`
  };
  const KEYFRAMES = [{
    offset: 30,
    scale: 0.3,
    factor: 1,
    ease: 'linear'
  }, {
    offset: 45,
    scale: 1.4,
    factor: -0.4,
    ease: _out
  }, {
    offset: 62.65,
    scale: 0.8,
    factor: 0.2,
    ease: _in
  }, {
    offset: 77.27,
    scale: 1.1,
    factor: -0.1,
    ease: _out
  }, {
    offset: 86.23,
    scale: 0.94,
    factor: 0.06,
    ease: _in
  }, {
    offset: 91.73,
    scale: 1.03,
    factor: -0.03,
    ease: _out
  }, {
    offset: 95.11,
    scale: 0.98,
    factor: 0.02,
    ease: _in
  }, {
    offset: 97.18,
    scale: 1.01,
    factor: -0.01,
    ease: _out
  }, {
    offset: 98.45,
    scale: 0.99,
    factor: 0.01,
    ease: _in
  }, {
    offset: 100,
    scale: 1,
    factor: 0,
    ease: _out
  }];
  const keyframes = KEYFRAMES.map(_ref => {
    let {
      offset,
      scale,
      ease,
      factor
    } = _ref;
    const {
      x,
      y
    } = getMidPoint(translationFactors.x, translationFactors.y, factor);
    return {
      offset: offset / 100,
      easing: getEasing(ease),
      scale: `${scale}`,
      translate: `${x} ${y}`
    };
  });
  if (dom) {
    dom.measure(target => {
      if (!target) {
        return;
      }
      const {
        width,
        height
      } = target.getBoundingClientRect();
      dom.mutate(() => {
        target.style.setProperty('--motion-width', `${width}px`);
        target.style.setProperty('--motion-height', `${height}px`);
      });
    });
  }
  return [{
    ...options,
    easing: 'cubicIn',
    duration: options.duration * 0.3,
    keyframes: [{
      opacity: 0
    }, {
      opacity: 'var(--comp-opacity, 1)'
    }]
  }, {
    ...options,
    easing: 'linear',
    keyframes: [{
      translate: `${sourcePoint.x} ${sourcePoint.y}`,
      scale: '0',
      easing: easings.expoIn
    }, ...keyframes]
  }];

  /*
   * @keyframes <name> {
   *   from {
   *     clip-path: <clip>;
   *   }
   * }
   *
   * @keyframes <name>-scale {
   *   from {
   *     scale: <scaleX> <scaleY>;
   *   }
   * }
   *
   * @keyframes <name>-fade {
   *   from {
   *     opacity: 0;
   *   }
   *   to {
   *     opacity: 1;
   *   }
   * }
   *
   * #target {
   *   animation: <name> <duration> <delay> <easing> backwards,
   *              <name>-scale <duration * 0.85> <delay> <easing> backwards,
   *              <name>-fade <duration> <delay> quadOut backwards;
   * }
   */
}
//# sourceMappingURL=PunchIn.js.map