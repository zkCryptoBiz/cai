import { getClipPolygonParams, getAdjustedDirection } from '../../utils';
const PARAM_MAP = {
  vertical: {
    scaleY: 0,
    scaleX: 1
  },
  horizontal: {
    scaleY: 1,
    scaleX: 0
  }
};
const DIRECTIONS = ['vertical', 'horizontal'];
export default function create(options, dom) {
  const {
    direction = 'horizontal'
  } = options.namedEffect;
  const adjustedDirection = getAdjustedDirection(DIRECTIONS, direction, 0);
  const {
    scaleX,
    scaleY
  } = PARAM_MAP[adjustedDirection];
  const easing = options.easing || 'quintInOut';
  const clip = getClipPolygonParams({
    direction,
    minimum: 100
  });
  const clipNone = getClipPolygonParams({
    direction: 'initial'
  });
  if (dom) {
    dom.measure(target => {
      if (!target) {
        return;
      }
      const rotation = getComputedStyle(target).getPropertyValue('--comp-rotate-z') || '0';
      const rotatedDirection = getAdjustedDirection(DIRECTIONS, direction, parseInt(rotation, 10));
      const scale = PARAM_MAP[rotatedDirection];
      const rotatedClip = getClipPolygonParams({
        direction: rotatedDirection,
        minimum: 100
      });
      dom.mutate(() => {
        target.style.setProperty('--motion-clip-path', rotatedClip);
        target.style.setProperty('--motion-scale-x', `${scale.scaleX}`);
        target.style.setProperty('--motion-scale-y', `${scale.scaleY}`);
      });
    });
  }
  return [{
    ...options,
    easing: 'quadOut',
    keyframes: [{
      opacity: 0
    }, {
      opacity: 'var(--comp-opacity, 1)'
    }]
  }, {
    ...options,
    easing,
    keyframes: [{
      offset: 0,
      clipPath: `var(--motion-clip-path, ${clip})`,
      transform: `rotate(var(--comp-rotate-z, 0deg)) scale(var(--motion-scale-x, ${scaleX}), var(--motion-scale-y, ${scaleY}))`
    }, {
      offset: 0.85,
      transform: 'rotate(var(--comp-rotate-z, 0deg)) scale(1, 1)'
    }, {
      offset: 1,
      transform: 'rotate(var(--comp-rotate-z, 0deg)) scale(1, 1)',
      clipPath: clipNone
    }]
  }];

  /*
   * @keyframes <name>-scale-clip {
   *   from {
   *     transform: rotate(<rotation>) scale(<scaleX>, <scaleY>);
   *     clip-path: <clip>;
   *   }
   *   85% {
   *     transform: rotate(<rotation>) scale(1, 1);
   *   }
   *   to {
   *     transform: rotate(<rotation>) scale(1, 1);
   *     clip-path: none;
   *   }
   * }
   *
   * @keyframes <name>-fade {
   *   from {
   *     opacity: 0;
   *   }
   *   to {
   *     opacity: 1;
   *   }
   * }
   *
   * #target {
   *   animation: <name>-scale <duration * 0.85> <delay> <easing> backwards,
   *              <name>-fade <duration> <delay> quadOut backwards;
   * }
   */
}
//# sourceMappingURL=WinkIn.js.map