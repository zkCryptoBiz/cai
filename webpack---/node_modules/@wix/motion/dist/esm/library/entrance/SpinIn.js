const SCALE_MAP = {
  soft: 1,
  medium: 0.6,
  hard: 0
};
const DIRECTION_MAP = {
  clockwise: -1,
  'counter-clockwise': 1
};
export default function create(options) {
  const {
    direction = 'clockwise',
    spins = 0.5,
    initialScale = 0,
    power
  } = options.namedEffect;
  const easing = options.easing || 'cubicInOut';
  const scale = typeof power !== 'undefined' ? SCALE_MAP[power] : initialScale;
  const transformRotate = (DIRECTION_MAP[direction] > 0 ? 1 : -1) * 360 * spins;
  return [{
    ...options,
    easing: 'cubicIn',
    duration: options.duration * scale,
    keyframes: [{
      opacity: 0
    }, {
      opacity: 'var(--comp-opacity, 1)'
    }]
  }, {
    ...options,
    easing,
    keyframes: [{
      scale: `${scale}`,
      rotate: `${transformRotate}deg`
    }, {
      scale: '1',
      rotate: `0deg`
    }]
  }];
  /*
   * @keyframes <name> {
   *   from {
   *     opacity: 0;
   *   }
   *   to {
   *     opacity: 1;
   *   }
   * }
   *
   * * @keyframes <name>-rotate-scale {
   *   from {
   *     transform: scale(<scale>) rotate(<rotation + transformRotate>deg)
   *   }
   *   to {
   *      transform: scale(1) rotate(<rotation>deg)
   *   }
   * }
   *
   *
   * #target {
   *   animation: <name>-fade <duration * scale> <delay> <easing> cubicIn backwards;
   *              <name>-rotate-scale <duration> <delay> <easing> backwards;
   * }
   */
}
//# sourceMappingURL=SpinIn.js.map