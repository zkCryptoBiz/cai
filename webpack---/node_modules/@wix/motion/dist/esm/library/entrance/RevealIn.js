import { getAdjustedDirection, getClipPolygonParams } from '../../utils';
const DIRECTIONS = ['top', 'right', 'bottom', 'left'];
function getClipStart(rotateZ, direction) {
  const clipDirection = getAdjustedDirection(DIRECTIONS, direction, rotateZ);
  return getClipPolygonParams({
    direction: clipDirection,
    minimum: 0
  });
}
export default function create(options, dom) {
  const {
    direction = 'left'
  } = options.namedEffect;
  const easing = options.easing || 'cubicInOut';
  const start = getClipStart(0, direction);
  if (dom) {
    dom.measure(target => {
      if (!target) {
        return;
      }
      const rotation = getComputedStyle(target).getPropertyValue('--comp-rotate-z') || '0deg';
      dom.mutate(target_ => {
        target_ == null || target_.style.setProperty('--motion-clip-path', getClipStart(parseInt(rotation, 10), direction));
      });
    });
  }
  const end = getClipPolygonParams({
    direction: 'initial'
  });
  return [{
    ...options,
    easing,
    keyframes: [{
      clipPath: `var(--motion-clip-path, ${start})`
    }, {
      clipPath: end
    }]
  }];

  /*
   *
   * @keyframes <name>-clip {
   *   from {
   *     clip-path: <start>
   *   }
   *   to {
   *     clip-path: <end>
   *   }
   * }
   *
   * #target {
   *   animation: <name>-clip <duration> <delay> <easing> backwards;
   * }
   */
}
//# sourceMappingURL=RevealIn.js.map