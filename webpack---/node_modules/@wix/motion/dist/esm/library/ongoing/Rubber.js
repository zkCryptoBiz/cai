import { mapRange } from '@wix/wow-utils';
const POWER_TO_RUBBER_OFFSET_MAP = {
  soft: 0,
  medium: 0.05,
  hard: 0.1
};
const SCALE_KEYFRAMES = [{
  keyframe: 45,
  scaleX: 1.03,
  scaleY: 0.93
}, {
  keyframe: 56,
  scaleX: 0.9,
  scaleY: 1.03
}, {
  keyframe: 66,
  scaleX: 1.02,
  scaleY: 0.96
}, {
  keyframe: 78,
  scaleX: 0.98,
  scaleY: 1.02
}, {
  keyframe: 89,
  scaleX: 1.005,
  scaleY: 0.9995
}, {
  keyframe: 100,
  scaleX: 1,
  scaleY: 1
}];
export default function create(options) {
  const {
    power,
    intensity = 0.5
  } = options.namedEffect;
  const duration = options.duration || 0;
  const delay = options.delay || 0;
  const responsiveRubberOffset = mapRange(0, 1, POWER_TO_RUBBER_OFFSET_MAP.soft, POWER_TO_RUBBER_OFFSET_MAP.hard, intensity);
  const rubberOffset = typeof power !== 'undefined' ? POWER_TO_RUBBER_OFFSET_MAP[power] : responsiveRubberOffset;
  const keyframes = SCALE_KEYFRAMES.map((_ref, index) => {
    let {
      keyframe,
      scaleX,
      scaleY
    } = _ref;
    const isLastKeyframe = index === SCALE_KEYFRAMES.length - 1;
    const isEvenKeyframe = index % 2 === 0;
    const offset = rubberOffset * (isLastKeyframe ? 0 : isEvenKeyframe ? 1 : -0.5);
    return {
      offset: keyframe / 100 * (duration / (duration + delay)),
      transform: `rotateZ(var(--comp-rotate-z, 0deg)) scale(${scaleX + offset}, ${scaleY - offset})`
    };
  });
  return [{
    ...options,
    delay: 0,
    duration: duration + delay,
    keyframes
  }];
  /*
   *
   * @keyframes <name> {
   *   <duration / (duration + delay)> {
   *     transform: rotate(<rotation>deg) scale(<scaleX + offset>, <scaleY + offset>);
   *   }
   *   100% {
   *     transform: rotate(<rotation>deg) scale(1, 1);
   *   }
   * }
   *
   *
   * #target {
   *   animation: <name> <duration + delay> 0s infinite;
   * }
   */
}
//# sourceMappingURL=Rubber.js.map