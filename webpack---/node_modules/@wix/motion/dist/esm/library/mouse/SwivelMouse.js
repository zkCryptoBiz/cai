import { mapRange } from '@wix/wow-utils';
import { getMouseTransitionEasing } from '../../utils';
import { BaseMouse } from './BaseMouse';
const paramsMap = {
  soft: {
    angle: 25,
    perspective: 1000,
    easing: 'easeOut'
  },
  medium: {
    angle: 50,
    perspective: 700,
    easing: 'easeOut'
  },
  hard: {
    angle: 85,
    perspective: 300,
    easing: 'easeOut'
  }
};
const transformOrigins = {
  top: [0, -50],
  bottom: [0, 50],
  right: [50, 0],
  left: [-50, 0],
  'center-horizontal': [0, 0],
  'center-vertical': [0, 0]
};
class SwivelMouseAnimation extends BaseMouse {
  progress(_ref) {
    let {
      x: progressX,
      y: progressY
    } = _ref;
    let rotateAxis = 'rotateX';
    let progress = progressY;
    let invertVertical = -1;
    const {
      pivotAxis,
      angle,
      invert,
      perspective
    } = this.options;
    if (pivotAxis === 'center-horizontal' || pivotAxis === 'right' || pivotAxis === 'left') {
      rotateAxis = 'rotateY';
      progress = progressX;
      invertVertical = 1;
    }

    // if progress  === 0, rotate === angle, if progress === 0.5, rotate === 0, if progress === 1, rotate === angle
    const rotate = mapRange(0, 1, -angle, angle, progress) * invertVertical * invert;
    const [translateX, translateY] = transformOrigins[pivotAxis];
    const transform = `perspective(${perspective}px) translateX(${translateX}%) translateY(${translateY}%) ${rotateAxis}(${rotate}deg) translateX(${-translateX}%) translateY(${-translateY}%) rotate(var(--comp-rotate-z, 0deg))`;
    this.target.style.transform = transform;
  }
  cancel() {
    this.target.style.transform = '';
    this.target.style.transition = '';
  }
}
export default function create(options) {
  const {
    transitionDuration,
    transitionEasing
  } = options;
  const {
    power,
    inverted = false,
    angle = 5,
    perspective = 800,
    pivotAxis = 'center-horizontal'
  } = options.namedEffect;
  const invert = inverted ? -1 : 1;
  const animationOptions = {
    transition: transitionDuration ? `transform ${transitionDuration}ms ${getMouseTransitionEasing(power ? paramsMap[power].easing : transitionEasing)}` : '',
    invert,
    angle: power ? paramsMap[power].angle : angle,
    perspective: power ? paramsMap[power].perspective : perspective,
    pivotAxis
  };
  return target => new SwivelMouseAnimation(target, animationOptions);
}
//# sourceMappingURL=SwivelMouse.js.map