import { mapRange } from '@wix/wow-utils';
import { getCssUnits, getMouseTransitionEasing } from '../../utils';
import { BaseMouse } from './BaseMouse';
const paramsMap = {
  soft: {
    angle: 25,
    perspective: 1000,
    easing: 'easeOut'
  },
  medium: {
    angle: 50,
    perspective: 500,
    easing: 'easeOut'
  },
  hard: {
    angle: 85,
    perspective: 333,
    easing: 'easeOut'
  }
};
class Track3DMouseAnimation extends BaseMouse {
  progress(_ref) {
    let {
      x: progressX,
      y: progressY
    } = _ref;
    const {
      invert,
      distance,
      angle,
      axis,
      perspective
    } = this.options;
    let translateX = 0;
    let translateY = 0;
    let rotateX = 0;
    let rotateY = 0;
    // if progressX === 0, translateX === -distance
    // if progressX === 0.5, translateX === 0
    // if progressX === 1, translateX === distance
    // if progressX === 0, rotateX === -angle, if progressX === 0.5, rotateX === 0, if progressX === 1, rotateX === angle
    if (axis === 'both' || axis === 'horizontal') {
      translateX = mapRange(0, 1, -distance.value, distance.value, progressX);
      rotateY = mapRange(0, 1, -angle, angle, progressX) * invert;
    }
    if (axis === 'both' || axis === 'vertical') {
      translateY = mapRange(0, 1, -distance.value, distance.value, progressY);
      rotateX = mapRange(0, 1, angle, -angle, progressY) * invert;
    }
    const units = getCssUnits(distance.type);
    this.target.style.transform = `perspective(${perspective}px) translateX(${translateX}${units}) translateY(${translateY}${units}) rotateX(${rotateX}deg) rotateY(${rotateY}deg) rotate(var(--comp-rotate-z, 0deg))`;
  }
  cancel() {
    this.target.style.transform = '';
    this.target.style.transition = '';
  }
}
export default function create(options) {
  const {
    transitionDuration,
    transitionEasing
  } = options;
  const {
    power,
    inverted = false,
    distance = {
      value: 200,
      type: 'px'
    },
    angle = 5,
    axis = 'both',
    perspective = 800
  } = options.namedEffect;
  const invert = inverted ? -1 : 1;
  const animationOptions = {
    transition: transitionDuration ? `transform ${transitionDuration}ms ${getMouseTransitionEasing(power ? paramsMap[power].easing : transitionEasing)}` : '',
    invert,
    distance,
    axis,
    angle: power ? paramsMap[power].angle : angle,
    perspective: power ? paramsMap[power].perspective : perspective
  };
  return target => new Track3DMouseAnimation(target, animationOptions);
}
//# sourceMappingURL=Track3DMouse.js.map