import { getClipPolygonParams, getAdjustedDirection } from '../../utils';
const DIRECTIONS = ['bottom', 'left', 'top', 'right'];
const OPPOSITE_DIRECTION_MAP = {
  top: 'bottom',
  bottom: 'top',
  left: 'right',
  right: 'left'
};
const initialClip = getClipPolygonParams({
  direction: 'initial'
});
function getClipFrom(direction, range) {
  return range === 'out' ? initialClip : getClipPolygonParams({
    direction: OPPOSITE_DIRECTION_MAP[direction]
  });
}
function getClipTo(direction, range) {
  return range === 'in' ? initialClip : getClipPolygonParams({
    direction: range === 'out' ? OPPOSITE_DIRECTION_MAP[direction] : direction
  });
}
export default function create(options, dom) {
  const {
    direction = 'bottom',
    range = 'in'
  } = options.namedEffect;
  const easing = 'linear';
  const fill = range === 'out' ? 'forwards' : range === 'in' ? 'backwards' : options.fill;
  let clipFrom = getClipFrom(direction, range);
  let clipTo = getClipTo(direction, range);
  if (dom) {
    dom.measure(target => {
      if (!target) {
        return;
      }
      const rotation = getComputedStyle(target).getPropertyValue('--comp-rotate-z') || '0';
      dom.mutate(() => {
        const adjDirection = getAdjustedDirection(DIRECTIONS, direction, parseInt(rotation, 10));
        clipFrom = getClipFrom(adjDirection, range);
        clipTo = getClipTo(adjDirection, range);
        target.style.setProperty('--motion-clip-from', clipFrom);
        target.style.setProperty('--motion-clip-to', clipTo);
      });
    });
  }
  const keyframes = range === 'continuous' ? [{
    clipPath: `var(--motion-clip-from, ${clipFrom})`
  }, {
    clipPath: initialClip
  }, {
    clipPath: `var(--motion-clip-to, ${clipTo})`
  }] : [{
    clipPath: `var(--motion-clip-from, ${clipFrom})`
  }, {
    clipPath: `var(--motion-clip-to, ${clipTo})`
  }];
  return [{
    ...options,
    fill,
    easing,
    keyframes
  }];
  /*
   * @keyframes <name> {
   *   from {
   *     clip-path: <fromValue>;
   *   }
   *   to {
   *     clip-path: <toValue>;
   *   }
   * }
   *
   * OR for continuous:
   *
   * @keyframes <name> {
   *   from {
   *     clip-path: <fromValue>;
   *   }
   *   50% {
   *     clip-path: <initialClip>;
   *   }
   *   to {
   *     clip-path: <toValue>;
   *   }
   * }
   */
}
//# sourceMappingURL=RevealScroll.js.map