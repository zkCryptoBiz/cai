import { __assign } from "tslib";
import * as lodash from './lodash';
import window from '../window/windowWrapper';
import { isEditMode, isPreviewMode, isDeviceTypeMobile, isDeviceTypeTouch, } from '../window/viewModeWrapper';
import GALLERY_CONSTS from '../constants';
var Utils = /** @class */ (function () {
    function Utils() {
        this._cache = {};
        this._hash2int = {};
        this._params = {};
        Object.assign(this, lodash);
    }
    Utils.prototype.shouldUseCache = function () {
        return !isEditMode() && !isPreviewMode() && !this.isSSR();
    };
    Utils.prototype.isUndefined = function (something) {
        return typeof something === 'undefined';
    };
    Utils.prototype.uniqueBy = function (array, key) {
        return array.filter(function (obj, pos, arr) {
            return arr.map(function (mapObj) { return mapObj[key]; }).indexOf(obj[key]) === pos;
        });
    };
    Utils.prototype.inRange = function (value, range, max) {
        if (max === void 0) { max = range; }
        if (range === 0) {
            throw new Error('Range cannot be 0');
        }
        while (value < 0) {
            value += range;
        }
        while (value > max) {
            value -= range;
        }
        return value;
    };
    Utils.prototype.sliceArrayWithRange = function (array, start, end) {
        var _this = this;
        return Array(end - start)
            .fill(0)
            .map(function (_, i) {
            var index = start + i;
            return array[_this.inRange(index, array.length, array.length - 1)];
        });
    };
    Utils.prototype.sliceArrayIfAvailable = function (array, start, end) {
        var maxStart = Math.max(start, 0);
        var minEnd = Math.min(end, array.length);
        if (maxStart > start) {
            minEnd = Math.min(minEnd + (maxStart - start), array.length);
        }
        if (minEnd < end) {
            maxStart = Math.max(maxStart - (end - minEnd), 0);
        }
        return this.sliceArrayWithRange(array, maxStart, minEnd);
    };
    Utils.prototype.dumpCache = function () {
        this._cache = {};
    };
    Utils.prototype.getOrPutFromCache = function (fld, func) {
        if (!this.shouldUseCache()) {
            return func();
        }
        if (this._cache[fld] !== undefined) {
            return this._cache[fld];
        }
        this._cache[fld] = func();
        return this._cache[fld];
    };
    Utils.prototype.hashToInt = function (str, min, max) {
        var int = 0;
        if (this.isUndefined(str) || str.length === 0) {
            return int;
        }
        if (!this._hash2int[str]) {
            for (var i = 0; i < str.length; i++) {
                int += str.charCodeAt(i);
            }
            this._hash2int[str] = int;
        }
        if (this.isUndefined(min) || this.isUndefined(max)) {
            return this._hash2int[str];
        }
        else {
            return (this._hash2int[str] % (max - min + 1)) + min;
        }
    };
    Utils.prototype.parseGetParam = function (val, url) {
        try {
            if (!this.isUndefined(this._params[val])) {
                return this._params[val];
            }
            var result_1 = '', tmp_1 = [];
            var _location = location;
            if (url) {
                _location = {
                    search: '?' + (url.split('?')[1] || ''),
                    pathname: (url.split('?')[0] || '').split('/')[1] || '',
                };
            }
            _location.search
                // .replace ( "?", "" )
                // this is better, there might be a question mark inside
                .substr(1)
                .split('&')
                .forEach(function (item) {
                tmp_1 = item.split('=');
                if (tmp_1[0] === val) {
                    result_1 = decodeURIComponent(tmp_1[1]);
                }
            });
            if (!result_1) {
                // if the param was not found in the search, try decoding the path
                var query = decodeURIComponent(_location.pathname).split('?')[1];
                if (!query) {
                    return '';
                }
                query.split('&').forEach(function (item) {
                    tmp_1 = item.split('=');
                    if (tmp_1[0] === val) {
                        result_1 = decodeURIComponent(tmp_1[1]);
                    }
                });
            }
            this._params[val] = result_1;
            return result_1;
        }
        catch (e) {
            return false;
        }
    };
    Utils.prototype.stripSlashes = function (str) {
        var newStr = '';
        if (typeof str === 'string') {
            newStr = str
                .replace(/\\\//g, '/')
                .replace(/\\'/g, "'")
                .replace(/\\"/g, '"')
                .replace(/\\0/g, '\0')
                .replace(/\\\\/g, '\\');
        }
        return newStr;
    };
    Utils.prototype.parseStringObject = function (sObj) {
        if (typeof sObj !== 'string') {
            return sObj;
        }
        var stripedObj = this.stripSlashes(sObj);
        if (typeof sObj === 'string' &&
            /^[\],:{}\s]*$/.test(stripedObj
                .replace(/\\["\\/bfnrtu]/g, '@')
                .replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+-]?\d+)?/g, ']')
                .replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {
            // this is a json
            try {
                return JSON.parse(stripedObj);
            }
            catch (e) {
                // console.error('Parse object error: Catched ', e);
            }
        }
        return stripedObj;
    };
    Utils.prototype.hashCode = function (str) {
        var hash = 0, i, chr;
        if (str.length === 0)
            return hash;
        for (i = 0; i < str.length; i++) {
            chr = str.charCodeAt(i);
            hash = (hash << 5) - hash + chr;
            hash |= 0; // Convert to 32bit integer
        }
        return hash;
    };
    Utils.prototype.isMobileByProps = function () {
        var _this = this;
        var _isMobileByProps = function () {
            var deviceType = _this.parseGetParam('deviceType') || window.deviceType;
            var isMobileViewer = _this.parseGetParam('showMobileView') === 'true';
            var deviceTypeMobile = isDeviceTypeMobile();
            if (isMobileViewer) {
                return true;
            }
            else if (deviceType) {
                return String(deviceType).toLowerCase().indexOf('mobile') >= 0;
            }
            else if (deviceTypeMobile) {
                return deviceTypeMobile;
            }
            else {
                return undefined;
            }
        };
        return this.getOrPutFromCache('isMobileByProps', _isMobileByProps);
    };
    Utils.prototype.isUserAgentMobile = function () {
        try {
            var _isUserAgentMobile = function () {
                var check = false;
                (function (a) {
                    if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|pixel|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) ||
                        /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw-(n|u)|c55\/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do(c|p)o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(-|_)|g1 u|g560|gene|gf-5|g-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd-(m|p|t)|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c(-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac( |-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk\/|se(c(-|0|1)|47|mc|nd|ri)|sgh-|shar|sie(-|m)|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel(i|m)|tim-|t-mo|to(pl|sh)|ts(70|m-|m3|m5)|tx-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/i.test(a.substr(0, 4))) {
                        check = true;
                    }
                })(navigator.userAgent || navigator.vendor || window.opera);
                return check;
            };
            return this.getOrPutFromCache('isUserAgentMobile', _isUserAgentMobile);
        }
        catch (e) {
            return false;
        }
    };
    Utils.prototype.isMobile = function () {
        var _this = this;
        var _isMobile = function () {
            var isMobileByProps = _this.isMobileByProps();
            var isUserAgentMobile = _this.isUserAgentMobile();
            return _this.isUndefined(isMobileByProps)
                ? isUserAgentMobile
                : isMobileByProps;
        };
        return this.getOrPutFromCache('isMobile', _isMobile);
    };
    Utils.prototype.isTouch = function () {
        var _this = this;
        var _isTouch = function () {
            var _a;
            var isTouchByProps = isDeviceTypeTouch();
            var isTouchBrowser = ((_a = window.navigator) === null || _a === void 0 ? void 0 : _a.maxTouchPoints) > 0 || // checking if navigator exists because of SSR
                'ontouchstart' in window.document.documentElement;
            return _this.isUndefined(isTouchByProps) ? isTouchBrowser : isTouchByProps;
        };
        return this.getOrPutFromCache('isTouch', _isTouch);
    };
    Utils.prototype.isTest = function () {
        try {
            return window.isTest;
        }
        catch (e) {
            return false;
        }
    };
    Utils.prototype.isLocal = function () {
        try {
            var host = window.location.hostname;
            if (host === 'local.wix.com') {
                return true;
            }
            if (host.indexOf('localhost') >= 0) {
                return true;
            }
            if (this.parseGetParam('debug') === 'true') {
                return true;
            }
            return false;
        }
        catch (E) {
            return false;
        }
    };
    Utils.prototype.isDev = function () {
        var _this = this;
        return this.getOrPutFromCache('isDev', function () {
            return (_this.shouldDebug('ph_local') ||
                (_this.isOOI() && process.env.NODE_ENV === 'development') ||
                (_this.safeLocalStorage() || {}).forceDevMode === 'true');
        });
    };
    Utils.prototype.isVerbose = function () {
        return (!this.isTest() && (this.safeLocalStorage() || {}).forceDevMode === 'true');
    };
    Utils.prototype.isStoreGallery = function () {
        var _this = this;
        return this.getOrPutFromCache('isStoreGallery', function () {
            try {
                return window.location.search.toLowerCase().indexOf('isstore') > -1;
            }
            catch (e) {
                if (_this.isDev()) {
                    console.error('cant find window', e);
                }
                return false;
            }
        });
    };
    // TODO : Replace with isPrerender mode
    Utils.prototype.isSSR = function () {
        return typeof (global === null || global === void 0 ? void 0 : global.window) === 'undefined';
    };
    Utils.prototype.isOOI = function () {
        return (this.isSSR() ||
            (typeof top !== 'undefined' &&
                typeof self !== 'undefined' &&
                (top === self || self.location.origin.includes('editor.wix.com'))));
    };
    Utils.prototype.generateUUID = function () {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            var r = Math.floor(Math.random() * 16) || 0;
            return c === 'x' ? r.toString(16) : c;
        });
    };
    Utils.prototype.isExternalUrl = function (url) {
        return /(^https?)|(^data)|(^blob)/.test(url);
    };
    Utils.prototype.isiOS = function () {
        return this.getOrPutFromCache('isiOS', function () {
            try {
                return /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
            }
            catch (e) {
                return false;
            }
        });
    };
    Utils.prototype.isiPhone = function () {
        return this.getOrPutFromCache('isiPhone', function () {
            try {
                return /iPhone/.test(navigator.userAgent) && !window.MSStream;
            }
            catch (e) {
                return false;
            }
        });
    };
    Utils.prototype.isLandscape = function () {
        var _this = this;
        return this.getOrPutFromCache('isLandscape', function () {
            if (!_this.isMobile()) {
                return false;
            }
            try {
                if (!_this.isUndefined(window.orientation)) {
                    return window.orientation === 90 || window.orientation === -90;
                }
                else {
                    var mql = window.matchMedia('(orientation: landscape)');
                    if (mql && mql.matches === true) {
                        return true;
                    }
                    else {
                        return false;
                    }
                }
            }
            catch (e) {
                return false;
            }
        });
    };
    Utils.prototype.safeLocalStorage = function () {
        try {
            return localStorage ? localStorage : window; // TrackJS errors, function returning null
        }
        catch (e) {
            return window;
        }
    };
    Utils.prototype.shouldDebug = function (str) {
        try {
            return (!!this.safeLocalStorage()[str] ||
                (window.debugApp || '').indexOf(str) >= 0 ||
                (this.parseGetParam('debugApp') || '').indexOf(str) >= 0);
        }
        catch (e) {
            return false;
        }
    };
    Utils.prototype.deviceHasMemoryIssues = function () {
        return this.isiOS();
    };
    Utils.prototype.getTabIndex = function (elementName) {
        var elementsArr = [
            'currentGalleryItem',
            'loadMoreButton',
            'slideshowNext',
            'slideshowPrev',
            'currentThumbnail',
            'slideshowLove',
            'slideshowShare',
            'cartIcon',
            'cartClose',
            'cartFrame',
            'fullscreenClose',
            'fullscreenNext',
            'fullscreenPrev',
            'fullscreenInfo',
            // 'fullscreenTitle',
            // 'fullscreenDesc',
            'fullscreenLink',
            'fullscreenProvider',
            'fullscreenCartButton',
            'fullscreenCheckout',
            'fullscreenExpand',
            'fullscreenVideoPlay',
            'fullscreenVideoBar',
            'fullscreenVideoMute',
            'fullscreenVideoVolume',
            'fullscreenCartIcon',
            'fullscreenDownload',
            'fullscreenLove',
            'fullscreenShare',
        ];
        var elementIdx = elementsArr.indexOf(elementName) + 1;
        if (elementIdx >= 0 && this.isOOI()) {
            return 0;
        }
        return elementIdx || -1; // no tabIndex (tab will not focus on this item)
    };
    Utils.prototype.setStateAndLog = function (that, caller, state, callback) {
        var _this = this;
        if (this.isVerbose()) {
            console.log("State Change Called (".concat(caller, ")"), state);
            var oldState_1 = __assign({}, that.state);
            that.setState(state, function () {
                var newState = __assign({}, that.state);
                var change = _this.printableObjectsDiff(oldState_1, newState, 'state');
                if (Object.keys(change).length > 0) {
                    console.log("State Change Completed (".concat(caller, ")"), change);
                }
                if (_this.isFunction(callback)) {
                    callback.bind(that)();
                }
            });
        }
        else {
            that.setState(state, function () {
                if (_this.isFunction(callback)) {
                    callback.bind(that)();
                }
            });
        }
    };
    Utils.prototype.printableObjectsDiff = function (obj1, obj2, prefix) {
        var _this = this;
        if (prefix === void 0) { prefix = ''; }
        var _toString = function (v) {
            if (v === '') {
                v = "''";
            }
            else if (_this.isUndefined(v)) {
                v = 'undefined';
            }
            return String(v);
        };
        var getInnerDiff = function (_obj1, _obj2, _prefix, depth) {
            if (_obj1 === void 0) { _obj1 = {}; }
            if (_obj2 === void 0) { _obj2 = {}; }
            if (depth === void 0) { depth = 1; }
            if (depth > 3) {
                return {};
            }
            var innerDiff = Object.entries(_obj1).reduce(function (res, _a) {
                var k = _a[0], v = _a[1];
                if (!_this.isEqual(v, _obj2[k])) {
                    if (Array.isArray(_obj2[k])) {
                        if (v.length !== _obj2[k].length) {
                            res[k + '.length'] =
                                '[' + v.length + '] => [' + _obj2[k].length + ']';
                        }
                        res = Object.assign(res, getInnerDiff(v, _obj2[k], (_prefix ? _prefix + '.' : '') + k, depth + 1));
                    }
                    else if (typeof _obj2[k] === 'object') {
                        res = Object.assign(res, getInnerDiff(v, _obj2[k], (_prefix ? _prefix + '.' : '') + k, depth + 1));
                    }
                    else {
                        res[(_prefix ? _prefix + '.' : '') + k] =
                            _toString(v) + ' => ' + _toString(_obj2[k]);
                    }
                }
                return res;
            }, {});
            return innerDiff;
        };
        return getInnerDiff(obj1, obj2, prefix, 1);
    };
    Utils.prototype.getScreenWidth = function () {
        if (isPreviewMode() && this.isMobile()) {
            // In editor preview-mode, the screen is still a desktop, but the viewport in which the preview mode renders us is only 320, so 'window.screen.width' returns a wrong value.
            return 320;
        }
        if (this.isTest()) {
            return 1920;
        }
        try {
            if (this.isLandscape()) {
                return Math.max(window.screen.width, window.screen.height);
            }
            else {
                return window.screen.width;
            }
        }
        catch (e) {
            return 1920;
        }
    };
    Utils.prototype.getScreenHeight = function () {
        if (this.isTest()) {
            return 1200;
        }
        try {
            if (this.isLandscape()) {
                return Math.min(window.screen.width, window.screen.height);
            }
            else {
                return window.screen.height;
            }
        }
        catch (e) {
            return 1200;
        }
    };
    Utils.prototype.getWindowWidth = function () {
        try {
            return window.innerWidth || 980;
        }
        catch (e) {
            return 980;
        }
    };
    Utils.prototype.getMobileEnabledClick = function (action) {
        // todo: bring back this line before pushing to master
        return this.isMobile() ? { onTouchEnd: action } : { onClick: action };
        // return {onClick: action};
    };
    Utils.prototype.getTopUrlParam = function (name) {
        if (this.isUndefined(this._cache.params)) {
            this._cache.params = {};
        }
        if (this.isUndefined(this._cache.params[name])) {
            try {
                this._cache.params[name] = top.location.search
                    .replace('?', '')
                    .split('&')
                    .map(function (ele) {
                    var arr = ele.split('=');
                    return arr[0] === name ? arr[1] || '' : '';
                })
                    .join('');
            }
            catch (e) {
                this._cache.params[name] = false;
                // console.log('caught cross origin error');
                // comment to avoid 'block is empty' from linter
            }
        }
        return this._cache.params[name];
    };
    Utils.prototype.scrollTo = function (element, to, duration, isHorizontal, callback) {
        if (this.isMobile()) {
            duration = 0; // do not animate scroll on mobile (looks jumpy and buggy)
        }
        var easeInOutQuad = function (currentTime, start, change, _duration) {
            // t = current time
            // b = start value
            // c = change in value
            // d = _duration
            if (_duration === 0) {
                return change + start;
            }
            currentTime /= _duration / 2;
            if (currentTime < 1) {
                return (change / 2) * currentTime * currentTime + start;
            }
            currentTime--;
            return (-change / 2) * (currentTime * (currentTime - 2) - 1) + start;
        };
        var start = isHorizontal ? element.scrollLeft : element.scrollTop;
        var change = to - start;
        var currentTime = 0;
        var increment = 20;
        var animateScroll = function () {
            currentTime += increment;
            var val = easeInOutQuad(currentTime, start, change, duration);
            if (currentTime < duration) {
                setTimeout(animateScroll, increment);
            }
            else {
                element.setAttribute('data-scrolling', '');
                if (typeof callback === 'function') {
                    callback();
                }
            }
            if (isHorizontal) {
                element.scrollLeft = val;
            }
            else {
                element.scrollTop = val;
            }
        };
        element.setAttribute('data-scrolling', 'true');
        animateScroll();
    };
    Utils.prototype.formatColor = function (color) {
        var defaultColor = 'inherit';
        if (!color) {
            return defaultColor;
        }
        var colorStr = color.value ? color.value : color;
        var colorRegex = /(?:#|0x)(?:[A-Fa-f0-9]{3}|[A-Fa-f0-9]{6})\b|(?:rgb|hsl)a?\([^)]*\)/;
        var regexRes = colorRegex.exec(colorStr);
        var isValidColor = regexRes && regexRes[0];
        return isValidColor ? colorStr : defaultColor;
    };
    Utils.prototype.logPlaygroundLink = function (options) {
        try {
            if (this.isVerbose()) {
                var optionsStr = Object.entries(options)
                    .filter(function (_a) {
                    var key = _a[0], val = _a[1];
                    return typeof val !== 'object' &&
                        String(key).indexOf('Expand') === -1 &&
                        String(key).indexOf('Color') === -1;
                })
                    .map(function (_a) {
                    var key = _a[0], val = _a[1];
                    return "".concat(key, "=").concat(encodeURI(val));
                })
                    .join('&');
                console.log('Gallery Playground link:', "https://pro-gallery.surge.sh?".concat(optionsStr));
            }
        }
        catch (e) {
            console.error(e);
        }
    };
    Utils.prototype.isSingleItemHorizontalDisplay = function (options) {
        return (options.scrollDirection === GALLERY_CONSTS.scrollDirection.HORIZONTAL &&
            options.groupSize === 1 &&
            options.cubeImages &&
            options.layoutParams.cropRatio === '100%/100%');
    };
    Utils.prototype.getAriaAttributes = function (_a) {
        var _b;
        var proGalleryRole = _a.proGalleryRole, proGalleryRegionLabel = _a.proGalleryRegionLabel;
        var role = proGalleryRole || 'region';
        var roledescription = proGalleryRole === 'application' ? 'gallery application' : 'region';
        var attr = (_b = {
                role: proGalleryRole || 'region'
            },
            _b['aria-label'] = proGalleryRegionLabel,
            _b);
        if (role !== roledescription) {
            attr['aria-roledescription'] = roledescription;
        }
        return attr;
    };
    Utils.prototype.focusGalleryElement = function (element) {
        element.focus();
    };
    Utils.prototype.isMeaningfulString = function (str) {
        if (typeof str !== 'string')
            return false;
        return !!str.trim().length;
    };
    return Utils;
}());
export default new Utils();
/* eslint-enable prettier/prettier */
//# sourceMappingURL=index.js.map