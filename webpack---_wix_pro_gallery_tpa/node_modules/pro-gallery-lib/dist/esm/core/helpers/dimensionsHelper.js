import { default as GALLERY_CONSTS } from '../../common/constants/index';
import { default as includeExternalInfo } from '../../settings/options/layoutParams_structure_galleryRatio_includeExternalInfo';
var DimensionsHelper = /** @class */ (function () {
    function DimensionsHelper() {
        this.options = {};
        this.container = {};
        this.id = '';
        this._cache = {};
    }
    DimensionsHelper.prototype.getOrPutInCache = function (field, createValue) {
        if (this._cache[field])
            return this._cache[field];
        this._cache[field] = createValue();
        return this._cache[field];
    };
    DimensionsHelper.prototype.dumpCache = function () {
        this._cache = {};
    };
    DimensionsHelper.prototype.updateParams = function (_a) {
        var options = _a.options, container = _a.container, id = _a.id;
        this.dumpCache();
        this.id = id || this.id;
        this.options = options || this.options;
        this.container = container || this.container;
        this.fixHeightForHorizontalGalleryIfNeeded();
    };
    DimensionsHelper.prototype.getGalleryDimensions = function () {
        var _this = this;
        return this.getOrPutInCache('galleryDimensions', function () {
            var res = {
                galleryWidth: Math.ceil(_this.getGalleryWidth()),
                galleryHeight: Math.ceil(_this.getGalleryHeight()),
                scrollBase: _this.container.scrollBase
                    ? Math.ceil(_this.container.scrollBase)
                    : 0,
                height: Math.ceil(_this.container.height),
                width: Math.ceil(_this.container.width),
            };
            if (_this.container.externalScrollBase) {
                //if was provided from the wrapper
                res.scrollBase += _this.container.externalScrollBase;
            }
            if (_this.options.hasThumbnails &&
                _this.options.layoutParams.thumbnails.position ===
                    GALLERY_CONSTS.thumbnailsPosition.OUTSIDE_GALLERY) {
                res.galleryHeight -= _this.getThumbnailHeightDelta();
                res.galleryWidth -= _this.getThumbnailWidthDelta();
            }
            return res;
        });
    };
    DimensionsHelper.prototype.getGalleryWidth = function () {
        var _this = this;
        return this.getOrPutInCache('galleryWidth', function () {
            var width = Math.floor(_this.container.width) + _this.getDimensionFix() * 2; //add margins to width and then remove them in css negative margins
            if (_this.options.arrowsPosition ===
                GALLERY_CONSTS.arrowsPosition.OUTSIDE_GALLERY &&
                _this.options.scrollDirection ===
                    GALLERY_CONSTS.scrollDirection.HORIZONTAL) {
                width -=
                    2 * (_this.options.arrowsSize + 40 + _this.options.imageMargin / 2);
            }
            return width;
        });
    };
    DimensionsHelper.prototype.getGalleryHeight = function () {
        var _this = this;
        return this.getOrPutInCache('galleryHeight', function () {
            //const offsetTop = this.options.scrollDirection === GALLERY_CONSTS.scrollDirection.HORIZONTAL ? this.container.offsetTop : 0;
            var dimensionFix = function () {
                return _this.options.scrollDirection ===
                    GALLERY_CONSTS.scrollDirection.HORIZONTAL
                    ? _this.getDimensionFix()
                    : 0;
            };
            var res = Math.floor((_this.container.height > 0 ? _this.container.height : 0) + dimensionFix());
            return res;
        });
    };
    DimensionsHelper.prototype.getDimensionFix = function () {
        var _this = this;
        return this.getOrPutInCache('dimensionFix', function () {
            return (Number(_this.options.imageMargin / 2) -
                Number(_this.options.layoutParams.gallerySpacing));
        });
    };
    DimensionsHelper.prototype.getGalleryRatio = function () {
        var _this = this;
        return this.getOrPutInCache('galleryRatio', function () {
            var res = _this.getGalleryDimensions();
            return res.galleryWidth / res.galleryHeight;
        });
    };
    DimensionsHelper.prototype.getThumbnailSize = function () {
        var fixedThumbnailSize = this.options.thumbnailSize +
            this.options.layoutParams.gallerySpacing +
            3 * this.options.thumbnailSpacings;
        return fixedThumbnailSize;
    };
    DimensionsHelper.prototype.getThumbnailHeightDelta = function () {
        switch (this.options.galleryThumbnailsAlignment) {
            case 'top':
            case 'bottom':
                return this.getThumbnailSize();
            case 'left':
            case 'right':
                return 0;
            default:
                break;
        }
    };
    DimensionsHelper.prototype.getThumbnailWidthDelta = function () {
        switch (this.options.galleryThumbnailsAlignment) {
            case 'top':
            case 'bottom':
                return 0;
            case 'left':
            case 'right':
                return this.getThumbnailSize();
            default:
                break;
        }
    };
    DimensionsHelper.prototype.fixHeightForHorizontalGalleryIfNeeded = function () {
        if (this.options.scrollDirection ===
            GALLERY_CONSTS.scrollDirection.HORIZONTAL &&
            this.options.layoutParams.structure.galleryRatio.value > 0) {
            if (this.options.hasThumbnails &&
                this.options.layoutParams.thumbnails.position ===
                    GALLERY_CONSTS.thumbnailsPosition.OUTSIDE_GALLERY) {
                switch (this.options.galleryThumbnailsAlignment) {
                    case 'top':
                    case 'bottom':
                        this.container.height =
                            this.container.width *
                                this.options.layoutParams.structure.galleryRatio.value +
                                this.getThumbnailHeightDelta();
                        break;
                    case 'left':
                    case 'right':
                        this.container.height =
                            (this.container.width - this.getThumbnailWidthDelta()) *
                                this.options.layoutParams.structure.galleryRatio.value;
                        break;
                    default:
                        break;
                }
            }
            else {
                this.container.height =
                    this.container.width *
                        this.options.layoutParams.structure.galleryRatio.value;
                if (!this.options.layoutParams.structure.galleryRatio
                    .includeExternalInfo &&
                    includeExternalInfo.isRelevant(this.options)) {
                    this.container.height += this.options.externalInfoHeight;
                }
            }
        }
    };
    return DimensionsHelper;
}());
export default new DimensionsHelper();
//# sourceMappingURL=dimensionsHelper.js.map