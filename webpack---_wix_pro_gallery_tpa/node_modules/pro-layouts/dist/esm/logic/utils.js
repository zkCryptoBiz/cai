import { __assign } from "tslib";
import { flattenObject, flatToNested, extendNestedOptionsToIncludeOldAndNew, } from 'pro-gallery-lib';
var Utils = /** @class */ (function () {
    function Utils() {
        this._hash2int = {};
    }
    Utils.prototype.stripSlashes = function (str) {
        var newStr = '';
        if (typeof str === 'string') {
            newStr = str
                .replace(/\\\//g, '/')
                .replace(/\\'/g, "'")
                .replace(/\\"/g, '"')
                .replace(/\\0/g, '\0')
                .replace(/\\\\/g, '\\');
        }
        return newStr;
    };
    Utils.prototype.parseStringObject = function (sObj) {
        if (typeof sObj !== 'string') {
            return sObj;
        }
        var stripedObj = this.stripSlashes(sObj);
        //eslint-disable-next-line
        if (typeof sObj === 'string' && (/^[\],:{}\s]*$/.test(stripedObj.replace(/\\["\\\/bfnrtu]/g, '@').replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').replace(/(?:^|:|,)(?:\s*\[)+/g, '')))) {
            //this is a json
            try {
                return JSON.parse(stripedObj);
            }
            catch (e) {
                // console.error('Parse object error: Catched ', e);
            }
        }
        return stripedObj;
    };
    Utils.prototype.hashToInt = function (str, min, max) {
        var int = 0;
        if (typeof str === 'undefined' || str.length === 0) {
            return int;
        }
        if (!this._hash2int[str]) {
            for (var i = 0; i < str.length; i++) {
                int += str.charCodeAt(i);
            }
            this._hash2int[str] = int;
        }
        if (typeof min === 'undefined' || typeof max === 'undefined') {
            return this._hash2int[str];
        }
        else {
            return (this._hash2int[str] % (max - min + 1)) + min;
        }
    };
    Utils.prototype.hashToRandomInt = function (str, min, max) {
        if (min === void 0) { min = 0; }
        if (max === void 0) { max = 100000; }
        if (typeof str === 'undefined' || str.length === 0) {
            return 0;
        }
        min = Math.round(min);
        max = Math.round(max);
        str += str.length + min + max;
        if (!this._hash2int[str]) {
            this._hash2int[str] = Math.round(Math.random() * (max - min) + min);
        }
        return this._hash2int[str];
    };
    Utils.prototype.addDefaultStyleParams = function (styleParams) {
        function populateWithDefaultOptions(options) {
            //This will override only undefined values with default values
            var flatDefault = flattenObject(defaultLayouterSP);
            var flatOptions = flattenObject(options);
            var mergedOptions = Object.assign({}, flatDefault, flatOptions);
            Object.keys(mergedOptions).forEach(function (key) {
                if (typeof mergedOptions[key] === 'undefined') {
                    mergedOptions[key] = defaultLayouterSP[key];
                }
            });
            return flatToNested(mergedOptions);
        }
        //default styleParams
        var defaultLayouterSP = {
            layoutParams: {
                gallerySpacing: 0,
                cropRatio: 1,
                repeatingGroupTypes: '',
            },
            cubeImages: false,
            cubeType: 'fill',
            rotatingCropRatios: '',
            smartCrop: false,
            imageMargin: 10,
            scatter: 0,
            rotatingScatter: '',
            chooseBestGroup: true,
            groupSize: 3,
            groupTypes: '1,2h,2v,3h,3v,3t,3b,3l,3r',
            isVertical: true,
            minItemSize: 120,
            scrollDirection: 0,
            targetItemSize: 500,
            collageDensity: 50,
            fixedColumns: 0,
            columnWidths: '',
        };
        var fullMigratedAndOld = extendNestedOptionsToIncludeOldAndNew(styleParams);
        var populatedWithDefault = populateWithDefaultOptions(fullMigratedAndOld);
        return extendNestedOptionsToIncludeOldAndNew(populatedWithDefault);
    };
    Utils.prototype.convertContainer = function (container, styleParams) {
        var convertedContainer = __assign({ bounds: {} }, container);
        // galleryWidth is a value calculated prior to the layouter. if it exists it is stronger than width. if galleryWidth doesnt exist width(the total container width) is used instead but it then requieres adding margin calculations. Same is true for the height.
        // this is mostly true for "galleries" containing more than one "gallery" such as thumbnails where teh thumbnails are also a gallery and both are contained within container.width/height and have their own galleryWidth/Height
        if (container.width >= 0 && !(container.galleryWidth >= 0)) {
            convertedContainer.galleryWidth =
                container.width +
                    ((styleParams.imageMargin / 2 || 0) -
                        (styleParams.layoutParams.gallerySpacing || 0)) *
                        2;
            delete convertedContainer.width;
        }
        if (container.height >= 0 && !(container.galleryHeight >= 0)) {
            convertedContainer.galleryHeight =
                container.height +
                    ((styleParams.imageMargin / 2 || 0) -
                        (styleParams.layoutParams.gallerySpacing || 0));
            delete convertedContainer.height;
        }
        if (styleParams.externalInfoHeight >= 0 &&
            styleParams.scrollDirection === 1) {
            convertedContainer.galleryHeight -= styleParams.externalInfoHeight;
        }
        return convertedContainer;
    };
    return Utils;
}());
export var utils = new Utils();
//# sourceMappingURL=utils.js.map