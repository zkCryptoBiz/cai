var Column = /** @class */ (function () {
    function Column(idx, width, left, cubedHeight, infoWidth) {
        this.idx = idx;
        this.groups = [];
        this.height = 0;
        this.width = width;
        this.left = left;
        this.cubedHeight = cubedHeight;
        this.infoWidth = infoWidth || 0;
    }
    Column.prototype.addGroup = function (group) {
        this.addGroups([group]);
    };
    Column.prototype.addGroups = function (groups) {
        var _this = this;
        this.groups = this.groups.concat(groups);
        groups.forEach(function (group) {
            group.columnIdx = _this.idx;
            group.Column = _this;
        });
    };
    Object.defineProperty(Column.prototype, "totalWidth", {
        get: function () {
            return this.width + this.infoWidth;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Column.prototype, "scheme", {
        get: function () {
            return {
                idx: this.idx,
                groups: this.groups.map(function (group) { return group.scheme; }),
                width: this.width,
                height: this.height,
            };
        },
        enumerable: false,
        configurable: true
    });
    return Column;
}());
export { Column };
//# sourceMappingURL=column.js.map