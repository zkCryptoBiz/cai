import { __assign } from "tslib";
/* eslint-disable prettier/prettier */
import { Item } from './item.js';
var GROUP_TYPES_BY_RATIOS_V = {
    lll: '1,2h',
    llp: '1,3r',
    lpl: '1,2h',
    pll: '1,2h,3l',
    lpp: '1,2h,3r,3h',
    plp: '1,2h,3l,3r,3h',
    ppl: '1,2h,3l,3h',
    ppp: '1,2h,3l,3r,3h',
};
var GROUP_TYPES_BY_RATIOS_H = {
    lll: '1,2v,3t,3b,3v',
    llp: '1,2v,3t,3v',
    lpl: '1,2v,3t,3b,3v',
    pll: '1,2v,3b,3v',
    lpp: '1,2v,3t',
    plp: '1,2v',
    ppl: '1,3b',
    ppp: '1,2h',
};
var GROUP_SIZES_BY_MAX_SIZE = {
    1: [[1]],
    2: [[1], [1, 2], [2]],
    3: [[1], [1, 2], [1, 2, 3], [2, 3], [3]],
};
var Group = /** @class */ (function () {
    function Group(config) {
        var _this = this;
        this.idx = config.idx;
        this.stripIdx = config.stripIdx;
        this.inStripIdx = config.inStripIdx;
        this.top = config.top;
        this.showAllItems = config.showAllItems;
        this.isLastItems = config.isLastItems;
        this.dummyItems = [];
        this.targetItemSize = config.targetItemSize;
        this.items = config.items.map(function (item) {
            item.Group = _this;
            return item;
        });
        if (config.styleParams) {
            var styleParams = config.styleParams;
            this.scrollDirection = styleParams.scrollDirection;
            this.cubeType = styleParams.cubeType;
            this.cubeImages = styleParams.cubeImages;
            this.isVertical = styleParams.isVertical;
            this.minItemSize = styleParams.minItemSize;
            this.collageAmount = styleParams.collageAmount;
            this.collageDensity = styleParams.collageDensity;
            this.groupTypes = String(styleParams.groupTypes);
            this.repeatingGroupTypes = String(styleParams.layoutParams.repeatingGroupTypes);
            this.rotatingCropRatios = String(styleParams.rotatingCropRatios);
            this.chooseBestGroup = styleParams.chooseBestGroup;
            this.externalInfoHeight = styleParams.externalInfoHeight;
            this.externalInfoWidth = styleParams.externalInfoWidth;
            this.imageMargin = styleParams.imageMargin;
            this.groupSize = styleParams.groupSize;
        }
        this.visible = true;
        this.rendered = true;
        this.required = true;
        //prepare the group
        var forcedGroupSize = this.items.length;
        //todo - check if minItem size is really working
        while (!this.isWithinMinItemSize && forcedGroupSize > 0) {
            this.placeItems(forcedGroupSize);
            this.resize();
            forcedGroupSize--;
        }
    }
    Group.prototype.resize = function () {
        if (this.isVertical) {
            this.resizeToWidth(this.targetItemSize);
        }
        else {
            this.resizeToHeight(this.targetItemSize);
        }
        this.setLeft(this.left);
        this.setTop(this.top);
    };
    Group.prototype.safeGetItem = function (idx) {
        if (this.items[idx]) {
            return this.items[idx];
        }
        else if (this.dummyItems[idx]) {
            return this.dummyItems[idx];
        }
        else {
            // dummy created from the last item config
            var item = new Item(__assign({}, this.items[this.items.length - 1].config));
            // const item = {...(this.items[this.items.length - 1])};
            // item.id += 'dummy';
            // item.idx given to dummy items starting from the last item
            // item.config.idx = last item index (all gallery items, not group items)
            // idx = in group item index
            // this.items = the group's items
            item.idx = item.config.idx + idx - (this.items.length - 1);
            item.type = 'dummy';
            this.dummyItems[idx] = item;
            return item;
        }
    };
    Group.prototype.setCubedHeight = function (height) {
        var shouldUseFixedHeight = this.cubeImages &&
            this.groupSize === 1 &&
            ['fill', 'fit'].includes(this.cubeType) &&
            this.repeatingGroupTypes.length === 0 &&
            this.rotatingCropRatios.length === 0;
        this.cubedHeight = shouldUseFixedHeight ? height : null;
    };
    Group.prototype.round = function () {
        //round all sizes to full pixels
        if (this.isLastGroup && this.scrollDirection === 0) {
            this.width = this.stripWidth - this.left;
        }
        else {
            this.width = Math.round(this.width);
        }
        this.height = Math.round(this.height);
        for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
            var item = _a[_i];
            item.width = Math.round(item.width);
            item.height = Math.round(item.height);
            item.group = {
                width: this.width,
                height: this.height,
            };
        }
        var m = this.imageMargin;
        switch (this.type) {
            default:
            case '1':
                this.safeGetItem(0).width = this.width - m;
                this.safeGetItem(0).height = this.height - m;
                break;
            case '2v':
                this.safeGetItem(0).width = this.safeGetItem(1).width = this.width - m;
                this.safeGetItem(0).height =
                    this.height - this.safeGetItem(1).height - 2 * m;
                break;
            case '2h':
                this.safeGetItem(0).height = this.safeGetItem(1).height =
                    this.height - m;
                this.safeGetItem(0).width =
                    this.width - this.safeGetItem(1).width - 2 * m;
                break;
            case '3t':
                this.safeGetItem(0).width = this.width - m;
                this.safeGetItem(0).height =
                    this.height - this.safeGetItem(1).height - 2 * m;
                this.safeGetItem(1).width =
                    this.width - this.safeGetItem(2).width - 2 * m;
                this.safeGetItem(2).height = this.safeGetItem(1).height;
                break;
            case '3b':
                this.safeGetItem(0).width =
                    this.width - this.safeGetItem(1).width - 2 * m;
                this.safeGetItem(1).height = this.safeGetItem(0).height;
                this.safeGetItem(2).height =
                    this.height - this.safeGetItem(1).height - 2 * m;
                this.safeGetItem(2).width = this.width - m;
                break;
            case '3l':
                this.safeGetItem(1).height =
                    this.height - this.safeGetItem(2).height - 2 * m;
                this.safeGetItem(2).width = this.safeGetItem(1).width;
                this.safeGetItem(0).width =
                    this.width - this.safeGetItem(1).width - 2 * m;
                this.safeGetItem(0).height = this.height - m;
                break;
            case '3r':
                this.safeGetItem(0).height =
                    this.height - this.safeGetItem(1).height - 2 * m;
                this.safeGetItem(1).width = this.safeGetItem(0).width;
                this.safeGetItem(2).width =
                    this.width - this.safeGetItem(1).width - 2 * m;
                this.safeGetItem(2).height = this.height - m;
                break;
            case '3v':
                this.safeGetItem(0).width = this.width - m;
                this.safeGetItem(1).width = this.width - m;
                this.safeGetItem(2).width = this.width - m;
                this.safeGetItem(2).height =
                    this.height -
                        this.safeGetItem(0).height -
                        this.safeGetItem(1).height -
                        3 * m;
                break;
            case '3h':
                this.safeGetItem(0).height = this.height - m;
                this.safeGetItem(1).height = this.height - m;
                this.safeGetItem(2).height = this.height - m;
                this.safeGetItem(2).width =
                    this.width -
                        this.safeGetItem(0).width -
                        this.safeGetItem(1).width -
                        3 * m;
                break;
        }
    };
    Group.prototype.getGroupType = function (forcedGroupSize) {
        //---------| Override with specifically defined rotating group types (ignores everything else)
        if (this.repeatingGroupTypes) {
            var groupTypesArr = String(this.repeatingGroupTypes).split(',');
            return groupTypesArr[this.idx % groupTypesArr.length];
            // } else if (this.isLastItems) {
            //   return this.groupTypes.split(',')[0] || '1';
        }
        else {
            //isVertical - is the gallery vertical (pinterest style) or horizontal (flickr style)
            //---------| Find the best groupType for each ratios case
            //optional types:
            //  1   => single photo
            //  2v  => 2 photos one above the other
            //  2h  => 2 photos one alongside the other
            //  3b  => 3 photos - one large at the bottom and two small on top, one alongside the other
            //  3t  => 3 photos - one large on top and two small at the bottom, one alongside the other
            //  3l  => 3 photos - one large on the left and two small on the right, one above the other
            //  3r  => 3 photos - one large on the right and two small on the left, one above the other
            //define optional ratios for each type:
            //  1   => all
            //  2v  => lll,llp,ppp     (horizontal only)
            //  2h  => ppp,ppl,lll     (vertical only)
            //  3b  => lll,lpl,pll,ppl (horizontal only)
            //  3t  => lll,lpl,llp,lpp (horizontal only)
            //  3l  => ppp,plp,ppl,pll (vertical only)
            //  3r  => ppp,plp,lpp,llp (vertical only)
            var isV = this.isVertical;
            var optionalTypes = //optional groupTypes (separated by ,). 1 is always optional
             void 0; //optional groupTypes (separated by ,). 1 is always optional
            if (this.chooseBestGroup) {
                //map the group to l=landscape and p=portrait
                //create a string to state the images group's type
                var ratios = this.items
                    .map(function (item) { return item.orientation.slice(0, 1); })
                    .join('');
                optionalTypes = (isV ? GROUP_TYPES_BY_RATIOS_V : GROUP_TYPES_BY_RATIOS_H)[ratios];
            }
            else if (this.items.length === 3 || forcedGroupSize === 3) {
                optionalTypes = isV ? '1,2h,3l,3r,3h' : '1,2v,3t,3b,3v';
            }
            if (this.items.length === 2 || forcedGroupSize === 2) {
                optionalTypes = isV ? '1,2h' : '1,2v';
            }
            if (this.items.length === 1 || forcedGroupSize === 1) {
                optionalTypes = '1';
            }
            var groupTypes = optionalTypes.length > 0 ? optionalTypes.split(',') : [];
            //---------| Override with specifically defined group types
            if (this.groupTypes) {
                // let groupTypesArr = union(['1'], this.groupTypes.split(','));
                var groupTypesArr_1 = this.groupTypes.split(',');
                if (groupTypesArr_1.length > 1) {
                    groupTypes = groupTypes.filter(function (gt) { return groupTypesArr_1.indexOf(gt) >= 0; });
                    if (groupTypes.length === 0) {
                        //there is no match between required group types and the optional ones - use
                        groupTypes = ['1'];
                    }
                }
                else {
                    groupTypes = groupTypesArr_1;
                }
            }
            //---------| Calc collage density
            if (this.collageDensity >= 0) {
                //th new calculation of the collage amount
                var collageDensity = this.collageDensity;
                //use the collage amount to determine the optional groupsize
                var maxGroupType = parseInt(groupTypes[groupTypes.length - 1]);
                var optionalGroupSizes = GROUP_SIZES_BY_MAX_SIZE[maxGroupType];
                var targetGroupSizes_1 = optionalGroupSizes[Math.floor(collageDensity * (optionalGroupSizes.length - 1))];
                // seed += ((collageDensity * 1.5) - 0.75) * numOfOptions;
                groupTypes = groupTypes.filter(function (groupType) { return targetGroupSizes_1.indexOf(parseInt(groupType)) >= 0; });
                if (groupTypes.length === 0) {
                    groupTypes = ['1'];
                }
            }
            var seed = this.calculateRandomSeed(groupTypes.length);
            //---------| Final group type to render according to:
            // - the number of options
            // - the collageAmount (if 0 - always renders 1 image, if 1 always renders the max amount)
            // - random seed (determined by the hash)
            return groupTypes[seed] || '1';
        }
    };
    Group.prototype.calculateRandomSeed = function (numOfOptions) {
        var seed;
        if (this.isVertical) {
            //vertical galleries random is not relevant (previous group is in another column)
            seed = this.items[0].seed % numOfOptions;
        }
        else {
            seed = (this.inStripIdx + this.stripIdx) % numOfOptions;
        }
        return Math.round(Math.min(Math.max(0, seed), numOfOptions - 1));
    };
    Group.prototype.placeItems = function (forcedGroupSize) {
        this.type = this.getGroupType(forcedGroupSize);
        //---------| Render the images by the groupType
        var items = [];
        var item;
        var w = 0;
        var h = 0;
        switch (this.type) {
            default:
            case '1':
                item = this.safeGetItem(0);
                item.pinToCorner('top-left');
                items.push(item);
                w = item.width;
                h = item.height;
                break;
            case '2v':
                item = this.safeGetItem(0);
                item.pinToCorner('top-left');
                items.push(item);
                w = item.width;
                h = item.height;
                item = this.safeGetItem(1);
                item.pinToCorner('bottom-left');
                item.resize(w / item.width);
                h += item.height;
                items.push(item);
                break;
            case '2h':
                item = this.safeGetItem(0);
                item.pinToCorner('top-left');
                item.innerOffset = [0, 0];
                items.push(item);
                w = item.width;
                h = item.height;
                item = this.safeGetItem(1);
                item.pinToCorner('top-right');
                item.innerOffset = [0, 0];
                item.resize(h / item.height);
                w += item.width;
                items.push(item);
                break;
            case '3b':
                item = this.safeGetItem(0);
                item.pinToCorner('top-left');
                items.push(item);
                w = item.width;
                h = item.height;
                item = this.safeGetItem(1);
                item.pinToCorner('top-right');
                item.resize(h / item.height);
                w += item.width;
                items.push(item);
                item = this.safeGetItem(2);
                item.pinToCorner('bottom-left');
                item.resize(w / item.width);
                h += item.height;
                items.push(item);
                break;
            case '3t':
                item = this.safeGetItem(1);
                item.pinToCorner('bottom-left');
                items.push(item);
                w = item.width;
                h = item.height;
                item = this.safeGetItem(2);
                item.pinToCorner('bottom-right');
                item.resize(h / item.height);
                w += item.width;
                items.push(item);
                item = this.safeGetItem(0);
                item.pinToCorner('top-left');
                item.resize(w / item.width);
                h += item.height;
                items = [item].concat(items);
                break;
            case '3r':
                item = this.safeGetItem(0);
                item.pinToCorner('top-left');
                items.push(item);
                w = item.width;
                h = item.height;
                item = this.safeGetItem(1);
                item.pinToCorner('bottom-left');
                item.resize(w / item.width);
                h += item.height;
                items.push(item);
                item = this.safeGetItem(2);
                item.pinToCorner('top-right');
                item.resize(h / item.height);
                w += item.width;
                items.push(item);
                break;
            case '3l':
                item = this.safeGetItem(1);
                item.pinToCorner('top-right');
                items.push(item);
                w = item.width;
                h = item.height;
                item = this.safeGetItem(2);
                item.pinToCorner('bottom-right');
                item.resize(w / item.width);
                h += item.height;
                items.push(item);
                item = this.safeGetItem(0);
                item.pinToCorner('top-left');
                item.resize(h / item.height);
                w += item.width;
                items = [item].concat(items);
                break;
            case '3v':
                item = this.safeGetItem(0);
                item.pinToCorner('top-left');
                item.setPosition('relative');
                items.push(item);
                w = item.width;
                h = item.height;
                item = this.safeGetItem(2);
                item.pinToCorner('bottom-left');
                item.setPosition('relative');
                item.resize(w / item.width);
                h += item.height;
                items.push(item);
                //the middle item must be last to position it in the middle (h must be full height)
                item = this.safeGetItem(1);
                item.setPosition('relative');
                item.resize(w / item.width);
                h += item.height;
                item.pinToCorner('top', items[0]);
                items = [items[0], item, items[1]];
                break;
            case '3h':
                item = this.safeGetItem(0);
                item.pinToCorner('top-left');
                item.setPosition('relative');
                items.push(item);
                w = item.width;
                h = item.height;
                item = this.safeGetItem(2);
                item.pinToCorner('top-right');
                item.setPosition('relative');
                item.resize(h / item.height);
                w += item.width;
                items.push(item);
                //the middle item must be last to position it in the middle (w must be full width)
                item = this.safeGetItem(1);
                item.setPosition('relative');
                item.resize(h / item.height);
                w += item.width;
                item.pinToCorner('left', items[0]);
                items = [items[0], item, items[1]];
                break;
        }
        this.width = w;
        this.height = h;
        this.items = items;
        this.placed = true;
    };
    Group.prototype.resizeToHeight = function (height) {
        this.height = height;
        this.width = this.getWidthByHeight(height);
        this.resizeItems();
    };
    Group.prototype.resizeToWidth = function (width) {
        this.width = width;
        this.height = this.getHeightByWidth(width);
        this.resizeItems();
    };
    Group.prototype.resizeItems = function () {
        var _this = this;
        var items = ['3b', '3r'].indexOf(this.type) >= 0
            ? this.items.slice().reverse()
            : this.items;
        items.forEach(function (item, i) {
            item.resize(_this.getItemDimensions(items, i));
            item.group = {
                top: _this.top,
                left: _this.left,
                width: _this.width,
                height: _this.height,
            };
            item.groupOffset = {
                bottom: _this.top + _this.height,
                right: _this.left + _this.width,
            };
        });
    };
    Group.prototype.getItemDimensions = function (items, idx) {
        var m = this.imageMargin;
        switch (this.type) {
            default:
            case '1':
            case '2v':
            case '3v': {
                var w = this.width - m;
                return {
                    width: w,
                };
            }
            case '2h':
            case '3h': {
                var h = this.height - m;
                return {
                    height: h,
                };
            }
            case '3t':
            case '3b':
                if (idx === 0) {
                    var w = this.width - m;
                    return {
                        width: w,
                    };
                }
                else {
                    var h = this.height - items[0].height - 2 * m;
                    return {
                        height: h,
                    };
                }
            case '3r':
            case '3l':
                if (idx === 0) {
                    var h = this.height - m;
                    return {
                        height: h,
                    };
                }
                else {
                    var w = this.width - items[0].width - 2 * m;
                    return {
                        width: w,
                    };
                }
        }
    };
    Group.prototype.getHeightByWidth = function (W) {
        var Rg = 1;
        var Rm = 1;
        var M = this.imageMargin;
        var R = this.items.map(function (item) { return item.width / item.height; });
        switch (this.type) {
            // ---------------------------------
            // GENERAL FORMULA:
            // ---------------------------------
            // Rg = Group ratio [layout specific calculation]
            // M = margin space between items ( = margin around item * 2)
            // Rm = Margin ratio [layout specific calculation]
            // ---------------------------------
            // | H = W * R + M * Rm |
            // ---------------------------------
            //    const H = W * Rg + M * (Vi - Hi * Rg);
            default:
            case '1':
                Rg = 1 / R[0];
                Rm = 1 - Rg;
                break;
            case '2h':
                Rg = 1 / (R[0] + R[1]);
                Rm = 1 - 2 * Rg;
                break;
            case '2v':
                Rg = 1 / R[0] + 1 / R[1];
                Rm = 2 - Rg;
                break;
            case '3h':
                Rg = 1 / (R[0] + R[1] + R[2]);
                Rm = 1 - 3 * Rg;
                break;
            case '3v':
                Rg = 1 / R[0] + 1 / R[1] + 1 / R[2];
                Rm = 3 - Rg;
                break;
            case '3t':
                Rg = 1 / (R[2] + R[1]) + 1 / R[0];
                Rm = 2 - 2 / (R[2] + R[1]) + 1 / R[0];
                break;
            case '3b':
                Rg = 1 / (R[0] + R[1]) + 1 / R[2];
                Rm = 2 - 2 / (R[0] + R[1]) + 1 / R[2];
                break;
            case '3l':
                Rg = (R[1] + R[2]) / (R[0] * R[1] + R[1] * R[2] + R[0] * R[2]);
                Rm = 2 - Rg * (2 + R[0]);
                break;
            case '3r':
                Rg = (R[0] + R[1]) / (R[0] * R[1] + R[1] * R[2] + R[0] * R[2]);
                Rm = 2 - Rg * (2 + R[2]);
                break;
        }
        var H = W * Rg + M * Rm;
        return H;
    };
    Group.prototype.getWidthByHeight = function (H) {
        var Rg = 1;
        var Rm = 1;
        var M = this.imageMargin;
        var R = this.items.map(function (item) { return item.width / item.height; });
        switch (this.type) {
            // ---------------------------------
            // GENERAL FORMULA:
            // ---------------------------------
            // Rh = Group ratio [layout specific calculation]
            // M = margin space between items ( = margin around item * 2)
            // Rm = Margin ratio [layout specific calculation]
            // ---------------------------------
            // | W = H * Rg + M * Rm |
            // ---------------------------------
            default:
            case '1':
                Rg = R[0];
                Rm = 1 - Rg;
                break;
            case '2h':
                Rg = R[0] + R[1];
                Rm = 2 - Rg;
                break;
            case '2v':
                Rg = 1 / (1 / R[0] + 1 / R[1]);
                Rm = 1 - 2 * Rg;
                break;
            case '3h':
                Rg = R[0] + R[1] + R[2];
                Rm = 3 - Rg;
                break;
            case '3v':
                Rg = 1 / (1 / R[0] + 1 / R[1] + 1 / R[2]);
                Rm = 1 - 3 * Rg;
                break;
            case '3t':
                Rg = 1 / (1 / (R[2] + R[1]) + 1 / R[0]);
                Rm = (2 / (R[2] + R[1]) + 1 / R[0] - 2) * Rg;
                break;
            case '3b':
                Rg = 1 / (1 / (R[0] + R[1]) + 1 / R[2]);
                Rm = (2 / (R[0] + R[1]) + 1 / R[2] - 2) * Rg;
                break;
            case '3l':
                Rg = (R[0] * R[1] + R[1] * R[2] + R[0] * R[2]) / (R[1] + R[2]);
                Rm = 2 + R[0] - 2 * Rg;
                break;
            case '3r':
                Rg = (R[0] * R[1] + R[1] * R[2] + R[0] * R[2]) / (R[0] + R[1]);
                Rm = 2 + R[2] - 2 * Rg;
                break;
        }
        var W = H * Rg + M * Rm;
        return W;
    };
    Group.prototype.setTop = function (top) {
        this.top = top || 0;
        for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
            var item = _a[_i];
            item.groupOffset = {
                top: top,
                bottom: top + this.height,
            };
        }
    };
    Group.prototype.setLeft = function (left) {
        this.left = left || 0;
        for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
            var item = _a[_i];
            item.groupOffset = {
                left: left,
                right: left + this.width,
            };
        }
    };
    Object.defineProperty(Group.prototype, "id", {
        get: function () {
            return 'g' + this.idx + '_' + (this.items[0] || {}).id;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Group.prototype, "ratio", {
        get: function () {
            var w = this.width;
            var h = this.height;
            return w / h;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Group.prototype, "height", {
        get: function () {
            return this.cubedHeight || this._height;
        },
        set: function (h) {
            this._height = h;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Group.prototype, "totalHeight", {
        get: function () {
            return this.height + this.infoHeight;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Group.prototype, "infoHeight", {
        get: function () {
            return this.externalInfoHeight || 0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Group.prototype, "infoWidth", {
        get: function () {
            return this.Column ? this.Column.infoWidth : this.externalInfoWidth || 0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Group.prototype, "bottom", {
        get: function () {
            return this.top + this.height;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Group.prototype, "right", {
        get: function () {
            return this.left + this.width;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Group.prototype, "items", {
        get: function () {
            return this._items;
        },
        set: function (items) {
            this._items = items;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Group.prototype, "realItems", {
        get: function () {
            return this._items.filter(function (item) { return item.type !== 'dummy'; });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Group.prototype, "isWithinMinItemSize", {
        get: function () {
            var _this = this;
            if (this.items.length === 0 || !this.placed) {
                return false;
            }
            if (this.items.length === 1) {
                return true;
            }
            else {
                return this.items.reduce(function (i, item) {
                    var isInSize = Math.min(item.width, item.height) >= _this.minItemSize;
                    return i && isInSize;
                }, true);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Group.prototype, "scheme", {
        get: function () {
            return {
                id: this.id,
                idx: this.idx,
                stripIdx: this.stripIdx,
                inStripIdx: this.inStripIdx,
                isLastGroup: this.isLastGroup,
                items: this.items.map(function (item) { return item.scheme; }),
                type: this.type,
                width: this.width,
                height: this.height,
                infoHeight: this.infoHeight,
                infoWidth: this.infoWidth,
                ratio: this.ratio,
                top: this.top,
                left: this.left,
                right: this.right,
                bottom: this.bottom,
                visible: this.visible,
                rendered: this.rendered,
                required: this.required,
            };
        },
        enumerable: false,
        configurable: true
    });
    return Group;
}());
export { Group };
/* eslint-enable prettier/prettier */
//# sourceMappingURL=group.js.map