var Strip = /** @class */ (function () {
    function Strip(config) {
        this.ratio = 0;
        this.groups = [];
        this.width = 0;
        this.height = 0;
        this.isFullWidth = true;
        this.idx = config.idx;
        this.groupsPerStrip = config.groupsPerStrip;
        this.scrollDirection = config.scrollDirection;
        this.targetItemSize = config.targetItemSize;
        this.container = config.container;
    }
    Strip.prototype.addGroup = function (group) {
        if (this.hasGroups) {
            this.lastGroup.isLastGroup = false;
        }
        this.groups.push(group);
        group.stripIdx = this.idx;
        group.Strip = this;
        this.lastGroup.isLastGroup = true;
        this.lastGroup.stripWidth = this.height * this.ratio;
    };
    Strip.prototype.markAsIncomplete = function () {
        //prevent from the last group to be streched
        this.isFullWidth = false;
        this.lastGroup.isLastGroup = false;
    };
    Strip.prototype.canRemainIncomplete = function () {
        if (this.groupsPerStrip > 0) {
            return false;
        }
        else {
            return this.targetItemSize * 1.5 < this.height;
        }
    };
    Strip.prototype.setWidth = function (width) {
        this.width = width;
        if (this.hasGroups) {
            this.lastGroup.stripWidth = width;
        }
    };
    Strip.prototype.resizeToHeight = function (height) {
        this.height = height;
        var left = 0;
        var remainder = 0;
        for (var _i = 0, _a = this.groups; _i < _a.length; _i++) {
            var group = _a[_i];
            group.setLeft(left);
            // group.left = (left);
            group.width += remainder; //add the remainder from the last group round
            group.resizeToHeight(height);
            remainder = group.width;
            group.round();
            remainder -= group.width;
            left += group.width;
        }
    };
    Strip.prototype.isFull = function (newGroup, isLastImage) {
        if (!this.hasGroups) {
            return false;
        }
        var _a = this, groupsPerStrip = _a.groupsPerStrip, scrollDirection = _a.scrollDirection, targetItemSize = _a.targetItemSize;
        if (groupsPerStrip > 0) {
            return this.groups.length >= groupsPerStrip;
        }
        var galleryWidth = this.container.galleryWidth;
        var isStripSmallEnough;
        if (scrollDirection === 1) {
            isStripSmallEnough = false; //horizontal layout is one long strip
        }
        else {
            var withNewGroup = galleryWidth / (this.ratio + newGroup.ratio) - targetItemSize; //start a new strip BEFORE adding the current group
            var withoutNewGroup = galleryWidth / this.ratio - targetItemSize; //start a new strip AFTER adding the current group
            if (isNaN(withNewGroup) || isNaN(withoutNewGroup)) {
                isStripSmallEnough = false;
            }
            else if (withoutNewGroup < 0) {
                //the strip is already too small
                isStripSmallEnough = true;
            }
            else if (withNewGroup < 0) {
                //adding the new group makes is small enough
                // check if adding the new group makes the strip TOO small
                //so - without the new group, the strip is larger than the required size - but adding the new group might make it too small
                isStripSmallEnough = Math.abs(withoutNewGroup) < Math.abs(withNewGroup);
            }
            else {
                isStripSmallEnough = false;
            }
            if (isStripSmallEnough && isLastImage) {
                //if it is the last image - prefer adding it to the last strip rather putting it on a new strip
                isStripSmallEnough =
                    Number(Math.abs(withoutNewGroup)) < Math.abs(withNewGroup);
            }
        }
        return isStripSmallEnough;
    };
    Object.defineProperty(Strip.prototype, "hasGroups", {
        get: function () {
            return this.groups.length > 0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Strip.prototype, "lastGroup", {
        get: function () {
            return this.groups[this.groups.length - 1];
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Strip.prototype, "scheme", {
        get: function () {
            return {
                idx: this.idx,
                groups: this.groups.map(function (group) { return group.scheme; }),
                width: this.width,
                height: this.height,
                ratio: this.ratio,
                isFullWidth: this.isFullWidth,
            };
        },
        enumerable: false,
        configurable: true
    });
    return Strip;
}());
export { Strip };
//# sourceMappingURL=strip.js.map