import { __assign } from "tslib";
import GalleryItem from './galleryItem';
import GalleryGroup from './galleryGroup';
import { utils } from 'pro-gallery-lib';
var ItemsHelper = /** @class */ (function () {
    function ItemsHelper() {
    }
    ItemsHelper.convertDtoToLayoutItem = function (dto) {
        var isLayoutItem = !!(dto.id && dto.width > 0 && dto.height > 0);
        if (isLayoutItem) {
            return dto;
        }
        else {
            var dtoMetadata = dto.metadata || dto.metaData;
            var metadata = typeof dtoMetadata === 'object'
                ? dtoMetadata
                : utils.parseStringObject(dtoMetadata) || {};
            return __assign({ id: dto.itemId || dto.photoId, width: metadata.width, height: metadata.height }, dto);
        }
    };
    ItemsHelper.convertToGalleryItems = function (galleryStructure, itemConfig, existingItems) {
        if (itemConfig === void 0) { itemConfig = {}; }
        if (existingItems === void 0) { existingItems = []; }
        galleryStructure.galleryItems = [];
        for (var c = 0; c < galleryStructure.columns.length; c++) {
            var column = galleryStructure.columns[c];
            column.galleryGroups = [];
            var groups = column.groups || column;
            for (var g = 0; g < groups.length; g++) {
                var group = groups[g];
                var groupItems = [];
                for (var i = 0; i < group.items.length; i++) {
                    var item = group.items[i];
                    var _itemConfig = __assign({ scheme: item, dto: item.dto }, itemConfig);
                    var existingItem = existingItems[item.idx];
                    var newItem = void 0;
                    if (existingItem && existingItem.id && existingItem.id === item.id) {
                        newItem = existingItem;
                        newItem.update(_itemConfig);
                    }
                    else {
                        newItem = new GalleryItem(_itemConfig);
                    }
                    groupItems[i] = newItem;
                    galleryStructure.galleryItems[item.idx] = groupItems[i];
                }
                column.galleryGroups[g] = new GalleryGroup({
                    scheme: group,
                    dto: group.dto,
                    items: groupItems,
                });
            }
        }
        return galleryStructure;
    };
    ItemsHelper.convertExistingStructureToGalleryItems = function (existingStructure, galleryStructure, itemConfig) {
        if (itemConfig === void 0) { itemConfig = {}; }
        // console.log('convertToGalleryItems', existingStructure.galleryItems);
        // console.count('convertToGalleryItems');
        if (utils.isVerbose()) {
            console.time('convertToGalleryItems');
        }
        if (!existingStructure.galleryItems) {
            existingStructure.galleryItems = [];
        }
        // remove last group so it will be rebuilt in case of dummy item
        var lastColumn = existingStructure.columns.slice(-1)[0];
        var lastGroup = lastColumn.galleryGroups.pop();
        lastGroup && existingStructure.galleryItems.splice(-lastGroup.items.length);
        for (var c = 0; c < galleryStructure.columns.length; c++) {
            var column = galleryStructure.columns[c];
            var existingColumn = existingStructure.columns[c] || column;
            if (!existingColumn.galleryGroups) {
                existingColumn.galleryGroups = [];
            }
            var groups = column.groups || column;
            for (var g = 0; g < groups.length; g++) {
                var group = groups[g];
                var groupItems = [];
                for (var i = 0; i < group.items.length; i++) {
                    var item = group.items[i];
                    if (!existingStructure.galleryItems[item.idx]) {
                        // console.count(`convertToGalleryItems - item [${item.idx}]`);
                        groupItems[i] = new GalleryItem(Object.assign({
                            scheme: item,
                            dto: item.dto,
                        }, itemConfig));
                        existingStructure.galleryItems[item.idx] = groupItems[i];
                    }
                    else {
                        existingStructure.galleryItems[item.idx].processScheme(item);
                    }
                }
                if (!existingColumn.galleryGroups[g]) {
                    // console.count(`convertToGalleryItems - group [${g}]`);
                    existingColumn.galleryGroups[g] = new GalleryGroup({
                        scheme: group,
                        dto: group.dto,
                        items: groupItems,
                    });
                }
                else {
                    existingColumn.galleryGroups[g].processScheme(group);
                }
            }
            column.galleryGroups = existingColumn.galleryGroups;
        }
        galleryStructure.galleryItems = existingStructure.galleryItems;
        if (utils.isVerbose()) {
            console.timeEnd('convertToGalleryItems');
        }
        return galleryStructure;
    };
    return ItemsHelper;
}());
export { ItemsHelper };
//# sourceMappingURL=itemsHelper.js.map