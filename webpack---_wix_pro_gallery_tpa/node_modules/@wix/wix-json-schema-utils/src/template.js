/**
 * extract property data from definitionData
 * used for base/custom definitions data extraction for creating property extending the definitionData
 * @param (definitionData) definitionData to create data by
 * @returns {[{$ref: string},{title: string, description: string, ,default: *}]}
 */
const getPropertyData = (definitionData) => {
  const { $id, title, description, default: defaultValues } = definitionData;
  return [
    { $ref: `${$id}` },
    {
      title,
      description,
      default: defaultValues,
    },
  ];
};

/**
 * wrap definitionData in array structure
 * use getPropertyData to extract the data for the array items
 * @param (definitionData) definitionData to create data by
 * @returns {[{$ref: string},{title: string, description: string, ,default: *}]}
 */
const getPropertyArrayData = (definitionData) => [
  {
    type: 'array',
    title: '',
    description: '',
    default: [],
    items: {
      allOf: getPropertyData(definitionData),
    },
  },
];

/**
 * create empty property (with default values) that extends given definitionData
 * @param (name) string name of property to create
 * @param (definitionData) object definitionData to extend
 * @param (isArray) boolean whether to create array structure or single item structure
 * @returns {[name]: unresolved property schema}
 */
const createPropertyTemplate = (definitionData, isArray = false) => ({
  allOf: isArray
    ? getPropertyArrayData(definitionData)
    : getPropertyData(definitionData),
});

module.exports = {
  createPropertyTemplate,
};
