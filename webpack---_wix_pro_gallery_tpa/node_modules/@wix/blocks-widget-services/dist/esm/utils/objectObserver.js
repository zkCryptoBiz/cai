import { isObjectLike, isFunction, get, set } from 'lodash';
function isPojo(obj) {
    if (!isObjectLike(obj)) {
        return false;
    }
    return Object.getPrototypeOf(obj) === Object.prototype;
}
const clone = (obj) => JSON.parse(JSON.stringify(obj));
export function pushObservedObject(targetObject, objectToWatch, initialProps, onPropsChanged, shouldAddInternalApi) {
    const observersCache = {};
    function definePropertiesOnTarget(target, objectRoot, props, path = []) {
        props =
            props ||
                Object.getOwnPropertyNames(objectRoot).filter((prop) => !isFunction(objectRoot[prop]));
        for (const propName of props) {
            defineProperty(target, propName, path);
        }
        return target;
    }
    function getObserver(obj, path) {
        const propPathName = path.join('/');
        if (observersCache[propPathName]) {
            return observersCache[propPathName];
        }
        const newObserver = definePropertiesOnTarget({}, obj, null, path);
        observersCache[propPathName] = newObserver;
        return newObserver;
    }
    function defineProperty(target, propName, path) {
        Object.defineProperty(target, propName, {
            configurable: false,
            enumerable: true,
            get() {
                const propPath = path.concat(propName);
                let propValue = get(objectToWatch, propPath);
                if (isPojo(propValue)) {
                    propValue = getObserver(propValue, propPath);
                }
                return propValue;
            },
            set(newValue) {
                const propPath = path.concat(propName);
                const propPathName = propPath.join('/');
                const oldPropsClone = clone(objectToWatch);
                set(objectToWatch, propPath, newValue);
                delete observersCache[propPathName]; // eslint-disable-line @typescript-eslint/no-dynamic-delete
                const internalApi = shouldAddInternalApi
                    ? { _internalApiDoNotUse: { propName, path: propPath } }
                    : undefined;
                onPropsChanged(oldPropsClone, objectToWatch, internalApi);
            },
        });
    }
    definePropertiesOnTarget(targetObject, objectToWatch, initialProps);
}
//# sourceMappingURL=objectObserver.js.map