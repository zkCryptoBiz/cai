import { pushObservedObject } from './utils/objectObserver';
const toWidgetEventPayload = (data) => ({
    type: 'widgetEvent',
    data,
});
function createEventRegistrar() {
    const callbacksArray = [];
    return {
        register(callback) {
            callbacksArray.push(callback);
        },
        fire(oldProps, newProps, internalApi) {
            callbacksArray.forEach((cb) => cb(oldProps, newProps, internalApi));
        },
    };
}
export function createWidgetServices(widgetProps, shouldAddInternalApi = true) {
    const onPropsChangedRegistrar = createEventRegistrar();
    const widgetProperties = widgetProps;
    function generate$widget($w) {
        return {
            props: widgetProperties,
            onPropsChanged(cb) {
                onPropsChangedRegistrar.register(cb);
            },
            fireEvent(eventName, data) {
                $w.fireEvent(eventName, toWidgetEventPayload(data));
            },
        };
    }
    function generateWidgetAPI($widget, initialWidgetAPI) {
        const widgetAPI = { ...initialWidgetAPI };
        pushObservedObject(widgetAPI, $widget.props, Object.keys($widget.props), (oldProps, newProps, internalApi) => {
            onPropsChangedRegistrar.fire(oldProps, newProps, internalApi);
        }, shouldAddInternalApi);
        return widgetAPI;
    }
    function setProps($widget, newProps) {
        const oldProps = $widget.props;
        $widget.props = newProps;
        onPropsChangedRegistrar.fire(oldProps, newProps);
    }
    return {
        generate$widget,
        generateWidgetAPI,
        setProps,
    };
}
//# sourceMappingURL=widgetServices.js.map