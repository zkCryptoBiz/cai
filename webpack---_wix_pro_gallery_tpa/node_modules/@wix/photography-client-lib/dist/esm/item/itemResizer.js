import { __assign, __spreadArray } from "tslib";
/* eslint-disable no-debugger */
import window from '../sdk/windowWrapper';
import imageTokenHelper from '../store/imageTokenHelper';
import { baseUtils } from '../utils/baseUtils';
import { experimentsWrapper } from '../sdk/experimentsWrapper';
// const WIX_MEDIA_PREFIX = 'https://static.wixstatic.com/media/';
// mediaRootUrl: "https://static.wixstatic.com/"
// staticMediaUrl: "https://static.wixstatic.com/media"
// staticVideoUrl: "https://video.wixstatic.com/"
export { getResizeMediaUrl };
var getResizeMediaUrl = function (_a) {
    var _b = _a === void 0 ? {} : _a, imageToken = _b.imageToken, staticMediaUrls = _b.staticMediaUrls, useOptimizedImageFormat = _b.useOptimizedImageFormat, isPrerenderMode = _b.isPrerenderMode;
    return function (args) {
        return resize(__assign(__assign({}, args), { imageToken: imageToken, staticMediaUrls: staticMediaUrls, isPrerenderMode: isPrerenderMode, shouldUseOptimizedImageFormat: useOptimizedImageFormat !== null && useOptimizedImageFormat !== void 0 ? useOptimizedImageFormat : true }));
    };
};
var joinURL = function () {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var url = args[0];
    for (var i = 1; i < args.length; ++i) {
        url = "".concat(url.replace(/\/$/, ''), "/").concat(args[i].replace(/^\//, ''));
    }
    return url;
};
var isExternalUrl = function (url, WIX_MEDIA_PREFIX) {
    var isFullUrl = /(^https?)|(^data)|(^blob)/.test(url);
    var isWixMedia = url.indexOf(WIX_MEDIA_PREFIX) === 0;
    var isResizePrevented = url.indexOf('preventResize') > 0;
    return isFullUrl && (!isWixMedia || isResizePrevented);
};
var isPosterImage = function (item) {
    if (item && item.dto && item.dto.metaData) {
        var type = item.dto.metaData.type;
        var poster = item.poster;
        if (type === 'video' && poster) {
            return true;
        }
    }
    return false;
};
var prefixUrlIfNeeded = function (originalUrl, WIX_MEDIA_PREFIX) {
    if (isExternalUrl(originalUrl, WIX_MEDIA_PREFIX)) {
        return originalUrl;
    }
    else {
        return joinURL(WIX_MEDIA_PREFIX, originalUrl);
    }
};
var removeResizeParams = function (originalUrl, WIX_MEDIA_PREFIX) {
    var isResizePrevented = originalUrl.indexOf('preventResize') >= 0;
    if (isResizePrevented)
        return originalUrl;
    originalUrl = originalUrl.replace(WIX_MEDIA_PREFIX, '');
    var resizingParamerterRegex = /(\/v\d\/(fill|fit|crop)\/(((w|h|x|y|scl|al|q)_[cf\d]*)\,?)*){1,}/;
    var resizingParametersPosition = resizingParamerterRegex.exec(originalUrl);
    if (resizingParametersPosition && resizingParametersPosition.index > 0) {
        return originalUrl.substr(0, resizingParametersPosition.index);
    }
    else {
        return originalUrl;
    }
};
var shouldProccessPrerenderImageForPerformance = function (isPrerenderMode) {
    return (isPrerenderMode &&
        !experimentsWrapper.getExperimentBoolean('specs.pro-gallery.excludeFromPrerenderPerformance'));
};
var resizeWidthInStepsUp = function (requieredWidth, requiredHeight, item, resizedMethod) {
    // if the width or height is bigger than 1 pixel, we can step up the game
    if (requieredWidth > 1 || requiredHeight > 1) {
        // in steps of 480 pixels and up to item.maxWidth, find the next width bigger than the requiered
        var nextWidth = Math.min(item.maxWidth, Math.ceil(requieredWidth / 480) * 480);
        // calculate the next height based on the new width and the original ratio
        var heightRatio = requiredHeight / requieredWidth;
        if (resizedMethod === 'fit') {
            heightRatio = item.originalHeight / item.originalWidth;
        }
        var nextHeight = Math.ceil(nextWidth * heightRatio);
        // return the next width and height
        return { nextWidth: nextWidth, nextHeight: nextHeight };
    }
    else {
        // if the width and height are 1 pixel or less, return the original width and height
        return { nextWidth: requieredWidth, nextHeight: requiredHeight };
    }
};
var createResizedVideoUrl = function (_a, WIX_VIDEO_PREFIX) {
    var item = _a.item, originalUrl = _a.originalUrl, requiredHeight = _a.requiredHeight;
    var videoUrl = originalUrl;
    if (item.qualities && item.qualities.length) {
        var suffix = '/';
        var mp4Qualities = item.qualities.filter(function (video) { return video.formats[0] === 'mp4'; });
        // search for the first quality bigger that the required one
        if (mp4Qualities.length > 1 &&
            mp4Qualities[0].height > mp4Qualities[1].height) {
            // some have reversed quality order. not sure how or when this happened
            mp4Qualities.reverse();
        }
        // eslint-disable-next-line no-cond-assign
        for (var quality = void 0, q = 0; (quality = mp4Qualities[q]); q++) {
            if (quality.height >= requiredHeight || !mp4Qualities[q + 1]) {
                suffix += quality.quality; // e.g. 720p
                // eslint-disable-next-line no-cond-assign
                for (var format = void 0, i = 0; (format = quality.formats[i]); i++) {
                    videoUrl = joinURL(WIX_VIDEO_PREFIX, 'video/', item.url, suffix, format, '/file.' + format);
                }
                break;
            }
        }
        return videoUrl;
    }
};
function limtImageResToMaxRes(imageWidth, imageHeight, maxPixels) {
    if (imageWidth * imageHeight > maxPixels) {
        var imageRatio = imageHeight / imageWidth;
        var maxWidth = Math.floor(Math.sqrt(maxPixels / imageRatio));
        var maxHeight = Math.floor(maxWidth * imageRatio);
        return { maxWidth: maxWidth, maxHeight: maxHeight };
    }
    return { maxWidth: imageWidth, maxHeight: imageHeight };
}
var MAX_WIX_PIXELS_BUFFER = 177600;
export var MAX_WIX_PIXELS = 33177600 - MAX_WIX_PIXELS_BUFFER;
var createResizedImageUrl = function (_a) {
    var item = _a.item, originalUrl = _a.originalUrl, resizeMethod = _a.resizeMethod, requiredWidth = _a.requiredWidth, requiredHeight = _a.requiredHeight, sharpParams = _a.sharpParams, focalPoint = _a.focalPoint, _b = _a.useWebp, useWebp = _b === void 0 ? false : _b, _c = _a.devicePixelRatio, devicePixelRatio = _c === void 0 ? 1 : _c, WIX_MEDIA_PREFIX = _a.WIX_MEDIA_PREFIX, isPrerenderMode = _a.isPrerenderMode;
    var originalHeight = item.maxHeight;
    var originalWidth = item.maxWidth;
    if (shouldProccessPrerenderImageForPerformance(isPrerenderMode)) {
        var _d = resizeWidthInStepsUp(requiredWidth, requiredHeight, item, getResizeMediaUrl()), nextWidth = _d.nextWidth, nextHeight = _d.nextHeight;
        requiredWidth = nextWidth;
        requiredHeight = nextHeight;
    }
    var isTransparent = function () {
        return originalUrl.indexOf('.png') > 0 || originalUrl.indexOf('.gif') > 0;
    };
    var addSharpParams = function () {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        sharpParams = sharpParams || {};
        if (!sharpParams.quality) {
            sharpParams.quality = 90;
        }
        sharpParams.quality = Math.min(shouldProccessPrerenderImageForPerformance(isPrerenderMode) &&
            !experimentsWrapper.getExperimentBoolean('specs.pro-gallery.useUnchangingImageRenderer')
            ? 30
            : sharpParams.quality, sharpParams.quality);
        // don't allow quality above 90 till we have proper UI indication
        sharpParams.quality = Math.min(90, sharpParams.quality);
        if (sharpParams.allowUsm === true) {
            sharpParams.usm.usm_a = Math.min(5, Math.max(0, ((_a = sharpParams.usm) === null || _a === void 0 ? void 0 : _a.usm_a) || ((_c = (_b = sharpParams.usm) === null || _b === void 0 ? void 0 : _b.usm) === null || _c === void 0 ? void 0 : _c.a) || 0));
            sharpParams.usm.usm_r = Math.min(128, Math.max(0, ((_d = sharpParams.usm) === null || _d === void 0 ? void 0 : _d.usm_r) || ((_f = (_e = sharpParams.usm) === null || _e === void 0 ? void 0 : _e.usm) === null || _f === void 0 ? void 0 : _f.r) || 0)); // should be max 500 - but it's returning a 404
            sharpParams.usm.usm_t = Math.min(1, Math.max(0, ((_g = sharpParams.usm) === null || _g === void 0 ? void 0 : _g.usm_t) || ((_j = (_h = sharpParams.usm) === null || _h === void 0 ? void 0 : _h.usm) === null || _j === void 0 ? void 0 : _j.t) || 0));
        }
        var retUrl = '';
        retUrl += ',q_' + sharpParams.quality;
        if (sharpParams.blur && !isTransparent()) {
            // the blur looks bad in pngs
            retUrl += ',blur_' + sharpParams.blur;
        }
        retUrl +=
            sharpParams.usm && sharpParams.usm.usm_r
                ? ',usm_' +
                    sharpParams.usm.usm_r.toFixed(2) +
                    '_' +
                    sharpParams.usm.usm_a.toFixed(2) +
                    '_' +
                    sharpParams.usm.usm_t.toFixed(2)
                : '';
        return retUrl;
    };
    var addResizeParams = function () {
        if (!focalPoint || focalPoint.every(function (f) { return f === 0.5; })) {
            resizeMethod = getResizeMethod({
                resizeMethod: resizeMethod,
                isPrerenderMode: isPrerenderMode,
                requiredHeight: requiredHeight,
                requiredWidth: requiredWidth,
            });
            return "/v1/".concat(resizeMethod, "/w_").concat(requiredWidth, ",h_").concat(requiredHeight);
        }
        else {
            var fpStr = focalPoint
                .map(function (fp) { return String(Math.floor(fp * 100) / 100).slice(0, 4); })
                .join('_');
            return "/v1/fill/w_".concat(requiredWidth, ",h_").concat(requiredHeight, ",fp_").concat(fpStr);
        }
    };
    var addFilename = function () {
        return ('/' +
            (useWebp ? originalUrl.replace(/[^.]\w*$/, 'webp') : originalUrl).match(/[^/][\w.~]*$/)[0]);
    };
    var mobileScaleFix = Math.max(baseUtils.isMobile() && !baseUtils.isSSR() ? window.screen.width / 320 : 1, 1);
    requiredWidth = Math.ceil(requiredWidth * devicePixelRatio * mobileScaleFix);
    requiredHeight = Math.ceil(requiredHeight * devicePixelRatio * mobileScaleFix);
    var originalMaxPixels = originalWidth * originalHeight;
    var _e = limtImageResToMaxRes(requiredWidth, requiredHeight, originalMaxPixels < MAX_WIX_PIXELS ? originalMaxPixels : MAX_WIX_PIXELS), maxHeight = _e.maxHeight, maxWidth = _e.maxWidth;
    requiredWidth = maxWidth;
    requiredHeight = maxHeight;
    if (experimentsWrapper.getExperimentBoolean('specs.pro-gallery.useRoundedImageSizes')) {
        var SIZE_INTERVAL = 200;
        var oldRequiredWidth = requiredWidth;
        requiredWidth = Math.ceil(oldRequiredWidth / SIZE_INTERVAL) * SIZE_INTERVAL;
        requiredHeight = Math.ceil((requiredHeight * requiredWidth) / oldRequiredWidth);
    }
    var retUrl = prefixUrlIfNeeded(originalUrl, WIX_MEDIA_PREFIX);
    retUrl += addResizeParams();
    retUrl += addSharpParams();
    retUrl += addFilename();
    retUrl = imageTokenHelper.addToken(retUrl, item);
    return retUrl;
};
var getMediaType = function (originalUrl) {
    return ({
        jpg: 'jpeg',
        jpeg: 'jpeg',
        png: 'png',
        gif: 'gif',
    }[originalUrl.match(/[^\.]\w*$/)[0]] || 'jpeg');
};
var resize = function (_a) {
    var item = _a.item, originalUrl = _a.originalUrl, resizeMethod = _a.resizeMethod, requiredWidth = _a.requiredWidth, requiredHeight = _a.requiredHeight, _b = _a.sharpParams, sharpParams = _b === void 0 ? {} : _b, _c = _a.focalPoint, focalPoint = _c === void 0 ? [0.5, 0.5] : _c, _d = _a.createMultiple, createMultiple = _d === void 0 ? false : _d, _e = _a.imageToken, imageToken = _e === void 0 ? '' : _e, _f = _a.staticMediaUrls, staticMediaUrls = _f === void 0 ? {} : _f, shouldUseOptimizedImageFormat = _a.shouldUseOptimizedImageFormat, isPrerenderMode = _a.isPrerenderMode;
    if (!originalUrl)
        return;
    var WIX_MEDIA_PREFIX = (staticMediaUrls === null || staticMediaUrls === void 0 ? void 0 : staticMediaUrls.staticMediaUrl)
        ? staticMediaUrls.staticMediaUrl
        : 'https://static.wixstatic.com/media/';
    var WIX_VIDEO_PREFIX = (staticMediaUrls === null || staticMediaUrls === void 0 ? void 0 : staticMediaUrls.staticVideoUrl)
        ? staticMediaUrls.staticVideoUrl
        : 'https://video.wixstatic.com/';
    var hasImageToken = item.dto.imageToken || item.dto.token || imageToken;
    originalUrl = removeResizeParams(originalUrl, WIX_MEDIA_PREFIX);
    var params = {
        item: item,
        originalUrl: originalUrl,
        resizeMethod: resizeMethod,
        requiredWidth: requiredWidth,
        requiredHeight: requiredHeight,
        sharpParams: sharpParams,
        focalPoint: focalPoint,
        isPrerenderMode: isPrerenderMode,
    };
    if (resizeMethod === 'video') {
        return createResizedVideoUrl({
            item: item,
            originalUrl: originalUrl,
            resizeMethod: resizeMethod,
            requiredWidth: requiredWidth,
            requiredHeight: requiredHeight,
            sharpParams: sharpParams,
            focalPoint: focalPoint,
            isPrerenderMode: isPrerenderMode,
        }, WIX_VIDEO_PREFIX);
    }
    else if (isExternalUrl(originalUrl, WIX_MEDIA_PREFIX)) {
        return originalUrl;
    }
    else if (resizeMethod === 'full' && !hasImageToken) {
        return prefixUrlIfNeeded(originalUrl, WIX_MEDIA_PREFIX);
    }
    else {
        return resizeImageUrl({
            createMultiple: createMultiple,
            params: params,
            WIX_MEDIA_PREFIX: WIX_MEDIA_PREFIX,
            shouldUseOptimizedImageFormat: shouldUseOptimizedImageFormat,
            originalUrl: originalUrl,
            hasImageToken: hasImageToken,
        });
    }
};
var resizeImageUrl = function (_a) {
    var createMultiple = _a.createMultiple, params = _a.params, WIX_MEDIA_PREFIX = _a.WIX_MEDIA_PREFIX, shouldUseOptimizedImageFormat = _a.shouldUseOptimizedImageFormat, originalUrl = _a.originalUrl, hasImageToken = _a.hasImageToken;
    if (createMultiple) {
        var dpr = function (dprs, useWebp) {
            return dprs
                .map(function (dpr) {
                return createResizedImageUrl(__assign(__assign({}, params), { useWebp: useWebp, devicePixelRatio: dpr, WIX_MEDIA_PREFIX: WIX_MEDIA_PREFIX })) + " ".concat(dpr, "x");
            })
                .join(', ');
        };
        var sources = __spreadArray(__spreadArray([], (shouldUseOptimizedImageFormat
            ? [
                {
                    type: 'webp',
                    url: createResizedImageUrl(__assign(__assign({}, params), { useWebp: true, devicePixelRatio: 1, WIX_MEDIA_PREFIX: WIX_MEDIA_PREFIX })),
                    dpr: dpr([1, 2, 3, 4, 5], true),
                },
            ]
            : []), true), [
            {
                type: getMediaType(originalUrl),
                url: createResizedImageUrl(__assign(__assign({}, params), { useWebp: false, devicePixelRatio: 1, shouldUseOptimizedImageFormat: shouldUseOptimizedImageFormat, WIX_MEDIA_PREFIX: WIX_MEDIA_PREFIX })),
                dpr: dpr([1, 2, 3, 4, 5], false),
            },
        ], false);
        var url_1 = prefixUrlIfNeeded(originalUrl, WIX_MEDIA_PREFIX);
        if (!hasImageToken) {
            return __spreadArray([
                {
                    type: getMediaType(originalUrl),
                    url: url_1,
                    dpr: [1, 2, 3, 4, 5, 6, 7, 8].map(function (i) { return "".concat(url_1, " ").concat(i, "x"); }).join(', '),
                    forPrinting: true,
                }
            ], sources, true);
        }
        return sources;
    }
    else {
        return createResizedImageUrl(__assign(__assign({}, params), { WIX_MEDIA_PREFIX: WIX_MEDIA_PREFIX }));
    }
};
var shouldUseFitOnly = function (isPrerenderMode) {
    return (isPrerenderMode &&
        experimentsWrapper.getExperimentBoolean('specs.pro-gallery.blockCropOnSSR'));
};
var getResizeMethod = function (_a) {
    var resizeMethod = _a.resizeMethod, isPrerenderMode = _a.isPrerenderMode, requiredHeight = _a.requiredHeight, requiredWidth = _a.requiredWidth;
    var _resizeMethod = resizeMethod === 'fit' || shouldUseFitOnly(isPrerenderMode)
        ? 'fit'
        : 'fill';
    if (requiredHeight <= 1 && requiredWidth <= 1)
        _resizeMethod = 'fill';
    return _resizeMethod;
};
//# sourceMappingURL=itemResizer.js.map