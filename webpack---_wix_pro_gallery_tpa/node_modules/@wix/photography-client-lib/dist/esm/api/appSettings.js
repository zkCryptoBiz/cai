import { __assign, __awaiter, __generator, __rest } from "tslib";
/* eslint-disable no-debugger */
import window from '../sdk/windowWrapper';
import Consts from '../utils/consts';
var AppSettings = /** @class */ (function () {
    function AppSettings(compId, instance, viewMode, baseUrl) {
        if (compId === void 0) { compId = undefined; }
        if (instance === void 0) { instance = undefined; }
        if (viewMode === void 0) { viewMode = undefined; }
        if (baseUrl === void 0) { baseUrl = undefined; }
        this.compId = compId;
        this.instance = instance;
        this.getCompId = this.getCompId.bind(this);
        this.getInstance = this.getInstance.bind(this);
        this.viewMode = viewMode;
        this.baseUrl = baseUrl || '';
        this.fetchRetries = 0;
        this.numberOfAllowedRetries = 2;
    }
    AppSettings.prototype.getCompId = function () {
        if (this.compId) {
            return this.compId;
        }
        return window.Wix.Utils.getOrigCompId()
            ? window.Wix.Utils.getOrigCompId()
            : window.Wix.Utils.getCompId();
    };
    AppSettings.prototype.isLiveSite = function () {
        return this.viewMode && this.viewMode.toLowerCase() === 'site';
    };
    AppSettings.prototype.isPreview = function () {
        return this.viewMode && this.viewMode.toLowerCase() === 'preview';
    };
    AppSettings.prototype.getInstance = function () {
        return this.instance ? this.instance : window.instance;
    };
    AppSettings.prototype.fetchAppSettings = function (state, host) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, fetch("".concat(this.baseUrl, "/_api/app-settings-service/v1/settings/components/").concat(this.getCompId(), "?state=").concat(state, "&host=").concat(host), {
                            method: 'GET',
                            headers: {
                                Authorization: this.getInstance(),
                                Accept: 'application/json, text/plain, */*',
                            },
                        })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    AppSettings.prototype.processAppSettingsResponse = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!response.settings.originGallerySettings) return [3 /*break*/, 2];
                        response.settings = __assign(__assign({}, response.settings.originGallerySettings), response.settings);
                        response.settings.originGallerySettings = null;
                        if (!(!this.isLiveSite() && !this.isPreview())) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.setMultiple(response.settings, Consts.dataSavedState.PUBLISHED)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    AppSettings.prototype.get = function (state, key) {
        return __awaiter(this, void 0, void 0, function () {
            var host, response, responseData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        host = 'VIEWER';
                        return [4 /*yield*/, this.fetchAppSettings(state, host)];
                    case 1:
                        response = _a.sent();
                        if (!(response.status === 503 && // could be blocked by ddos protection in case of alots of galleries
                            this.fetchRetries < this.numberOfAllowedRetries)) return [3 /*break*/, 4];
                        this.fetchRetries++;
                        return [4 /*yield*/, new Promise(function (resolve) {
                                // awaiting a random amount before the next retry
                                setTimeout(resolve, Math.random() * 900 + 100); // homage to guy
                            })];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, this.get(state, key)];
                    case 3: return [2 /*return*/, _a.sent()];
                    case 4:
                        if (!(response.status === 200)) return [3 /*break*/, 7];
                        return [4 /*yield*/, response.json()];
                    case 5:
                        responseData = _a.sent();
                        if (!(responseData && responseData.settings)) return [3 /*break*/, 7];
                        return [4 /*yield*/, this.processAppSettingsResponse(responseData)];
                    case 6:
                        _a.sent();
                        if (key) {
                            return [2 /*return*/, responseData.settings[key]];
                        }
                        return [2 /*return*/, responseData.settings];
                    case 7: return [2 /*return*/, undefined];
                }
            });
        });
    };
    AppSettings.prototype.setMultiple = function (settingObject, state) {
        if (state === void 0) { state = Consts.dataSavedState.SAVED; }
        return __awaiter(this, void 0, void 0, function () {
            var galleryId, neededSettings, host, settings, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        galleryId = settingObject.galleryId, neededSettings = __rest(settingObject, ["galleryId"]);
                        host = 'VIEWER';
                        settings = neededSettings ? neededSettings : {};
                        data = { settings: settings, host: host, state: state };
                        return [4 /*yield*/, fetch("".concat(this.baseUrl, "/_api/app-settings-service/v1/settings/components/").concat(this.getCompId()), {
                                method: 'PATCH',
                                headers: {
                                    'Content-Type': 'application/json',
                                    Authorization: this.getInstance(),
                                },
                                body: JSON.stringify(data),
                            })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    AppSettings.prototype.set = function (key, value) {
        var _a;
        this.setMultiple((_a = {}, _a[key] = value, _a));
    };
    return AppSettings;
}());
export default AppSettings;
//# sourceMappingURL=appSettings.js.map