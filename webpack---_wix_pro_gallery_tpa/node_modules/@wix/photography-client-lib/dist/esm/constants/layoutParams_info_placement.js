//NEW STYPEPARAMS METHOD
var PLACEMENTS = {
    OVERLAY: 'OVERLAY',
    ABOVE: 'ABOVE',
    BELOW: 'BELOW',
    LEFT: 'LEFT',
    RIGHT: 'RIGHT',
    ALTERNATE_HORIZONTALLY: 'ALTERNATE_HORIZONTALLY',
    ALTERNATE_VERTICALLY: 'ALTERNATE_VERTICALLY',
};
var hasHoverPlacement = function (placement) {
    return String(placement).includes(PLACEMENTS.OVERLAY);
};
var hasExternalAbovePlacement = function (placement, idx) {
    return String(placement).includes(PLACEMENTS.ABOVE) ||
        (idx % 2 === 0 &&
            String(placement).includes(PLACEMENTS.ALTERNATE_VERTICALLY));
};
var hasExternalBelowPlacement = function (placement, idx) {
    return String(placement).includes(PLACEMENTS.BELOW) ||
        (idx % 2 === 1 &&
            String(placement).includes(PLACEMENTS.ALTERNATE_VERTICALLY));
};
var hasExternalRightPlacement = function (placement, idx) {
    return String(placement).includes(PLACEMENTS.RIGHT) ||
        idx % 2 === 0 ||
        String(placement).includes(PLACEMENTS.ALTERNATE_HORIZONTALLY);
};
var hasExternalLeftPlacement = function (placement, idx) {
    return idx % 2 === 1 ||
        String(placement).includes(PLACEMENTS.ALTERNATE_HORIZONTALLY);
};
var hasExternalVerticalPlacement = function (placement) {
    return hasExternalAbovePlacement(placement, 0) ||
        hasExternalBelowPlacement(placement, 1);
};
var hasExternalHorizontalPlacement = function (placement) {
    return hasExternalRightPlacement(placement, 0) ||
        hasExternalLeftPlacement(placement, 1);
};
var isExternalVerticalPlacement = function (placement) {
    return hasExternalVerticalPlacement(placement) &&
        !hasExternalHorizontalPlacement(placement) &&
        !hasHoverPlacement(placement);
};
var isExternalHorizontalPlacement = function (placement) {
    return hasExternalHorizontalPlacement(placement) &&
        !hasExternalVerticalPlacement(placement) &&
        !hasHoverPlacement(placement);
};
var isExternalAbovePlacement = function (placement) {
    return String(placement) === PLACEMENTS.ABOVE;
};
var isExternalBelowPlacement = function (placement) {
    return String(placement) === PLACEMENTS.BELOW;
};
var isExternalAboveOrBelowSinglePlacement = function (placement) {
    return isExternalAbovePlacement(placement) || isExternalBelowPlacement(placement);
};
var isHoverPlacement = function (placement) {
    return String(placement) === PLACEMENTS.OVERLAY;
};
var isExternalRightPlacement = function (placement) {
    return String(placement) === PLACEMENTS.RIGHT;
};
var isExternalLeftPlacement = function (placement) {
    return String(placement) === PLACEMENTS.LEFT;
};
var isConstantVerticalPlacement = function (placement) {
    var placementArray = placement.split(',');
    var firstPlacement = placementArray.shift();
    return (isExternalAboveOrBelowSinglePlacement(firstPlacement) &&
        placementArray.every(function (placement) { return placement === firstPlacement; }));
};
export default PLACEMENTS;
export { hasExternalAbovePlacement, hasExternalBelowPlacement, hasHoverPlacement, hasExternalRightPlacement, hasExternalLeftPlacement, hasExternalVerticalPlacement, hasExternalHorizontalPlacement, isExternalAbovePlacement, isExternalBelowPlacement, isHoverPlacement, isExternalRightPlacement, isExternalLeftPlacement, isExternalVerticalPlacement, isExternalHorizontalPlacement, isConstantVerticalPlacement, };
//# sourceMappingURL=layoutParams_info_placement.js.map