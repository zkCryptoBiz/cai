import { __awaiter, __generator } from "tslib";
// @ts-nocheck
import { GALLERY_v4_CONSTS } from '@wix/photography-client-lib';
import { experimentsWrapper, window } from '@wix/photography-client-lib';
import * as lodash from './lodash';
export function onlyPositiveNumericValues(object) {
    var key;
    for (key in object) {
        var type = typeof object[key];
        if (type === 'object') {
            onlyPositiveNumericValues(object[key]);
        }
        else if (typeof object[key] !== 'number' || object[key] <= 0) {
            delete object[key];
        }
    }
    return object;
}
var Utils = /** @class */ (function () {
    function Utils() {
        var _this = this;
        this.init = function () {
            Object.assign(_this, lodash);
        };
        this.init();
    }
    Utils.getBaseUrl = function (api, viewMode) {
        var parsedViewMode = Utils.parseViewMode(viewMode);
        if (parsedViewMode === GALLERY_v4_CONSTS.viewMode.PREVIEW ||
            parsedViewMode === GALLERY_v4_CONSTS.viewMode.EDIT) {
            return 'https://progallery.wixapps.net';
        }
        else {
            if (api.location.baseUrl.includes('https://www.wix.com')) {
                return 'https://www.wix.com';
            }
            return api.location.baseUrl;
        }
    };
    Utils.getUrlOverrideExperimentsParam = function (baseApi) {
        var _a;
        return (_a = baseApi.location.query) === null || _a === void 0 ? void 0 : _a.petri_ovr;
    };
    Utils.getExperiments = function (baseApi, instance) {
        // only under scope `pro-gallery-viewer`
        var viewMode = Utils.parseViewMode(baseApi.window.viewMode);
        var baseUrl = Utils.getBaseUrl(baseApi, viewMode);
        var petri_ovr = Utils.getUrlOverrideExperimentsParam(baseApi);
        var url = "".concat(baseUrl, "/_api/pro-gallery-webapp/v1/viewer/experiments").concat(petri_ovr ? '?petri_ovr=' + petri_ovr : '');
        return fetch(url, {
            credentials: 'include',
            headers: {
                Authorization: instance,
            },
        })
            .then(function (res) { return res.json(); })
            .then(function (res) { return res.experiments; })
            .catch(function () {
            return {};
        });
    };
    Utils.parseViewMode = function (viewMode) {
        //
        switch (viewMode.toLowerCase()) {
            case 'editor':
            case 'edit':
                return GALLERY_v4_CONSTS.viewMode.EDIT;
            case 'preview':
                return GALLERY_v4_CONSTS.viewMode.PREVIEW;
            case 'site':
            default:
                return GALLERY_v4_CONSTS.viewMode.SITE;
        }
    };
    Utils.formFactorToDeviceType = function (formFactor) {
        switch (formFactor.toLowerCase()) {
            case 'tablet':
                return GALLERY_v4_CONSTS.deviceType.TABLET;
            case 'mobile':
            case 'smartphone':
                return GALLERY_v4_CONSTS.deviceType.MOBILE;
            case 'desktop':
            default:
                return GALLERY_v4_CONSTS.deviceType.DESKTOP;
        }
    };
    Utils.verifyExperiments = function (baseApi) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (experimentsWrapper.experimentsAreReady) {
                    return [2 /*return*/];
                }
                else {
                    baseApi && this.getExperimentsAndInitWrapper()(baseApi);
                    return [2 /*return*/, new Promise(function (resolve) {
                            experimentsWrapper.onExperimentsReady(function (response) { return resolve(response); });
                        })];
                }
                return [2 /*return*/];
            });
        });
    };
    Utils.prototype.isVerbose = function () {
        return (!this.isTest() && (this.safeLocalStorage() || {}).forceDevMode === 'true');
    };
    Utils.prototype.isTest = function () {
        try {
            return window.isTest;
        }
        catch (e) {
            return false;
        }
    };
    Utils.prototype.safeLocalStorage = function () {
        try {
            return localStorage ? localStorage : window; // TrackJS errors, function returning null
        }
        catch (e) {
            return window;
        }
    };
    Utils.prototype.isDev = function () {
        return (this.isLocal() ||
            process.env.NODE_ENV === 'development' ||
            (this.safeLocalStorage() || {}).forceDevMode === 'true');
    };
    Utils.prototype.isLocal = function () {
        var ipRegex = /([0-9]{1,3}\.){3}[0-9]{1,3}:[0-9]{1,5}/; // matches 111.222.333.444:9999
        var host = window.location.hostname || '';
        var isLocal = host === 'local.wix.com' ||
            host === '0.0.0.0' ||
            host.indexOf('localhost') >= 0 ||
            ipRegex.exec(host) !== null;
        return isLocal;
    };
    Utils.prototype.isMobile = function (deviceType) {
        // deviceType here supposed to be after it was processed in the formFactorToDeviceType function
        return deviceType === GALLERY_v4_CONSTS.deviceType.MOBILE;
    };
    Utils.prototype.isDimensionless = function (item) {
        try {
            if (!item.metaData.height || !item.metaData.width) {
                return true;
            }
            if (item.metaData.height <= 1 || item.metaData.width <= 1) {
                return true;
            }
        }
        catch (e) {
            console.error('corrupt item, cant check for dimensions', item, e);
        }
        return false;
    };
    Utils.prototype.splitDirectFullscreenParams = function (params) {
        var regex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}/g;
        var _a = params.match(regex) ?
            params.split(/_(.+)/) :
            params.split(/-(.+)/), galleryIdent = _a[0], itemId = _a[1];
        return { galleryIdent: galleryIdent, itemId: itemId };
    };
    Utils.getExperimentsAndInitWrapper = (function () {
        var executed = false;
        return function () {
            var _this = this;
            if (!executed) {
                executed = true;
                return function (baseApi, report, instance) { return __awaiter(_this, void 0, void 0, function () {
                    var experimentsRaw, e_1;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                _a.trys.push([0, 3, , 4]);
                                experimentsRaw = undefined;
                                if (baseApi.window.rendering.env !== 'backend') {
                                    experimentsRaw = baseApi.window.warmupData.get('pg_experiments');
                                }
                                if (!!experimentsRaw) return [3 /*break*/, 2];
                                return [4 /*yield*/, Utils.getExperiments(baseApi, instance)];
                            case 1:
                                experimentsRaw = _a.sent();
                                _a.label = 2;
                            case 2:
                                experimentsWrapper.setExperiments(experimentsRaw);
                                if (baseApi.window.rendering.env === 'backend' &&
                                    !experimentsWrapper.getExperimentBoolean('specs.pro-gallery.excludeFromWarmupData')) {
                                    baseApi.window.warmupData.set('pg_experiments', experimentsRaw);
                                }
                                return [3 /*break*/, 4];
                            case 3:
                                e_1 = _a.sent();
                                report && report(e_1);
                                console.error('Waiting for experimentsPromise failed', e_1);
                                return [3 /*break*/, 4];
                            case 4: return [2 /*return*/];
                        }
                    });
                }); };
            }
            else {
                return function () { };
            }
        };
    })();
    return Utils;
}());
export { Utils };
export var utils = new Utils();
//# sourceMappingURL=workerUtils.js.map