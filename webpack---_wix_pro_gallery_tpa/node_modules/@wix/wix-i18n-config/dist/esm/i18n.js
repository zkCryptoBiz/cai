import i18next from 'i18next';
export function i18n({ locale, asyncMessagesLoader, messages, useSuspense = false, wait, disableAutoInit = false, bindI18n, }, { icu } = {}) {
    const config = {
        // Initial language
        lng: locale,
        fallbackLng: 'en',
        // Don't use a key separator (no support for nested translation objects)
        keySeparator: false,
        react: {
            useSuspense,
            bindI18n,
            wait,
        },
        // @ts-expect-error It's here for backward campatibility - can be removed after old `wix-i18n-config` will no longer be in use.
        // Basically when BM can be loaded without this config - you're good to go.
        _polyfill: { isLoading: false },
    };
    const i18nInstance = i18next.createInstance(disableAutoInit ? config : undefined);
    // icu is optional since this function can be called from initI18n or initI18nWithoutICU modules
    if (icu) {
        i18nInstance.use(icu);
    }
    if (asyncMessagesLoader) {
        i18nInstance.use({
            type: 'backend',
            read: async (language, _namespace, callback) => {
                // We configure how i18next should fetch a translation resource when it
                // needs it: We use Webpack's dynamic imports to fetch resources without
                // increasing our bundle size.
                //
                // See https://webpack.js.org/guides/code-splitting/#dynamic-imports for
                // more information.
                try {
                    const translation = await asyncMessagesLoader(language);
                    return callback(null, translation);
                }
                catch (err) {
                    return callback(err, null);
                }
            },
        });
    }
    if (messages) {
        config.resources = { [locale]: { translation: messages } };
    }
    if (!disableAutoInit) {
        i18nInstance.init(config);
    }
    return i18nInstance;
}
//# sourceMappingURL=i18n.js.map