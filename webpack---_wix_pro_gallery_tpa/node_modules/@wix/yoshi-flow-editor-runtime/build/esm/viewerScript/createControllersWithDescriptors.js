import { BLOCKS_COMPONENT_TYPE, } from '../constants';
import { getAppData, getViewerScriptFlowAPI, getViewerScriptFlowAPIInitPromise, } from './sharableInstances';
var getDescriptorForConfig = function (type, descriptors) { return descriptors.find(function (descriptor) { return descriptor.id === type; }); };
var isBlocksController = function (controllerConfig) {
    var _a, _b, _c;
    return (((_a = controllerConfig.appParams) === null || _a === void 0 ? void 0 : _a.blocksData) ||
        ((_c = (_b = controllerConfig.appParams) === null || _b === void 0 ? void 0 : _b.appData) === null || _c === void 0 ? void 0 : _c.blocksPreviewData));
};
var moduleIsController = function (controllerModule) {
    return typeof controllerModule === 'function';
};
var getControllerFromControllerModule = function (controllerModule) {
    // controller was exported as `module.exports = controller`
    if (moduleIsController(controllerModule)) {
        return controllerModule;
    }
    // controller was exported as `export default controller` or `export const controller`
    var controllerKey = Object.keys(controllerModule).find(function (key) {
        return key.toLowerCase().includes('controller');
    }) || 'default';
    var controller = controllerModule[controllerKey];
    if (typeof controller !== 'function') {
        throw new Error("Seems like a bundle you have registered as Controller URL in Dev Center doesn't contain exported controller.\nPlease, verify you are using relevant controller bundle generated by editor flow.");
    }
    return controller;
};
var getWrapperFromControllerModule = function (controllerModule) {
    // controller was exported as `module.exports = controller`
    if (moduleIsController(controllerModule)) {
        return null;
    }
    // controller was exported as `export default controller` or `export const controller`
    return controllerModule.wrap;
};
var getDescriptorFromControllerModule = function (controllerModule) {
    // controller was exported as `module.exports = controller`
    if (moduleIsController(controllerModule)) {
        return null;
    }
    // controller was exported as `export default controller` or `export const controller`
    return controllerModule.descriptor;
};
export var createControllersWithDescriptors = function (optionalDeps, controllerDescriptors, includeControllersInViewerScript) {
    if (includeControllersInViewerScript === void 0) { includeControllersInViewerScript = false; }
    return function (controllerConfigs, controllerModulesMap) {
        var controllersWithDescriptors = [];
        controllerConfigs.forEach(function (controllerConfig) {
            var widgetId = controllerConfig.type;
            // TODO: Temp solution for remote blocks widgets
            var controllerDescriptor = getDescriptorForConfig(widgetId, controllerDescriptors);
            if (!controllerDescriptor) {
                // Blocks
                if (isBlocksController(controllerConfig)) {
                    controllerDescriptor = {
                        widgetType: BLOCKS_COMPONENT_TYPE,
                        method: null,
                        exports: {},
                    };
                }
            }
            if ((controllerDescriptor === null || controllerDescriptor === void 0 ? void 0 : controllerDescriptor.widgetType) !== BLOCKS_COMPONENT_TYPE) {
                var shouldUseExternalController = !includeControllersInViewerScript;
                if (shouldUseExternalController) {
                    var controllerModule = controllerModulesMap === null || controllerModulesMap === void 0 ? void 0 : controllerModulesMap[widgetId];
                    if (!controllerModule) {
                        return;
                    }
                    if (!controllerDescriptor) {
                        var descriptor = getDescriptorFromControllerModule(controllerModule);
                        if (!descriptor) {
                            throw new Error("Can't resolve controller descriptor for \"".concat(widgetId, "\" controller."));
                        }
                        controllerDescriptor = descriptor;
                    }
                    controllerDescriptor.method =
                        getControllerFromControllerModule(controllerModule);
                    controllerDescriptor.wrap =
                        getWrapperFromControllerModule(controllerModule) || undefined;
                    controllerDescriptor.exports = controllerModule;
                }
            }
            if (!controllerDescriptor) {
                if (process.env.NODE_ENV === 'development') {
                    console.info("Yoshi Editor Flow doesn't support initializing controllers from non-editor flow artifacts. Please, consider moving \"".concat(widgetId, "\" controller to yoshi-flow-editor project. For now this controller will be skipped."));
                }
                return;
            }
            controllersWithDescriptors.push({
                controllerDescriptor: controllerDescriptor,
                controllerConfig: controllerConfig,
            });
        });
        var wrappedControllers = controllersWithDescriptors.map(function (_a) {
            var controllerDescriptor = _a.controllerDescriptor, controllerConfig = _a.controllerConfig;
            if (!controllerDescriptor.wrap) {
                return;
            }
            return controllerDescriptor.wrap(optionalDeps, controllerDescriptor, controllerConfig, getViewerScriptFlowAPI(), getViewerScriptFlowAPIInitPromise(), getAppData);
        });
        return wrappedControllers;
    };
};
//# sourceMappingURL=createControllersWithDescriptors.js.map