var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { pascalCase } from 'pascal-case';
import baseDefinitions from '@wix/wix-json-schema-utils/src/baseDefinitions.json';
import { createPropertyTemplate } from '@wix/wix-json-schema-utils/src/template';
var propertyText = 'text';
var propertyBoolean = 'boolean';
var propertyNumber = 'number';
var convertToPropertySchema = function (name, property) {
    var _a;
    var isArray = property.isArray, type = property.type, restProps = __rest(property, ["isArray", "type"]);
    var propertyDefinition = __assign(__assign({}, baseDefinitions[type]), restProps);
    var propertySchema = {
        structure: (_a = {}, _a[name] = createPropertyTemplate(propertyDefinition, isArray), _a),
    };
    return propertySchema;
};
export var WidgetPropertyType = {
    STRING: propertyText,
    BOOLEAN: propertyBoolean,
    NUMBER: propertyNumber,
};
export var createGetBlocksAPIStructure = function (config) {
    return function () {
        var apiStructure = {
            functions: [],
            events: [],
            propertiesSchemas: [],
        };
        if (config.props) {
            Object.keys(config.props).forEach(function (propName) {
                var propertyInfo = config.props[propName];
                if (propertyInfo.type) {
                    apiStructure.propertiesSchemas.push(convertToPropertySchema(propName, propertyInfo));
                }
            });
        }
        if (config.events) {
            Object.keys(config.events).forEach(function (event) {
                apiStructure.events.push(__assign({ name: event }, config.events[event]));
            });
        }
        if (config.methods) {
            Object.keys(config.methods).forEach(function (method) {
                apiStructure.functions.push(__assign(__assign({ name: method }, config.methods[method]), { params: config.methods[method].params || [] }));
            });
        }
        return apiStructure;
    };
};
export var createGetExports = function (config) {
    return function () {
        var metadata = {
            inherits: {},
            members: {},
            eventHandlers: {},
        };
        if (config.props) {
            Object.keys(config.props).forEach(function (prop) {
                metadata.members[prop] = {
                    kind: 'member',
                    description: config.props[prop].description || '',
                };
            });
        }
        if (config.methods) {
            Object.keys(config.methods).forEach(function (method) {
                metadata.members[method] = {
                    kind: 'function',
                    description: config.methods[method].description || '',
                    params: config.methods[method].params || [],
                };
            });
        }
        if (config.events) {
            Object.keys(config.events).forEach(function (event) {
                metadata.eventHandlers["on".concat(pascalCase(event))] = {
                    type: event,
                    description: config.events[event].description || '',
                };
            });
        }
        return metadata;
    };
};
//# sourceMappingURL=common.js.map