import { RTL_LANGUAGES } from './constants';
import { getMultilingualLanguage } from './utils';
import { getQueryParams } from './publicUtils';
import { extractLanguageCode } from './i18next';
export var getSiteLanguage = function (windowAPI, siteAPI, isEditor) {
    var multilingualLanguage = getMultilingualLanguage(windowAPI.multilingual);
    var siteLanguage = siteAPI.language;
    if (isEditor) {
        var query = getQueryParams();
        var regionalLanguage = query.get('regionalLanguage');
        if (regionalLanguage) {
            siteLanguage = regionalLanguage;
        }
    }
    // NOTE: language can be null (see WEED-18001)
    return multilingualLanguage || siteLanguage || 'en';
};
export var FORM_FACTORS = {
    MOBILE: 'Mobile',
    DESKTOP: 'Desktop',
};
export var isMobile = function (windowAPI) {
    return windowAPI.formFactor === FORM_FACTORS.MOBILE;
};
export var isSSR = function (windowAPI) {
    return windowAPI.rendering.env === 'backend';
};
export var isSEO = function (seoAPI) { return seoAPI.isInSEO(); };
export var isRTL = function (language) {
    return RTL_LANGUAGES.includes(extractLanguageCode(language));
};
export var EDITORS_ORIGIN = {
    CLASSIC: 'Editor1.4',
    EDITOR_X: 'editor_x',
    STUDIO: 'studio',
};
export var isWixStudioOrigin = function () {
    var searchParams = new URLSearchParams(window.location.search);
    var origin = searchParams.get('origin');
    return origin === EDITORS_ORIGIN.STUDIO;
};
// Function to check editor x in iFrame environment
export var isEditorXOrigin = function () {
    var searchParams = new URLSearchParams(window.location.search);
    var origin = searchParams.get('origin');
    return origin === EDITORS_ORIGIN.EDITOR_X;
};
export var isClassicEditorOrigin = function () {
    var searchParams = new URLSearchParams(window.location.search);
    var origin = searchParams.get('origin');
    return origin === EDITORS_ORIGIN.CLASSIC;
};
export var getEditorType = function () {
    var searchParams = new URLSearchParams(window.location.search);
    return searchParams.get('editorType');
};
// Function to check Editor X in viewer Widget and controller environments
// Based on https://wix.slack.com/archives/CAKBA7TDH/p1610466792053500
export var isEditorX = function (styleParams) { var _a; return (_a = styleParams === null || styleParams === void 0 ? void 0 : styleParams.booleans.responsive) !== null && _a !== void 0 ? _a : false; };
// TODO: Rethink solution after there would be better place to check if we are in ADI or not
// https://wix.slack.com/archives/CAKBA7TDH/p1612450595116500
export var isADI = function (queryParams) {
    if (queryParams === void 0) { queryParams = {}; }
    return queryParams.dsOrigin === 'onboarding';
};
export var isClassicEditor = function (queryParams) {
    if (queryParams === void 0) { queryParams = {}; }
    return queryParams.dsOrigin === 'Editor1.4';
};
//# sourceMappingURL=helpers.js.map