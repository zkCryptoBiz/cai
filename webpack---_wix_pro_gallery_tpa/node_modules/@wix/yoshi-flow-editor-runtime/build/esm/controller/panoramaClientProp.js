var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
export var panoramaClientProps = function (panoramaClient) {
    var logger = panoramaClient.logger();
    return {
        errorMonitorWithOptions: function (options, method) {
            var args = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args[_i - 2] = arguments[_i];
            }
            var errorMonitor = panoramaClient.errorMonitor(__assign(__assign({}, options), { data: __assign({ environment: 'Viewer' }, options === null || options === void 0 ? void 0 : options.data) }));
            var fn = errorMonitor[method];
            // @ts-expect-error
            fn.apply(errorMonitor, args);
        },
        logger: {
            debug: logger.debug.bind(logger),
            info: logger.info.bind(logger),
            error: logger.error.bind(logger),
            warn: logger.warn.bind(logger),
        },
        transactionWithAction: function (transactionName, actionName, data) {
            var transaction = panoramaClient.transaction(transactionName);
            return transaction[actionName](data);
        },
    };
};
export var panoramaClientPropFromProps = function (panoramaClientProp) {
    return {
        errorMonitor: function (options) {
            return {
                reportError: function (error, data) {
                    panoramaClientProp.errorMonitorWithOptions(options, 'reportError', error, data);
                },
                addBreadcrumb: function (breadcrumb) {
                    panoramaClientProp.errorMonitorWithOptions(options, 'addBreadcrumb', breadcrumb);
                },
            };
        },
        transaction: function (transactionName) {
            return {
                start: function (data) {
                    panoramaClientProp.transactionWithAction(transactionName, 'start', data);
                },
                finish: function (data) {
                    panoramaClientProp.transactionWithAction(transactionName, 'finish', data);
                },
            };
        },
        logger: function () {
            return panoramaClientProp.logger;
        },
    };
};
//# sourceMappingURL=panoramaClientProp.js.map