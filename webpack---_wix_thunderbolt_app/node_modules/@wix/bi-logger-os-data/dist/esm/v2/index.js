/**
 * A function to create a log object for the 'wixPatternsSummaryBarIsShownSrc144Evid1' event (evid: 1)
 *
 * Event description: Sent when SummaryBar feature is shown in  Wix Patterns component
 *
 * @param {wixPatternsSummaryBarIsShownSrc144Evid1Params} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {string} cairoVersion - Wix Patterns_version(cairo_version)
 * @property {string} componentName - (Optional) Component name, if there are two components of the same type per artifact
 * @property {string} componentType - Picker Standalone/Picker Modal/ Picker Dropdown/ Table/Cards
 * @property {string} resource - Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
 * @property {string} appId - app_id
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @property {string} summaryBarList - A list of items that are currently displayed to user: {"item1": "Value1", "item2": "value2"}
 * @property {string} featureStatus - success/ loading/error
 * @property {string} hostingPlatformContextId - the id of the context entity that the user view or edit (app/account/site)
 *
 * @return {LogObject<wixPatternsSummaryBarIsShownSrc144Evid1Params>} LogObject<wixPatternsSummaryBarIsShownSrc144Evid1Params>
 */
export function wixPatternsSummaryBarIsShownSrc144Evid1(params) {
    return { evid: 1, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'wixPatternsPageInteractiveSrc144Evid1000' event (evid: 1000)
 *
 * Event description: Sent when a Wix Patterns page start loading content
 *
 *
 * @param {wixPatternsPageInteractiveSrc144Evid1000Params} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {GUID} csid - csid
 * @property {Url} url - The page's url (new from 03/2023)
 * @property {string} cairoVersion - Wix Patterns_version(cairo_version)
 * @property {string} domain - (Optional) Domain name from FQDN (crm, stores, etc.)
 * @property {string} componentName - (Optional) Component name, if there are two components of the same type per artifact
 * @property {string} componentType - Entity page / Collection
 * @property {string} resource - Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
 * @property {number} loadingTime - Page loading time will be measured from the start of the page loading process (5:9002, FPP)
 * @property {string} appId - app_id
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @property {string} route - the page's route
 * @property {string} hostingPlatformContextId - the id of the context entity that the user view or edit (app/account/site)
 *
 * @property {boolean} routerUsage - returns true if Wix Patterns router is being used, else false
 * @return {LogObject<wixPatternsPageInteractiveSrc144Evid1000Params>} LogObject<wixPatternsPageInteractiveSrc144Evid1000Params>
 */
export function wixPatternsPageInteractiveSrc144Evid1000(params) {
    return { evid: 1000, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'wixPatternsFullPageLoadCompletedSrc144Evid1001' event (evid: 1001)
 *
 * Event description: Sent when a Wix Patterns page has been fully loaded
 *
 * @param {wixPatternsFullPageLoadCompletedSrc144Evid1001Params} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {GUID} csid - csid
 * @property {Url} url - The page's url (new from 03/2023)
 * @property {string} cairoVersion - Wix Patterns_version(cairo_version)
 * @property {string} domain - (Optional) Domain name from FQDN (crm, stores, etc.)
 * @property {string} componentName - (Optional) Component name, if there are two components of the same type per artifact
 * @property {string} componentType - Entity page / Collection
 * @property {string} resource - Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
 * @property {number} loadingTime - Page loading time will be measured from the start of the page loading process (5:9002, FPP)
 * @property {string} appId - app_id
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @property {string} route - the page's route
 * @property {string} hostingPlatformContextId - the id of the context entity that the user view or edit (app/account/site)
 *
 * @property {boolean} routerUsage - returns true if Wix Patterns router is being used, else false
 * @return {LogObject<wixPatternsFullPageLoadCompletedSrc144Evid1001Params>} LogObject<wixPatternsFullPageLoadCompletedSrc144Evid1001Params>
 */
export function wixPatternsFullPageLoadCompletedSrc144Evid1001(params) {
    return { evid: 1001, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'pickerModalUsability' event (evid: 103)
 *
 * Event description: Any usability action performed inside the picker
 *
 * @param {pickerModalUsabilityParams} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {GUID} csid - csid
 * @property {string} cairoVersion - Wix Patterns_version(cairo_version)
 * @property {number} searchResultsCnt - (Optional) Number of search results
 * @property {string} domain - Optional domain name from FDQN (CRM, Store, etc.)
 * @property {string} searchTerm - (Optional) Search term used
 * @property {number} itemsLoadedCnt - (Optional) Number of additional items loaded
 * @property {number} listSize - How many items exist (full list)
 * @property {boolean} isTPA - is_tpa
 * @property {string} componentName - Optional in case having 2 pickers under the same artifact
 * @property {number} maxItems - Max items to select in picker
 * @property {string} componentType - component_type
 * @property {number} itemsCnt - (Optional) Number of total items checked
 * @property {string} pickSource - The instance that lead to this (Inbox)
 * @property {string} resource - Singular form of the resource name. E.g. order, contact, etc. from FDQN ("goal" of picker)
 * @property {number} loadingTime - (Optional) Loading time for use cases such as search results or  load more
 * @property {string} itemId - (Optional) ID of item checked
 * @property {string} type - standalone/modal
 * @property {string} appId - app_id
 * @property {number} filteredListSize - How many items are to presented (filtered)
 * @property {string} action - Use cases: search/search results/checkbox/continue/dismiss/load more
 * @property {string} product - Name of the product / api. E.g. contacts, booking, site_properties, etc. from FDQN
 * @return {LogObject<pickerModalUsabilityParams>} LogObject<pickerModalUsabilityParams>
 */
export function pickerModalUsability(params) {
    return { evid: 103, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'pickerPickModalCtaButtonClickOrImmediateCta' event (evid: 104)
 *
 * Event description: Actual pick inside the Wix Patterns picker (CTA button or immediate CTA)
 *
 * @param {pickerPickModalCtaButtonClickOrImmediateCtaParams} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {number} initialItems - Initial number of items loaded (before scroll and autoload)
 * @property {GUID} csid - csid
 * @property {string} cairoVersion - Wix Patterns_version(cairo_version)
 * @property {string} domain - Optional domain name from FDQN (CRM, Store, etc.)
 * @property {number} listSize - How many items exist (full list)
 * @property {boolean} isTPA - is_tpa
 * @property {string} componentName - Optional in case having 2 pickers under the same artifact
 * @property {number} maxItems - Max items to select in picker
 * @property {string} componentType - component_type
 * @property {number} itemsCnt - Number of total items picked
 * @property {string} resource - Singular form of the resource name. E.g. order, contact, etc. from FDQN ("goal" of picker)
 * @property {boolean} isImmediate - Is it an immediate CTA
 * @property {string} type - standalone/modal
 * @property {string} appId - app_id
 * @property {number} filteredListSize - How many items are to presented (filtered)
 * @property {string} product - Name of the product / api. E.g. contacts, booking, site_properties, etc. from FDQN
 * @return {LogObject<pickerPickModalCtaButtonClickOrImmediateCtaParams>} LogObject<pickerPickModalCtaButtonClickOrImmediateCtaParams>
 */
export function pickerPickModalCtaButtonClickOrImmediateCta(params) {
    return { evid: 104, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'pickerPickerOpenButton' event (evid: 105)
 *
 * Event description: Picker button actions (not within the modal)
 *
 * @param {pickerPickerOpenButtonParams} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {number} initialItems - Initial number of items loaded (before scroll and autoload)
 * @property {GUID} csid - csid
 * @property {string} cairoVersion - Wix Patterns_version(cairo_version)
 * @property {string} domain - Optional domain name from FDQN (CRM, Store, etc.)
 * @property {number} listSize - How many items exist (full list)
 * @property {boolean} isTPA - is_tpa
 * @property {string} componentName - Optional in case having 2 pickers under the same artifact
 * @property {number} maxItems - Max items to select in picker
 * @property {string} componentType - component_type
 * @property {string} resource - Singular form of the resource name. E.g. order, contact, etc. from FDQN ("goal" of picker)
 * @property {string} type - standalone/modal
 * @property {string} appId - app_id
 * @property {number} filteredListSize - How many items are to presented (filtered)
 * @property {string} action - Any picker button option (render/hover/click)
 * @property {string} product - Name of the product / api. E.g. contacts, booking, site_properties, etc. from FDQN
 * @return {LogObject<pickerPickerOpenButtonParams>} LogObject<pickerPickerOpenButtonParams>
 */
export function pickerPickerOpenButton(params) {
    return { evid: 105, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'newItemCreationStart' event (evid: 106)
 *
 * Event description: Sent when the user clicks the "create new" button
 *
 * @param {newItemCreationStartParams} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {GUID} csid - csid
 * @property {string} cairoVersion - Wix Patterns_version(cairo_version)
 * @property {number} numSelectedItems - How many items have been selected before trying to create a new one. 0 <= numSelectedItems < maxItems
 * @property {string} domain - Optional domain name from FQDN (CRM, Store, etc.)
 * @property {number} listSize - How many items exist, after item creation (full list, unfiltered)
 * @property {boolean} isTPA - is_tpa
 * @property {string} componentName - (Optional) Component name, if there are two components of the same type per artifact
 * @property {number} maxItems - Max number of items that can be selected
 * @property {string} currentSortOrder - sorts
 * @property {string} componentType - Picker Standalone/Picker Modal/Table/Cards
 * @property {number} numSortedColumns - sort
 * @property {string} currentFilters - current filters
 * @property {number} numColumns - columns
 * @property {string} resource - Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
 * @property {string} visibleColumnsOrder - visible columns order
 * @property {string} origin - "Add New" click source: "Main CTA" / "Card CTA"
 * @property {number} numFiltersActive - filters
 * @property {string} type - standalone/modal
 * @property {string} appId - app_id
 * @property {number} filteredListSize - How many items are currently presented to user (filtered)
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @return {LogObject<newItemCreationStartParams>} LogObject<newItemCreationStartParams>
 */
export function newItemCreationStart(params) {
    return { evid: 106, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'newItemCreationEnd' event (evid: 107)
 *
 * Event description: Sent when the "create new" process ends (and the result is shown to the user)
 *
 * @param {newItemCreationEndParams} params - The parameters for this event
 * @property {string} resultType - "success"/"dismissed"/"edit success"/"edit dismissed"
 * @property {string} artifactId - Artifact that owns the component
 * @property {GUID} csid - csid
 * @property {string} cairoVersion - Wix Patterns_version(cairo_version)
 * @property {number} numSelectedItems - How many items have been selected before trying to create a new one. 0 <= numItems < maxItems
 * @property {string} domain - Optional domain name from FQDN (CRM, Store, etc.)
 * @property {number} listSize - How many items exist, after item creation (full list, unfiltered)
 * @property {boolean} isTPA - is_tpa
 * @property {string} componentName - (Optional) Component name, if there are two components of the same type per artifact
 * @property {number} maxItems - Max number of items that can be selected
 * @property {string} currentSortOrder - sort order
 * @property {string} componentType - Picker Standalone/Picker Modal/Table/Cards
 * @property {number} numSortedColumns - sort
 * @property {string} currentFilters - filters
 * @property {number} numColumns - columns
 * @property {string} resource - Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
 * @property {string} visibleColumnsOrder - visible columns order
 * @property {string} origin - "Add New" click source: "Main CTA" / "Card CTA"
 * @property {string} itemId - For Add new- resultType= "success" --> itemId = ID of newly created item; resultType = "dismissed" --> itemId = null. For Edit- the itemID for all result types.
 * @property {number} numFiltersActive - filters
 * @property {string} type - standalone/modal
 * @property {string} appId - app_id
 * @property {number} filteredListSize - How many items are currently presented to user (filtered)
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @return {LogObject<newItemCreationEndParams>} LogObject<newItemCreationEndParams>
 */
export function newItemCreationEnd(params) {
    return { evid: 107, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'pikachuCategoriesDropdownButtonClicked' event (evid: 108)
 *
 * Event description: Sent when user clicks the general "+"/"Add Items" button that opens Pikachu
 *
 * @param {pikachuCategoriesDropdownButtonClickedParams} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {GUID} csid - csid
 * @property {string} cairoVersion - Wix Patterns_version(cairo_version)
 * @property {string} domain - Optional domain name from FQDN (CRM, Store, etc.)
 * @property {boolean} isTPA - is_tpa
 * @property {string} componentName - (Optional) Component name, if there are two components of the same type per artifact
 * @property {string} componentType - component_type
 * @property {string} resource - Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
 * @property {string} appId - app_id
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @property {string} url - Page's url
 * @return {LogObject<pikachuCategoriesDropdownButtonClickedParams>} LogObject<pikachuCategoriesDropdownButtonClickedParams>
 */
export function pikachuCategoriesDropdownButtonClicked(params) {
    return { evid: 108, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'pikachuItemCategorySelected' event (evid: 109)
 *
 * Event description: Sent when user selects a category from the Pikachu category menu (e.g. Coupons/Services/Products)
 *
 * @param {pikachuItemCategorySelectedParams} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {string} itemCategory - Which type of item would we like to pick: 'Collection'/'Product'/'Service'/'Coupon'/'Standalone form'/'Invoice'/'Price quote'
 * @property {GUID} csid - csid
 * @property {string} cairoVersion - Wix Patterns_version(cairo_version)
 * @property {string} domain - Optional domain name from FQDN (CRM, Store, etc.)
 * @property {boolean} isTPA - is_tpa
 * @property {string} componentName - (Optional) Component name, if there are two components of the same type per artifact
 * @property {string} componentType - component_type
 * @property {string} resource - Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
 * @property {string} appId - app_id
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @property {string} url - Page's url
 * @return {LogObject<pikachuItemCategorySelectedParams>} LogObject<pikachuItemCategorySelectedParams>
 */
export function pikachuItemCategorySelected(params) {
    return { evid: 109, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'loadStart' event (evid: 110)
 *
 * Event description: Sent when a Wix Patterns component starts loading. Relevant components: Picker Standalone, Picker Modal, Table, Cards.
 *
 * @param {loadStartParams} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {GUID} csid - csid
 * @property {string} featuresAvailability - Json field :({featureName: boolean}) (new from 03/2023)
 * @property {Url} url - The page's url (new from 03/2023)
 * @property {string} cairoVersion - Wix Patterns_version(cairo_version)
 * @property {string} domain - (Optional) Domain name from FQDN (crm, stores, etc.)
 * @property {boolean} isTPA - is_tpa
 * @property {string} componentName - (Optional) Component name, if there are two components of the same type per artifact
 * @property {string} currentTab - Which tab is currently displayed to the user. Relevant for Table and Cards.
 * @property {string} currentSortOrder - Which columns are currently used to sort the list: [{"fieldName": "FIELD_NAME", "order": "asc"}, {"fieldName": "FIELD_NAME_1", "order": "desc"}]. Relevant for Table and Cards.
 * @property {string} componentType - Picker Standalone/Picker Modal/Picker Dropdown Table/Cards
 * @property {string} currentFilters - A list of filters that are currently displayed to user: {"filter1": "filterValue1", "filter2": "filterValue2a", "filterValue2b"}. Relevant for Table and Cards.
 * @property {string} resource - Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
 * @property {string} additionalFeaturesAvailability - Json field :({featureName: boolean}) (new from 06/2023), for features that don't suppose to impact performance
 * @property {string} currentView - Which view is currently displayed to the user. Relevant for Table and Cards.
 * @property {string} appId - app_id
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @property {string} hostingPlatformContextId - the id of the context entity that the user view or edit (app/account/site)
 *
 * @property {boolean} routerUsage - returns true if Wix Patterns router is being used, else false
 *
 * @property {boolean} isCurrentViewCustomMade -  will be True if the current view is custom-made; otherwise, it will be False
 * @property {string} artifactIdNew - Artifact that owns the component
 * @property {string} currentViewType -  custom-made / predefined / all
 * @property {string} componentIdNew - Component Id new
 * @property {string} componentNameNew - Component Name new
 * @return {LogObject<loadStartParams>} LogObject<loadStartParams>
 */
export function loadStart(params) {
    return { evid: 110, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'loadEnd' event (evid: 111)
 *
 * Event description: Sent when a Wix Patterns component is done loading. Relevant components: Picker Standalone, Picker Modal, Table, Cards.
 *
 * @param {loadEndParams} params - The parameters for this event
 * @property {string} componentStatus - for CustomFieldsWidget component: expanded /collapsed. for table-grid switch components: table layout / grid layout. for nested table :All items collapsed / expanded. Null otherwise
 * @property {string} artifactId - Artifact that owns the component
 * @property {number} initialItems - Initial number of items loaded (before scroll and autoload)
 * @property {GUID} csid - csid
 * @property {Url} url - The page's url (new from 03/2023)
 * @property {string} cairoVersion - Wix Patterns_version(cairo_version)
 * @property {string} domain - (Optional) Domain name from FQDN (crm, stores, etc.)
 * @property {number} listSize - How many items exist (full list, unfiltered). Relevant for Picker.
 * @property {boolean} isTPA - is_tpa
 * @property {string} componentName - (Optional) Component name, if there are two components of the same type per artifact
 * @property {string} currentTab - Which tab is currently displayed to the user. Relevant for Table and Cards.
 * @property {string} currentSortOrder - Which columns are currently used to sort the list: [{"fieldName": "FIELD_NAME", "order": "asc"}, {"fieldName": "FIELD_NAME_1", "order": "desc"}]. Relevant for Table and Cards.
 * @property {string} componentType - Picker Standalone/Picker Modal/ Picker Dropdown/ Table/Cards
 * @property {string} currentFilters - A list of filters that are currently displayed to user: {"filter1": "filterValue1", "filter2": "filterValue2a", "filterValue2b"}. Relevant for Table and Cards.
 * @property {string} resource - Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
 * @property {number} loadingTime - Component loading time in ms
 * @property {string} currentView - Which view is currently displayed to the user. Relevant for Table and Cards.
 * @property {string} appId - app_id
 * @property {boolean} isInternalPage - Is under bo.wix.com (new from 03/2023)
 * @property {number} filteredListSize - How many items are to be presented (filtered)
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @property {string} hostingPlatformContextId - the id of the context entity that the user view or edit (app/account/site)
 *
 * @property {boolean} routerUsage - returns true if Wix Patterns router is being used, else false
 * @property {boolean} isCurrentViewCustomMade - will be True if the current view is custom-made; otherwise, it will be False
 *
 * @property {string} artifactIdNew - Artifact that owns the component
 * @property {string} currentViewType - custom-made / predefined / all
 * @property {string} componentNameNew - component Name new
 * @property {string} componentIdNew - component Id new
 * @return {LogObject<loadEndParams>} LogObject<loadEndParams>
 */
export function loadEnd(params) {
    return { evid: 111, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'loadMore' event (evid: 112)
 *
 * Event description: Sent when a Wix Patterns component is done loading more items (after scrolling). Relevant components: Picker Standalone, Picker Modal, Table, Cards.
 *
 * @param {loadMoreParams} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {GUID} csid - csid
 * @property {string} cairoVersion - Wix Patterns_version(cairo_version)
 * @property {string} domain - Optional domain name from FQDN (crm, stores, etc.)
 * @property {boolean} isTPA - is_tpa
 * @property {string} componentName - Component name, if there are two components of the same type per artifact
 * @property {string} currentTab - Which tab is currently displayed to the user. Relevant for Table and Cards.
 * @property {string} currentSortOrder - Which column is currently used to sort the list: {"columnName": "asc"/"desc"}. Relevant for Table and Cards.
 * @property {string} componentType - Picker Standalone/Picker Modal/Table/Cards
 * @property {string} currentFilters - A list of filters that are currently displayed to user: {"filter1": "filterValue1", "filter2": "filterValue2a", "filterValue2b"}. Relevant for Table and Cards.
 * @property {string} resource - Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
 * @property {number} loadingTime - Component loading time in ms
 * @property {string} currentView - Which view is currently displayed to the user. Relevant for Table and Cards.
 * @property {string} appId - app_id
 * @property {number} filteredListSize - How many items are to be presented (filtered)
 * @property {number} loadedItems - How many new items were loaded in this action
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @return {LogObject<loadMoreParams>} LogObject<loadMoreParams>
 */
export function loadMore(params) {
    return { evid: 112, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'componentDismissed' event (evid: 113)
 *
 * Event description: Sent when a component is dismissed. Relevant components: Picker Modal.
 *
 * @param {componentDismissedParams} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {GUID} csid - csid
 * @property {string} cairoVersion - Wix Patterns_version(cairo_version)
 * @property {string} domain - (Optional) Domain name from FQDN (CRM, Store, etc.)
 * @property {boolean} isTPA - is_tpa
 * @property {string} componentName - (Optional) Component name, if there are two components of the same type per artifact
 * @property {string} componentType - Picker Modal / Picker Dropdown
 * @property {string} resource - Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
 * @property {string} origin - X button/Cancel button
 * @property {string} appId - app_id
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @property {string} url - Page's url
 * @return {LogObject<componentDismissedParams>} LogObject<componentDismissedParams>
 */
export function componentDismissed(params) {
    return { evid: 113, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cairoItemSelectionToggled' event (evid: 114)
 *
 * Event description: Sent when a user select/deselects an item(s) in a list
 *
 * @param {cairoItemSelectionToggledParams} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {string} searchQuery - What did the user search?
 * @property {string} currentStep - What is the step (or hierarchy level) of the selected item?
 * @property {number} initialItems - Initial number of items loaded (before scroll and autoload)
 * @property {string} location - Location: Table List Header (for using the checkbox) /
 * Table Bulk Toolbar (for using the CTA)(new from Dec 2022)
 * @property {GUID} csid - csid
 * @property {string} cairoVersion - Wix Patterns_version(cairo_version)
 * @property {string} domain - (Optional) Domain name from FQDN (crm, stores, etc.)
 * @property {number} numItemsAfter - How many items have been selected after user clicks items.
 * @property {boolean} isSelectAll - Did the user click the "Select All" check box (will get "true" regardless the label attached to the check box: "Select All" or "Deselect All").
 * @property {boolean} isTPA - is_tpa
 * @property {string} clickType - The click purpose : "Selection" / "Deselection"
 * @property {string} componentName - (Optional) Component name, if there are two components of the same type per artifact
 * @property {string} currentTab - Which tab is currently displayed to the user. Relevant for Table and Cards.
 * @property {number} maxItems - (Optional) Max number of items that can be selected. null if there's no limit.
 * @property {string} currentSortOrder - Which columns are currently used to sort the list: [{"fieldName": "FIELD_NAME", "order": "asc"}
 * @property {string} componentType - Picker Standalone/Picker Modal/ Picker Dropdown /Table/Cards
 * @property {number} numLevels - How many levels (or steps) exist in the selected item's hierarchy?
 * @property {string} currentFilters - A list of filters that are currently displayed to user: {"filter1": "filterValue1", "filter2": "filterValue2a", "filterValue2b"}. Relevant for Table and Cards.
 * @property {string} resource - Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
 * @property {number} timeFromAction - The time from user selection until he gets feedback and sees his item(s) checked as selected, in ms (new from Dec 2022)
 * @property {string} itemId - ID of item that is checked/unchecked (isSelectAll = TRUE --> itemId = "All")
 * @property {number} itemIndex - Out of the list of results, what is the index of the clicked item.
 * ** isSelectAll = TRUE --> itemIndex = 0
 * @property {string} currentView - Which view is currently displayed to the user. Relevant for Table and Cards.
 * @property {number} numItemsBefore - How many items have been selected before user clicks items
 * @property {number} currentLevel - What is the hierarchy level (or step) of the selected item? (out of numLevels)
 * @property {string} appId - app_id
 * @property {number} filteredListSize - How many items are to be presented (filtered)
 * @property {boolean} isFromSearch - Is the item selected from a list of search results
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @property {string} url - Page's url
 * @return {LogObject<cairoItemSelectionToggledParams>} LogObject<cairoItemSelectionToggledParams>
 */
export function cairoItemSelectionToggled(params) {
    return { evid: 114, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cairoCtaClicked' event (evid: 115)
 *
 * Event description: Sent when a user clicks a CTA ('save', 'add', 'delete', 'continue', etc.) in a Wix Patterns component. Relevant components: Picker Standalone, Picker Modal, Table, Cards.
 *
 * @param {cairoCtaClickedParams} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {string} location - CTA location: multi bulk action toolbar, bulk action toolbar, action cell, Customize columns action cell
 * @property {GUID} csid - cairo sessionId
 * @property {number} moreActionsIndex - (Optional) If the CTA is part of a "more actions" dropdown, its index in the dropdown; otherwise, null
 * @property {string} cairoVersion - Wix Patterns_version(cairo_version)
 * @property {string} domain - (Optional) Domain name from FQDN (CRM, Store, etc.)
 * @property {boolean} isSelectAll - Are all items in the list selected. numItems = filteredListSize ==> isSelectAll = TRUE
 * @property {boolean} isTPA - is_tpa
 * @property {string} componentName - (Optional) Component name, if there are two components of the same type per artifact
 * @property {number} ctaIndex - 1 <= ctaIndex <= numCtas -- the number of the CTA out of all CTAs in the specific location
 * @property {number} maxItems - (Optional) Max number of items that can be selected. null if there's no limit.
 * @property {string} componentType - Picker Standalone/Picker Modal/Table/Cards
 * @property {number} numLevels - How many levels (or steps) exist in the selected item's hierarchy?
 * @property {number} numCtas - How many CTAs are available in the current location
 * @property {string} ctaName - "Continue"/"Delete"/"Save"/"Accept"/"Edit"... (in English, not localized)
 * @property {string} localizedCtaName - The CTA name, localized
 * @property {string} resource - Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
 * @property {number} timeFromAction - The time from user CTA click until he gets feedback , in ms (new from Dec 2022)
 * @property {string} itemId - ID of the item that the user clicked on its CTA
 * @property {number} itemIndex - Out of the list of items, what is the index of the clicked item . ** filteredListSize = X --> (1 <= itemIndex <= X)
 * @property {number} currentLevel - What is the hierarchy level (or step) of the selected item? (out of numLevels)
 * @property {number} numItems - How many items have been selected
 * @property {string} appId - app_id
 * @property {number} filteredListSize - How many items are to be presented (filtered)
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @property {string} hostingPlatformContextId - the id of the context entity that the user view or edit (app/account/site)
 * @property {string} url - Page's url
 * @return {LogObject<cairoCtaClickedParams>} LogObject<cairoCtaClickedParams>
 */
export function cairoCtaClicked(params) {
    return { evid: 115, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cairoSearchResults' event (evid: 116)
 *
 * Event description: Sent when the search results are displayed, after a user searches for something in a Wix Patterns component. Relevant components: Picker Standalone, Picker Modal, Table, Cards.
 *
 * @param {cairoSearchResultsParams} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {GUID} csid - csid
 * @property {string} cairoVersion - Wix Patterns_version(cairo_version)
 * @property {number} searchResultsCnt - How many results appeared for the search query. numSearchReults = 0 --> user saw empty state.
 * @property {string} domain - (Optional) Domain name from FQDN (CRM, Store, etc.)
 * @property {string} searchTerm - What did the user search? "" if removed search term.
 * @property {boolean} isTPA - is_tpa
 * @property {string} componentName - (Optional) Component name, if there are two components of the same type per artifact
 * @property {string} componentType - Picker Standalone/Picker Modal/Table/Cards
 * @property {string} resource - Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
 * @property {number} loadingTime - How much time (in ms) did it take to load the results for searchQuery
 * @property {string} appId - app_id
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @property {string} hostingPlatformContextId - the id of the context entity that the user view or edit (app/account/site)
 *
 * @return {LogObject<cairoSearchResultsParams>} LogObject<cairoSearchResultsParams>
 */
export function cairoSearchResults(params) {
    return { evid: 116, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cairoFilterToggled' event (evid: 117)
 *
 * Event description: Sent when a user triggers/removes a filter from a Wix Patterns component. Relevant components: Table, Cards.
 *
 * @param {cairoFilterToggledParams} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {GUID} csid - Cairo session ID
 * @property {string} filterValue - JSON containing filterName's new value
 * @property {string} cairoVersion - Wix Patterns_version(cairo_version)
 * @property {string} domain - (Optional) Domain name from FQDN (crm, stores, etc.)
 * @property {string} filterName - Which column filter do we want to toggle now, e.g. Beginner / Amateur
 * @property {number} listSize - How many items exist (full list, unfiltered)
 * @property {boolean} isTPA - is_tpa
 * @property {string} componentName - (Optional) Component name, if there are two components of the same type per artifact
 * @property {string} componentType - Table/Cards / Picker (from 12/2022)
 * @property {string} currentFilters - The current state of filters, following the filter trigger
 * @property {string} actionType - "add"/"remove" -- Did we add or remove filterName from the list of filters
 * @property {string} resource - Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
 * @property {string} origin - "Panel"/"SubToolbar"/"Toolbar"
 * @property {number} numFiltersActive - How many filters are active after filterName is toggled. actionType = "add" --> numFiltersActive >= 1; actionType = "remove" --> numFiltersActive < numColumns
 * @property {string} appId - app_id
 * @property {number} filteredListSize - How many items are currently presented to user, after filter toggle (filtered)
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @property {string} filterType - The type of the filter - Multi Selection, Single Selection, Number Range
 * @return {LogObject<cairoFilterToggledParams>} LogObject<cairoFilterToggledParams>
 */
export function cairoFilterToggled(params) {
    return { evid: 117, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cairoAllFiltersCleared' event (evid: 118)
 *
 * Event description: Sent when a user clears all of the filters used in a Wix Patterns component. Relevant components: Table, Cards.
 *
 * @param {cairoAllFiltersClearedParams} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {GUID} csid - csid
 * @property {string} cairoVersion - Wix Patterns_version(cairo_version)
 * @property {string} domain - (Optional) Domain name from FQDN (CRM, Store, etc.)
 * @property {boolean} isTPA - is_tpa
 * @property {string} componentName - (Optional) Component name, if there are two components of the same type per artifact
 * @property {string} filterNames - Comma separated list of filter names that have been cleared
 * @property {string} componentType - Table/Cards
 * @property {string} resource - Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
 * @property {string} origin - "sidebar"/"toolbar"
 * @property {number} numFiltersCleared - How many filters have been cleared
 * @property {string} appId - app_id
 * @property {number} filteredListSize - How many items were presented to user, before all of the filters were cleared
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @property {string} hostingPlatformContextId	 - the id of the context entity that the user view or edit (app/account/site)
 * @return {LogObject<cairoAllFiltersClearedParams>} LogObject<cairoAllFiltersClearedParams>
 */
export function cairoAllFiltersCleared(params) {
    return { evid: 118, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cairoFiltersPanelUsed' event (evid: 119)
 *
 * Event description: (This event was changed in 01/2023 from filter panel used to more generic - any feature panel). Sent when a feature sidebar/menu in a Wix Patterns component is opened or closed. Relevant features: Filters, Sort, Views, Costume Columns. Relevant components: Table, Cards.
 *
 * @param {cairoFiltersPanelUsedParams} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {boolean} isPredefined - Is it a view that was predefined by the vertical. Will get "true" for predefined views include "All Items" view, "false" if it's a user view and "null" if the action wasn't made over any view (new field from 01/2023)
 * @property {string} feature - Filter / Sort / Costume Columns / Manage Views / Manage custom fields (new field from 01/2023)/Tags
 * @property {GUID} csid - csid
 * @property {boolean} isOpened - TRUE if the user just opened the sidebar; FALSE if closed
 * @property {string} cairoVersion - Wix Patterns_version(cairo_version)
 * @property {string} domain - (Optional) Domain name from FQDN (CRM, Store, etc.)
 * @property {boolean} isTPA - is_tpa
 * @property {string} componentName - (Optional) Component name, if there are two components of the same type per artifact
 * @property {string} currentSortOrder - Which columns are currently used to sort the list: [{"fieldName": "FIELD_NAME", "order": "asc"} (new field from 01/2023)
 * @property {string} componentType - Table/Cards
 * @property {number} numSortedColumns - How many columns actively sort the data? (new field from 01/2023)
 * @property {number} numColumns - How many columns are shown? (new field from 01/2023)
 * @property {number} numFiltersInView - How many filters comprise the saved view (new field from 01/2023)
 * @property {string} resource - Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
 * @property {string} visibleColumnsOrder - Which columns are currently shown to the user - by the order the user defined (new field from 01/2023)
 * @property {number} timeFromAction - The time from user click on open/close filter panel until he gets feedback and sees the panel opened/closed, in ms (new from Dec 2022, relevant only for filter)
 * @property {string} origin - From where did the user open/close the panel: Create View, Filter Button, X Button, Sort CTA, Costume Columns CTA, Manage Views, Entity page custom fields, Assign Tags
 * @property {number} numFiltersActive - The number of active filters when the user opened/closed the panel/menu
 * @property {string} currentView - Which view is currently displayed to the user. Relevant for Table and Cards. (new field from 01/2023)
 * @property {string} appId - app_id
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @property {string} hostingPlatformContextId	 - the id of the context entity that the user view or edit (app/account/site)
 * @property {string} filterTypes - The types of filters the component contains (single selection, multi selection, number range)
 * @return {LogObject<cairoFiltersPanelUsedParams>} LogObject<cairoFiltersPanelUsedParams>
 */
export function cairoFiltersPanelUsed(params) {
    return { evid: 119, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cairoComponentSorted' event (evid: 120)
 *
 * Event description: Sent when a user sorts a Wix Patterns component. Relevant components: Table, Cards.
 *
 * @param {cairoComponentSortedParams} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {string} prevSortOrder - Which columns were used to sort the list (before the current addition), by the order the user defined: [{"fieldName": "FIELD_NAME", "order": "asc"}, {"fieldName": "FIELD_NAME_1", "order": "desc"}]. Relevant for Table and Cards. (new field from 11/2022)
 * @property {number} numSortingColumns - The number of columns that sorting the component after the current action
 * @property {GUID} csid - csid
 * @property {string} cairoVersion - Wix Patterns_version(cairo_version)
 * @property {string} domain - (Optional) Domain name from FQDN (CRM, Store, etc.)
 * @property {number} listSize - How many items exist (full list, unfiltered)
 * @property {boolean} isTPA - is_tpa
 * @property {string} componentName - (Optional) Component name, if there are two components of the same type per artifact
 * @property {string} componentType - Table/Cards
 * @property {string} resource - Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
 * @property {string} origin - The location the sort action was made from :"SidePanel"/"ColumnHeader" (new field from 11/2022)
 * @property {string} newSortedColumn - By which column are we adding sorting now
 * @property {string} newSortingOrder - "asc"/"desc"/"removed" (was "null" until 12/2022, then changed to "removed")
 * @property {number} itemIndex - The item index inside the sort panel. First row will get 0. In case of simple sort (only 1 column  sorts the table) from the column header - the index will be 0. In case a sorting column was removed from sorting- will get (-1)
 * @property {string} prevSortingOrder - The last order the user used to sort the list by "prev sorting column" : "asc"/"desc"/null (if wasn't sorted)
 * @property {string} newSortOrder - Which columns are currently used to sort the list, by the order the user defined: [{"fieldName": "FIELD_NAME", "order": "asc"}, {"fieldName": "FIELD_NAME_1", "order": "desc"}]. Relevant for Table and Cards. (new field from 11/2022)
 * @property {string} appId - app_id
 * @property {boolean} isAddNewSort - Indication for adding new sort. Will get "true" for cases the event was sent for adding new sort (and "false" for changing the sorted column, sorted order or remove sort) (new from 12/2022)
 * @property {string} prevSortedColumn - The column the user used to sort the component with in the previous sort action. If list wasn't sorted, this should be null
 * @property {number} filteredListSize - How many items are currently presented to user, after filter toggle (filtered)
 * @property {number} prevNumSortingColumns - The number of columns that were sorting the component before the current action
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @return {LogObject<cairoComponentSortedParams>} LogObject<cairoComponentSortedParams>
 */
export function cairoComponentSorted(params) {
    return { evid: 120, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cairoTabSelected' event (evid: 121)
 *
 * Event description: Sent when a user selects a tab in a Wix Patterns component. Relevant components: Table, Cards.
 *
 * @param {cairoTabSelectedParams} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {number} numTabs - How many tabs are dispalyed to the user
 * @property {GUID} csid - csid
 * @property {string} cairoVersion - Wix Patterns_version(cairo_version)
 * @property {string} domain - (Optional) Domain name from FQDN (CRM, Store, etc.)
 * @property {boolean} isTPA - is_tpa
 * @property {number} prevTabIndex - (Optional) Index of the previous tab that the user had selected. 1 <= prevTabIndex <= numTabs; null if no tab was selected.
 * @property {string} componentName - (Optional) Component name, if there are two components of the same type per artifact
 * @property {string} componentType - Table/Cards
 * @property {boolean} hasAllTab - TRUE if "All" tab is displayed for this component; FALSE otherwise
 * @property {string} prevTabId - (Optional) Name of the previous tab that the user had selected. null if no tab was selected.
 * @property {string} resource - Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
 * @property {string} newTabId - Name of the newly selected tab
 * @property {number} newTabIndex - Index of the newly selected tab. 1 <= newTabIndex <= numTabs.
 * @property {string} appId - app_id
 * @property {number} filteredListSize - How many items are currently presented to user, after new tab selection
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @return {LogObject<cairoTabSelectedParams>} LogObject<cairoTabSelectedParams>
 */
export function cairoTabSelected(params) {
    return { evid: 121, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cairoViewSaved' event (evid: 122)
 *
 * Event description: Sent when a user creates/saves a view in a Wix Patterns component. Relevant components: Table, Cards.
 *
 * @param {cairoViewSavedParams} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {string} viewId - The "new view name" unique identifier (new field from 11/2022)
 * @property {boolean} isPredefined - (Relevant only for "save as new view" action, will get null in other cases). Is it a view that was predefined by the vertical. Will get "true" for predefined views include "All Items" view. (new field from 11/2022)
 * @property {string} searchQuery - What did the user search? If there wasn't any search --> searchQuery = null. (new field from 11/2022)
 * @property {GUID} csid - csid
 * @property {number} numColumnsInView - How many columns comprise the saved view (new field from 11/2022)
 * @property {string} cairoVersion - Wix Patterns_version(cairo_version)
 * @property {string} domain - (Optional) Domain name from FQDN (CRM, Store, etc.)
 * @property {string} viewFilters - The filters that comprise the view that was just saved
 * @property {string} newViewName - Name of the newly created/saved/renamed view
 * @property {boolean} isTPA - is_tpa
 * @property {string} componentName - (Optional) Component name, if there are two components of the same type per artifact
 * @property {string} currentSortOrder - Which columns are currently used to sort the list: [{"fieldName": "FIELD_NAME", "order": "asc"} (new field from 11/2022)
 * @property {string} changedAttributes - Which attributes have changed from the last view version? If it's a new view - all the attributes that define the view will be noted. The attributes can be: Filters, Columns Order, Columns Visibility, Sorting, Search (new field from 11/2022)
 * @property {string} componentType - Table/Cards
 * @property {number} numFiltersInView - How many filters comprise the saved view
 * @property {string} resource - Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
 * @property {string} visibleColumnsOrder - Which columns are currently comprise the saved view- by the order the user defined (new field from 11/2022)
 * @property {string} origin - From where was the view created: Panel, SubToolbar, Toolbar
 * @property {string} prevName - View's previous name. In case of 'save as new view' will get null, in case of 'save changes': prev name=new view name, in case of 'rename' will get the previous version of the view's name (new field from 11/2022)
 * @property {string} appId - app_id
 * @property {boolean} isDefault - Is the saved view defined as default view?
 * @property {string} saveType - The save type the user chose from the 'manage view' menu: "save as new view"/ "save changes" / "rename" (new field from 11/2022)
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @return {LogObject<cairoViewSavedParams>} LogObject<cairoViewSavedParams>
 */
export function cairoViewSaved(params) {
    return { evid: 122, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cairoViewSelected' event (evid: 123)
 *
 * Event description: Sent when a user selects a view in a Wix Patterns component. Relevant components: Table, Cards.
 *
 * @param {cairoViewSelectedParams} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {boolean} isPredefined - Is it a view that was predefined by the vertical. Will get "true" for predefined views include "All Items" view.
 * @property {GUID} csid - csid
 * @property {string} cairoVersion - Wix Patterns_version(cairo_version)
 * @property {string} domain - (Optional) Domain name from FQDN (CRM, Store, etc.)
 * @property {string} newViewName - Name of the newly selected view
 * @property {string} prevViewName - (Optional) Name of the previous view that the user was using. null if no view was selected.
 * @property {boolean} isTPA - is_tpa
 * @property {string} componentName - (Optional) Component name, if there are two components of the same type per artifact
 * @property {string} prevFilters - (Optional) The prevoius state of filters, before the new view selection
 * @property {string} componentType - Table/Cards
 * @property {string} currentFilters - The current state of filters, after the new view selection
 * @property {string} resource - Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
 * @property {boolean} isFromSearchView - True if the view was selected from "search view in views dropdown" results (new from 01/2023)
 * @property {number} numFiltersActive - How many filters are active after view selection
 * @property {string} currentView - The selected view ID (match to "new view name", new field from 12/2022)
 * @property {string} appId - app_id
 * @property {number} filteredListSize - How many items are currently presented to user, after filter toggle (filtered)
 * @property {boolean} isDefault - Is the selected view defined as default view?
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @return {LogObject<cairoViewSelectedParams>} LogObject<cairoViewSelectedParams>
 */
export function cairoViewSelected(params) {
    return { evid: 123, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'wixPatternsViewSelectedLoadEndSrc144Evid1234' event (evid: 1234)
 *
 * Event description: Sent when the selected view finishes loading
 *
 * @param {wixPatternsViewSelectedLoadEndSrc144Evid1234Params} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {boolean} isPredefined - Is it a view that was predefined by the vertical. Will get "true" for predefined views include "All Items" view.
 * @property {GUID} csid - csid
 * @property {string} cairoVersion - Wix Patterns_version(cairo_version)
 * @property {string} domain - (Optional) Domain name from FQDN (CRM, Store, etc.)
 * @property {string} newViewName - Name of the newly selected view
 * @property {string} prevViewName - (Optional) Name of the previous view that the user was using. null if no view was selected.
 * @property {boolean} isTPA - is_tpa
 * @property {string} componentName - (Optional) Component name, if there are two components of the same type per artifact
 * @property {string} prevFilters - (Optional) The prevoius state of filters, before the new view selection
 * @property {string} componentType - Table/Cards
 * @property {string} currentFilters - The current state of filters, after the new view selection
 * @property {string} resource - Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
 * @property {boolean} isFromSearchView - True if the view was selected from "search view in views dropdown" results (new from 01/2023)
 * @property {number} numFiltersActive - How many filters are active after view selection
 * @property {string} currentView - The selected view ID (match to "new view name", new field from 12/2022)
 * @property {string} appId - app_id
 * @property {number} filteredListSize - How many items are currently presented to user, after filter toggle (filtered)
 * @property {boolean} isDefault - Is the selected view defined as default view?
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @property {number} loadingTime - Duration in MS from when the user clicked on the view until it appeared
 * @return {LogObject<wixPatternsViewSelectedLoadEndSrc144Evid1234Params>} LogObject<wixPatternsViewSelectedLoadEndSrc144Evid1234Params>
 */
export function wixPatternsViewSelectedLoadEndSrc144Evid1234(params) {
    return { evid: 1234, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cairoViewDeleted' event (evid: 124)
 *
 * Event description: Sent when a user deletes a view in a Wix Patterns component. Relevant components: Table, Cards.
 *
 * @param {cairoViewDeletedParams} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {string} viewId - The "view name" (deleted view) unique identifier (new field from 11/2022)
 * @property {string} viewName - Name of the deleted view
 * @property {GUID} csid - csid
 * @property {string} cairoVersion - Wix Patterns_version(cairo_version)
 * @property {string} domain - (Optional) Domain name from FQDN (CRM, Store, etc.)
 * @property {string} viewFilters - The filters that comprised the view that was just deleted
 * @property {boolean} isTPA - is_tpa
 * @property {string} componentName - (Optional) Component name, if there are two components of the same type per artifact
 * @property {string} componentType - Table/Cards
 * @property {number} numFiltersInView - How many filters comprised the deleted view
 * @property {string} resource - Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
 * @property {boolean} wasSelected - TRUE if viewName was the selected view before deletion; FALSE otherwise
 * @property {string} appId - app_id
 * @property {boolean} isDefault - Was the deleted view defined as default view?
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @return {LogObject<cairoViewDeletedParams>} LogObject<cairoViewDeletedParams>
 */
export function cairoViewDeleted(params) {
    return { evid: 124, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cairoExportCtaClicked' event (evid: 125)
 *
 * Event description: Sent when a user clicks the "Export" CTA in a Wix Patterns component
 *
 * @param {cairoExportCtaClickedParams} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {string} exportId - A unique ID that will help join all events related to a specific export process
 * @property {GUID} csid - csid
 * @property {string} cairoVersion - Wix Patterns_version(cairo_version)
 * @property {number} numSelectedItems - How many items does the user wish to export
 * @property {string} domain - (Optional) Domain name from FQDN (CRM, Store, etc.)
 * @property {string} availableExportTypes - A list of all of the available export types, along with the number of items that would be exported using each of the options. E.g. {"All Items": 100, "Filtered Items": 80, "Selected Items": 10}
 * @property {boolean} isTPA - is_tpa
 * @property {string} componentName - (Optional) Component name, if there are two components of the same type per artifact
 * @property {string} componentType - Table
 * @property {string} resource - Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
 * @property {string} appId - app_id
 * @property {number} filteredListSize - How many items are currently presented to user (filtered)
 * @property {string} defaultExportType - What type of export is automatically selected when the user clicks the export CTA: "All Items"/"Filtered Items"/"Selected Items"
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @property {string} hostingPlatformContextId	 - the id of the context entity that the user view or edit (app/account/site)
 * @return {LogObject<cairoExportCtaClickedParams>} LogObject<cairoExportCtaClickedParams>
 */
export function cairoExportCtaClicked(params) {
    return { evid: 125, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cairoItemToggledInExportModal' event (evid: 126)
 *
 * Event description: Sent when user changes selection in the Wix Patterns export modal
 *
 * @param {cairoItemToggledInExportModalParams} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {string} exportId - A unique ID that will help join all events related to a specific export process
 * @property {string} prevSelectedExportType - What type of export did the user have selected before swiching to newSelectedExportType: "All Items"/"Filtered Items"/"Selected Items"
 * @property {string} newSelectedExportType - What type of export did the user switch to: "All Items"/"Filtered Items"/"Selected Items"
 * @property {GUID} csid - csid
 * @property {string} cairoVersion - Wix Patterns_version(cairo_version)
 * @property {string} domain - (Optional) Domain name from FQDN (CRM, Store, etc.)
 * @property {string} availableExportTypes - A list of all of the available export types, along with the number of items that would be exported using each of the options. E.g. {"All Items": 100, "Filtered Items": 80, "Selected Items": 10}
 * @property {boolean} isTPA - is_tpa
 * @property {string} componentName - (Optional) Component name, if there are two components of the same type per artifact
 * @property {string} componentType - Table
 * @property {string} resource - Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
 * @property {string} appId - app_id
 * @property {number} filteredListSize - How many items are currently presented to user (filtered)
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @return {LogObject<cairoItemToggledInExportModalParams>} LogObject<cairoItemToggledInExportModalParams>
 */
export function cairoItemToggledInExportModal(params) {
    return { evid: 126, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cairoExportModalCtaClicked' event (evid: 127)
 *
 * Event description: Sent when the user clicks any CTA in the export modal
 *
 * @param {cairoExportModalCtaClickedParams} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {string} exportId - A unique ID that will help join all events related to a specific export process
 * @property {GUID} csid - csid
 * @property {string} cairoVersion - Wix Patterns version (cairo_version)
 * @property {string} domain - (Optional) Domain name from FQDN (CRM, Store, etc.)
 * @property {string} availableExportTypes - A list of all of the available export types, along with the number of items that would be exported using each of the options
 * @property {boolean} isTPA - is_tpa
 * @property {string} componentName - (Optional) Component name, if there are two components of the same type per artifact
 * @property {string} componentType - Table
 * @property {boolean} supportsTotal - Does the vertical using Cairo support total number of items in list
 * @property {string} selectedExportType - What type of export does the user want: "All Items"/"Filtered Items"/"Selected Items"
 * @property {string} resource - Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
 * @property {string} origin - From where did the user close the modal: "Export Button"/"Cancel Button"/"X Button"
 * @property {number} numItems - How many items does the user want to export. If no items have been selected (selectedExportType = "All Items"), then all items in list.
 * @property {string} appId - app_id
 * @property {string} action - Does the user want to proceed with the export or dismiss the modal
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @property {string} hostingPlatformContextId	 - the id of the context entity that the user view or edit (app/account/site)
 * @return {LogObject<cairoExportModalCtaClickedParams>} LogObject<cairoExportModalCtaClickedParams>
 */
export function cairoExportModalCtaClicked(params) {
    return { evid: 127, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cairoExportProcessStart' event (evid: 128)
 *
 * Event description: Sent when the export process begins
 *
 * @param {cairoExportProcessStartParams} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {string} exportId - A unique ID that will help join all events related to a specific export process
 * @property {number} try - Which try is this; if try > 1, this is a retry
 * @property {GUID} csid - csid
 * @property {string} cairoVersion - Wix Patterns_version(cairo_version)
 * @property {string} domain - (Optional) Domain name from FQDN (CRM, Store, etc.)
 * @property {boolean} isTPA - is_tpa
 * @property {string} componentName - (Optional) Component name, if there are two components of the same type per artifact
 * @property {string} componentType - Table
 * @property {boolean} supportsTotal - Does the vertical using Cairo support total number of items in list
 * @property {string} selectedExportType - What type of export does the user want: "All Items"/"Filtered Items"/"Selected Items"
 * @property {string} resource - Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
 * @property {number} numItems - How many items does the user want to export. If no items have been selected (selectedExportType = "All Items"), then all items in list.
 * @property {string} appId - app_id
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @return {LogObject<cairoExportProcessStartParams>} LogObject<cairoExportProcessStartParams>
 */
export function cairoExportProcessStart(params) {
    return { evid: 128, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cairoUserAttemptsToCancelTheExport' event (evid: 129)
 *
 * Event description: Sent when the user tries to cancel the export process AFTER it has begun
 *
 * @param {cairoUserAttemptsToCancelTheExportParams} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {number} duration - How much time (in ms) did it take since the export process began
 * @property {string} exportId - A unique ID that will help join all events related to a specific export process
 * @property {number} try - Which try is this; if try > 1, this is a retry
 * @property {GUID} csid - csid
 * @property {string} cairoVersion - Wix Patterns version (cairo_version)
 * @property {string} domain - (Optional) Domain name from FQDN (CRM, Store, etc.)
 * @property {boolean} isTPA - is_tpa
 * @property {string} componentName - (Optional) Component name, if there are two components of the same type per artifact
 * @property {number} numItemsExported - How many items were exported before the user tried to cancel the export
 * @property {string} componentType - Table
 * @property {boolean} supportsTotal - Does the vertical using Cairo support total number of items in list
 * @property {string} selectedExportType - What type of export does the user want: "All Items"/"Filtered Items"/"Selected Items"
 * @property {string} resource - Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
 * @property {string} origin - How did the user try to cancel the export process: "Tab Closed"/"Cancel Buton"/"X Button"
 * @property {number} numItems - How many items does the user want to export. If no items have been selected (selectedExportType = "All Items"), then all items in list.
 * @property {string} appId - app_id
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @return {LogObject<cairoUserAttemptsToCancelTheExportParams>} LogObject<cairoUserAttemptsToCancelTheExportParams>
 */
export function cairoUserAttemptsToCancelTheExport(params) {
    return { evid: 129, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cairoCancelExportModalCtaClicked' event (evid: 130)
 *
 * Event description: Sent when the user clicks any of the CTAs in the "Cancel the export?" modal
 *
 * @param {cairoCancelExportModalCtaClickedParams} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {number} duration - How much time (in ms) did it take since the export process began
 * @property {string} exportId - A unique ID that will help join all events related to a specific export process
 * @property {string} modalType - Did the user try to close the tab ("Browser") or cancel the export ("Export")
 * @property {number} try - Which try is this; if try > 1, this is a retry
 * @property {GUID} csid - csid
 * @property {string} cairoVersion - Wix Patterns version (cairo_version)
 * @property {string} domain - (Optional) Domain name from FQDN (CRM, Store, etc.)
 * @property {boolean} isTPA - is_tpa
 * @property {string} componentName - (Optional) Component name, if there are two components of the same type per artifact
 * @property {number} numItemsExported - How many items were exported before the user tried to cancel the export
 * @property {string} componentType - Table
 * @property {string} ctaName - Which CTA did the user click in the Cancel Export modal: "Cancel Export"/"Go Back"/"X Button" (modalType = "Export") OR "Cancel"/"Leave" (modalType = "Browser")
 * @property {boolean} supportsTotal - Does the vertical using Cairo support total number of items in list
 * @property {string} selectedExportType - What type of export does the user want: "All Items"/"Filtered Items"/"Selected Items"
 * @property {string} resource - Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
 * @property {number} numItems - How many items does the user want to export. If no items have been selected (selectedExportType = "All Items"), then all items in list.
 * @property {string} appId - app_id
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @return {LogObject<cairoCancelExportModalCtaClickedParams>} LogObject<cairoCancelExportModalCtaClickedParams>
 */
export function cairoCancelExportModalCtaClicked(params) {
    return { evid: 130, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cairoExportProcessEnd' event (evid: 131)
 *
 * Event description: Sent when the export process ends, either successfully or not (failed/stopped by user)
 *
 * @param {cairoExportProcessEndParams} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {number} duration - How much time (in ms) did it take since the export process began
 * @property {string} exportId - A unique ID that will help join all events related to a specific export process
 * @property {number} try - Which try is this; if try > 1, this is a retry
 * @property {GUID} csid - csid
 * @property {string} cairoVersion - Wix Patterns version (cairo_version)
 * @property {string} domain - (Optional) Domain name from FQDN (CRM, Store, etc.)
 * @property {string} result - Was the export successful or did it fail/stopped by user: "success"/'fail"/"stopped by user"
 * @property {boolean} isTPA - is_tpa
 * @property {string} fileName - (Optional) Name of the file to be exported
 * @property {string} componentName - (Optional) Component name, if there are two components of the same type per artifact
 * @property {number} numItemsExported - How many items were exported before the export ended, either successfully or not.
 * @property {string} componentType - Table
 * @property {boolean} supportsTotal - Does the vertical using Cairo support total number of items in list
 * @property {string} selectedExportType - What type of export does the user want: "All Items"/"Filtered Items"/"Selected Items"
 * @property {string} resource - Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
 * @property {number} numItems - How many items does the user want to export. If no items have been selected (selectedExportType = "All Items"), then all items in list.
 * @property {string} appId - app_id
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @return {LogObject<cairoExportProcessEndParams>} LogObject<cairoExportProcessEndParams>
 */
export function cairoExportProcessEnd(params) {
    return { evid: 131, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cairoFileDownloadToastDisplayed' event (evid: 132)
 *
 * Event description: Sent when the export ends successfully and the user is prompted that the file is being downloaded
 *
 * @param {cairoFileDownloadToastDisplayedParams} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {string} exportType - What type of export did the user choose: "All Items"/"Filtered Items"/"Selected Items"
 * @property {string} exportId - A unique ID that will help join all events related to a specific export process
 * @property {number} try - Which try is this; if try > 1, this is a retry
 * @property {GUID} csid - csid
 * @property {string} cairoVersion - Wix Patterns version (cairo_version)
 * @property {number} numSelectedItems - How many items did the user export. If no items have been selected (selectedExportType = "All Items"), then all items in list.
 * @property {string} domain - (Optional) Domain name from FQDN (CRM, Store, etc.)
 * @property {boolean} isTPA - is_tpa
 * @property {string} componentName - (Optional) Component name, if there are two components of the same type per artifact
 * @property {string} componentType - Table
 * @property {string} resource - Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
 * @property {string} appId - app_id
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @return {LogObject<cairoFileDownloadToastDisplayedParams>} LogObject<cairoFileDownloadToastDisplayedParams>
 */
export function cairoFileDownloadToastDisplayed(params) {
    return { evid: 132, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cairoFileDownloadToastDismissed' event (evid: 133)
 *
 * Event description: Sent when the toast that tells the user that the export is done and the file is being downloaded is dismissed (by user or automatically).
 *
 * @param {cairoFileDownloadToastDismissedParams} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {string} exportType - What type of export did the user choose: "All Items"/"Filtered Items"/"Selected Items"
 * @property {number} duration - How much time (in ms) was the notification displayed before it was dismissed
 * @property {string} exportId - A unique ID that will help join all events related to a specific export process
 * @property {GUID} csid - csid
 * @property {string} cairoVersion - Wix Patterns version (cairo_version)
 * @property {number} numSelectedItems - How many items did the user export. If no items have been selected (selectedExportType = "All Items"), then all items in list.
 * @property {string} domain - (Optional) Domain name from FQDN (CRM, Store, etc.)
 * @property {boolean} isTPA - is_tpa
 * @property {string} componentName - (Optional) Component name, if there are two components of the same type per artifact
 * @property {string} componentType - Table
 * @property {string} dismissMode - Did the user click the X button ("manual") or was the notification automatically dismissed ("automatic")
 * @property {string} resource - Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
 * @property {string} appId - app_id
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @return {LogObject<cairoFileDownloadToastDismissedParams>} LogObject<cairoFileDownloadToastDismissedParams>
 */
export function cairoFileDownloadToastDismissed(params) {
    return { evid: 133, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cairoFileDownloadToastDownloadButtonClicked' event (evid: 134)
 *
 * Event description: Sent when the user clicks the "Download Manually" button in the toast that is displayed after the export process is complete
 *
 * @param {cairoFileDownloadToastDownloadButtonClickedParams} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {string} exportType - What type of export did the user choose: "All Items"/"Filtered Items"/"Selected Items"
 * @property {number} duration - How much time (in ms) was the notification displayed before the button was clicked
 * @property {string} exportId - A unique ID that will help join all events related to a specific export process
 * @property {GUID} csid - csid
 * @property {string} cairoVersion - Wix Patterns version (cairo_version)
 * @property {number} numSelectedItems - How many items did the user export. If no items have been selected (selectedExportType = "All Items"), then all items in list.
 * @property {string} domain - (Optional) Domain name from FQDN (CRM, Store, etc.)
 * @property {boolean} isTPA - is_tpa
 * @property {string} componentName - (Optional) Component name, if there are two components of the same type per artifact
 * @property {string} componentType - Table
 * @property {string} resource - Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
 * @property {string} appId - app_id
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @return {LogObject<cairoFileDownloadToastDownloadButtonClickedParams>} LogObject<cairoFileDownloadToastDownloadButtonClickedParams>
 */
export function cairoFileDownloadToastDownloadButtonClicked(params) {
    return { evid: 134, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cairoExportFailedModalCtaClicked' event (evid: 135)
 *
 * Event description: Sent when the user clicks a CTA in the "Export Failed" modal
 *
 * @param {cairoExportFailedModalCtaClickedParams} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {string} exportId - A unique ID that will help join all events related to a specific export process
 * @property {number} try - Which try is this; if try > 1, this is a retry
 * @property {GUID} csid - csid
 * @property {string} cairoVersion - Wix Patterns version (cairo_version)
 * @property {string} domain - (Optional) Domain name from FQDN (CRM, Store, etc.)
 * @property {boolean} isTPA - is_tpa
 * @property {string} componentName - (Optional) Component name, if there are two components of the same type per artifact
 * @property {number} numItemsExported - How many items were exported before the export failed.
 * @property {string} componentType - Table
 * @property {string} ctaName - Which CTA did the user click in the Export Failed modal: "Cancel"/"X Button" (export is cancelled) OR "Try Again" (export process restarts) OR "learn more" (user is led to contact support)
 * @property {boolean} supportsTotal - Does the vertical using Cairo support total number of items in list
 * @property {string} selectedExportType - What type of export did the user choose: "All Items"/"Filtered Items"/"Selected Items"
 * @property {string} resource - Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
 * @property {number} numItems - How many items did the user export. If no items have been selected (selectedExportType = "All Items"), then all items in list.
 * @property {string} appId - app_id
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @return {LogObject<cairoExportFailedModalCtaClickedParams>} LogObject<cairoExportFailedModalCtaClickedParams>
 */
export function cairoExportFailedModalCtaClicked(params) {
    return { evid: 135, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cairoTableTopNotificationDisplayed' event (evid: 136)
 *
 * Event description: Sent when a notification is displayed, showing a message that appears between the table header and the table rows
 *
 * @param {cairoTableTopNotificationDisplayedParams} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {GUID} csid - csid
 * @property {string} cairoVersion - Wix Patterns version (cairo_version)
 * @property {string} domain - (Optional) Domain name from FQDN (CRM, Store, etc.)
 * @property {boolean} isTPA - is_tpa
 * @property {string} componentName - (Optional) Component name, if there are two components of the same type per artifact
 * @property {string} componentType - Table
 * @property {string} resource - Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
 * @property {string} notificationText - What is displayed to the user, localized
 * @property {string} appId - app_id
 * @property {number} filteredListSize - How many items are currently presented to user (full list, filtered)
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @return {LogObject<cairoTableTopNotificationDisplayedParams>} LogObject<cairoTableTopNotificationDisplayedParams>
 */
export function cairoTableTopNotificationDisplayed(params) {
    return { evid: 136, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cairoTableTopNotificationDismissed' event (evid: 137)
 *
 * Event description: Sent when the notification at the top of the table is dismissed, either manually or automatically
 *
 * @param {cairoTableTopNotificationDismissedParams} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {number} duration - How much time (in ms) was the notification displayed before it was dismissed
 * @property {GUID} csid - csid
 * @property {string} cairoVersion - Wix Patterns version (cairo_version)
 * @property {string} domain - (Optional) Domain name from FQDN (CRM, Store, etc.)
 * @property {boolean} isTPA - is_tpa
 * @property {string} componentName - (Optional) Component name, if there are two components of the same type per artifact
 * @property {string} componentType - Table
 * @property {string} dismissMode - Did the user click the X button ("manual") or was the notification automatically dismissed ("automatic")
 * @property {string} resource - Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
 * @property {string} notificationText - What is displayed to the user, localized
 * @property {string} appId - app_id
 * @property {number} filteredListSize - How many items are currently presented to user (full list, filtered)
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @return {LogObject<cairoTableTopNotificationDismissedParams>} LogObject<cairoTableTopNotificationDismissedParams>
 */
export function cairoTableTopNotificationDismissed(params) {
    return { evid: 137, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cairoDragItem' event (evid: 138)
 *
 * Event description: Sent when a user clicks on an item and tries to drag it, in order to sort the items manually
 *
 * @param {cairoDragItemParams} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {string} searchQuery - What did the user search? isFromSearch = FALSE --> searchQuery = null. (relate to ticket 521).
 * @property {number} initialItems - Initial number of items loaded (before scroll and autoload)
 * @property {GUID} csid - csid
 * @property {GUID} dragAndDropID - A "couple" identifier , match between drag action and its drop action
 * @property {string} cairoVersion - Wix Patterns version (cairo_version)
 * @property {string} domain - (Optional) Domain name from FQDN (crm, stores, etc.)
 * @property {boolean} isTPA - is_tpa
 * @property {string} componentName - (Optional) Component name, if there are two components of the same type per artifact
 * @property {string} currentTab - Which tab is currently displayed to the user. Relevant for Table and Cards.
 * @property {string} currentSortOrder - Which columns are currently used to sort the list: [{"fieldName": "FIELD_NAME", "order": "asc"}
 * @property {boolean} isFromHandle - Is the item dragged from the handle area?
 * @property {string} componentType - Picker Standalone/Picker Modal/Table/Cards
 * @property {string} currentFilters - A list of filters that are currently displayed to user: {"filter1": "filterValue1", "filter2": "filterValue2a", "filterValue2b"}. Relevant for Table and Cards. For now, it can only be a "category filter" that is displayed in this event. (relate to ticket 525+521).
 * @property {string} resource - Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
 * @property {string} itemId - ID of the item that the user tries to drag.
 * @property {number} itemIndex - Out of the list of results, what was the index of the dragged item (before dragging). ** filteredListSize = X --> (1 <= itemIndex <= X)
 * @property {string} currentView - Which view is currently displayed to the user. Relevant for Table and Cards.
 * @property {number} numItemsBefore - (relate to ticket 526). How many items have been selected before user clicks item and starts the drag action?
 * @property {string} appId - app_id
 * @property {number} filteredListSize - How many items are to be presented (filtered)
 * @property {boolean} isFromSearch - Did the user try to drag the item from a list of search results (relate to ticket 521).
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @property {number} itemLevel - indicates the level of the hierarchy the item is in.
 * @property {string} hierarchyPathIndex - gives the indexes path to get to the item from the parent where in each level the index is calculated from the beginning
 * @return {LogObject<cairoDragItemParams>} LogObject<cairoDragItemParams>
 */
export function cairoDragItem(params) {
    return { evid: 138, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cairoDragItemEndDrop' event (evid: 139)
 *
 * Event description: Sent when a user finish to drag an item
 *
 * @param {cairoDragItemEndDropParams} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {number} duration - duration in ms from starting to drag the item untill the action has ended
 * @property {string} searchQuery - What did the user search? isFromSearch = FALSE --> searchQuery = null (relate to ticket 521).
 * @property {number} initialItems - Initial number of items loaded (before scroll and autoload)
 * @property {GUID} csid - csid
 * @property {GUID} dragAndDropID - A "couple" identifier , match between drag action and its drop action
 * @property {number} itemIndexBefore - Out of the list of results, what was the index of the dragged item (before dragging). ** filteredListSize = X --> (1 <= itemIndexBefore <= X)
 * @property {string} cairoVersion - Wix Patterns version (cairo_version)
 * @property {string} domain - (Optional) Domain name from FQDN (crm, stores, etc.)
 * @property {boolean} isTPA - is_tpa
 * @property {string} componentName - (Optional) Component name, if there are two components of the same type per artifact
 * @property {string} currentTab - Which tab is currently displayed to the user. Relevant for Table and Cards.
 * @property {string} currentSortOrder - Which columns are currently used to sort the list: [{"fieldName": "FIELD_NAME", "order": "asc"}
 * @property {boolean} isFromHandle - Is the item dragged from the handle area?
 * @property {string} componentType - Picker Standalone/Picker Modal/Table/Cards
 * @property {number} itemIndexAfter - Out of the list of results, what is the new index of the dragged item (after dragging). ** filteredListSize = X --> (1 <= itemIndexAfter <= X) **when endType <> drop succeeded --> itemIndexAfter = itemIndexBefore
 * @property {string} currentFilters - A list of filters that are currently displayed to user: {"filter1": "filterValue1", "filter2": "filterValue2a", "filterValue2b"}. Relevant for Table and Cards. For now, it can only be a "category filter" that is displayed in this event. (relate to ticket 525+521).
 * @property {string} resource - Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
 * @property {string} itemId - ID of the item that the user tries to drag
 * @property {string} endType - (happy flow+ ticket 529) how did the "drag action" end? Will get one of the following:
 *  "drop succeeded" = the item has been dropped inside the collection
 * "drop back" = the item has been dropped to it's original index (itemIndexBefore=itenIndexAfter)
 *  "drop outside" = the item has been dropped outside the collection (itemIndexBefore=itenIndexAfter)
 *  "clicked ESC" = the user clicked on the ESC button and the action was cancelled. "drag disabled" = the user tried to drag an item when the this feature is disabled. If the action was cancelled due to external-to-Cairo logic- event 144:140 will be sent instead.
 * @property {string} currentView - Which view is currently displayed to the user. Relevant for Table and Cards.
 * @property {number} numItemsBefore - (relate to ticket 526). How many items have been selected before user clicks item and starts the drag action?
 * @property {string} appId - app_id
 * @property {number} filteredListSize - How many items are to be presented (filtered)
 * @property {boolean} isFromSearch - Did the user try to drag the item from a list of search results (relate to ticket 521).
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @property {number} itemLevelBefore -  indicates the level of the hierarchy the item is in before the drag and drop
 * @property {number} itemLevelAfter -  indicates the level of the hierarchy the item is in after the drag and drop
 * @property {string} hierarchyPathIndexBefore - gives the indexes path to get to the item from the parent where in each level the index is calculated from the beginning (the path before the drag and drop)
 * @property {string} hierarchyPathIndexAfter - gives the indexes path to get to the item from the parent where in each level the index is calculated from the beginning (the path after the drag and drop)
 * @return {LogObject<cairoDragItemEndDropParams>} LogObject<cairoDragItemEndDropParams>
 */
export function cairoDragItemEndDrop(params) {
    return { evid: 139, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cairoDragActionUnsuccessfulUpdateInServer' event (evid: 140)
 *
 * Event description: Sent when a user finish to drag items but those changes weren't update in the server from different reasons
 *
 * @param {cairoDragActionUnsuccessfulUpdateInServerParams} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {string} searchQuery - (not relevant for now) What did the user search? isFromSearch = FALSE --> searchQuery = null .
 * @property {GUID} csid - csid
 * @property {GUID} dragAndDropID - A "couple" identifier , match between drag action and its drop action- will get the identifier of the failed action
 * @property {number} itemIndexBefore - Out of the list of results, what was the index of the clicked item (before dragging). ** filteredListSize = X --> (1 <= itemIndexBefore <= X)
 * @property {string} cairoVersion - Wix Patterns version (cairo_version)
 * @property {string} domain - (Optional) Domain name from FQDN (crm, stores, etc.)
 * @property {boolean} isTPA - is_tpa
 * @property {number} numOfWaitingUpdates - number of updates in the sequence that follow the failed action
 * @property {string} componentName - (Optional) Component name, if there are two components of the same type per artifact
 * @property {string} componentType - Picker Standalone/Picker Modal/Table/Cards
 * @property {number} itemIndexAfter - Out of the list of results, what is the new index of the clicked item (after dragging, the new index). ** filteredListSize = X --> (1 <= itemIndexAfter <= X) **when endType <> drop succeeded --> itemIndexAfter = itemIndexBefore
 * @property {string} currentFilters - A list of filters that are currently displayed to user: {"filter1": "filterValue1", "filter2": "filterValue2a", "filterValue2b"}. Relevant for Table and Cards. For now, it can only be a "category filter" that is displayed in this event. (relate to ticket 525+521).
 * @property {string} errorType - What is the type of the error? "Update failed" = updates has failed in the server, "Window closed" = the user clicked the X button to close the window before the server finished the update, "Left page"= the user try navigate to another page before the server finished the update, "External logic" = the action was cancelled due to a vertical logic
 * @property {number} numItemsBeforeFailed - How many items have been selected when user made the failed action?
 * @property {string} resource - Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
 * @property {string} filtersApplied - A list of filters that were displayed to user when he made the failed action: {"filter1": "filterValue1", "filter2": "filterValue2a", "filterValue2b"}. Relevant for Table and Cards.
 * @property {number} timeFromEndDrag - duration in ms from the end of the drag action until the error indication
 * @property {string} viewShown - Which view was displayed to the user when he made the failed action. Relevant for Table and Cards.
 * @property {string} itemId - ID of the item that the user tries to drag
 * @property {number} filteredListSizeShown - How many items were presented (filtered) to the user when he made the failed action?
 * @property {number} numItemsBefore - How many items have been selected before user clicks item and starts the drag action?
 * @property {string} appId - app_id
 * @property {number} filteredListSize - How many items are to be presented (filtered)?
 * @property {string} sortOrderApplied - Which columns were used to sort the list when the user made the failed action: [{"fieldName": "FIELD_NAME", "order": "asc"}
 * @property {string} tabShown - Which tab was displayed to the user when he made the failed action. Relevant for Table and Cards.
 * @property {boolean} wasFromHandle - Was the failed action made from the handle area?
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @return {LogObject<cairoDragActionUnsuccessfulUpdateInServerParams>} LogObject<cairoDragActionUnsuccessfulUpdateInServerParams>
 */
export function cairoDragActionUnsuccessfulUpdateInServer(params) {
    return { evid: 140, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cairoTryAgainClicked' event (evid: 141)
 *
 * Event description: Sent when a user clicks on a "try again" CTA he gets in an error notification
 *
 * @param {cairoTryAgainClickedParams} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {GUID} csid - csid
 * @property {string} cairoVersion - Wix Patterns version (cairo_version)
 * @property {string} domain - (Optional) Domain name from FQDN (crm, stores, etc.)
 * @property {boolean} isTPA - is_tpa
 * @property {number} numOfWaitingUpdates - (optional) number of updates in the sequence that follow the failed action
 * @property {string} componentName - (Optional) Component name, if there are two components of the same type per artifact
 * @property {string} componentType - Picker Standalone/Picker Modal/Table/Cards
 * @property {string} loaction - Toast / Custom fields widget / View only widget / Component error state
 * @property {string} resource - Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
 * @property {string} actionName - the action name that failed and triggered the notification (for example: drag, column reorder etc.)
 * @property {string} appId - app_id
 * @property {number} filteredListSize - How many items were presented when the user made the failed action (filtered)
 * @property {boolean} isFromSearch - Did the user made the failed action on a list of search results
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @property {string} url - The page's url
 * @return {LogObject<cairoTryAgainClickedParams>} LogObject<cairoTryAgainClickedParams>
 */
export function cairoTryAgainClicked(params) {
    return { evid: 141, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cairoManageViewClicked' event (evid: 142)
 *
 * Event description: Sent when a user clicks on "Manage View" in a Wix Patterns component. Relevant components: Table, Cards.
 *
 * @param {cairoManageViewClickedParams} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {boolean} isPredefined - Is it a view that was predefined by the vertical. Will get "true" for predefined views include "All Items" view.
 * @property {GUID} csid - csid
 * @property {string} cairoVersion - Wix Patterns version (cairo_version)
 * @property {string} domain - (Optional) Domain name from FQDN (CRM, Store, etc.)
 * @property {boolean} isTPA - is_tpa
 * @property {string} componentName - (Optional) Component name, if there are two components of the same type per artifact
 * @property {string} componentType - Table/Cards
 * @property {number} numFiltersInView - How many filters comprise the saved view
 * @property {string} resource - Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
 * @property {string} currentView - Which view is currently displayed to the user. Relevant for Table and Cards.
 * @property {string} appId - app_id
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @return {LogObject<cairoManageViewClickedParams>} LogObject<cairoManageViewClickedParams>
 */
export function cairoManageViewClicked(params) {
    return { evid: 142, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cairoManageViewActionSelected' event (evid: 143)
 *
 * Event description: Sent when a user selects one of the actions in "manage view" menu.
 *
 * @param {cairoManageViewActionSelectedParams} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {GUID} csid - csid
 * @property {string} cairoVersion - Wix Patterns version (cairo_version)
 * @property {string} domain - (Optional) Domain name from FQDN (CRM, Store, etc.)
 * @property {boolean} isTPA - is_tpa
 * @property {string} componentName - (Optional) Component name, if there are two components of the same type per artifact
 * @property {string} componentType - Picker Standalone/Picker Modal/Table/Cards
 * @property {number} numActions - How many actions are existing in the current menu (including disabled actions)?
 * @property {string} resource - Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
 * @property {number} actionIndex - 1 <= actionIndex <= numActions -- the number of the action out of all actions in the menu
 * @property {string} actionName - "view-save-new"/"Save Changes"/"Rename"/"Delete" etc... (in English, not localized)
 * @property {string} currentView - Which view is currently displayed to the user. Relevant for Table and Cards.
 * @property {string} appId - app_id
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @return {LogObject<cairoManageViewActionSelectedParams>} LogObject<cairoManageViewActionSelectedParams>
 */
export function cairoManageViewActionSelected(params) {
    return { evid: 143, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cairoUndoClicked' event (evid: 144)
 *
 * Event description: Sent when a user clicks on a "undo" CTA he gets in a toast confirming an action was made
 *
 * @param {cairoUndoClickedParams} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {string} viewId - The view that the undo action was made on
 * @property {string} viewNameApplied - In case of action name=rename view - the new name the user gave to the view and now he undo it
 * @property {string} viewName - The view name that the undo action was made on (in case of rename view- this will give the original view name)
 * @property {GUID} csid - csid
 * @property {string} cairoVersion - Wix Patterns version (cairo_version)
 * @property {string} domain - (Optional) Domain name from FQDN (crm, stores, etc.)
 * @property {boolean} isTPA - is_tpa
 * @property {string} componentName - (Optional) Component name, if there are two components of the same type per artifact
 * @property {string} currentTab - Which tab is currently displayed to the user. Relevant for Table and Cards.
 * @property {string} currentSortOrder - Which columns are currently used to sort the list: [{"fieldName": "FIELD_NAME", "order": "asc"}
 * @property {string} changedAttributes - Which attributes have changed from the saved status to the current
 * @property {string} componentType - Picker Standalone/Picker Modal/Table/Cards
 * @property {string} currentFilters - A list of filters that are currently displayed to user: {"filter1": "filterValue1", "filter2": "filterValue2a", "filterValue2b"}. Relevant for Table and Cards.
 * @property {string} resource - Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
 * @property {string} actionName - The action's name the user wants to undo and triggered the toast (for example: view- save changes, view- rename, view- delete etc.)
 * @property {number} filteredListSizeShown - How many items were presented (filtered) to the user when he made the action he wants to undo?
 * @property {string} currentView - Which view is currently displayed to the user. Relevant for Table and Cards.
 * @property {string} appId - app_id
 * @property {number} filteredListSize - How many items are to be presented (filtered)
 * @property {string} sortOrderApplied - Which columns were used to sort the list when the user made the action he wants to undo: [{"fieldName": "FIELD_NAME", "order": "asc"}
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @return {LogObject<cairoUndoClickedParams>} LogObject<cairoUndoClickedParams>
 */
export function cairoUndoClicked(params) {
    return { evid: 144, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cairoViewsUnsuccessfulUpdateInServer' event (evid: 145)
 *
 * Event description: Sent when a user made an action on a view, but his changes weren't update in the server from different reasons
 *
 * @param {cairoViewsUnsuccessfulUpdateInServerParams} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {string} viewId - Which view was the failed action made on. Relevant for Table and Cards.
 * @property {string} searchQuery - (not relevant for now) What did the user search? isFromSearch = FALSE --> searchQuery = null .
 * @property {GUID} csid - csid
 * @property {number} timeFromEndAction - duration in ms from the end of the failed action until the error indication
 * @property {string} cairoVersion - Wix Patterns version (cairo_version)
 * @property {string} domain - (Optional) Domain name from FQDN (crm, stores, etc.)
 * @property {boolean} isTPA - is_tpa
 * @property {number} numOfWaitingUpdates - number of updates in the sequence that follow the failed action
 * @property {string} componentName - (Optional) Component name, if there are two components of the same type per artifact
 * @property {string} currentTab - Which tab is currently displayed to the user. Relevant for Table and Cards.
 * @property {string} componentType - Picker Standalone/Picker Modal/Table/Cards
 * @property {string} currentFilters - A list of filters that are currently displayed to user: {"filter1": "filterValue1", "filter2": "filterValue2a", "filterValue2b"}. Relevant for Table and Cards. For now, it can only be a "category filter" that is displayed in this event. (relate to ticket 525+521).
 * @property {string} errorType - What is the type of the error? "Update failed" = updates has failed in the server, "Window closed" = the user clicked the X button to close the window before the server finished the update, "Left page"= the user try navigate to another page before the server finished the update
 * @property {string} resource - Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
 * @property {string} filtersApplied - A list of filters that were displayed to user when he made the failed action: {"filter1": "filterValue1", "filter2": "filterValue2a", "filterValue2b"}. Relevant for Table and Cards.
 * @property {string} actionName - "Save as New View"/"Save Changes"/"Rename"/"Delete" etc... (in English, not localized)
 * @property {number} filteredListSizeShown - How many items were presented (filtered) to the user when he made the failed action?
 * @property {string} currentView - Which view is currently displayed to the user. Relevant for Table and Cards.
 * @property {string} appId - app_id
 * @property {number} filteredListSize - How many items are to be presented (filtered)
 * @property {boolean} isFromSearch - Was the failed action made on a search results?
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @return {LogObject<cairoViewsUnsuccessfulUpdateInServerParams>} LogObject<cairoViewsUnsuccessfulUpdateInServerParams>
 */
export function cairoViewsUnsuccessfulUpdateInServer(params) {
    return { evid: 145, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cairoSortPanelUsed' event (evid: 146)
 *
 * Event description: Sent when the sort sidebar in a Wix Patterns component is opened or closed. Relevant components: Table, Cards.
 *
 * @param {cairoSortPanelUsedParams} params - The parameters for this event
 * @property {string} artifactId - artifact_id
 * @property {GUID} csid - csid
 * @property {boolean} isOpened - TRUE if the user just opened the sidebar; FALSE if closed
 * @property {string} cairoVersion - Wix Patterns version (cairo_version)
 * @property {string} domain - (Optional) Domain name from FQDN (CRM, Store, etc.)
 * @property {boolean} isTPA - is_tpa
 * @property {string} componentName - (Optional) Component name, if there are two components of the same type per artifact
 * @property {string} currentSortOrder - Which columns are currently used to sort the list: [{"fieldName": "FIELD_NAME", "order": "asc"}
 * @property {string} componentType - Table/Cards
 * @property {number} numSortedColumns - How many columns actively sort the data?
 * @property {string} resource - Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
 * @property {string} appId - app_id
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @return {LogObject<cairoSortPanelUsedParams>} LogObject<cairoSortPanelUsedParams>
 */
export function cairoSortPanelUsed(params) {
    return { evid: 146, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cairoReorderingSortColumns' event (evid: 147)
 *
 * Event description: Sent when a user changes the order of the columns that sort a Wix Patterns component. Relevant components: Table, Cards.
 *
 * @param {cairoReorderingSortColumnsParams} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {string} prevSortOrder - Which columns are currently used to sort the list, by the previus order the user defined (before the reordering action) : [{"fieldName": "FIELD_NAME", "order": "asc"}, {"fieldName": "FIELD_NAME_1", "order": "desc"}]. Relevant for Table and Cards.
 * @property {number} numSortingColumns - How many columns are been used for sorting the component?
 * @property {GUID} csid - csid
 * @property {number} columnIndexBefore - Out of the list of sorting columns, what was the index of the sorting column (before reordering). ** numSortingColumns = X --> (1 <= columnIndexBefore <= X)
 * @property {string} cairoVersion - Wix Patterns version (cairo_version)
 * @property {string} domain - (Optional) Domain name from FQDN (CRM, Store, etc.)
 * @property {number} listSize - How many items exist (full list, unfiltered)
 * @property {boolean} isTPA - is_tpa
 * @property {string} componentName - (Optional) Component name, if there are two components of the same type per artifact
 * @property {string} componentType - Table/Cards
 * @property {string} resource - Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
 * @property {number} timeFromAction - Time (in ms) that has passed since the user added this specific row in the sort panel. Will give data up to 10 sec from adding the row (if it's over these 10 sec- will get null). When sent for clicking on "add new sort" / for clicking for the first time on a column's header- will get '0'.
 * @property {number} columnIndexAfter - Out of the list of sorting columns, what is the index of the sorting column (after reordering). ** numSortingColumns = X --> (1 <= columnIndexAfter <= X)
 * @property {string} newSortOrder - Which columns are currently used to sort the list, by the new order the user defined: [{"fieldName": "FIELD_NAME", "order": "asc"}, {"fieldName": "FIELD_NAME_1", "order": "desc"}]. Relevant for Table and Cards.
 * @property {string} appId - app_id
 * @property {number} filteredListSize - How many items are currently presented to user, after filter toggle (filtered)
 * @property {string} sortingColumn - The sorting column that the user changes its place in the sort hierarchy
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @return {LogObject<cairoReorderingSortColumnsParams>} LogObject<cairoReorderingSortColumnsParams>
 */
export function cairoReorderingSortColumns(params) {
    return { evid: 147, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cairoSortUnsuccessfulUpdateInServer' event (evid: 148)
 *
 * Event description: Sent when a user made a sort action but his changes weren't update in the server from different reasons
 *
 * @param {cairoSortUnsuccessfulUpdateInServerParams} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {string} searchQuery - (not relevant for now) What did the user search? isFromSearch = FALSE --> searchQuery = null .
 * @property {GUID} csid - csid
 * @property {number} timeFromEndAction - duration in ms from the end of the failed action until the error indication
 * @property {string} cairoVersion - Wix Patterns version (cairo_version)
 * @property {string} domain - (Optional) Domain name from FQDN (crm, stores, etc.)
 * @property {boolean} isTPA - is_tpa
 * @property {number} numOfWaitingUpdates - number of updates in the sequence that follow the failed action
 * @property {string} componentName - (Optional) Component name, if there are two components of the same type per artifact
 * @property {string} currentTab - Which tab is currently displayed to the user. Relevant for Table and Cards.
 * @property {string} componentType - Picker Standalone/Picker Modal/Table/Cards
 * @property {string} currentFilters - A list of filters that are currently displayed to user: {"filter1": "filterValue1", "filter2": "filterValue2a", "filterValue2b"}. Relevant for Table and Cards. For now, it can only be a "category filter" that is displayed in this event. (relate to ticket 525+521).
 * @property {string} errorType - What is the type of the error? "Update failed" = updates has failed in the server, "Window closed" = the user clicked the X button to close the window before the server finished the update, "Left page"= the user try navigate to another page before the server finished the update
 * @property {string} resource - Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
 * @property {string} filtersApplied - A list of filters that were displayed to user when he made the failed action: {"filter1": "filterValue1", "filter2": "filterValue2a", "filterValue2b"}. Relevant for Table and Cards.
 * @property {string} visibleColumnsOrder - Which columns are currently comprise the saved view- by the order the user defined
 * @property {string} origin - The location thefailed sort action was made from :"SidePanel"/"ColumnHeader"
 * @property {string} viewShown - view_shown
 * @property {string} actionName - The action the user tried to do on the sorting column: "Add new sort"/"Change sort column"/"Change sort type"/"Remove sort" / "Reorder sort columns".(in English, not localized)
 * @property {number} filteredListSizeShown - How many items were presented (filtered) to the user when he made the failed action?
 * @property {string} currentView - Which view is currently displayed to the user. Relevant for Table and Cards.
 * @property {string} appId - app_id
 * @property {number} filteredListSize - How many items are to be presented (filtered)
 * @property {boolean} isFromSearch - Was the failed action made on a search results?
 * @property {string} sortOrderApplied - Which columns were used to sort the list when the user made the failed action: [{"fieldName": "FIELD_NAME", "order": "asc"}
 * @property {string} tabShown - tab_shown
 * @property {string} sortingColumn - The sorted column that the user attempted to update (but failed).
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @return {LogObject<cairoSortUnsuccessfulUpdateInServerParams>} LogObject<cairoSortUnsuccessfulUpdateInServerParams>
 */
export function cairoSortUnsuccessfulUpdateInServer(params) {
    return { evid: 148, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cairoApiRequestDataLoadEnd' event (evid: 149)
 *
 * Event description: Sent when a Wix Patterns's page can't be saved due to an error.
 *
 * @param {cairoApiRequestDataLoadEndParams} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {number} duration - Duration in ms, from clicking on the save button until getting the error indication
 * @property {number} initialItems - Initial number of items loaded (before scroll and autoload)
 * @property {GUID} csid - csid
 * @property {string} cairoVersion - Wix Patterns version (cairo_version)
 * @property {string} domain - (Optional) Domain name from FQDN (crm, stores, etc.)
 * @property {boolean} isTPA - is_tpa
 * @property {string} componentName - (Optional) Component name, if there are two components of the same type per artifact
 * @property {string} currentTab - Which tab is currently displayed to the user. Relevant for Table and Cards.
 * @property {string} currentSortOrder - Which columns are currently used to sort the list: [{"fieldName": "FIELD_NAME", "order": "asc"}, {"fieldName": "FIELD_NAME_1", "order": "desc"}]. Relevant for Table and Cards.
 * @property {string} componentType - Picker Standalone/Picker Modal/Table/Cards
 * @property {string} currentFilters - A list of filters that are currently displayed to user: {"filter1": "filterValue1", "filter2": "filterValue2a", "filterValue2b"}. Relevant for Table and Cards.
 * @property {string} errorType - Technical issue / Logic error / Network error / External error
 * @property {string} resource - Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
 * @property {string} pageType - Entity / Collection
 * @property {string} route - the page's route
 * @property {string} currentView - Which view is currently displayed to the user. Relevant for Table and Cards.
 * @property {string} appId - app_id
 * @property {number} filteredListSize - How many items are to be presented (filtered)
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @property {string} url - The page's url
 * @return {LogObject<cairoApiRequestDataLoadEndParams>} LogObject<cairoApiRequestDataLoadEndParams>
 */
export function cairoApiRequestDataLoadEnd(params) {
    return { evid: 149, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cairoPageCtaClicked' event (evid: 150)
 *
 * Event description: Sent when a user clicks a Page CTA ('add', 'more actions' etc.).
 *
 * @param {cairoPageCtaClickedParams} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {string} location - CTA location: TBD
 * @property {GUID} csid - csid
 * @property {boolean} isValid - (Relevant only for Save CTA) True=if all fields are validated, False= if there are validation errors
 * @property {number} moreActionsIndex - (Relevant only for 'More Action Option' CTA) 0 <= moreActionsIndex <= numCtas -- the number of the CTA out of all CTAs in the more action dropdown
 * @property {string} cairoVersion - Wix Patterns version (cairo_version)
 * @property {string} domain - (Optional) Domain name from FQDN (CRM, Store, etc.)
 * @property {boolean} isTPA - is_tpa
 * @property {string} componentName - (Optional) Page name, if there are two pages of the same type per artifact
 * @property {string} ctaType - Main / Secondary / More Actions Dropdown / More Actions Option
 * @property {string} section - Relevant only for "cta type"="more actions option". Will get one of the values: Vertical / Cairo / TPA
 * @property {string} componentType - Page
 * @property {number} numCtas - (Relevant only for 'More Action Option' CTA) How many CTAs are available in the more action dropdown?
 * @property {string} ctaName - "Add New"/"More Actions"... (in English only, not localized). For section= vertical / Cairo - it will be defined as unique title. For section=TPA: it will be the component_id of the TPA. To get the TPA app_id - use the table mysql.app_service.components- join on table.component_id= event.ctaName
 * @property {string} resource - Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
 * @property {string} pageType - Collection / Entity
 * @property {string} appId - app_id
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @property {string} url - The page's url
 * @property {string} origin - the origin of the page - collection page or entity page
 * @return {LogObject<cairoPageCtaClickedParams>} LogObject<cairoPageCtaClickedParams>
 */
export function cairoPageCtaClicked(params) {
    return { evid: 150, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cairoSearchViewInViews' event (evid: 151)
 *
 * Event description: Sent when the search results are displayed, after a user searches for a view in a Wix Patterns views list. Relevant components: Table, Cards.
 *
 * @param {cairoSearchViewInViewsParams} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {GUID} csid - csid
 * @property {string} cairoVersion - Wix Patterns version (cairo_version)
 * @property {number} searchResultsCnt - How many results appeared for the search query. numSearchReults = 0 --> user saw empty state. This count includes "views" and "categories" results.
 * @property {string} domain - (Optional) Domain name from FQDN (CRM, Store, etc.)
 * @property {string} searchTerm - What did the user search? "" if removed search term.
 * @property {boolean} isTPA - is_tpa
 * @property {string} componentName - (Optional) Component name, if there are two components of the same type per artifact
 * @property {string} componentType - Picker Standalone/Picker Modal/Table/Cards
 * @property {number} numCategoriesInResults - Out of searchResultsCnt - how many results are  from type of "categories"?
 * @property {number} numViews - The distinct views IDs the users has when he searches a view
 * @property {string} resource - Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
 * @property {string} endType - How did the search action end? "View selected"- the user chose one of the search results, "Search dismissed"- the user cancel the search by any other action. When the "end Type" is "view selected" but "search term" is null= then the user typed and searched, deleted his term and then manually selected a view from his views (not from search results).
 * @property {string} appId - app_id
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @return {LogObject<cairoSearchViewInViewsParams>} LogObject<cairoSearchViewInViewsParams>
 */
export function cairoSearchViewInViews(params) {
    return { evid: 151, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cairoPageBackOrBreadcrumbClicked' event (evid: 152)
 *
 * Event description: Sent when a user clicks a Back button or on the higher hierarchy in the breadcrumbs
 *
 * @param {cairoPageBackOrBreadcrumbClickedParams} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {string} destination_page_type - Higher hierarchy (can be relevant both for back button and breadcrumb clicked )/ Last page in BM (relevant only for back button clicked)
 * @property {GUID} csid - csid
 * @property {string} cairoVersion - Wix Patterns version (cairo_version)
 * @property {string} domain - (Optional) Domain name from FQDN (CRM, Store, etc.)
 * @property {boolean} isTPA - is_tpa
 * @property {string} componentName - (Optional) Page name, if there are two pages of the same type per artifact
 * @property {string} section - Relevant only for "cta type"="more actions option". For now, will get one of the values: Vertical / Cairo
 * @property {string} componentType - Page
 * @property {string} resource - Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
 * @property {string} buttonName - 'Back' (for back button clicked) / The category's name the users clicked on.
 * @property {string} pageType - Collection Page
 * @property {string} appId - app_id
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @return {LogObject<cairoPageBackOrBreadcrumbClickedParams>} LogObject<cairoPageBackOrBreadcrumbClickedParams>
 */
export function cairoPageBackOrBreadcrumbClicked(params) {
    return { evid: 152, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cairoSectionCtaClicked' event (evid: 153)
 *
 * Event description: Send when a user click on a section CTA (show more / show less etc.)
 *
 * @param {cairoSectionCtaClickedParams} params - The parameters for this event
 * @property {string} loaction - CTA location: Section Toolbar, Collection Toolbar
 * @property {string} artifactId - Artifact that owns the component
 * @property {string} sectionType - For example: Folders, Table/Grid switch etc.
 * @property {string} location - CTA location: Section Toolbar, Collection Toolbar
 * @property {GUID} csid - csid
 * @property {string} cairoVersion - Wix Patterns version (cairo_version)
 * @property {string} domain - (Optional) Domain name from FQDN (CRM, Store, etc.)
 * @property {boolean} isTPA - is_tpa
 * @property {string} componentName - (Optional) Page name, if there are two pages of the same type per artifact
 * @property {string} ctaType - Main / Secondary / More actions
 * @property {string} componentType - Section name (Folders)
 * @property {string} ctaName - cta key (show more / show less etc.)
 * @property {string} localizedCtaName - The CTA name, localized
 * @property {string} resource - Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
 * @property {string} ctaId - CTA ID
 * @property {string} appId - app_id
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @return {LogObject<cairoSectionCtaClickedParams>} LogObject<cairoSectionCtaClickedParams>
 */
export function cairoSectionCtaClicked(params) {
    return { evid: 153, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cairoTpaSCtaClicked' event (evid: 154)
 *
 * Event description: Send when a user click on a TPA's CTA from a Wix Patterns component
 *
 * @param {cairoTpaSCtaClickedParams} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {string} location - Page More Action Dropdown / Component Bulk action Toolbar
 * @property {GUID} csid - csid
 * @property {string} cairoVersion - Wix Patterns version (cairo_version)
 * @property {string} domain - (Optional) Domain name from FQDN (CRM, Store, etc.)
 * @property {string} tpaComponentId - TPA's component_id from dev center. To get the TPA app_id - use the table mysql.app_service.components- join on table.component_id= event.tpa_component_id
 * @property {boolean} isTPA - is_tpa
 * @property {string} componentName - (Optional) Component's name, if there are two components of the same type per artifact
 * @property {number} ctaIndex - 0 <= ctaIndex <= numCtas -- the number of the CTA out of all CTAs in the page dropdown menu/ Toolbar
 * @property {string} componentType - Table, Grid, Page etc.
 * @property {number} numCtas - How many CTAs are available in the page dropdown menu / toolbar?
 * @property {string} ctaName - TPA's component_id. To get the TPA app_id - use the table mysql.app_service.components- join on table.component_id= event.ctaName
 * @property {string} resource - Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
 * @property {GUID} appId - App ID (for now- please look at tpaComponentId field description to get this data)
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @return {LogObject<cairoTpaSCtaClickedParams>} LogObject<cairoTpaSCtaClickedParams>
 */
export function cairoTpaSCtaClicked(params) {
    return { evid: 154, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cairoDataExAddCustomField' event (evid: 155)
 *
 * Event description: Send when a user click on a "Add Custom Field". Relevant for Verticals who allow data extensions
 *
 * @param {cairoDataExAddCustomFieldParams} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {GUID} csid - Cairo session ID
 * @property {string} cairoVersion - Wix Patterns version (cairo_version)
 * @property {string} domain - (Optional) Domain name from FQDN (CRM, Store, etc.)
 * @property {boolean} isTPA - is_tpa
 * @property {string} componentName - (Optional) Page name, if there are two pages of the same type per artifact
 * @property {string} componentType - Component type
 * @property {number} numColumns - How many columns are shown?
 * @property {string} resource - resource
 * @property {string} visibleColumnsOrder - Which columns are currently shown to the user - by the order the user defined
 * @property {string} origin - Where did the user click on "add custom field" from? Custom columns panel / Entity page / Manage custom fields /  Custom fields widget / External (the origin is external to Cairo)
 * @property {string} appId - app_id
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @return {LogObject<cairoDataExAddCustomFieldParams>} LogObject<cairoDataExAddCustomFieldParams>
 */
export function cairoDataExAddCustomField(params) {
    return { evid: 155, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cairoDataExCustomFieldEndProcess' event (evid: 156)
 *
 * Event description: Send when a user click on cancel / add field in the  "Add Custom Field" modal. Relevant for Verticals who allowed data extensions
 *
 * @param {cairoDataExCustomFieldEndProcessParams} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {GUID} csid - Cairo session ID
 * @property {string} changedFields - (Relevant when action type is edit) Name / Permission / Name and Permission / No changes
 * @property {string} cairoVersion - Wix Patterns version (cairo_version)
 * @property {string} domain - (Optional) Domain name from FQDN (CRM, Store, etc.)
 * @property {string} permissions - Json field:  {"Installed apps": "Value", "Site visitors": "Value"}. The value can be: Null (the user didn't chose anything), Read, Write, Read and Write.
 * @property {boolean} isTPA - is_tpa
 * @property {string} componentName - (Optional) Page name, if there are two pages of the same type per artifact
 * @property {string} componentType - Section name (Folders)
 * @property {string} key - The key value
 * @property {number} numAdded - (Relevant when a field was added/edited) How many added fields are there in the component (including the current added field)
 * @property {string} resource - Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
 * @property {string} fieldName - (Relevant when a field was added/edited) The name the user typed
 * @property {string} origin - Where did the user click on "add custom field" from? Custom columns panel / Entity page
 * @property {number} numDropdownOptions - Only for fieldType= dropdown, how many options were saved?
 * @property {string} actionName - Add/ Edit
 * @property {string} endType - What did the user chose in the modal? Add field / Cancel
 * @property {string} fieldType - (Relevant when a field was added) What type is the added field?  Long text / Date / Number etc.
 * @property {string} appId - app_id
 * @property {string} currentDropdownOptions - Only for fieldType= dropdown,  the options list by its order
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @return {LogObject<cairoDataExCustomFieldEndProcessParams>} LogObject<cairoDataExCustomFieldEndProcessParams>
 */
export function cairoDataExCustomFieldEndProcess(params) {
    return { evid: 156, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cairoDataExCustomFieldAdvancesSettings' event (evid: 157)
 *
 * Event description: Send when a user click on "Advanced Settings" in the  "Add Custom Field" modal. Relevant for Verticals who allowed data extensions
 *
 * @param {cairoDataExCustomFieldAdvancesSettingsParams} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {GUID} csid - Cairo session ID
 * @property {string} cairoVersion - Wix Patterns version (cairo_version)
 * @property {string} domain - (Optional) Domain name from FQDN (CRM, Store, etc.)
 * @property {boolean} isTPA - is_tpa
 * @property {string} componentName - (Optional) Page name, if there are two pages of the same type per artifact
 * @property {string} componentType - Component type
 * @property {string} resource - Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
 * @property {string} origin - Where did the user click on "Advanced Settings" from?  Add Custom Field Modal / Edit Custom Field Modal
 * @property {string} actionName - Open / Close the advanced settings
 * @property {string} appId - app_id
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @return {LogObject<cairoDataExCustomFieldAdvancesSettingsParams>} LogObject<cairoDataExCustomFieldAdvancesSettingsParams>
 */
export function cairoDataExCustomFieldAdvancesSettings(params) {
    return { evid: 157, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cairoLearnMore' event (evid: 158)
 *
 * Event description: Send when a user click on "Learn More" from Wix Patterns component.
 *
 * @param {cairoLearnMoreParams} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {GUID} csid - Cairo session ID
 * @property {string} cairoVersion - Wix Patterns version (cairo_version)
 * @property {string} domain - (Optional) Domain name from FQDN (CRM, Store, etc.)
 * @property {boolean} isTPA - is_tpa
 * @property {string} componentName - (Optional) Page name, if there are two pages of the same type per artifact
 * @property {string} componentType - Section name (Folders)
 * @property {string} resource - Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
 * @property {string} origin - Where did the user click on "Learn more" from?  Add Custom Field Modal/ Edit Custom Field Modal / Table Toolbar
 * @property {string} appId - app_id
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @return {LogObject<cairoLearnMoreParams>} LogObject<cairoLearnMoreParams>
 */
export function cairoLearnMore(params) {
    return { evid: 158, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cairoApplyButtonClicked' event (evid: 159)
 *
 * Event description: Sent when a user clicks on apply button in a Wix Patterns component. Relevant components: Table, Cards.
 *
 * @param {cairoApplyButtonClickedParams} params - The parameters for this event
 * @property {string} artifactId - artifact_id
 * @property {string} changedLevels - In which levels of hierarchy the user changed the order? (numbers with commas between them, 1=the highest parent level )
 * @property {string} feature - Filters / Drag and Drop
 * @property {GUID} csid - Cairo session ID
 * @property {string} cairoVersion - Wix Patterns version (cairo_version)
 * @property {string} domain - (Optional) Domain name from FQDN (crm, stores, etc.)
 * @property {number} listSize - How many items exist (full list, unfiltered)
 * @property {boolean} isTPA - is_tpa
 * @property {string} componentName - (Optional) Component name, if there are two components of the same type per artifact
 * @property {string} componentType - Table/Cards / Picker (from 12/2022)
 * @property {string} resource - Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
 * @property {number} numOfActions - (Optional, relevant for Drag and Drop) Number of actions/changes that are applied together
 * @property {string} origin - Feature's Side Panel / Table Toolbar
 * @property {number} numOptionalFields - (Optional, relevant for Filters)  If there is an optional fields list (like for filters)- how many options are there?
 * @property {number} numActiveFields - (Optional, relevant for Filters) How many fields are active after the apply button is clicked? (fields that their value is not NULL)
 * @property {string} appId - app_id
 * @property {number} filteredListSize - How many items are currently presented to user, after filters toggled (filtered)
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @property {string} currentStatus - (Optional, relevant for Filters) Json field: The current state of feature, following the apply button. [{"fieldName": "FIELD_NAME1", "field_value": "VALUE1"}] (for filters -all the filters will appear in this list, filters that not active will get NULL in the filters' value)
 * @return {LogObject<cairoApplyButtonClickedParams>} LogObject<cairoApplyButtonClickedParams>
 */
export function cairoApplyButtonClicked(params) {
    return { evid: 159, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cairoChangesBeforeApply' event (evid: 160)
 *
 * Event description: Sent when a user changes his choices before he clicks on the apply button in a Wix Patterns component. Relevant components: Table, with apply behavior in the filters panel, or with custom fields option.
 *
 * @param {cairoChangesBeforeApplyParams} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {boolean} isClearButton - True if the user clicked on the clear button, False otherwise .
 * @property {string} feature - Filters / Add Custom Field / Edit Custom Field
 * @property {GUID} csid - Cairo session ID
 * @property {string} cairoVersion - Wix Patterns version (cairo_version)
 * @property {string} domain - (Optional) Domain name from FQDN (crm, stores, etc.)
 * @property {boolean} isTPA - is_tpa
 * @property {string} componentName - (Optional) Component name, if there are two components of the same type per artifact
 * @property {string} componentType - Table/Cards / Picker (from 12/2022)
 * @property {string} fieldValue - The chosen value of the field (Null if the user clicked on "clear")
 * @property {string} resource - Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
 * @property {string} fieldName - The field that the user chose to change (not necessary to save) (Null if the user clicked on "clear")
 * @property {number} numActiveFields - (relevant only when click on "clear") How many fields were active when the user clicked on the clear button? (fields that their value were not NULL)
 * @property {string} appId - app_id
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @return {LogObject<cairoChangesBeforeApplyParams>} LogObject<cairoChangesBeforeApplyParams>
 */
export function cairoChangesBeforeApply(params) {
    return { evid: 160, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cairoDiscardChangesBeforeApply' event (evid: 161)
 *
 * Event description: Sent when a user chose to discard his changes in a Wix Patterns component. Relevant components: Table, with apply behavior in the filters panel, or with custom fields option.
 *
 * @param {cairoDiscardChangesBeforeApplyParams} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {string} feature - Filters / Drag and Drop
 * @property {GUID} csid - Cairo session ID
 * @property {string} cairoVersion - Wix Patterns (cairo_version)
 * @property {string} domain - (Optional) Domain name from FQDN (crm, stores, etc.)
 * @property {boolean} isTPA - is_tpa
 * @property {string} componentName - (Optional) Component name, if there are two components of the same type per artifact
 * @property {string} componentType - Table/Cards / Picker
 * @property {string} resource - Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
 * @property {number} numOfActions - (Optional, relevant for Drag and Drop) Number of actions/changes that are applied together
 * @property {string} origin - Feature's Side Panel / Table Toolbar
 * @property {number} numOptionalFields - (Optional, relevant for Filters) If there is an optional fields list (like for filters)- how many options are there?
 * @property {number} numActiveFields - (Optional, relevant for Filters) How many fields are active after the apply button is clicked? (fields that their value is not NULL)
 * @property {string} appId - app_id
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @property {string} currentStatus - (Optional, relevant for Filters)  Json field: The state of feature, if the user would have clicked on the apply button. [{"fieldName": "FIELD_NAME1", "field_value": "VALUE1"}] (for filters -all the filters will appear in this list, filters that not active will get NULL in the filters' value)
 * @return {LogObject<cairoDiscardChangesBeforeApplyParams>} LogObject<cairoDiscardChangesBeforeApplyParams>
 */
export function cairoDiscardChangesBeforeApply(params) {
    return { evid: 161, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cairoModalCtaClicked' event (evid: 162)
 *
 * Event description: Sent when a user clicks on a CTA in an an opened modal
 *
 * @param {cairoModalCtaClickedParams} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {GUID} csid - Cairo session id
 * @property {string} cairoVersion - Wix Patterns version (cairo_version)
 * @property {string} domain - (Optional) Domain name from FQDN (crm, stores, etc.)
 * @property {boolean} isTPA - is_tpa
 * @property {string} componentName - (Optional) Component name, if there are two components of the same type per artifact
 * @property {string} componentType - Picker Standalone/Picker Modal/Table/Cards
 * @property {string} ctaName - The CTA name the user chose to do in the modal (for example: save, cancel, archive etc.). English only, not localized
 * @property {string} localizedCtaName - The CTA name, localized
 * @property {string} resource - Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
 * @property {string} appId - app_id
 * @property {string} modalName - The modal's title (Archive custom field, etc.)
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @return {LogObject<cairoModalCtaClickedParams>} LogObject<cairoModalCtaClickedParams>
 */
export function cairoModalCtaClicked(params) {
    return { evid: 162, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cairoDataExtensionUnsuccessfulUpdateInServer' event (evid: 163)
 *
 * Event description: Sent when a user tried to save a custom field but his changes weren't update in the server from different reasons
 *
 * @param {cairoDataExtensionUnsuccessfulUpdateInServerParams} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {GUID} csid - Cairo session id
 * @property {string} cairoVersion - Wix Patterns version (cairo_version)
 * @property {string} domain - (Optional) Domain name from FQDN (crm, stores, etc.)
 * @property {string} permissions - Json field: {"Installed apps": "Value", "Site visitors": "Value"}. The value can be: Null (the user didn't chose anything), Read, Write, Read and Write.
 * @property {boolean} isTPA - is_tpa
 * @property {string} componentName - (Optional) Component name, if there are two components of the same type per artifact
 * @property {string} componentType - Picker Standalone/Picker Modal/Table/Cards
 * @property {string} key - The key value
 * @property {string} errorType - What is the type of the error? Technical issue	/ Network error / 10k Limitation
 * @property {string} resource - Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
 * @property {string} fieldName - The name the user typed
 * @property {string} origin - Where did the user click on "add custom field" from? Custom columns panel / Entity page
 * @property {string} actionName - The action the user tried to do: Add/ Edit etc. (in English, not localized)
 * @property {string} fieldType - What type is the added field? Long text / Date / Number etc.
 * @property {string} appId - app_id
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @return {LogObject<cairoDataExtensionUnsuccessfulUpdateInServerParams>} LogObject<cairoDataExtensionUnsuccessfulUpdateInServerParams>
 */
export function cairoDataExtensionUnsuccessfulUpdateInServer(params) {
    return { evid: 163, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cairoErrorInLoadingAComponent' event (evid: 164)
 *
 * Event description: Sent when a an error in Wix Patterns component loading process happen . Relevant components: Picker Standalone, Picker Modal, Table, Cards.
 *
 * @param {cairoErrorInLoadingAComponentParams} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {GUID} csid - Cairo session id
 * @property {string} featuresAvailability - Json field :({featureName: boolean}) (new from 03/2023)
 * @property {Url} url - The page's url
 * @property {string} cairoVersion - Wix Patterns version (cairo_version)
 * @property {string} domain - (Optional) Domain name from FQDN (crm, stores, etc.)
 * @property {boolean} isTPA - is_tpa
 * @property {string} componentName - (Optional) Component name, if there are two components of the same type per artifact
 * @property {string} currentTab - Which tab is currently displayed to the user. Relevant for Table and Cards.
 * @property {string} currentSortOrder - Which columns are currently used to sort the list: [{"fieldName": "FIELD_NAME", "order": "asc"}, {"fieldName": "FIELD_NAME_1", "order": "desc"}]. Relevant for Table and Cards.
 * @property {string} componentType - Picker Standalone/Picker Modal/Picker Dropdown Table/Cards
 * @property {string} currentFilters - A list of filters that are currently displayed to user: {"filter1": "filterValue1", "filter2": "filterValue2a", "filterValue2b"}. Relevant for Table and Cards.
 * @property {string} errorType - Error type (if known): LoadCustomFieldsWidgetLazyContentFailed /
 * InitCustomFieldsDataExtensionFailed /
 * InitCustomFieldsWidgetContainerFailed / InitCustomFieldsDataExtensionFailed
 * @property {string} resource - Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
 * @property {string} currentView - Which view is currently displayed to the user. Relevant for Table and Cards.
 * @property {string} appId - app_id
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @return {LogObject<cairoErrorInLoadingAComponentParams>} LogObject<cairoErrorInLoadingAComponentParams>
 */
export function cairoErrorInLoadingAComponent(params) {
    return { evid: 164, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cairoNestedTableCollapseAndExpand' event (evid: 165)
 *
 * Event description: Sent when a user clicks on a category item in a nested table, to collapse or expand it  (to hide or unhide the items under this category)
 *
 * @param {cairoNestedTableCollapseAndExpandParams} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {string} searchQuery - What did the user search?
 * @property {GUID} csid - Cairo session id
 * @property {string} cairoVersion - Wix Patterns version (cairo_version)
 * @property {string} domain - (Optional) Domain name from FQDN (crm, stores, etc.)
 * @property {boolean} isSelectAll - True if the user chose to collapse / expand all categories simultaneously
 * @property {boolean} isTPA - is_tpa
 * @property {string} clickType - The click purpose : "Collapse" / "Expand"
 * @property {string} componentName - (Optional) Component name, if there are two components of the same type per artifact
 * @property {string} currentTab - Which tab is currently displayed to the user. Relevant for Table and Cards.
 * @property {string} currentSortOrder - Which columns are currently used to sort the list: [{"fieldName": "FIELD_NAME", "order": "asc"}
 * @property {string} componentType - Picker Standalone/Picker Modal/ Picker Dropdown /Table/Cards
 * @property {number} numLevels - How many levels (or steps) exist in the selected item's hierarchy?
 * @property {number} countItems - The value the user see as the count of this item. If  "Is select all"= true, then Null
 * @property {string} currentFilters - A list of filters that are currently displayed to user: {"filter1": "filterValue1", "filter2": "filterValue2a", "filterValue2b"}. Relevant for Table and Cards.
 * @property {string} resource - Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
 * @property {string} itemId - ID of the clicked item .If  "Is select all"= true, then Null
 * @property {number} itemIndex - Out of the list of results, what is the index of the clicked item .If  "Is select all"= true,  then Null
 * @property {string} currentView - Which view is currently displayed to the user. Relevant for Table and Cards.
 * @property {number} currentLevel - What is the hierarchy level (or step) of the clicked item? (out of numLevels). If  "Is select all"= true, then Null
 * @property {string} appId - app_id
 * @property {number} filteredListSize - How many items are to be presented (filtered)
 * @property {boolean} isFromSearch - Is the item selected from a list of search results
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @return {LogObject<cairoNestedTableCollapseAndExpandParams>} LogObject<cairoNestedTableCollapseAndExpandParams>
 */
export function cairoNestedTableCollapseAndExpand(params) {
    return { evid: 165, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cairoTagsModalStartLoad' event (evid: 166)
 *
 * Event description: Send when a user click on a "Tags Modal". Relevant for Verticals who allow use tags in their tables.
 *
 * @param {cairoTagsModalStartLoadParams} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {GUID} csid - Cairo session ID
 * @property {string} cairoVersion - Wix Patterns version (cairo_version)
 * @property {string} domain - (Optional) Domain name from FQDN (CRM, Store, etc.)
 * @property {boolean} isTPA - is_tpa
 * @property {string} componentName - (Optional) Page name, if there are two pages of the same type per artifact
 * @property {string} componentType - Component type
 * @property {number} numTags - How many tags are to be presented?
 * @property {string} resource - resource
 * @property {string} origin - Where did the user open Manage Tags modal from?
 * @property {string} appId - app_id
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @return {LogObject<cairoTagsModalStartLoadParams>} LogObject<cairoTagsModalStartLoadParams>
 */
export function cairoTagsModalStartLoad(params) {
    return { evid: 166, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cairoTagsModalEndProcess' event (evid: 167)
 *
 * Event description: Send when a user click on button that will close "Tags Modal". Relevant for Verticals who allow use tags in their tables.
 *
 * @param {cairoTagsModalEndProcessParams} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {GUID} csid - Cairo session ID
 * @property {string} cairoVersion - Wix Patterns version (cairo_version)
 * @property {string} domain - (Optional) Domain name from FQDN (CRM, Store, etc.)
 * @property {boolean} isTPA - is_tpa
 * @property {string} componentName - (Optional) Page name, if there are two pages of the same type per artifact
 * @property {string} componentType - Component type
 * @property {number} numTags - How many tags are in the modal?
 * @property {string} resource - resource
 * @property {string} origin - Where did the user open Manage Tags modal from?
 * @property {string} endType - Close without changes
 * @property {string} appId - app_id
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @return {LogObject<cairoTagsModalEndProcessParams>} LogObject<cairoTagsModalEndProcessParams>
 */
export function cairoTagsModalEndProcess(params) {
    return { evid: 167, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cairoTagsAddDeleteTag' event (evid: 168)
 *
 * Event description: Send when a user add or delete a tag from his component. Relevant for Verticals who allow use tags in their tables.
 *
 * @param {cairoTagsAddDeleteTagParams} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {string} tagName - The name of the removed/added tag, or the new tag's name - incase of rename tag
 * @property {string} previousName - (Relevant only for action name=Rename) The tag's name, before the change
 * @property {GUID} csid - Cairo session ID
 * @property {string} cairoVersion - Wix Patterns version (cairo_version)
 * @property {string} domain - (Optional) Domain name from FQDN (CRM, Store, etc.)
 * @property {boolean} isTPA - is_tpa
 * @property {string} componentName - (Optional) Page name, if there are two pages of the same type per artifact
 * @property {string} componentType - Component type
 * @property {number} numTags - How many tags are in the modal after this action?
 * @property {string} resource - resource
 * @property {string} origin - Where did the user make the action from? Tags Modal /
 * @property {string} actionName - Add / Delete / Rename
 * @property {string} appId - app_id
 * @property {boolean} isFromSearch - Is the action made from a list of tags search results?
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @property {string} tagSubOrigin - sub origin when a user add/rename/delete tag from a manage tags modal.  bulk assign popover or tags widget
 * @return {LogObject<cairoTagsAddDeleteTagParams>} LogObject<cairoTagsAddDeleteTagParams>
 */
export function cairoTagsAddDeleteTag(params) {
    return { evid: 168, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cairoTagsUnsuccessfulUpdateInServer' event (evid: 169)
 *
 * Event description: Send when a user tried to add/delete/rename/assign/remove assigned tag, but his changes weren't update in the server from different reasons. Relevant for Verticals who allow use tags in their tables.
 *
 * @param {cairoTagsUnsuccessfulUpdateInServerParams} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {string} tagName - The name of the removed/added/assigned tag
 * @property {GUID} csid - Cairo session ID
 * @property {string} cairoVersion - Wix Patterns version (cairo_version)
 * @property {string} domain - (Optional) Domain name from FQDN (CRM, Store, etc.)
 * @property {boolean} isTPA - is_tpa
 * @property {string} componentName - (Optional) Page name, if there are two pages of the same type per artifact
 * @property {string} componentType - Component type
 * @property {string} errorType - What is the type of the error? Technical issue / Network error
 * @property {number} numTags - How many tags are in the modal after this action?
 * @property {string} resource - resource
 * @property {string} origin - Where did the user make the action from? Tags Modal / Entity page
 * @property {string} actionName - Add / Delete / Rename / Assign / Remove assign / Add and assign / Load tags widget
 * @property {string} appId - app_id
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @return {LogObject<cairoTagsUnsuccessfulUpdateInServerParams>} LogObject<cairoTagsUnsuccessfulUpdateInServerParams>
 */
export function cairoTagsUnsuccessfulUpdateInServer(params) {
    return { evid: 169, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cairoSearchForTags' event (evid: 170)
 *
 * Event description: Sent when the search results are displayed, after a user searches for a tag. Relevant for tables that enabled using tags.
 *
 * @param {cairoSearchForTagsParams} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {string} location - Where did the user search for the tag? Manage tags modal /
 * @property {GUID} csid - Cairo session id
 * @property {string} cairoVersion - Wix Patterns version (cairo_version)
 * @property {number} searchResultsCnt - How many results appeared for the search query. numSearchReults = 0 --> user saw the option to add this tag as new
 * @property {string} domain - (Optional) Domain name from FQDN (CRM, Store, etc.)
 * @property {string} searchTerm - What did the user search? "" if removed search term.
 * @property {boolean} isTPA - is_tpa
 * @property {string} componentName - (Optional) Component name, if there are two components of the same type per artifact
 * @property {string} componentType - Picker Standalone/Picker Modal/Table/Cards
 * @property {string} resource - Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
 * @property {string} endType - How did the search action end? "Tag selected"- the user chose one of the search results, "Search dismissed"- the user cancel the search by any other action, "Add new tag"- when the searched tag doesn't exist and the user choose to add it as new
 * @property {string} appId - app_id
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @return {LogObject<cairoSearchForTagsParams>} LogObject<cairoSearchForTagsParams>
 */
export function cairoSearchForTags(params) {
    return { evid: 170, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cairoTagsWidgetLoaded' event (evid: 171)
 *
 * Event description: Send when a Tags' widget is loaded. Relevant for Verticals who allow use tags in their tables.
 *
 * @param {cairoTagsWidgetLoadedParams} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {number} numTagsAssigned - How many tags are assigned to that entity when the widget is loaded?
 * @property {GUID} csid - Cairo session ID
 * @property {string} cairoVersion - Wix Patterns version (cairo_version)
 * @property {string} domain - (Optional) Domain name from FQDN (CRM, Store, etc.)
 * @property {boolean} isTPA - is_tpa
 * @property {string} componentName - (Optional) Component name, if there are two components of the same type per artifact
 * @property {string} componentType - Component type
 * @property {number} numTags - How many tags are existing? will get 0 if the user didn't create any tag and an empty state will be opened
 * @property {string} resource - resource
 * @property {string} itemId - The entity ID (that the widget was loaded in its page)
 * @property {string} appId - app_id
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @return {LogObject<cairoTagsWidgetLoadedParams>} LogObject<cairoTagsWidgetLoadedParams>
 */
export function cairoTagsWidgetLoaded(params) {
    return { evid: 171, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cairoTagsWidgetClickOnCta' event (evid: 172)
 *
 * Event description: Send when a user click on the widget's ctas (not including assigning tag). Relevant for Verticals who allow use tags in their tables.
 *
 * @param {cairoTagsWidgetClickOnCtaParams} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {number} numTagsAssigned - How many tags are already assigned to that item?
 * @property {GUID} csid - Cairo session ID
 * @property {string} cairoVersion - Wix Patterns version (cairo_version)
 * @property {string} domain - (Optional) Domain name from FQDN (CRM, Store, etc.)
 * @property {boolean} isTPA - is_tpa
 * @property {string} componentName - (Optional) Component name, if there are two components of the same type per artifact
 * @property {string} componentType - Component type
 * @property {number} numTags - How many tags are existing? will get 0 if the user didn't create any tag and an empty state will be opened
 * @property {string} resource - resource
 * @property {string} actionName - Assign tags / Create tags / Manage tags
 * @property {string} itemId - The entity ID
 * @property {string} appId - app_id
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @return {LogObject<cairoTagsWidgetClickOnCtaParams>} LogObject<cairoTagsWidgetClickOnCtaParams>
 */
export function cairoTagsWidgetClickOnCta(params) {
    return { evid: 172, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cairoTagsAssignTag' event (evid: 173)
 *
 * Event description: Send when a user assign or remove a tag from an item. Relevant for Verticals who allow use tags in their tables.
 *
 * @param {cairoTagsAssignTagParams} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {number} numTagsAssigned - (Relevant if numItems=1) How many tags are assigned to that item after this action?
 * @property {string} tagName - The name of the assigned/ removed tag
 * @property {GUID} csid - Cairo session ID
 * @property {string} cairoVersion - Wix Patterns version (cairo_version)
 * @property {string} domain - (Optional) Domain name from FQDN (CRM, Store, etc.)
 * @property {boolean} isTPA - is_tpa
 * @property {string} componentName - (Optional) Component name, if there are two components of the same type per artifact
 * @property {string} componentType - Component type
 * @property {number} numTags - How many tags are existing? will get 0 if the user didn't create any tag and an empty state will be opened
 * @property {string} resource - resource
 * @property {string} origin - Where did the user make the action from? Entity page /
 * @property {string} actionName - Assign / Remove
 * @property {string} itemId - (Relevant if numItems=1) The Item which the tag was assigned to / removed from
 * @property {number} numItems - How many items have been selected?
 * @property {string} appId - app_id
 * @property {boolean} isFromSearch - Is the action made from a list of tags search results?
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @return {LogObject<cairoTagsAssignTagParams>} LogObject<cairoTagsAssignTagParams>
 */
export function cairoTagsAssignTag(params) {
    return { evid: 173, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cairoPageDiscardChangesBeforeSave' event (evid: 174)
 *
 * Event description: Sent when a user chose to discard his changes in a Wix Patterns's page. (by clicking on cancel / navigate to another page / click on the back button / click on the breadcrumb button)
 *
 * @param {cairoPageDiscardChangesBeforeSaveParams} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {GUID} csid - Cairo session ID
 * @property {string} cairoVersion - Wix Patterns version (cairo_version)
 * @property {string} domain - (Optional) Domain name from FQDN (crm, stores, etc.)
 * @property {boolean} isTPA - is_tpa
 * @property {string} componentName - (Optional) Component name, if there are two components of the same type per artifact
 * @property {string} componentType - Table/Cards / Picker
 * @property {string} resource - Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
 * @property {number} numOfActions - Number of changed fields that their changes can be lost
 * @property {string} origin - Cancel CTA / Breadcrumbs / Back button / Navigation
 * @property {number} numOfFields - How many fields are there that can be change in this page?
 * @property {string} pageType - Entity /
 * @property {string} appId - app_id
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @property {string} url - The page's url
 * @return {LogObject<cairoPageDiscardChangesBeforeSaveParams>} LogObject<cairoPageDiscardChangesBeforeSaveParams>
 */
export function cairoPageDiscardChangesBeforeSave(params) {
    return { evid: 174, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cairoAssignTagsToEntities' event (evid: 175)
 *
 * Event description: Assign Tags to entities
 *
 * @param {cairoAssignTagsToEntitiesParams} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {GUID} csid - Cairo session ID
 * @property {string} cairoVersion - Wix Patterns version (cairo_version)
 * @property {string} domain - (Optional) Domain name from FQDN (CRM, Store, etc.)
 * @property {boolean} isTPA - is_tpa
 * @property {string} componentName - (Optional) Component name, if there are two components of the same type per artifact
 * @property {string} assignedTags - array of tags that were assigned (empty array if none)
 * @property {string} componentType - Component type
 * @property {string} unAssignedTags - array of tags that were unassigned (empty array if none)
 * @property {string} resource - resource
 * @property {string} origin - Where did the user make the action from?
 * @property {string} actionName - Assign / Remove
 * @property {string} itemIds - array of items ids that were selected
 * @property {number} numItems - How many items have been selected?
 * @property {string} appId - app_id
 * @property {boolean} isFromSearch - Is the action made from a list of tags search results?
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @return {LogObject<cairoAssignTagsToEntitiesParams>} LogObject<cairoAssignTagsToEntitiesParams>
 */
export function cairoAssignTagsToEntities(params) {
    return { evid: 175, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cairoReloadErrorState' event (evid: 176)
 *
 * Event description: Sent when a an error in Wix Patterns component loading process happened and the user reload the state
 *
 * @param {cairoReloadErrorStateParams} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {GUID} csid - Cairo session id
 * @property {string} featuresAvailability - Json field :({featureName: boolean}) (new from 03/2023)
 * @property {Url} url - The page's url
 * @property {string} cairoVersion - Wix Patterns version (cairo_version)
 * @property {string} domain - (Optional) Domain name from FQDN (crm, stores, etc.)
 * @property {boolean} isTPA - is_tpa
 * @property {string} componentName - (Optional) Component name, if there are two components of the same type per artifact
 * @property {string} currentTab - Which tab is currently displayed to the user. Relevant for Table and Cards.
 * @property {string} currentSortOrder - Which columns are currently used to sort the list: [{"fieldName": "FIELD_NAME", "order": "asc"}, {"fieldName": "FIELD_NAME_1", "order": "desc"}]. Relevant for Table and Cards.
 * @property {string} componentType - Picker Standalone/Picker Modal/Picker Dropdown Table/Cards
 * @property {string} currentFilters - A list of filters that are currently displayed to user: {"filter1": "filterValue1", "filter2": "filterValue2a", "filterValue2b"}. Relevant for Table and Cards.
 * @property {string} errorType - Error type (if known): LoadCustomFieldsWidgetLazyContentFailed /
 * InitCustomFieldsDataExtensionFailed /
 * InitCustomFieldsWidgetContainerFailed / InitCustomFieldsDataExtensionFailed
 * @property {string} resource - Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
 * @property {string} cta - cta
 * @property {string} currentView - Which view is currently displayed to the user. Relevant for Table and Cards.
 * @property {string} appId - app_id
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @return {LogObject<cairoReloadErrorStateParams>} LogObject<cairoReloadErrorStateParams>
 */
export function cairoReloadErrorState(params) {
    return { evid: 176, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cairoCustomizeColumnsInSidePanel' event (evid: 177)
 *
 * Event description: Sent when a user is making his first change in visible columns- add / remove / reorder them- for every time he opened the side panel. Relevant components: Table, Cards.
 *
 * @param {cairoCustomizeColumnsInSidePanelParams} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {boolean} isPredefined - Is it a view that was predefined by the vertical. Will get "true" for predefined views include "All Items" view, "false" if it's a user view and "null" if the action wasn't made over any view (new field from 01/2023)
 * @property {GUID} csid - cairo session id
 * @property {string} cairoVersion - Wix Patterns version (cairo_version)
 * @property {string} domain - (Optional) Domain name from FQDN (CRM, Store, etc.)
 * @property {boolean} isTPA - is_tpa
 * @property {string} componentName - (Optional) Component name, if there are two components of the same type per artifact
 * @property {string} componentType - Table/Cards
 * @property {number} numSortedColumns - How many columns actively sort the data? (new field from 01/2023)
 * @property {number} numColumns - How many columns are shown? (new field from 01/2023)
 * @property {number} numFiltersInView - How many filters comprise the saved view (new field from 01/2023)
 * @property {string} resource - Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
 * @property {string} visibleColumnsOrder - Which columns are currently shown to the user - by the order the user defined (new field from 01/2023)
 * @property {string} actionName - Visibility / Reorder
 * @property {number} numFiltersActive - The number of active filters when the user opened/closed the panel/menu
 * @property {string} currentView - Which view is currently displayed to the user. Relevant for Table and Cards. (new field from 01/2023)
 * @property {string} appId - app_id
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @return {LogObject<cairoCustomizeColumnsInSidePanelParams>} LogObject<cairoCustomizeColumnsInSidePanelParams>
 */
export function cairoCustomizeColumnsInSidePanel(params) {
    return { evid: 177, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'wixPatternsNestedTableCollapseAndExpandAllSrc144Evid178' event (evid: 178)
 *
 * Event description: Sent when a user clicks on Expand/collapse all button
 *
 * @param {wixPatternsNestedTableCollapseAndExpandAllSrc144Evid178Params} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {GUID} csid - Cairo session id
 * @property {string} cairoVersion - Wix Patterns version (cairo_version)
 * @property {string} domain - (Optional) Domain name from FQDN (crm, stores, etc.)
 * @property {boolean} isTPA - is_tpa
 * @property {string} clickType - The click purpose : "Collapse" / "Expand"
 * @property {string} componentName - (Optional) Component name, if there are two components of the same type per artifact
 * @property {string} currentTab - Which tab is currently displayed to the user. Relevant for Table and Cards.
 * @property {string} currentSortOrder - Which columns are currently used to sort the list: [{"fieldName": "FIELD_NAME", "order": "asc"}
 * @property {string} componentType - Picker Standalone/Picker Modal/ Picker Dropdown /Table/Cards
 * @property {number} numLevels - How many levels (or steps) exist in the selected item's hierarchy?
 * @property {string} currentFilters - A list of filters that are currently displayed to user: {"filter1": "filterValue1", "filter2": "filterValue2a", "filterValue2b"}. Relevant for Table and Cards.
 * @property {string} resource - Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
 * @property {string} appId - app_id
 * @property {number} filteredListSize - How many items are to be presented (filtered)
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @return {LogObject<wixPatternsNestedTableCollapseAndExpandAllSrc144Evid178Params>} LogObject<wixPatternsNestedTableCollapseAndExpandAllSrc144Evid178Params>
 */
export function wixPatternsNestedTableCollapseAndExpandAllSrc144Evid178(params) {
    return { evid: 178, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'wixPatternsSectionHeaderPrimaryActionClicked' event (evid: 2)
 *
 * Event description:  Sent when a user clicks on a PrimaryAction in section header
 *
 * @param {wixPatternsSectionHeaderPrimaryActionClickedParams} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {string} cairoVersion - Wix Patterns_version(cairo_version)
 * @property {string} componentName - (Optional) Component name, if there are two components of the same type per artifact
 * @property {string} componentType - Picker Standalone/Picker Modal/ Picker Dropdown/ Table/Cards
 * @property {string} resource - Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
 * @property {string} appId - app_id
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @property {string} summaryBarList - A list of items that are currently displayed to user: {"item1": "Value1", "item2": "value2"}
 * @property {string} featureStatus - success/ loading/error
 * @property {string} cta - cta name (in english)
 * @property {string} sectionId - id of the section
 * @return {LogObject<wixPatternsSectionHeaderPrimaryActionClickedParams>} LogObject<wixPatternsSectionHeaderPrimaryActionClickedParams>
 */
export function wixPatternsSectionHeaderPrimaryActionClicked(params) {
    return { evid: 2, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'wixPatternsAppWasInstalledSrc144Evid200' event (evid: 200)
 *
 * Event description: Sent when app was installed through Wix Patterns entry point
 *
 * @param {wixPatternsAppWasInstalledSrc144Evid200Params} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {GUID} csid - csid
 * @property {string} cairoVersion - Wix Patterns version (cairo_version)
 * @property {string} domain - (Optional) Domain name from FQDN (CRM, Store, etc.)
 * @property {boolean} isTPA - is_tpa
 * @property {string} componentName - (Optional) Page name, if there are two pages of the same type per artifact
 * @property {string} componentType - Page
 * @property {string} resource - Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
 * @property {string} pageType - Collection / Entity
 * @property {string} appId - app_id
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @property {string} appName - app_name
 * @property {string} url - The page's url
 * @return {LogObject<wixPatternsAppWasInstalledSrc144Evid200Params>} LogObject<wixPatternsAppWasInstalledSrc144Evid200Params>
 */
export function wixPatternsAppWasInstalledSrc144Evid200(params) {
    return { evid: 200, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'wixPatternsItemCreatedWithAiSrc144Evid3' event (evid: 3)
 *
 * Event description: Sent when a item was created with AI Assistant in Wix Patterns components.
 *
 * @param {wixPatternsItemCreatedWithAiSrc144Evid3Params} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {Url} url - The page's url (new from 03/2023)
 * @property {string} cairoVersion - Wix Patterns_version(cairo_version)
 * @property {string} domain - (Optional) Domain name from FQDN (crm, stores, etc.)
 * @property {string} componentName - (Optional) Component name, if there are two components of the same type per artifact
 * @property {string} componentType - Picker Standalone/Picker Modal/ Picker Dropdown/ Table/Cards
 * @property {string} resource - Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
 * @property {string} appId - app_id
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @property {string} itemName - the name of the item was added
 * @property {string} itemId - item's id
 * @property {string} hostingPlatformContextId - the id of the context entity that the user view or edit (app/account/site)
 *
 * @property {GUID} csid - csid
 * @return {LogObject<wixPatternsItemCreatedWithAiSrc144Evid3Params>} LogObject<wixPatternsItemCreatedWithAiSrc144Evid3Params>
 */
export function wixPatternsItemCreatedWithAiSrc144Evid3(params) {
    return { evid: 3, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'wixPatternsClickOnViewDropdownSrc144Evid4' event (evid: 4)
 *
 * Event description: Sent when the user clicks on the view dropdown
 *
 * @param {wixPatternsClickOnViewDropdownSrc144Evid4Params} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {GUID} csid - csid
 * @property {string} cairoVersion - Wix Patterns version (cairo_version)
 * @property {string} domain - (Optional) Domain name from FQDN (CRM, Store, etc.)
 * @property {boolean} isTPA - is_tpa
 * @property {string} componentName - (Optional) Component name, if there are two components of the same type per artifact
 * @property {string} componentType - Table
 * @property {string} resource - Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
 * @property {string} appId - app_id
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @property {string} hostingPlatformContextId	 - the id of the context entity that the user view or edit (app/account/site)
 * @return {LogObject<wixPatternsClickOnViewDropdownSrc144Evid4Params>} LogObject<wixPatternsClickOnViewDropdownSrc144Evid4Params>
 */
export function wixPatternsClickOnViewDropdownSrc144Evid4(params) {
    return { evid: 4, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'wixPatternsMappingPagesSrc144Evid5' event (evid: 5)
 *
 * Event description: Wix Patterns -  Mapping Pages
 *
 * @param {wixPatternsMappingPagesSrc144Evid5Params} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {string} componentName - (Optional) Component name, if there are two components of the same type per artifact
 * @property {string} componentType - Picker Standalone/Picker Modal/ Picker Dropdown/ Table/Cards
 * @property {string} appId - app_id
 * @property {string} components - list of all components per artifact and component type
 * @property {string} pageType - type of page (collection page / entity / settings)
 * @property {string} componentId - component id
 * @property {boolean} isSinglePage - Returns True if it is a single page
 * @return {LogObject<wixPatternsMappingPagesSrc144Evid5Params>} LogObject<wixPatternsMappingPagesSrc144Evid5Params>
 */
export function wixPatternsMappingPagesSrc144Evid5(params) {
    return { evid: 5, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'wixPatternsSelectAProviderSrc144Evid6' event (evid: 6)
 *
 * Event description: Sent when a user select a provider
 *
 * @param {wixPatternsSelectAProviderSrc144Evid6Params} params - The parameters for this event
 * @property {string} artifactId - Artifact that owns the component
 * @property {GUID} csid - Cairo session id
 * @property {string} cairoVersion - Wix Patterns version (cairo_version)
 * @property {string} domain - (Optional) Domain name from FQDN (crm, stores, etc.)
 * @property {boolean} isTPA - is_tpa
 * @property {string} componentName - (Optional) Component name, if there are two components of the same type per artifact
 * @property {string} componentType - Picker Standalone/Picker Modal/Table/Cards
 * @property {string} providerName - the name of the provider
 * @property {string} resource - Singular form of the resource name from FQDN, "goal" of component (order, contact, etc.)
 * @property {string} appId - app_id
 * @property {string} product - Name of the product/api from FQDN (contacts, booking, site_properties, etc.)
 * @property {string} providerId - provider id's
 * @property {string} origin - the origin from which the provider was selected (standalone dropdown, within modal dropdown)
 * @return {LogObject<wixPatternsSelectAProviderSrc144Evid6Params>} LogObject<wixPatternsSelectAProviderSrc144Evid6Params>
 */
export function wixPatternsSelectAProviderSrc144Evid6(params) {
    return { evid: 6, src: 144, endpoint: '', params };
}
/**
 * A function to create a log object for the 'httpClientErrorMappingSrc176Evid100' event (evid: 100)
 *
 * Event description: An error was detected and managed by the error handler and this is it's mapping
 *
 * @param {httpClientErrorMappingSrc176Evid100Params} params - The parameters for this event
 * @property {string} action_text - the action of the text
 * @property {string} translated_message - the translated message of the error
 * @property {string} session_id - the key for connecting the error event
 * @property {string} is_override_error - is override error
 * @property {string} is_override_error_state_function - is_override_error_state_function
 * @property {boolean} is_consumer_resolved_error - is_consumer_resolved_error
 * @property {string} common_errors_load_failed - common_errors_load_failed
 * @property {boolean} error_opt_out - True if is not a real error
 *
 * @return {LogObject<httpClientErrorMappingSrc176Evid100Params>} LogObject<httpClientErrorMappingSrc176Evid100Params>
 */
export function httpClientErrorMappingSrc176Evid100(params) {
    return { evid: 100, src: 176, endpoint: '', params };
}
/**
 * A function to create a log object for the 'getResolvedErrorSrc176Evid101' event (evid: 101)
 *
 * Event description: indicates whether is_using_getResolvedError functionality
 *
 * @param {getResolvedErrorSrc176Evid101Params} params - The parameters for this event
 * @property {string} session_id - the key for connecting the error event
 * @property {string} mapped_error_not_available - mapped_error_not_available
 * @return {LogObject<getResolvedErrorSrc176Evid101Params>} LogObject<getResolvedErrorSrc176Evid101Params>
 */
export function getResolvedErrorSrc176Evid101(params) {
    return { evid: 101, src: 176, endpoint: '', params };
}
/**
 * A function to create a log object for the 'showErrorSrc176Evid102' event (evid: 102)
 *
 * Event description: indicates whether is_using_showError functionality
 *
 * @param {showErrorSrc176Evid102Params} params - The parameters for this event
 * @property {string} session_id - the key for connecting the error event
 * @property {string} displayed_message - displayed_message to the user
 * @property {string} displayed_action - displayed_action to the user
 * @property {string} action_was_provided - action_was_provided
 * @return {LogObject<showErrorSrc176Evid102Params>} LogObject<showErrorSrc176Evid102Params>
 */
export function showErrorSrc176Evid102(params) {
    return { evid: 102, src: 176, endpoint: '', params };
}
/**
 * A function to create a log object for the 'httpClientErrorSrc176Evid404' event (evid: 404)
 *
 * Event description: An error was detected and managed by the error handler
 *
 * @param {httpClientErrorSrc176Evid404Params} params - The parameters for this event
 * @property {string} request_id - the error request id
 * @property {string} panorama_guid - the mutual guid in panorama
 * @property {string} artifact_id - the artifact_id
 * @property {string} hosting_platform - relevant hosting_platform
 * @property {string} app_id - app_id
 * @property {number} error_code - http status code for ex: 404
 * @property {string} is_override_error - Has override errors object
 * @property {string} is_override_error_state_function - is_override_error_state_function
 * @property {string} error_json - the full error json
 * @property {string} error_message - the error message from the json
 * @property {string} exception_message - exception message
 * @property {string} client_error_code - client error code (browser code)
 * @property {string} error_type - the error type (application/validation/system)
 * @property {boolean} is_consumer_resolved_error - dev provided error message
 * @property {string} full_artifact_id - the full artifact id:
 * (artifact_id = my-app
 * full_artifact_id = com.wixpress.my-app)
 * @property {string} url - the url (server side)
 * @property {string} serverUrl - the url (server side)
 * @property {string} pageUrl - the url (page side)
 * @property {string} hostingEnvironment - hosting platform new (9.9.24)
 * @property {boolean} hasInternetConnection - yes / no
 * @property {string} session_id - the session id from the mapping event
 * @property {string} entity_fqdn - entity_fqdn
 * @property {string} method_fqn - method_fqn
 * @property {string} server_artifactid - server_artifactid
 * @return {LogObject<httpClientErrorSrc176Evid404Params>} LogObject<httpClientErrorSrc176Evid404Params>
 */
export function httpClientErrorSrc176Evid404(params) {
    return { evid: 404, src: 176, endpoint: '', params };
}
/**
 * A function to create a log object for the 'pingMarketingConsentUnsubscribeClickSrc19Evid10001' event (evid: 10001)
 *
 * Event description: event to monitor unsubscribe clicks for analytics
 *
 * @param {pingMarketingConsentUnsubscribeClickSrc19Evid10001Params} params - The parameters for this event
 * @property {string} msid - msid
 * @property {string} appDefId - app_def_id
 * @property {string} hashed_email - hashed_email
 * @property {string} metadata - metadata
 * @return {LogObject<pingMarketingConsentUnsubscribeClickSrc19Evid10001Params>} LogObject<pingMarketingConsentUnsubscribeClickSrc19Evid10001Params>
 */
export function pingMarketingConsentUnsubscribeClickSrc19Evid10001(params) {
    return { evid: 10001, src: 19, endpoint: '', params };
}
/**
 * A function to create a log object for the 'unsubscribeEmailPageView' event (evid: 1006)
 *
 * Event description: Unsubscribe from notifications email page view (contact)
 *
 * @param {unsubscribeEmailPageViewParams} params - The parameters for this event
 * @property {DateTime} date_created - date_created
 * @property {DateTime} _artificial_ts - date_created
 * @property {string} uuid - uuid in case it's wix user
 * @property {string} topic_id - topic_id
 * @property {string} contact_id - contact_id in case it's wix member
 * @return {LogObject<unsubscribeEmailPageViewParams>} LogObject<unsubscribeEmailPageViewParams>
 */
export function unsubscribeEmailPageView(params) {
    return { evid: 1006, src: 19, endpoint: '', params };
}
/**
 * A function to create a log object for the 'unsubscribeEmailPageClick' event (evid: 1007)
 *
 * Event description: Unsubscribe email page click (unsubscribe/personalize_preferences/unsubscribe_all)
 *
 * @param {unsubscribeEmailPageClickParams} params - The parameters for this event
 * @property {DateTime} date_created - date_created
 * @property {DateTime} _artificial_ts - date_created
 * @property {string} uuid - uuid (in case it's wix user)
 * @property {string} topic_id - topic_id
 * @property {string} cta - unsubscribe/personalize_preferences/unsubscribe_all
 * @property {string} contact_id - contact_id in case it's wix member
 * @return {LogObject<unsubscribeEmailPageClickParams>} LogObject<unsubscribeEmailPageClickParams>
 */
export function unsubscribeEmailPageClick(params) {
    return { evid: 1007, src: 19, endpoint: '', params };
}
/**
 * A function to create a log object for the 'unsubscribeEmailPersonalizePreferencesClick' event (evid: 1008)
 *
 * Event description: Unsubscribe email personalize_preferences click (toggles on off)
 *
 * @param {unsubscribeEmailPersonalizePreferencesClickParams} params - The parameters for this event
 * @property {DateTime} date_created - date_created
 * @property {DateTime} _artificial_ts - date_created
 * @property {string} prev_value - (item_name:an_alert_by_wix, toggle:true}
 * @property {string} topic_id - topic_id
 * @property {string} new_value - (item_name:an_alert_by_wix, toggle:true}
 * @property {string} contact_id - contact_id
 * @return {LogObject<unsubscribeEmailPersonalizePreferencesClickParams>} LogObject<unsubscribeEmailPersonalizePreferencesClickParams>
 */
export function unsubscribeEmailPersonalizePreferencesClick(params) {
    return { evid: 1008, src: 19, endpoint: '', params };
}
/**
 * A function to create a log object for the 'pushNotificationNotificationSentToAssure' event (evid: 1121)
 *
 * Event description: when push notification is being sent to azure for them to send to devices
 *
 * @param {pushNotificationNotificationSentToAssureParams} params - The parameters for this event
 * @property {string} app_id - app that sent the notification
 * @property {string} azureMessageId - PN azure message ID
 * @property {string} messagePlatform - iOS/Android
 * @property {boolean} isMuted - true if user muted notifications
 * @property {string} mobileTenant - app that sent the message. WixApp for oneapp
 * @property {string} activityType - the notification activity type
 * @property {GUID} messageId - PN message id
 * @property {string} correlationId - id for tracking notifications
 * @property {string} appId - app that sent the notification
 * @return {LogObject<pushNotificationNotificationSentToAssureParams>} LogObject<pushNotificationNotificationSentToAssureParams>
 */
export function pushNotificationNotificationSentToAssure(params) {
    return { evid: 1121, src: 19, endpoint: '', params };
}
/**
 * A function to create a log object for the 'pushNotificationNotificationSentToDevice' event (evid: 1122)
 *
 * Event description: when push notification is being sent from assure to all relevant devices
 *
 * @param {pushNotificationNotificationSentToDeviceParams} params - The parameters for this event
 * @property {string} app_id - app that sent the notification
 * @property {string} platform - ios/android
 * @property {string} azureMessageId - PN azure message Id
 * @property {string} messagePlatform - ios/android
 * @property {string} state - state of sending
 * @property {boolean} isMuted - true if user muted notifications
 * @property {number} completedCount - number of devices that got the message
 * @property {number} errorCount - number of devices failed to receive notification
 * @property {string} mobileTenant - app that sent the message, WixApp for oneapp
 * @property {string} activityType - the notification activity type
 * @property {GUID} messageId - PN message id
 * @property {string} appId - app that sent the notification
 * @property {GUID} dMessageId - device message id from assure
 * @return {LogObject<pushNotificationNotificationSentToDeviceParams>} LogObject<pushNotificationNotificationSentToDeviceParams>
 */
export function pushNotificationNotificationSentToDevice(params) {
    return { evid: 1122, src: 19, endpoint: '', params };
}
/**
 * A function to create a log object for the 'homeNotificationCreatedNew' event (evid: 1125)
 *
 * Event description: a notification is created. Does not include all the target audience- since the
 *
 * @param {homeNotificationCreatedNewParams} params - The parameters for this event
 * @property {string} channel - Web / browser / mobile / SMS / email
 * @property {boolean} is_incognito - True when the notification will be sent via incognito
 * @property {boolean} is_muted - true if user muted notifications from the app (not from the os)
 * @property {string} correlation_id - request id
 * @property {string} initiator_type - type of the initiator (app,uuid,contact)
 * @property {string} notification_id - id for tracking notification
 * @property {string} initiator_id - id of the initiator (app,uuid,contact)
 * @property {string} notification_urgency - deprecated
 * @property {string} app_id - app that sent the notification
 * @property {string} topic - Hierarchical identifier for a stream of notifications.Used to define feed, aggregate notifications, settings are based on the topic, etc.
 * @property {string} contact_id - contact_id
 * @property {GUID} msid - msid of the notification
 * @property {string} template_id - A template of a notification (notifications are created based on a template, which defines the content, channels, behavior, etc.)
 * @return {LogObject<homeNotificationCreatedNewParams>} LogObject<homeNotificationCreatedNewParams>
 */
export function homeNotificationCreatedNew(params) {
    return { evid: 1125, src: 19, endpoint: '', params };
}
/**
 * A function to create a log object for the 'notificationsResolveAlertNotificationSrc19Evid1128' event (evid: 1128)
 *
 * Event description: Resolve notification or alert
 *
 * @param {notificationsResolveAlertNotificationSrc19Evid1128Params} params - The parameters for this event
 * @property {string} resolve_type - resolve/ revoke
 * @property {string} notification_id - id for tracking notification
 * @property {string} template_id - A template of a notification (notifications are created based on a template, which defines the content, channels, behavior, etc.)
 * @return {LogObject<notificationsResolveAlertNotificationSrc19Evid1128Params>} LogObject<notificationsResolveAlertNotificationSrc19Evid1128Params>
 */
export function notificationsResolveAlertNotificationSrc19Evid1128(params) {
    return { evid: 1128, src: 19, endpoint: '', params };
}
/**
 * A function to create a log object for the 'pingNotificationCreationRequest' event (evid: 1129)
 *
 * Event description: a request for notification creation.
 * The target audience
 *
 * @param {pingNotificationCreationRequestParams} params - The parameters for this event
 * @property {string} template_component_id - the component id of the template (guid, component id as it appears in DevCenter)
 * @property {string} channel - Web / browser / mobile / SMS / email
 * @property {string} template_name - the name of the template as it appears in DevCenter
 * @property {boolean} is_incognito - True when the notification will be sent via incognito
 * @property {string} correlation_id - request id
 * @property {string} app_version - app version as it appears in DevCenter, the app version of the app which created the template
 * @property {string} initiator_type - type of the initiator (app,uuid,contact)
 * @property {string} notification_id - id for tracking notification
 * @property {string} initiator_id - id of the initiator (app,uuid,contact)
 * @property {string} setting_group - the setting group of the notification
 * @property {string} app_id - app that sent the notification
 * @property {string} topic - Hierarchical identifier for a stream of notifications.Used to define feed, aggregate notifications, settings are based on the topic, etc.
 * @property {string} contact_id - contact_id
 * @property {string} ping_template_id - a guid that will be updated in each app_version (could be changes in the component)
 * @property {string} template_description - the template description as it appears in DevCenter
 * @property {GUID} msid - site guid
 * @property {string} template_id - A template of a notification (notifications are created based on a template, which defines the content, channels, behavior, etc.)
 * @return {LogObject<pingNotificationCreationRequestParams>} LogObject<pingNotificationCreationRequestParams>
 */
export function pingNotificationCreationRequest(params) {
    return { evid: 1129, src: 19, endpoint: '', params };
}
/**
 * A function to create a log object for the 'pingNotificationSend' event (evid: 1130)
 *
 * Event description: Notification was sent to the user
 *
 * @param {pingNotificationSendParams} params - The parameters for this event
 * @property {string} channel - web/mobile/browser/sms/email
 * @property {string} provider - in case the channel is email: email provider [responsys/contacts_mailer/shoutout], in case channel is sms: channels when the notification sent to channels/sms gateway when the notifications sent to Twillio
 * @property {string} subaccount_id - subaccount_id
 * @property {string} correlation_id - correlation_id
 * @property {string} app_version - app_version
 * @property {string} notification_id - id for tracking notification
 * @property {string} token - token
 * @property {string} app_id - app_id of the vertical requested the notification.
 * @property {string} target - target
 * @property {string} contact_id - contact_id
 * @property {string} os_category - os_category
 * @return {LogObject<pingNotificationSendParams>} LogObject<pingNotificationSendParams>
 */
export function pingNotificationSend(params) {
    return { evid: 1130, src: 19, endpoint: '', params };
}
/**
 * A function to create a log object for the 'pingNotificationFiltered' event (evid: 1133)
 *
 * Event description: After notification has created we check if we need to send it.
 * For each check this event is being sent (not only for filtered notification_ids).
 * We won't send the notification if the user doesn't have members area/oneapp etc.
 *
 * @param {pingNotificationFilteredParams} params - The parameters for this event
 * @property {string} channel - Web / browser / mobile / SMS / email
 * @property {string} correlation_id - request id
 * @property {string} initiator_type - type of the initiator (app,uuid,contact)
 * @property {string} reason - If it's filtered then this is the reason. f.e. - "no members area"
 * @property {string} notification_id - id for tracking notification
 * @property {boolean} isFilter - true if it's filtered and won't be sent. - relevant for web only and until 9.11
 * @property {string} initiator_id - id of the initiator (app_id,uuid,contact_id)
 * @property {string} token - the token of the mobile device
 * @property {string} app_id - app that sent the notification
 * @property {string} topic - Hierarchical identifier for a stream of notifications.Used to define feed, aggregate notifications, settings are based on the topic, etc.
 * @property {string} contact_id - contact_id
 * @property {GUID} msid - msid of the notification
 * @property {string} template_id - A template of a notification (notifications are created based on a template, which defines the content, channels, behavior, etc.)
 * @return {LogObject<pingNotificationFilteredParams>} LogObject<pingNotificationFilteredParams>
 */
export function pingNotificationFiltered(params) {
    return { evid: 1133, src: 19, endpoint: '', params };
}
/**
 * A function to create a log object for the 'androidNotificationReceivedSrc19Evid1134' event (evid: 1134)
 *
 * Event description: Technical BI which sent when ping api was called
 *
 * @param {androidNotificationReceivedSrc19Evid1134Params} params - The parameters for this event
 * @property {string} correlation_id - request id
 * @property {string} audience_id - followers, site subscribers / site members
 * @property {string} initiator_type - initiator_type
 * @property {string} initiator_id - initiator_id
 * @property {string} topic - Hierarchical identifier for a stream of notifications.Used to define feed, aggregate notifications, settings are based on the topic, etc.
 * @property {GUID} msid - the msid triggered the call
 * @property {string} template_id - A template of a notification (notifications are created based on a template, which defines the content, channels, behavior, etc.)
 * @return {LogObject<androidNotificationReceivedSrc19Evid1134Params>} LogObject<androidNotificationReceivedSrc19Evid1134Params>
 */
export function androidNotificationReceivedSrc19Evid1134(params) {
    return { evid: 1134, src: 19, endpoint: '', params };
}
/**
 * A function to create a log object for the 'androidNotificationReceived' event (evid: 1135)
 *
 * Event description: Notification successfully arrived at the android device (but hasn't necessarily displayed in the OS notification center).  Useful for debugging when user complaints that notifications are not delivered.
 * (Had this event in 67:1031 - move it to Ping service, and add the notification_id).
 *
 * @param {androidNotificationReceivedParams} params - The parameters for this event
 * @property {boolean} pushApproved - if all notifications are muted from the os. True if there is permission, False if there isn't permission.
 * @property {boolean} is_muted - if the specific channel of the notification is muted. True if muted, False if unmuted.
 * @property {boolean} is_displayed - True if displayed successfully, False if wasn't displayed (please ignore this field values until further update, it's WIP currently)
 * @property {string} payload - payload
 * @property {string} correlation_id - correlation_id
 * @property {string} reason - the error which caused the notification to not display
 * @property {string} notification_id - id for tracking notification
 * @return {LogObject<androidNotificationReceivedParams>} LogObject<androidNotificationReceivedParams>
 */
export function androidNotificationReceived(params) {
    return { evid: 1135, src: 19, endpoint: '', params };
}
/**
 * A function to create a log object for the 'pingReviewSendingList' event (evid: 1136)
 *
 * Event description: Technical BI which sent when ping review the sending list of the recipients
 *
 * @param {pingReviewSendingListParams} params - The parameters for this event
 * @property {boolean} is_multilingual - is_multilingual
 * @property {string} correlation_id - request id
 * @property {string} audience_id - followers, site subscribers / site members
 * @property {string} result - sending status : filtered/success
 * @property {string} initiator_type - initiator_type
 * @property {string} reason - filtered reason: permissions/language
 * @property {string} initiator_id - initiator_id
 * @property {string} language - contact's language
 * @property {string} topic - Hierarchical identifier for a stream of notifications.Used to define feed, aggregate notifications, settings are based on the topic, etc.
 * @property {string} contact_id - contact_id
 * @property {string} template_id - A template of a notification (notifications are created based on a template, which defines the content, channels, behavior, etc.)
 * @return {LogObject<pingReviewSendingListParams>} LogObject<pingReviewSendingListParams>
 */
export function pingReviewSendingList(params) {
    return { evid: 1136, src: 19, endpoint: '', params };
}
/**
 * A function to create a log object for the 'pingNotificationFilteredBeforeCreatedStage' event (evid: 1137)
 *
 * Event description: After notification has requested it will created only if the user subscribed to the relevant setting group the notification belongs to.
 * currently this event is being sent when the notification is filtered due to unsubscribe to setting group.
 *
 * @param {pingNotificationFilteredBeforeCreatedStageParams} params - The parameters for this event
 * @property {GUID} recipient_uuid - recipient uuid (if the recipient is user, otherwise send null)
 * @property {string} channel - Web / browser / mobile / SMS / email
 * @property {string} correlation_id - request id
 * @property {string} initiator_type - type of the initiator (app,uuid,contact)
 * @property {string} reason - the reason the notification was filtered
 * @property {string} notification_id - id for tracking notification
 * @property {string} initiator_id - id of the initiator (app_id,uuid,contact_id)
 * @property {string} token - the token of the mobile device
 * @property {string} recipient_contact_id - contact_id (when the recipient is contact, otherwise send null)
 * @property {string} app_id - app that sent the notification
 * @property {string} topic - Hierarchical identifier for a stream of notifications.Used to define feed, aggregate notifications, settings are based on the topic, etc.
 * @property {GUID} msid - msid of the notification
 * @property {string} template_id - A template of a notification (notifications are created based on a template, which defines the content, channels, behavior, etc.)
 * @return {LogObject<pingNotificationFilteredBeforeCreatedStageParams>} LogObject<pingNotificationFilteredBeforeCreatedStageParams>
 */
export function pingNotificationFilteredBeforeCreatedStage(params) {
    return { evid: 1137, src: 19, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dummyNameSrc19Evid1256700' event (evid: 1256700)
 *
 * Event description: dummy-name.
 *
 * @param {dummyNameSrc19Evid1256700Params} params - The parameters for this event
 * @return {LogObject<dummyNameSrc19Evid1256700Params>} LogObject<dummyNameSrc19Evid1256700Params>
 */
export function dummyNameSrc19Evid1256700(params) {
    return { evid: 1256700, src: 19, endpoint: '', params };
}
/**
 * A function to create a log object for the 'mobileAppSettingsChangeStatusOfNotificationCategoryInOsNotificationsSettings' event (evid: 1333)
 *
 * Event description: When owner/member is changing status of notification category in OS notifications settings (on/off). when member connecting via member login (in branded apps) the contact_id guid will be reported instead of uuid.
 *
 * @param {mobileAppSettingsChangeStatusOfNotificationCategoryInOsNotificationsSettingsParams} params - The parameters for this event
 * @property {string} uuid - user guid, user can be owner or even member, uuid will be sent from all mobile apps besides branded
 * @property {string} newStatus - the new status of notifications category after the user costumed this category
 * @property {string} pushPermissionDetailed - new status of push notification permission on device with details (the status after the change)
 * @property {string} mobileApp - the name of the mobile app the user changed it's settings, f.e: owner, spaces etc.
 * @property {string} category - the notification category the user edited
 * @property {string} contact_id - contact guid, the contact guid will be sent in case of member login in branded app
 * @return {LogObject<mobileAppSettingsChangeStatusOfNotificationCategoryInOsNotificationsSettingsParams>} LogObject<mobileAppSettingsChangeStatusOfNotificationCategoryInOsNotificationsSettingsParams>
 */
export function mobileAppSettingsChangeStatusOfNotificationCategoryInOsNotificationsSettings(params) {
    return { evid: 1333, src: 19, endpoint: '', params };
}
/**
 * A function to create a log object for the 'contactIsUnsubscribedFromEmailsSms' event (evid: 20000)
 *
 * Event description: When user is unsubscribed from Email/SMS
 *
 * @param {contactIsUnsubscribedFromEmailsSmsParams} params - The parameters for this event
 * @property {string} channel - The channel the contact unsubscribed from: email/sms
 * @property {string} hashed_phone - in case the channel is sms hashed phone will be reported, otherwise null
 * @property {string} hashed_email - in case the channel is email hashed email will be reported, otherwise null
 * @property {string} app_id - app_id - the app id of the app that owned the flow the user did unsubscribe from
 * @property {string} flow_id - in case the contact reached the unsubscribe page through clicking on a notification report the flow_id as it sent in event 19:1130, otherwise report generic flow_id to be able to connect between the server and client events.
 * @property {string} msid - the site’s guid the contact did unsubscribe to notifications from
 * @return {LogObject<contactIsUnsubscribedFromEmailsSmsParams>} LogObject<contactIsUnsubscribedFromEmailsSmsParams>
 */
export function contactIsUnsubscribedFromEmailsSms(params) {
    return { evid: 20000, src: 19, endpoint: '', params };
}
/**
 * A function to create a log object for the 'smsStatusDeliveredToPingByTwilio' event (evid: 40000)
 *
 * Event description: when sms status delivered to ping by Twilio
 *
 * @param {smsStatusDeliveredToPingByTwilioParams} params - The parameters for this event
 * @property {GUID} recipient_uuid - when the recipient is user send the uuid, otherwise null
 * @property {number} segments_number - The number of segments of the sms message (we are paying for each segment, one message could have more than 1 segment,  segment is defined by limited number of chars)
 * @property {string} subaccount_id - the id of the subaccount requested to send sms
 * @property {string} initiator_type - if the sms notification was initiated by an app report 'app', in case it was initiated by user report 'uuid'
 * @property {string} notification_id - the ping notification_id as we sent it to Twilio
 * @property {string} initiator_id - if the sms notification was initiated by an app report the app_id, in case it was initiated by user report the uuid
 * @property {number} cost - how much are we paying for each sms notification, the value is dollar multiple by 10,000. in order to extract dollar we should divide by 10,000
 * @property {string} error_msg - if the sms failed to send (by Twilio) the error messages which is the reason for failing. otherwise null
 * @property {string} app_id - the app id that triggered the sms request
 * @property {GUID} contact_id - when the recipient is contact send the contact_id, otherwise null
 * @property {string} notification_status - delivered/undelivered/failed
 * @property {string} sms_country_code - the country code the sms was sent to by Twillio
 * @property {string} sms_id - guid of the sms that Twilio is returning it's status
 * @property {string} template_id - the template_id of the sms message
 * @return {LogObject<smsStatusDeliveredToPingByTwilioParams>} LogObject<smsStatusDeliveredToPingByTwilioParams>
 */
export function smsStatusDeliveredToPingByTwilio(params) {
    return { evid: 40000, src: 19, endpoint: '', params };
}
/**
 * A function to create a log object for the 'errorEvent' event (evid: 10)
 *
 * Event description: error event.
 *
 * @param {errorEventParams} params - The parameters for this event
 * @property {string} dsc - dsc
 * @property {number} response_time - Time in ms from load to error
 * @property {boolean} is_rollout - is_rollout
 * @property {string} initiator_name - initiator_name
 * @property {string} builderType - builder_type
 * @property {string} errscp - error scope
 * @property {GUID} site_id - changed from did -> site_id on Oct 03, 2013
 * @property {string} errn - error name
 * @property {string} p4 - 4st extra parameter
 * @property {string} majorver - the major version of html editor
 * @property {string} trgt - target name, api call or class
 * @property {boolean} isLiveEditor - is_live_editor
 * @property {number} ts - Time in ms from load to error
 * @property {string} playerVersion - player_version
 * @property {string} artifactVersion - artifact_version
 * @property {number} usersOnPageCount - users_on_page_count
 * @property {string} viewmode - viewmode
 * @property {string} error_description_short - error_description_short
 * @property {string} data_center - data_center
 * @property {string} screenResolution - screen_resolution
 * @property {string} p3 - 3rd extra parameter
 * @property {GUID} did - changed from did -> site_id on Oct 03, 2013
 * @property {boolean} isSg - is_sg
 * @property {string} dsOrigin - ds_origin
 * @property {string} p2 - 2nd extra parameter
 * @property {string} token - token
 * @property {string} sessionId - session_id
 * @property {number} errc - error code
 * @property {string} stack - stacktrace
 * @property {string} viewerName - viewer_name
 * @property {string} app_id - app_id
 * @property {number} sev - severity of the error
 * @property {number} cat - category id
 * @property {string} errormsg - dsc
 * @property {number} usersOnSiteCount - users_on_site_count
 * @property {string} p1 - 1st extra parameter
 * @property {GUID} msid - msid
 * @property {number} base_version - base_version
 * @property {number} iss - issue (sub-category)
 * @return {LogObject<errorEventParams>} LogObject<errorEventParams>
 */
export function errorEvent(params) {
    return { evid: 10, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardDeleteAndRestoreSiteOpenPopup' event (evid: 100)
 *
 * Event description: user clicks on Move to Trash/Restore/Remove from Trash  button from popup window
 *
 * @param {dashboardDeleteAndRestoreSiteOpenPopupParams} params - The parameters for this event
 * @property {string} name - deprecated
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {GUID} msid - -
 * @property {string} popup_name - popup_name
 * @return {LogObject<dashboardDeleteAndRestoreSiteOpenPopupParams>} LogObject<dashboardDeleteAndRestoreSiteOpenPopupParams>
 */
export function dashboardDeleteAndRestoreSiteOpenPopup(params) {
    return { evid: 100, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardDeleteAndRestoreSiteRestoreSiteClick' event (evid: 101)
 *
 * Event description: user clicks on Move to Trash/Restore/Remove from Trash  button from popup window
 *
 * @param {dashboardDeleteAndRestoreSiteRestoreSiteClickParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} origin - button name
 * @property {string} platform - platform
 * @property {GUID} msid - -
 * @return {LogObject<dashboardDeleteAndRestoreSiteRestoreSiteClickParams>} LogObject<dashboardDeleteAndRestoreSiteRestoreSiteClickParams>
 */
export function dashboardDeleteAndRestoreSiteRestoreSiteClick(params) {
    return { evid: 101, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderFormSettingsContactListChooseSavedFieldsHoverYourFormFields' event (evid: 1010)
 *
 * Event description: Copy of Form Builder - Form settings - contact list - choose saved fields - hover your form fields
 *
 * @param {formBuilderFormSettingsContactListChooseSavedFieldsHoverYourFormFieldsParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI/ Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} template - template name
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderFormSettingsContactListChooseSavedFieldsHoverYourFormFieldsParams>} LogObject<formBuilderFormSettingsContactListChooseSavedFieldsHoverYourFormFieldsParams>
 */
export function formBuilderFormSettingsContactListChooseSavedFieldsHoverYourFormFields(params) {
    return { evid: 1010, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderFormSettingsContactListChooseSavedFieldsHoverFieldsInContactList' event (evid: 1011)
 *
 * Event description: Copy of Form Builder - Form settings - contact list - choose saved fields - hover fields in contact list
 *
 * @param {formBuilderFormSettingsContactListChooseSavedFieldsHoverFieldsInContactListParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI/ Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} template - template name
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderFormSettingsContactListChooseSavedFieldsHoverFieldsInContactListParams>} LogObject<formBuilderFormSettingsContactListChooseSavedFieldsHoverFieldsInContactListParams>
 */
export function formBuilderFormSettingsContactListChooseSavedFieldsHoverFieldsInContactList(params) {
    return { evid: 1011, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderFormSettingsContactListChooseSavedFieldsClickOnDropdownField' event (evid: 1012)
 *
 * Event description: Form Builder - Form settings - contact list - choose saved fields - click on dropdown field
 *
 * @param {formBuilderFormSettingsContactListChooseSavedFieldsClickOnDropdownFieldParams} params - The parameters for this event
 * @property {string} choose - 'don't save', field name or create custom field
 * @property {string} builderOrigin - ADI/ Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} template - template name
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderFormSettingsContactListChooseSavedFieldsClickOnDropdownFieldParams>} LogObject<formBuilderFormSettingsContactListChooseSavedFieldsClickOnDropdownFieldParams>
 */
export function formBuilderFormSettingsContactListChooseSavedFieldsClickOnDropdownField(params) {
    return { evid: 1012, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderSubmitButtonSettingsUpdateValueOfSubmitButton' event (evid: 1013)
 *
 * Event description: Form Builder - Submit Button Settings - Update Value of submit button
 *
 * @param {formBuilderSubmitButtonSettingsUpdateValueOfSubmitButtonParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} template - template
 * @property {GUID} msid - msid
 * @property {string} value - name of updated value
 * @return {LogObject<formBuilderSubmitButtonSettingsUpdateValueOfSubmitButtonParams>} LogObject<formBuilderSubmitButtonSettingsUpdateValueOfSubmitButtonParams>
 */
export function formBuilderSubmitButtonSettingsUpdateValueOfSubmitButton(params) {
    return { evid: 1013, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderFormSubmitSettingsClick' event (evid: 1014)
 *
 * Event description: Form Builder - Form Submit settings - click
 *
 * @param {formBuilderFormSubmitSettingsClickParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI/ Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} template - template name
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderFormSubmitSettingsClickParams>} LogObject<formBuilderFormSubmitSettingsClickParams>
 */
export function formBuilderFormSubmitSettingsClick(params) {
    return { evid: 1014, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderFormSettingsDisplayErrorPage' event (evid: 1015)
 *
 * Event description: Form Builder - Form settings - display error page
 *
 * @param {formBuilderFormSettingsDisplayErrorPageParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI/ Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} tabName - 'contact labels','email notification'
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} template - template name
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderFormSettingsDisplayErrorPageParams>} LogObject<formBuilderFormSettingsDisplayErrorPageParams>
 */
export function formBuilderFormSettingsDisplayErrorPage(params) {
    return { evid: 1015, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderFormSettingsErrorPageTryAgainClick' event (evid: 1016)
 *
 * Event description: Form Builder - Form settings - error page - try again click
 *
 * @param {formBuilderFormSettingsErrorPageTryAgainClickParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI/ Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} tabName - 'contact labels','email notification'
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} template - template name
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderFormSettingsErrorPageTryAgainClickParams>} LogObject<formBuilderFormSettingsErrorPageTryAgainClickParams>
 */
export function formBuilderFormSettingsErrorPageTryAgainClick(params) {
    return { evid: 1016, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderFormSettingsCreateEmailMarketing' event (evid: 1017)
 *
 * Event description: Form Builder - Form settings - Create Email marketing
 *
 * @param {formBuilderFormSettingsCreateEmailMarketingParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} email_marketing_type - 'send a newsletter','special offer','promote business','start from scratch','explore all templates'
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} template - template name
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderFormSettingsCreateEmailMarketingParams>} LogObject<formBuilderFormSettingsCreateEmailMarketingParams>
 */
export function formBuilderFormSettingsCreateEmailMarketing(params) {
    return { evid: 1017, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderFormSettingsSubscriberDoubleOptIn' event (evid: 1018)
 *
 * Event description: Form Builder - Form settings - Subscriber double opt in
 *
 * @param {formBuilderFormSettingsSubscriberDoubleOptInParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderFormSettingsSubscriberDoubleOptInParams>} LogObject<formBuilderFormSettingsSubscriberDoubleOptInParams>
 */
export function formBuilderFormSettingsSubscriberDoubleOptIn(params) {
    return { evid: 1018, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderFormSettingsSubscriberDoubleOptInLearnMore' event (evid: 1019)
 *
 * Event description: Form Builder - Form settings - Subscriber double opt in - learn more
 *
 * @param {formBuilderFormSettingsSubscriberDoubleOptInLearnMoreParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderFormSettingsSubscriberDoubleOptInLearnMoreParams>} LogObject<formBuilderFormSettingsSubscriberDoubleOptInLearnMoreParams>
 */
export function formBuilderFormSettingsSubscriberDoubleOptInLearnMore(params) {
    return { evid: 1019, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardSiteActivityCenterClickDeleteItem' event (evid: 102)
 *
 * Event description: dashboard > site -> activity center -> click delete item.
 *
 * @param {dashboardSiteActivityCenterClickDeleteItemParams} params - The parameters for this event
 * @property {string} name - name
 * @property {GUID} item_id - item_id
 * @property {string} source - source
 * @property {boolean} is_deleted - is_deleted
 * @property {string} view_type - view_type
 * @property {string} origin - origin
 * @property {number} items_count - items_count
 * @property {string} type - type
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @property {boolean} is_archived - is_archived
 * @property {GUID} feed_id - feed_id
 * @return {LogObject<dashboardSiteActivityCenterClickDeleteItemParams>} LogObject<dashboardSiteActivityCenterClickDeleteItemParams>
 */
export function dashboardSiteActivityCenterClickDeleteItem(params) {
    return { evid: 102, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderFormSettingsSubscriberDoubleOptInEnable' event (evid: 1020)
 *
 * Event description: Form Builder - Form settings - Subscriber double opt in - Enable
 *
 * @param {formBuilderFormSettingsSubscriberDoubleOptInEnableParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {boolean} toggle - true for on, false for off
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderFormSettingsSubscriberDoubleOptInEnableParams>} LogObject<formBuilderFormSettingsSubscriberDoubleOptInEnableParams>
 */
export function formBuilderFormSettingsSubscriberDoubleOptInEnable(params) {
    return { evid: 1020, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderFormSettingsSubscriberDoubleOptInSubmitMessage' event (evid: 1021)
 *
 * Event description: Form Builder - Form settings - Subscriber double opt in - submit message
 *
 * @param {formBuilderFormSettingsSubscriberDoubleOptInSubmitMessageParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderFormSettingsSubscriberDoubleOptInSubmitMessageParams>} LogObject<formBuilderFormSettingsSubscriberDoubleOptInSubmitMessageParams>
 */
export function formBuilderFormSettingsSubscriberDoubleOptInSubmitMessage(params) {
    return { evid: 1021, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderFormSettingsInboxOptInOutWhoToNotify' event (evid: 1022)
 *
 * Event description: Form Builder - Form settings - inbox opt in/out - who to notify
 *
 * @param {formBuilderFormSettingsInboxOptInOutWhoToNotifyParams} params - The parameters for this event
 * @property {string} choose - 'contributers','other'
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderFormSettingsInboxOptInOutWhoToNotifyParams>} LogObject<formBuilderFormSettingsInboxOptInOutWhoToNotifyParams>
 */
export function formBuilderFormSettingsInboxOptInOutWhoToNotify(params) {
    return { evid: 1022, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderFormSettingsInboxOptInOutUpdateEmail' event (evid: 1023)
 *
 * Event description: Form Builder - Form settings - update email
 *
 * @param {formBuilderFormSettingsInboxOptInOutUpdateEmailParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderFormSettingsInboxOptInOutUpdateEmailParams>} LogObject<formBuilderFormSettingsInboxOptInOutUpdateEmailParams>
 */
export function formBuilderFormSettingsInboxOptInOutUpdateEmail(params) {
    return { evid: 1023, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderFormSettingsInboxOptInOutLearnMore' event (evid: 1024)
 *
 * Event description: Form Builder - Form settings - update email
 *
 * @param {formBuilderFormSettingsInboxOptInOutLearnMoreParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} current_option - contributors/others
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderFormSettingsInboxOptInOutLearnMoreParams>} LogObject<formBuilderFormSettingsInboxOptInOutLearnMoreParams>
 */
export function formBuilderFormSettingsInboxOptInOutLearnMore(params) {
    return { evid: 1024, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderFormSettingsInboxOptInOutAreYouSure' event (evid: 1025)
 *
 * Event description: Form Builder - Form settings - inbox opt in/out - are you sure
 *
 * @param {formBuilderFormSettingsInboxOptInOutAreYouSureParams} params - The parameters for this event
 * @property {string} choose - 'cancel','yes'
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {boolean} checkbox - true if check false if not
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} origin - origin
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderFormSettingsInboxOptInOutAreYouSureParams>} LogObject<formBuilderFormSettingsInboxOptInOutAreYouSureParams>
 */
export function formBuilderFormSettingsInboxOptInOutAreYouSure(params) {
    return { evid: 1025, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderFormSettingsInboxOptInOutFindOutMore' event (evid: 1026)
 *
 * Event description: Form Builder - Form settings - inbox opt in/out - find out more
 *
 * @param {formBuilderFormSettingsInboxOptInOutFindOutMoreParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} origin - origin
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderFormSettingsInboxOptInOutFindOutMoreParams>} LogObject<formBuilderFormSettingsInboxOptInOutFindOutMoreParams>
 */
export function formBuilderFormSettingsInboxOptInOutFindOutMore(params) {
    return { evid: 1026, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderFormSettingsEmailNotificationAddContributer' event (evid: 1027)
 *
 * Event description: Form Builder - Form settings - inbox opt in/out - find out more
 *
 * @param {formBuilderFormSettingsEmailNotificationAddContributerParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderFormSettingsEmailNotificationAddContributerParams>} LogObject<formBuilderFormSettingsEmailNotificationAddContributerParams>
 */
export function formBuilderFormSettingsEmailNotificationAddContributer(params) {
    return { evid: 1027, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderFormSettingsEmailNotificationAddNewEmail' event (evid: 1028)
 *
 * Event description: Form Builder - Form settings - inbox opt in/out - find out more
 *
 * @param {formBuilderFormSettingsEmailNotificationAddNewEmailParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderFormSettingsEmailNotificationAddNewEmailParams>} LogObject<formBuilderFormSettingsEmailNotificationAddNewEmailParams>
 */
export function formBuilderFormSettingsEmailNotificationAddNewEmail(params) {
    return { evid: 1028, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderFormSettingsEmailNotificationWantToNotifyDonTShowThisAgain' event (evid: 1029)
 *
 * Event description: Form Builder - Form settings - inbox opt in/out - find out more
 *
 * @param {formBuilderFormSettingsEmailNotificationWantToNotifyDonTShowThisAgainParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} origin - origin
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderFormSettingsEmailNotificationWantToNotifyDonTShowThisAgainParams>} LogObject<formBuilderFormSettingsEmailNotificationWantToNotifyDonTShowThisAgainParams>
 */
export function formBuilderFormSettingsEmailNotificationWantToNotifyDonTShowThisAgain(params) {
    return { evid: 1029, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardSiteActivityCenterClickUndoDeletedItem' event (evid: 103)
 *
 * Event description: dashboard > site -> activity center -> click undo deleted item.
 *
 * @param {dashboardSiteActivityCenterClickUndoDeletedItemParams} params - The parameters for this event
 * @property {GUID} item_id - item_id
 * @property {string} source - source
 * @property {boolean} is_deleted - is_deleted
 * @property {string} view_type - view_type
 * @property {string} action_url - action_url
 * @property {string} referral - referral
 * @property {string} action_desc - action_desc
 * @property {string} origin - origin
 * @property {number} items_count - items_count
 * @property {number} expire - expire
 * @property {string} type - type
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @property {boolean} is_archived - is_archived
 * @property {GUID} feed_id - feed_id
 * @return {LogObject<dashboardSiteActivityCenterClickUndoDeletedItemParams>} LogObject<dashboardSiteActivityCenterClickUndoDeletedItemParams>
 */
export function dashboardSiteActivityCenterClickUndoDeletedItem(params) {
    return { evid: 103, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'workflowsSettingsClick' event (evid: 1030)
 *
 * Event description: user click on Settings button in workflows page
 *
 * @param {workflowsSettingsClickParams} params - The parameters for this event
 * @property {GUID} uuid - uuid
 * @property {string} workflow_name - workflow_name
 * @property {GUID} workflow_id - workflow_id
 * @property {GUID} msid - msid
 * @return {LogObject<workflowsSettingsClickParams>} LogObject<workflowsSettingsClickParams>
 */
export function workflowsSettingsClick(params) {
    return { evid: 1030, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'workflowsSettingsShowArchive' event (evid: 1031)
 *
 * Event description: user click on Show archive in workflows settings
 *
 * @param {workflowsSettingsShowArchiveParams} params - The parameters for this event
 * @property {GUID} uuid - uuid
 * @property {string} workflow_name - workflow_name
 * @property {GUID} workflow_id - workflow_id
 * @property {GUID} msid - msid
 * @return {LogObject<workflowsSettingsShowArchiveParams>} LogObject<workflowsSettingsShowArchiveParams>
 */
export function workflowsSettingsShowArchive(params) {
    return { evid: 1031, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'workflowsSettingsHideArchive' event (evid: 1032)
 *
 * Event description: user click on Hide archive in workflows settings
 *
 * @param {workflowsSettingsHideArchiveParams} params - The parameters for this event
 * @property {GUID} uuid - uuid
 * @property {string} workflow_name - workflow_name
 * @property {GUID} workflow_id - workflow_id
 * @property {GUID} msid - msid
 * @return {LogObject<workflowsSettingsHideArchiveParams>} LogObject<workflowsSettingsHideArchiveParams>
 */
export function workflowsSettingsHideArchive(params) {
    return { evid: 1032, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'workflowsSettingsSetAutomations' event (evid: 1033)
 *
 * Event description: user click on Set Automations in workflows settings
 *
 * @param {workflowsSettingsSetAutomationsParams} params - The parameters for this event
 * @property {GUID} uuid - uuid
 * @property {string} workflow_name - workflow_name
 * @property {string} origin - 'more actions' / 'phase tooltip'
 * @property {GUID} workflow_id - workflow_id
 * @property {GUID} msid - msid
 * @return {LogObject<workflowsSettingsSetAutomationsParams>} LogObject<workflowsSettingsSetAutomationsParams>
 */
export function workflowsSettingsSetAutomations(params) {
    return { evid: 1033, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'workflowsSettingsDeleteWorkflowClick' event (evid: 1034)
 *
 * Event description: user click on Delete Workflow in workflows settings
 *
 * @param {workflowsSettingsDeleteWorkflowClickParams} params - The parameters for this event
 * @property {GUID} uuid - uuid
 * @property {string} workflow_name - workflow_name
 * @property {GUID} workflow_id - workflow_id
 * @property {GUID} msid - msid
 * @return {LogObject<workflowsSettingsDeleteWorkflowClickParams>} LogObject<workflowsSettingsDeleteWorkflowClickParams>
 */
export function workflowsSettingsDeleteWorkflowClick(params) {
    return { evid: 1034, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'workflowsSettingsDeleteWorkflowConfirmation' event (evid: 1035)
 *
 * Event description: user click on 'Delete' button on Delete Workflow pop up
 *
 * @param {workflowsSettingsDeleteWorkflowConfirmationParams} params - The parameters for this event
 * @property {GUID} uuid - uuid
 * @property {string} workflow_name - workflow_name
 * @property {GUID} workflow_id - workflow_id
 * @property {GUID} msid - msid
 * @return {LogObject<workflowsSettingsDeleteWorkflowConfirmationParams>} LogObject<workflowsSettingsDeleteWorkflowConfirmationParams>
 */
export function workflowsSettingsDeleteWorkflowConfirmation(params) {
    return { evid: 1035, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'workflowsSettingsAddNewWorkflow' event (evid: 1036)
 *
 * Event description: user click on 'New Workflow' in Workflow Settings
 *
 * @param {workflowsSettingsAddNewWorkflowParams} params - The parameters for this event
 * @property {GUID} uuid - uuid
 * @property {GUID} new_workflow_id - workflow_id of new created workflow
 * @property {string} origin - {'add' / 'board dropdown icon'}
 * @property {GUID} workflow_id - workflow_id of current flow
 * @property {GUID} msid - msid
 * @return {LogObject<workflowsSettingsAddNewWorkflowParams>} LogObject<workflowsSettingsAddNewWorkflowParams>
 */
export function workflowsSettingsAddNewWorkflow(params) {
    return { evid: 1036, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'workflowsBoardUpdateBoardNameIconClick' event (evid: 1037)
 *
 * Event description: user click on  pencil icon to update Board name
 *
 * @param {workflowsBoardUpdateBoardNameIconClickParams} params - The parameters for this event
 * @property {GUID} uuid - uuid
 * @property {string} workflow_name - workflow_name
 * @property {GUID} workflow_id - workflow_id of current flow
 * @property {GUID} msid - msid
 * @return {LogObject<workflowsBoardUpdateBoardNameIconClickParams>} LogObject<workflowsBoardUpdateBoardNameIconClickParams>
 */
export function workflowsBoardUpdateBoardNameIconClick(params) {
    return { evid: 1037, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'workflowsBoardUpdateBoardNameComplete' event (evid: 1038)
 *
 * Event description: user complete to update workflow name
 *
 * @param {workflowsBoardUpdateBoardNameCompleteParams} params - The parameters for this event
 * @property {GUID} uuid - uuid
 * @property {string} workflow_name - workflow_name
 * @property {GUID} workflow_id - workflow_id of current flow
 * @property {GUID} msid - msid
 * @return {LogObject<workflowsBoardUpdateBoardNameCompleteParams>} LogObject<workflowsBoardUpdateBoardNameCompleteParams>
 */
export function workflowsBoardUpdateBoardNameComplete(params) {
    return { evid: 1038, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'workflowsBoardDropdownIconClick' event (evid: 1039)
 *
 * Event description: user click on dropdown icon next to board name
 *
 * @param {workflowsBoardDropdownIconClickParams} params - The parameters for this event
 * @property {GUID} uuid - uuid
 * @property {string} workflow_name - workflow_name
 * @property {GUID} workflow_id - workflow_id of current flow
 * @property {GUID} msid - msid
 * @return {LogObject<workflowsBoardDropdownIconClickParams>} LogObject<workflowsBoardDropdownIconClickParams>
 */
export function workflowsBoardDropdownIconClick(params) {
    return { evid: 1039, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardSiteActivityCenterClickOnArchiveItem' event (evid: 104)
 *
 * Event description: dashboard > site -> activity center -> click on archive item.
 *
 * @param {dashboardSiteActivityCenterClickOnArchiveItemParams} params - The parameters for this event
 * @property {GUID} item_id - item_id
 * @property {string} source - source
 * @property {boolean} is_deleted - is_deleted
 * @property {string} view_type - view_type
 * @property {string} action_url - action_url
 * @property {string} referral - referral
 * @property {string} action_desc - action_desc
 * @property {string} origin - origin
 * @property {number} items_count - items_count
 * @property {number} expire - expire
 * @property {string} type - type
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @property {boolean} is_archived - is_archived
 * @property {GUID} feed_id - feed_id
 * @return {LogObject<dashboardSiteActivityCenterClickOnArchiveItemParams>} LogObject<dashboardSiteActivityCenterClickOnArchiveItemParams>
 */
export function dashboardSiteActivityCenterClickOnArchiveItem(params) {
    return { evid: 104, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'workflowsAddNewPhaseClick' event (evid: 1040)
 *
 * Event description: user click on add step in workflows board
 *
 * @param {workflowsAddNewPhaseClickParams} params - The parameters for this event
 * @property {GUID} uuid - uuid
 * @property {string} workflow_name - workflow_name
 * @property {string} origin - {'add', 'steps area'}
 * @property {GUID} workflow_id - workflow_id of current flow
 * @property {GUID} msid - msid
 * @return {LogObject<workflowsAddNewPhaseClickParams>} LogObject<workflowsAddNewPhaseClickParams>
 */
export function workflowsAddNewPhaseClick(params) {
    return { evid: 1040, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'workflowsAddNewPhaseSave' event (evid: 1041)
 *
 * Event description: user saved new step in workflows board
 *
 * @param {workflowsAddNewPhaseSaveParams} params - The parameters for this event
 * @property {string} phase_name - phase_name
 * @property {GUID} uuid - uuid
 * @property {string} workflow_name - workflow_name
 * @property {GUID} workflow_id - workflow_id of current flow
 * @property {GUID} msid - msid
 * @return {LogObject<workflowsAddNewPhaseSaveParams>} LogObject<workflowsAddNewPhaseSaveParams>
 */
export function workflowsAddNewPhaseSave(params) {
    return { evid: 1041, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'workflowsAddNewCardClick' event (evid: 1042)
 *
 * Event description: user click on add new card
 *
 * @param {workflowsAddNewCardClickParams} params - The parameters for this event
 * @property {GUID} phase_id - phase_id
 * @property {string} phase_name - phase_name
 * @property {GUID} uuid - uuid
 * @property {string} workflow_name - workflow_name
 * @property {string} origin - {'add new card button' / 'phase settings', 'add', 'contact panel'}
 * @property {GUID} workflow_id - workflow_id of current flow
 * @property {GUID} msid - msid
 * @return {LogObject<workflowsAddNewCardClickParams>} LogObject<workflowsAddNewCardClickParams>
 */
export function workflowsAddNewCardClick(params) {
    return { evid: 1042, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'workflowsAddNewCardSave' event (evid: 1043)
 *
 * Event description: user click on save new card
 *
 * @param {workflowsAddNewCardSaveParams} params - The parameters for this event
 * @property {GUID} phase_id - phase_id
 * @property {string} phase_name - phase_name
 * @property {GUID} uuid - uuid
 * @property {string} workflow_name - workflow_name
 * @property {GUID} workflow_id - workflow_id of current flow
 * @property {string} contact_id - contact_id
 * @property {GUID} msid - msid
 * @return {LogObject<workflowsAddNewCardSaveParams>} LogObject<workflowsAddNewCardSaveParams>
 */
export function workflowsAddNewCardSave(params) {
    return { evid: 1043, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'workflowsPhaseSettingsClick' event (evid: 1044)
 *
 * Event description: user click on Phase Settings
 *
 * @param {workflowsPhaseSettingsClickParams} params - The parameters for this event
 * @property {GUID} phase_id - phase_id
 * @property {string} phase_name - phase_name
 * @property {GUID} uuid - uuid
 * @property {string} workflow_name - workflow_name
 * @property {GUID} workflow_id - workflow_id of current flow
 * @property {GUID} msid - msid
 * @return {LogObject<workflowsPhaseSettingsClickParams>} LogObject<workflowsPhaseSettingsClickParams>
 */
export function workflowsPhaseSettingsClick(params) {
    return { evid: 1044, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'workflowsPhaseSettingsCreateAutomation' event (evid: 1045)
 *
 * Event description: user click on Create Automation in Phase Settings
 *
 * @param {workflowsPhaseSettingsCreateAutomationParams} params - The parameters for this event
 * @property {GUID} phase_id - phase_id
 * @property {string} phase_name - phase_name
 * @property {GUID} uuid - uuid
 * @property {string} workflow_name - workflow_name
 * @property {GUID} workflow_id - workflow_id of current flow
 * @property {GUID} msid - msid
 * @return {LogObject<workflowsPhaseSettingsCreateAutomationParams>} LogObject<workflowsPhaseSettingsCreateAutomationParams>
 */
export function workflowsPhaseSettingsCreateAutomation(params) {
    return { evid: 1045, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'workflowsPhaseSettingsRenameStepClick' event (evid: 1046)
 *
 * Event description: user click on rename step
 *
 * @param {workflowsPhaseSettingsRenameStepClickParams} params - The parameters for this event
 * @property {GUID} phase_id - phase_id
 * @property {string} phase_name - phase name
 * @property {GUID} uuid - uuid
 * @property {string} workflow_name - workflow_name
 * @property {string} origin - {settings/by click}
 * @property {GUID} workflow_id - workflow_id of current flow
 * @property {GUID} msid - msid
 * @return {LogObject<workflowsPhaseSettingsRenameStepClickParams>} LogObject<workflowsPhaseSettingsRenameStepClickParams>
 */
export function workflowsPhaseSettingsRenameStepClick(params) {
    return { evid: 1046, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'workflowsPhaseSettingsRenameStepComplete' event (evid: 1047)
 *
 * Event description: user complete to rename step
 *
 * @param {workflowsPhaseSettingsRenameStepCompleteParams} params - The parameters for this event
 * @property {GUID} phase_id - phase_id
 * @property {string} phase_name - new phase name
 * @property {GUID} uuid - uuid
 * @property {string} workflow_name - workflow_name
 * @property {GUID} workflow_id - workflow_id of current flow
 * @property {GUID} msid - msid
 * @return {LogObject<workflowsPhaseSettingsRenameStepCompleteParams>} LogObject<workflowsPhaseSettingsRenameStepCompleteParams>
 */
export function workflowsPhaseSettingsRenameStepComplete(params) {
    return { evid: 1047, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'workflowsPhaseSettingsDeleteStepClick' event (evid: 1048)
 *
 * Event description: user click on delete step
 *
 * @param {workflowsPhaseSettingsDeleteStepClickParams} params - The parameters for this event
 * @property {GUID} phase_id - phase_id
 * @property {string} phase_name - phase_name
 * @property {GUID} uuid - uuid
 * @property {string} workflow_name - workflow_name
 * @property {GUID} workflow_id - workflow_id of current flow
 * @property {GUID} msid - msid
 * @return {LogObject<workflowsPhaseSettingsDeleteStepClickParams>} LogObject<workflowsPhaseSettingsDeleteStepClickParams>
 */
export function workflowsPhaseSettingsDeleteStepClick(params) {
    return { evid: 1048, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'workflowsPhaseSettingsDeleteStepConfirm' event (evid: 1049)
 *
 * Event description: user click on 'Delete' button on Delete Step pop-up
 *
 * @param {workflowsPhaseSettingsDeleteStepConfirmParams} params - The parameters for this event
 * @property {GUID} phase_id - phase_id
 * @property {string} phase_name - phase_name
 * @property {GUID} uuid - uuid
 * @property {string} workflow_name - workflow_name
 * @property {GUID} workflow_id - workflow_id of current flow
 * @property {GUID} msid - msid
 * @return {LogObject<workflowsPhaseSettingsDeleteStepConfirmParams>} LogObject<workflowsPhaseSettingsDeleteStepConfirmParams>
 */
export function workflowsPhaseSettingsDeleteStepConfirm(params) {
    return { evid: 1049, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardUserClickedOnContactSNameFromUserActivity' event (evid: 105)
 *
 * Event description: Click on contact's name in a feed that was added from a TPA due to UoU activity
 *
 * @param {dashboardUserClickedOnContactSNameFromUserActivityParams} params - The parameters for this event
 * @property {string} name - name
 * @property {GUID} item_id - item_id
 * @property {string} source - source
 * @property {string} view_type - view_type
 * @property {string} origin - origin
 * @property {string} type - type
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @property {GUID} feed_id - feed_id
 * @return {LogObject<dashboardUserClickedOnContactSNameFromUserActivityParams>} LogObject<dashboardUserClickedOnContactSNameFromUserActivityParams>
 */
export function dashboardUserClickedOnContactSNameFromUserActivity(params) {
    return { evid: 105, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'workflowsCardSettingsClick' event (evid: 1050)
 *
 * Event description: user click on card settings icon
 *
 * @param {workflowsCardSettingsClickParams} params - The parameters for this event
 * @property {GUID} phase_id - phase_id
 * @property {GUID} uuid - uuid
 * @property {string} workflow_name - workflow_name
 * @property {GUID} card_id - card_id
 * @property {GUID} workflow_id - workflow_id of current flow
 * @property {GUID} msid - msid
 * @return {LogObject<workflowsCardSettingsClickParams>} LogObject<workflowsCardSettingsClickParams>
 */
export function workflowsCardSettingsClick(params) {
    return { evid: 1050, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'workflowsCardSettingsCardActions' event (evid: 1051)
 *
 * Event description: user click on card actions - 'Rename Card'/'View Contact'/ 'Add Task'/ 'Send Message' / 'Send Price Quote'/ 'Send Invoice' / 'Archive Card'
 *
 * @param {workflowsCardSettingsCardActionsParams} params - The parameters for this event
 * @property {GUID} phase_id - phase_id
 * @property {GUID} uuid - uuid
 * @property {string} workflow_name - workflow_name
 * @property {string} origin - {settings/by click}
 * @property {GUID} card_id - card_id
 * @property {GUID} workflow_id - workflow_id of current flow
 * @property {GUID} msid - msid
 * @property {string} action - 'Rename Card' / 'View Contact'/ 'Add Task'/ 'Send Message' / 'Send Price Quote'/ 'Send Invoice' / 'Archive Card'
 * @return {LogObject<workflowsCardSettingsCardActionsParams>} LogObject<workflowsCardSettingsCardActionsParams>
 */
export function workflowsCardSettingsCardActions(params) {
    return { evid: 1051, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'workflowsCardSettingsEditCardNameComplete' event (evid: 1052)
 *
 * Event description: user complete to Edit Card Name
 *
 * @param {workflowsCardSettingsEditCardNameCompleteParams} params - The parameters for this event
 * @property {GUID} phase_id - phase_id
 * @property {GUID} uuid - uuid
 * @property {string} workflow_name - workflow_name
 * @property {string} origin - 'contact panel' / 'workflows'
 * @property {GUID} card_id - card_id
 * @property {string} cardName - card_name
 * @property {GUID} workflow_id - workflow_id of current flow
 * @property {GUID} msid - msid
 * @return {LogObject<workflowsCardSettingsEditCardNameCompleteParams>} LogObject<workflowsCardSettingsEditCardNameCompleteParams>
 */
export function workflowsCardSettingsEditCardNameComplete(params) {
    return { evid: 1052, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'workflowsBoardSelectABoard' event (evid: 1053)
 *
 * Event description: user select a board from boards list
 *
 * @param {workflowsBoardSelectABoardParams} params - The parameters for this event
 * @property {GUID} previous_workflow_id - previous_workflow_id
 * @property {GUID} uuid - uuid
 * @property {string} workflow_name - workflow_name
 * @property {string} previous_workflow_name - previous_workflow_name
 * @property {GUID} workflow_id - workflow_id
 * @property {GUID} msid - msid
 * @return {LogObject<workflowsBoardSelectABoardParams>} LogObject<workflowsBoardSelectABoardParams>
 */
export function workflowsBoardSelectABoard(params) {
    return { evid: 1053, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'workflowsSettingsLearnMoreClick' event (evid: 1054)
 *
 * Event description: user click on Learn More in workflows settings
 *
 * @param {workflowsSettingsLearnMoreClickParams} params - The parameters for this event
 * @property {GUID} uuid - uuid
 * @property {string} workflow_name - workflow_name
 * @property {GUID} workflow_id - workflow_id
 * @property {GUID} msid - msid
 * @return {LogObject<workflowsSettingsLearnMoreClickParams>} LogObject<workflowsSettingsLearnMoreClickParams>
 */
export function workflowsSettingsLearnMoreClick(params) {
    return { evid: 1054, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'workflowsIntroStep1WorkSmarterWithWorkflows' event (evid: 1055)
 *
 * Event description: user click on 'next' or dismiss on the Intro steps
 *
 * @param {workflowsIntroStep1WorkSmarterWithWorkflowsParams} params - The parameters for this event
 * @property {number} step_no - step number
 * @property {boolean} is_final_step - true/false
 * @property {GUID} msid - msid
 * @property {string} action - {'next'/'dismiss'}
 * @return {LogObject<workflowsIntroStep1WorkSmarterWithWorkflowsParams>} LogObject<workflowsIntroStep1WorkSmarterWithWorkflowsParams>
 */
export function workflowsIntroStep1WorkSmarterWithWorkflows(params) {
    return { evid: 1055, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'workflowsIntroStep2HowItWorks' event (evid: 1056)
 *
 * Event description: user click on Add button in workflows page
 *
 * @param {workflowsIntroStep2HowItWorksParams} params - The parameters for this event
 * @property {GUID} uuid - uuid
 * @property {string} workflow_name - workflow_name
 * @property {GUID} workflow_id - workflow_id
 * @property {GUID} msid - msid
 * @return {LogObject<workflowsIntroStep2HowItWorksParams>} LogObject<workflowsIntroStep2HowItWorksParams>
 */
export function workflowsIntroStep2HowItWorks(params) {
    return { evid: 1056, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'workflowsIntroStep3MoveCardsAsYouGo' event (evid: 1057)
 *
 * Event description: Workflows - automatic workflow creation
 *
 * @param {workflowsIntroStep3MoveCardsAsYouGoParams} params - The parameters for this event
 * @property {GUID} uuid - uuid
 * @property {boolean} isSuccessful - yes, no
 * @property {GUID} msid - msid
 * @return {LogObject<workflowsIntroStep3MoveCardsAsYouGoParams>} LogObject<workflowsIntroStep3MoveCardsAsYouGoParams>
 */
export function workflowsIntroStep3MoveCardsAsYouGo(params) {
    return { evid: 1057, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'workflowsIntroStep4SaveTimeWithAutomations' event (evid: 1058)
 *
 * Event description: Workflows - Tooltip Hover
 *
 * @param {workflowsIntroStep4SaveTimeWithAutomationsParams} params - The parameters for this event
 * @property {GUID} uuid - uuid
 * @property {string} tooltip_type - tooltip_type
 * @property {GUID} workflow_id - workflow_id
 * @property {GUID} msid - msid
 * @return {LogObject<workflowsIntroStep4SaveTimeWithAutomationsParams>} LogObject<workflowsIntroStep4SaveTimeWithAutomationsParams>
 */
export function workflowsIntroStep4SaveTimeWithAutomations(params) {
    return { evid: 1058, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'workflowsIntroStep5CompleteSatisfaction' event (evid: 1059)
 *
 * Event description: Workflows - Errors
 *
 * @param {workflowsIntroStep5CompleteSatisfactionParams} params - The parameters for this event
 * @property {GUID} uuid - uuid
 * @property {string} error_type - error_type
 * @property {GUID} workflow_id - workflow_id
 * @property {GUID} msid - msid
 * @return {LogObject<workflowsIntroStep5CompleteSatisfactionParams>} LogObject<workflowsIntroStep5CompleteSatisfactionParams>
 */
export function workflowsIntroStep5CompleteSatisfaction(params) {
    return { evid: 1059, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'clickOnSidebarSHeader' event (evid: 106)
 *
 * Event description: user clicks on sidebar's header and returns to the dashboard
 *
 * @param {clickOnSidebarSHeaderParams} params - The parameters for this event
 * @property {string} name - unique name that doesn't change when changing the name on the side bar
 * @property {string} view_type - view_type
 * @property {string} app_id - app_id of the item
 * @property {string} platform - platform
 * @property {string} hosting - MA/editor
 * @property {GUID} msid - metasite id
 * @return {LogObject<clickOnSidebarSHeaderParams>} LogObject<clickOnSidebarSHeaderParams>
 */
export function clickOnSidebarSHeader(params) {
    return { evid: 106, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'workflowsIntroStep6ThatSIt' event (evid: 1060)
 *
 * Event description: user click on send email marketing in Phase Settings
 *
 * @param {workflowsIntroStep6ThatSItParams} params - The parameters for this event
 * @property {GUID} phase_id - phase_id
 * @property {string} phase_name - phase_name
 * @property {GUID} uuid - uuid
 * @property {string} workflow_name - workflow_name
 * @property {GUID} workflow_id - workflow_id of current flow
 * @property {GUID} msid - msid
 * @return {LogObject<workflowsIntroStep6ThatSItParams>} LogObject<workflowsIntroStep6ThatSItParams>
 */
export function workflowsIntroStep6ThatSIt(params) {
    return { evid: 1060, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dummyNameSrc5Evid10600' event (evid: 10600)
 *
 * Event description: dummy-name.
 *
 * @param {dummyNameSrc5Evid10600Params} params - The parameters for this event
 * @return {LogObject<dummyNameSrc5Evid10600Params>} LogObject<dummyNameSrc5Evid10600Params>
 */
export function dummyNameSrc5Evid10600(params) {
    return { evid: 10600, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'workflowsGoToBoardFromContactPanel' event (evid: 1061)
 *
 * Event description: user select a board  from Contact Panel
 *
 * @param {workflowsGoToBoardFromContactPanelParams} params - The parameters for this event
 * @property {GUID} uuid - uuid
 * @property {string} workflow_name - workflow_name
 * @property {GUID} card_id - card_id
 * @property {GUID} workflow_id - workflow_id
 * @property {string} contact_id - contact_id
 * @property {GUID} msid - msid
 * @return {LogObject<workflowsGoToBoardFromContactPanelParams>} LogObject<workflowsGoToBoardFromContactPanelParams>
 */
export function workflowsGoToBoardFromContactPanel(params) {
    return { evid: 1061, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'workflowsConnectContactToWorkflowFromContactPanel' event (evid: 1062)
 *
 * Event description: Connect Contact to Workflow
 *
 * @param {workflowsConnectContactToWorkflowFromContactPanelParams} params - The parameters for this event
 * @property {GUID} uuid - uuid
 * @property {string} contact_id - contact_id
 * @property {GUID} msid - msid
 * @return {LogObject<workflowsConnectContactToWorkflowFromContactPanelParams>} LogObject<workflowsConnectContactToWorkflowFromContactPanelParams>
 */
export function workflowsConnectContactToWorkflowFromContactPanel(params) {
    return { evid: 1062, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'workflowsClickUpdateContactInWfFromContactPanel' event (evid: 1063)
 *
 * Event description: user click on update Contact in WF from Contact Panel
 *
 * @param {workflowsClickUpdateContactInWfFromContactPanelParams} params - The parameters for this event
 * @property {GUID} uuid - uuid
 * @property {string} workflow_name - workflow_name
 * @property {GUID} card_id - card_id
 * @property {GUID} workflow_id - workflow_id
 * @property {string} contact_id - contact_id
 * @property {GUID} msid - msid
 * @return {LogObject<workflowsClickUpdateContactInWfFromContactPanelParams>} LogObject<workflowsClickUpdateContactInWfFromContactPanelParams>
 */
export function workflowsClickUpdateContactInWfFromContactPanel(params) {
    return { evid: 1063, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'workflowsClickOnCompletedArchivedFlowsInContactPanel' event (evid: 1064)
 *
 * Event description: user click on Completed & Archived flows in Contact Panel
 *
 * @param {workflowsClickOnCompletedArchivedFlowsInContactPanelParams} params - The parameters for this event
 * @property {GUID} uuid - uuid
 * @property {string} click_action - open / close
 * @property {string} contact_id - contact_id
 * @property {GUID} msid - msid
 * @return {LogObject<workflowsClickOnCompletedArchivedFlowsInContactPanelParams>} LogObject<workflowsClickOnCompletedArchivedFlowsInContactPanelParams>
 */
export function workflowsClickOnCompletedArchivedFlowsInContactPanel(params) {
    return { evid: 1064, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'workflowsErrorCardCannotBeRemovedInContactPanel' event (evid: 1065)
 *
 * Event description: When user gets an error message 'This card can't be removed as there is another card linked to the same contact'
 *
 * @param {workflowsErrorCardCannotBeRemovedInContactPanelParams} params - The parameters for this event
 * @property {GUID} uuid - uuid
 * @property {string} workflow_name - workflow_name
 * @property {GUID} card_id - card_id
 * @property {GUID} workflow_id - workflow_id
 * @property {string} contact_id - contact_id
 * @property {GUID} msid - msid
 * @return {LogObject<workflowsErrorCardCannotBeRemovedInContactPanelParams>} LogObject<workflowsErrorCardCannotBeRemovedInContactPanelParams>
 */
export function workflowsErrorCardCannotBeRemovedInContactPanel(params) {
    return { evid: 1065, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'workflowsChangePhaseInContactPanel' event (evid: 1066)
 *
 * Event description: Change Phase - in Contact Panel
 *
 * @param {workflowsChangePhaseInContactPanelParams} params - The parameters for this event
 * @property {string} to_phase_name - to_phase_name
 * @property {GUID} uuid - uuid
 * @property {string} workflow_name - workflow_name
 * @property {string} origin - 'contact panel'
 * @property {GUID} card_id - card_id
 * @property {string} from_phase_name - from_phase_name
 * @property {GUID} workflow_id - workflow_id
 * @property {string} contact_id - contact_id
 * @property {GUID} msid - msid
 * @return {LogObject<workflowsChangePhaseInContactPanelParams>} LogObject<workflowsChangePhaseInContactPanelParams>
 */
export function workflowsChangePhaseInContactPanel(params) {
    return { evid: 1066, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'workflowsClickOnSaveChangesInContactPanel' event (evid: 1067)
 *
 * Event description: click on save changes - in Contact Panel
 *
 * @param {workflowsClickOnSaveChangesInContactPanelParams} params - The parameters for this event
 * @property {GUID} uuid - uuid
 * @property {string} workflow_name - workflow_name
 * @property {GUID} card_id - card_id
 * @property {GUID} workflow_id - workflow_id
 * @property {string} contact_id - contact_id
 * @property {GUID} msid - msid
 * @return {LogObject<workflowsClickOnSaveChangesInContactPanelParams>} LogObject<workflowsClickOnSaveChangesInContactPanelParams>
 */
export function workflowsClickOnSaveChangesInContactPanel(params) {
    return { evid: 1067, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'workflowsMoveCard' event (evid: 1068)
 *
 * Event description: user moved card (event from August 19)
 *
 * @param {workflowsMoveCardParams} params - The parameters for this event
 * @property {string} moving_type - 'move' , 'restore' , 'archive'
 * @property {GUID} uuid - uuid
 * @property {string} workflow_name - workflow_name
 * @property {string} origin - 'contact panel' / 'workflows'
 * @property {GUID} card_id - card_id
 * @property {string} move_to_step - 'win step' , 'middle step', 'archive step'
 * @property {GUID} workflow_id - workflow_id of current flow
 * @property {string} contact_id - contact_id
 * @property {GUID} msid - msid
 * @return {LogObject<workflowsMoveCardParams>} LogObject<workflowsMoveCardParams>
 */
export function workflowsMoveCard(params) {
    return { evid: 1068, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'workflowsEmptyStatePageLoaded' event (evid: 1069)
 *
 * Event description: Empty State Page loaded
 *
 * @param {workflowsEmptyStatePageLoadedParams} params - The parameters for this event
 * @property {GUID} msid - msid
 * @property {GUID} uuid - uuid
 * @return {LogObject<workflowsEmptyStatePageLoadedParams>} LogObject<workflowsEmptyStatePageLoadedParams>
 */
export function workflowsEmptyStatePageLoaded(params) {
    return { evid: 1069, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'sidebarState107' event (evid: 107)
 *
 * Event description: on each Bizmgr page, the event sends the current state of the sidebar.
 * this event will be sent also when the user arrives to Bizgmr from an external link.
 * e.g. main menu/setting menu/marketing tools menu etc.
 *
 * @param {sidebarState107Params} params - The parameters for this event
 * @property {string} sub_section_name - when the sidebar is opened on a third level item- should represents the second level of the active name field, else=null
 * @property {string} hosting_platform - accountmanagr/bizmanagr/devcenter/etc.
 * @property {string} section_name - the name of the section (highest level in the shown sidebar) -in case of expand it will be the expanded menu name
 * @property {string} category_items_list - list of category items in the main sidebar menu (might be under the fold)
 * @property {string} items_below_fold - items_below_fold
 * @property {string} referral_info - referral of previous page
 * @property {string} view_type - view_type
 * @property {string} active_item - the active sidebar item the user is navigated to
 * @property {string} prev_page_id - the previous page id
 * @property {string} page_id - the active page id
 * @property {string} active_item_cta - deprecated
 * @property {string} sub_category_items_list - list of sub_category items (second level) in the expanded sidebar menu (might be under the fold)
 * @property {string} second_sub_category_items_list - when the sidebar is opened on a third level item- list of third level items in the expanded sidebar menu, else null
 * @property {string} platform - deprecated
 * @property {string} items_above_fold - items_above_fold
 * @property {string} hosting_platform_context_id - context id: when the context is site - msid, when the context is app_id (like in devCenter f.e) - appDefId. In account manager is null
 * @property {string} hosting - MA/editor
 * @property {GUID} msid - --
 * @property {string} view - the page loaded with the sidebar (not internal page - module)
 * @return {LogObject<sidebarState107Params>} LogObject<sidebarState107Params>
 */
export function sidebarState107(params) {
    return { evid: 107, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'workflowsEmptyStateClickOnGetStarted' event (evid: 1070)
 *
 * Event description: Empty State - click on 'Get Started'
 *
 * @param {workflowsEmptyStateClickOnGetStartedParams} params - The parameters for this event
 * @property {GUID} msid - msid
 * @property {GUID} uuid - uuid
 * @return {LogObject<workflowsEmptyStateClickOnGetStartedParams>} LogObject<workflowsEmptyStateClickOnGetStartedParams>
 */
export function workflowsEmptyStateClickOnGetStarted(params) {
    return { evid: 1070, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'workflowsTemplatesModalIsPresented' event (evid: 1071)
 *
 * Event description: Workflows - templates modal is presented
 *
 * @param {workflowsTemplatesModalIsPresentedParams} params - The parameters for this event
 * @property {GUID} msid - msid
 * @property {GUID} uuid - uuid
 * @return {LogObject<workflowsTemplatesModalIsPresentedParams>} LogObject<workflowsTemplatesModalIsPresentedParams>
 */
export function workflowsTemplatesModalIsPresented(params) {
    return { evid: 1071, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'workflowsClickOnUseTemplateOrStartFromScratchOnTemplatesModal' event (evid: 1072)
 *
 * Event description: click on 'Use Template' or 'Start from Scratch' on templates modal
 *
 * @param {workflowsClickOnUseTemplateOrStartFromScratchOnTemplatesModalParams} params - The parameters for this event
 * @property {string} template_name - 'Sales Leads' / 'Hiring Process' / .../'To Do' / 'Start from Scratch'
 * @property {GUID} uuid - uuid
 * @property {GUID} msid - msid
 * @property {GUID} template_id - template_id
 * @return {LogObject<workflowsClickOnUseTemplateOrStartFromScratchOnTemplatesModalParams>} LogObject<workflowsClickOnUseTemplateOrStartFromScratchOnTemplatesModalParams>
 */
export function workflowsClickOnUseTemplateOrStartFromScratchOnTemplatesModal(params) {
    return { evid: 1072, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'workflowsClickOnDismissTemplatesModal' event (evid: 1073)
 *
 * Event description: click on dismiss templates modal
 *
 * @param {workflowsClickOnDismissTemplatesModalParams} params - The parameters for this event
 * @property {GUID} msid - msid
 * @property {GUID} uuid - uuid
 * @return {LogObject<workflowsClickOnDismissTemplatesModalParams>} LogObject<workflowsClickOnDismissTemplatesModalParams>
 */
export function workflowsClickOnDismissTemplatesModal(params) {
    return { evid: 1073, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cookiesBannerUouUserClickOnVisitorDataOption' event (evid: 1074)
 *
 * Event description: The user clicked one of the visitor data options
 *
 * @param {cookiesBannerUouUserClickOnVisitorDataOptionParams} params - The parameters for this event
 * @property {string} action - data request / consent log
 * @return {LogObject<cookiesBannerUouUserClickOnVisitorDataOptionParams>} LogObject<cookiesBannerUouUserClickOnVisitorDataOptionParams>
 */
export function cookiesBannerUouUserClickOnVisitorDataOption(params) {
    return { evid: 1074, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cookiesBannerUouUserHoverOverTooltip' event (evid: 1075)
 *
 * Event description: User interaction with the different i icons in the privacy & cookie flow
 *
 * @param {cookiesBannerUouUserHoverOverTooltipParams} params - The parameters for this event
 * @property {string} name - consent button text / setting button text / privacy policy text / page on my site / external web address / audience / save button text /  essential cookies/ marketing cookies / functional cookies / analytics cookies
 * @return {LogObject<cookiesBannerUouUserHoverOverTooltipParams>} LogObject<cookiesBannerUouUserHoverOverTooltipParams>
 */
export function cookiesBannerUouUserHoverOverTooltip(params) {
    return { evid: 1075, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cookiesBannerUouCookieConsentBannerGetStartedClick' event (evid: 1076)
 *
 * Event description: The user clicked the option to display the banner on his site
 *
 * @param {cookiesBannerUouCookieConsentBannerGetStartedClickParams} params - The parameters for this event
 * @property {string} action - get started / edit
 * @return {LogObject<cookiesBannerUouCookieConsentBannerGetStartedClickParams>} LogObject<cookiesBannerUouCookieConsentBannerGetStartedClickParams>
 */
export function cookiesBannerUouCookieConsentBannerGetStartedClick(params) {
    return { evid: 1076, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cookiesBannerUouDisplayCookieBannerOnSiteCta' event (evid: 1077)
 *
 * Event description: User interaction with the toggle to display the banner on his site
 *
 * @param {cookiesBannerUouDisplayCookieBannerOnSiteCtaParams} params - The parameters for this event
 * @property {boolean} toggle - on / off
 * @return {LogObject<cookiesBannerUouDisplayCookieBannerOnSiteCtaParams>} LogObject<cookiesBannerUouDisplayCookieBannerOnSiteCtaParams>
 */
export function cookiesBannerUouDisplayCookieBannerOnSiteCta(params) {
    return { evid: 1077, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cookiesBannerUouUserClickedOnAdvancedOption' event (evid: 1078)
 *
 * Event description: The user clicked to see the advanced cookie banner options
 *
 * @param {cookiesBannerUouUserClickedOnAdvancedOptionParams} params - The parameters for this event
 * @return {LogObject<cookiesBannerUouUserClickedOnAdvancedOptionParams>} LogObject<cookiesBannerUouUserClickedOnAdvancedOptionParams>
 */
export function cookiesBannerUouUserClickedOnAdvancedOption(params) {
    return { evid: 1078, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cookiesBannerUouUserClickedOnTheGeneralXButton' event (evid: 1079)
 *
 * Event description: The user clicked to close the privacy & cookies options
 *
 * @param {cookiesBannerUouUserClickedOnTheGeneralXButtonParams} params - The parameters for this event
 * @return {LogObject<cookiesBannerUouUserClickedOnTheGeneralXButtonParams>} LogObject<cookiesBannerUouUserClickedOnTheGeneralXButtonParams>
 */
export function cookiesBannerUouUserClickedOnTheGeneralXButton(params) {
    return { evid: 1079, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'mobileDashboardCreateNewSite' event (evid: 108)
 *
 * Event description: when a user creates a new site from the mobile dashboard
 *
 * @param {mobileDashboardCreateNewSiteParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} view - siteless/ my-sites
 * @return {LogObject<mobileDashboardCreateNewSiteParams>} LogObject<mobileDashboardCreateNewSiteParams>
 */
export function mobileDashboardCreateNewSite(params) {
    return { evid: 108, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cookiesBannerUouSavePublishClick' event (evid: 1080)
 *
 * Event description: User click to save and publish his cookies banner setting
 *
 * @param {cookiesBannerUouSavePublishClickParams} params - The parameters for this event
 * @property {string} general_text - changed / not changed
 * @property {string} essential_cookies_text - changed / not changed
 * @property {Url} url_privacy_policy - url
 * @property {string} changed_button_style - null / square / rounded corners / round
 * @property {string} custom_font_changed - changed / not changed / null
 * @property {string} custom_text_size_changed - changed / not changed / null
 * @property {string} audience - all visitors
 * @property {string} settings_button_text - changed / not changed
 * @property {string} banner_color - dark/light/custom
 * @property {string} custom_colors_contrast_ratio - color ratio for accessibility thresholds based on webaim contract checker
 * @property {string} functional_cookies_text - changed / not changed
 * @property {string} changed_second_color - null / changed / not changed
 * @property {string} decline_all_button - off / on
 * @property {string} link_option - Page On My Site / external Web Address
 * @property {string} consent_button_text - changed / not changed
 * @property {string} custom_color_accessible - null / yes/ no
 * @property {string} revisit_settings_button_location - Null / Bottom Right / Bottom Left / Center Right / Center Left
 * @property {string} save_button_text - changed / not changed
 * @property {string} revisit_settings_button - on / off
 * @property {string} privacy_policy_link_text - changed / not changed
 * @property {string} cookie_status - off / standard/ custom
 * @property {string} analytics_cookies_text - changed / not changed
 * @property {string} marketing_cookies_text - changed / not changed
 * @property {string} changed_main_color - null / changed / not changed
 * @return {LogObject<cookiesBannerUouSavePublishClickParams>} LogObject<cookiesBannerUouSavePublishClickParams>
 */
export function cookiesBannerUouSavePublishClick(params) {
    return { evid: 1080, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cookiesBannerUouUserWithPopUpCta' event (evid: 1081)
 *
 * Event description: User interaction with the different pop-ups
 *
 * @param {cookiesBannerUouUserWithPopUpCtaParams} params - The parameters for this event
 * @property {string} action - right click / left click
 * @property {string} pop_up_type - Privacy Policy link is missing / Reset cookie consent log / something went wrong / Cookie banner is published / Hide cookie banner / Your cookie policy is now live / Disable customized cookie banner / Enable wix standard cookie banner/  Disable wix standard cookie consent banner / sure you want to leave
 * @return {LogObject<cookiesBannerUouUserWithPopUpCtaParams>} LogObject<cookiesBannerUouUserWithPopUpCtaParams>
 */
export function cookiesBannerUouUserWithPopUpCta(params) {
    return { evid: 1081, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cookiesBannerUouAdvancedOptionsCta' event (evid: 1082)
 *
 * Event description: User interaction with the advanced options
 *
 * @param {cookiesBannerUouAdvancedOptionsCtaParams} params - The parameters for this event
 * @property {string} action - customize cookies categories text /  customized cookie banner / reset your consent log
 * @return {LogObject<cookiesBannerUouAdvancedOptionsCtaParams>} LogObject<cookiesBannerUouAdvancedOptionsCtaParams>
 */
export function cookiesBannerUouAdvancedOptionsCta(params) {
    return { evid: 1082, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cookiesBannerUouSetUpAPrivacyPolicyClicks' event (evid: 1083)
 *
 * Event description: User clicks on the options to learn more about the privacy policy
 *
 * @param {cookiesBannerUouSetUpAPrivacyPolicyClicksParams} params - The parameters for this event
 * @property {string} action - learn how / sub learn how / sub learn more
 * @return {LogObject<cookiesBannerUouSetUpAPrivacyPolicyClicksParams>} LogObject<cookiesBannerUouSetUpAPrivacyPolicyClicksParams>
 */
export function cookiesBannerUouSetUpAPrivacyPolicyClicks(params) {
    return { evid: 1083, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cookiesBannerUouAddADoNotSellDateLinkClick' event (evid: 1084)
 *
 * Event description: The user clicked Add a ‘Do Not Sell Date’ link in the editor
 *
 * @param {cookiesBannerUouAddADoNotSellDateLinkClickParams} params - The parameters for this event
 * @return {LogObject<cookiesBannerUouAddADoNotSellDateLinkClickParams>} LogObject<cookiesBannerUouAddADoNotSellDateLinkClickParams>
 */
export function cookiesBannerUouAddADoNotSellDateLinkClick(params) {
    return { evid: 1084, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cookiesBannerUouUouClickOnDoNotSellMyDataLink' event (evid: 1085)
 *
 * Event description: UoU clicked the 'Do Not Sell my Data’ link in a user site
 *
 * @param {cookiesBannerUouUouClickOnDoNotSellMyDataLinkParams} params - The parameters for this event
 * @return {LogObject<cookiesBannerUouUouClickOnDoNotSellMyDataLinkParams>} LogObject<cookiesBannerUouUouClickOnDoNotSellMyDataLinkParams>
 */
export function cookiesBannerUouUouClickOnDoNotSellMyDataLink(params) {
    return { evid: 1085, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cookiesBannerUouUouDisableDataTransfersPopUpIsDisplay' event (evid: 1086)
 *
 * Event description: UoU 'disable data transfers?  popup is displayed
 *
 * @param {cookiesBannerUouUouDisableDataTransfersPopUpIsDisplayParams} params - The parameters for this event
 * @return {LogObject<cookiesBannerUouUouDisableDataTransfersPopUpIsDisplayParams>} LogObject<cookiesBannerUouUouDisableDataTransfersPopUpIsDisplayParams>
 */
export function cookiesBannerUouUouDisableDataTransfersPopUpIsDisplay(params) {
    return { evid: 1086, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cookiesBannerUouUouWithDisableDataTransfersPopUp' event (evid: 1087)
 *
 * Event description: UoU interaction with the 'disable data transfers?' pop-up
 *
 * @param {cookiesBannerUouUouWithDisableDataTransfersPopUpParams} params - The parameters for this event
 * @property {string} action - close / disable transfers
 * @return {LogObject<cookiesBannerUouUouWithDisableDataTransfersPopUpParams>} LogObject<cookiesBannerUouUouWithDisableDataTransfersPopUpParams>
 */
export function cookiesBannerUouUouWithDisableDataTransfersPopUp(params) {
    return { evid: 1087, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cookiesBannerUouUserConsentLogCta' event (evid: 1088)
 *
 * Event description: User interaction with the consent log options
 *
 * @param {cookiesBannerUouUserConsentLogCtaParams} params - The parameters for this event
 * @property {string} action - learn more/ learn how/ download
 * @return {LogObject<cookiesBannerUouUserConsentLogCtaParams>} LogObject<cookiesBannerUouUserConsentLogCtaParams>
 */
export function cookiesBannerUouUserConsentLogCta(params) {
    return { evid: 1088, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cookiesBannerUouExportConsentLogCta' event (evid: 1089)
 *
 * Event description: User interaction with Export consent log pop-up
 *
 * @param {cookiesBannerUouExportConsentLogCtaParams} params - The parameters for this event
 * @property {string} action - close / Export / cancel
 * @property {string} time_option - 7 days / 4 weeks / 3 months / 6 months
 * @return {LogObject<cookiesBannerUouExportConsentLogCtaParams>} LogObject<cookiesBannerUouExportConsentLogCtaParams>
 */
export function cookiesBannerUouExportConsentLogCta(params) {
    return { evid: 1089, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cookiesBannerUouAPopUpIsDisplay' event (evid: 1090)
 *
 * Event description: One of the different pop-ups is display
 *
 * @param {cookiesBannerUouAPopUpIsDisplayParams} params - The parameters for this event
 * @property {string} pop_up_type - Privacy Policy link is missing / Reset cookie consent log / something went wrong / Cookie banner is published / Hide cookie banner / Your cookie policy is now live / Disable customized cookie banner / Enable wix standard cookie banner/  Disable wix standard cookie consent banner / sure you want to leave
 * @return {LogObject<cookiesBannerUouAPopUpIsDisplayParams>} LogObject<cookiesBannerUouAPopUpIsDisplayParams>
 */
export function cookiesBannerUouAPopUpIsDisplay(params) {
    return { evid: 1090, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cookiesBannerUouSearchMembersById' event (evid: 1091)
 *
 * Event description: The user clicked to search site members by ID
 *
 * @param {cookiesBannerUouSearchMembersByIdParams} params - The parameters for this event
 * @property {string} member_id_filled - member id
 * @return {LogObject<cookiesBannerUouSearchMembersByIdParams>} LogObject<cookiesBannerUouSearchMembersByIdParams>
 */
export function cookiesBannerUouSearchMembersById(params) {
    return { evid: 1091, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cookiesBannerUouReviewRequirementsAlert' event (evid: 1092)
 *
 * Event description: The user didn't check the box for the cookie policy requirements and when he tried to save he got the review requirements alert.
 *
 * @param {cookiesBannerUouReviewRequirementsAlertParams} params - The parameters for this event
 * @return {LogObject<cookiesBannerUouReviewRequirementsAlertParams>} LogObject<cookiesBannerUouReviewRequirementsAlertParams>
 */
export function cookiesBannerUouReviewRequirementsAlert(params) {
    return { evid: 1092, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderFormAddNewFieldInnerTabsClick' event (evid: 1093)
 *
 * Event description: Form Builder - Form add new field - inner tabs - click
 *
 * @param {formBuilderFormAddNewFieldInnerTabsClickParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI, Editor
 * @property {string} tab_name - which field catogery whose choosen
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form_comp_id
 * @property {GUID} vsi - vsi
 * @property {string} template - template
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderFormAddNewFieldInnerTabsClickParams>} LogObject<formBuilderFormAddNewFieldInnerTabsClickParams>
 */
export function formBuilderFormAddNewFieldInnerTabsClick(params) {
    return { evid: 1093, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderEditorXAddASubscribeCheckbox' event (evid: 1094)
 *
 * Event description: Form Builder - Editor X - add a subscribe checkbox
 *
 * @param {formBuilderEditorXAddASubscribeCheckboxParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI, Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form comp id
 * @property {GUID} vsi - vsi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderEditorXAddASubscribeCheckboxParams>} LogObject<formBuilderEditorXAddASubscribeCheckboxParams>
 */
export function formBuilderEditorXAddASubscribeCheckbox(params) {
    return { evid: 1094, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderMigratedFormContactFormToWixFormSuccess' event (evid: 1095)
 *
 * Event description: Form Builder - migrated form contact form to wix form success
 *
 * @param {formBuilderMigratedFormContactFormToWixFormSuccessParams} params - The parameters for this event
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form comp id
 * @property {GUID} vsi - vsi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderMigratedFormContactFormToWixFormSuccessParams>} LogObject<formBuilderMigratedFormContactFormToWixFormSuccessParams>
 */
export function formBuilderMigratedFormContactFormToWixFormSuccess(params) {
    return { evid: 1095, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderConditionalFormAddNewRule' event (evid: 1096)
 *
 * Event description: Form Builder - conditional form - add new rule
 *
 * @param {formBuilderConditionalFormAddNewRuleParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI, Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form_comp_id
 * @property {GUID} vsi - vsi
 * @property {string} origin - emptyState, rulelist, fieldsettings
 * @property {string} template - template
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderConditionalFormAddNewRuleParams>} LogObject<formBuilderConditionalFormAddNewRuleParams>
 */
export function formBuilderConditionalFormAddNewRule(params) {
    return { evid: 1096, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderConditionalFormLearnMore' event (evid: 1097)
 *
 * Event description: Form Builder - conditional form - learn more
 *
 * @param {formBuilderConditionalFormLearnMoreParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI, Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form_comp_id
 * @property {GUID} vsi - vsi
 * @property {string} origin - origin
 * @property {string} template - template
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderConditionalFormLearnMoreParams>} LogObject<formBuilderConditionalFormLearnMoreParams>
 */
export function formBuilderConditionalFormLearnMore(params) {
    return { evid: 1097, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderConditionalFormIfClickOnDropdown' event (evid: 1098)
 *
 * Event description: Form Builder - conditional form - IF - click on dropdown.
 *
 * @param {formBuilderConditionalFormIfClickOnDropdownParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI, Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form_comp_id
 * @property {GUID} vsi - vsi
 * @property {string} template - template
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderConditionalFormIfClickOnDropdownParams>} LogObject<formBuilderConditionalFormIfClickOnDropdownParams>
 */
export function formBuilderConditionalFormIfClickOnDropdown(params) {
    return { evid: 1098, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderConditionalFormIfChooseFromDropdown' event (evid: 1099)
 *
 * Event description: Copy of Form Builder - conditional form - IF - choose from dropdown
 *
 * @param {formBuilderConditionalFormIfChooseFromDropdownParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI, Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form_comp_id
 * @property {GUID} vsi - vsi
 * @property {string} template - template
 * @property {string} fieldType - fieldType
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderConditionalFormIfChooseFromDropdownParams>} LogObject<formBuilderConditionalFormIfChooseFromDropdownParams>
 */
export function formBuilderConditionalFormIfChooseFromDropdown(params) {
    return { evid: 1099, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'accountManagerStartLoadingAccountManager' event (evid: 110)
 *
 * Event description: start loading account manager
 *
 * @param {accountManagerStartLoadingAccountManagerParams} params - The parameters for this event
 * @property {string} referral_info - referral_info
 * @property {string} view_type - view_type
 * @property {boolean} initial_load - initial_load
 * @property {string} platform - platform
 * @return {LogObject<accountManagerStartLoadingAccountManagerParams>} LogObject<accountManagerStartLoadingAccountManagerParams>
 */
export function accountManagerStartLoadingAccountManager(params) {
    return { evid: 110, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderConditionalFormIfFilledNotFilled' event (evid: 1100)
 *
 * Event description: Copy of Form Builder - conditional form - IF - choose from dropdown
 *
 * @param {formBuilderConditionalFormIfFilledNotFilledParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI, Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} filledOption - filledOption
 * @property {string} form_comp_id - form_comp_id
 * @property {GUID} vsi - vsi
 * @property {string} template - template
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderConditionalFormIfFilledNotFilledParams>} LogObject<formBuilderConditionalFormIfFilledNotFilledParams>
 */
export function formBuilderConditionalFormIfFilledNotFilled(params) {
    return { evid: 1100, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderConditionalFormIfFilledSelectionOption' event (evid: 1101)
 *
 * Event description: Form Builder - conditional form - IF - filled selection option
 *
 * @param {formBuilderConditionalFormIfFilledSelectionOptionParams} params - The parameters for this event
 * @property {number} count - count how many fields were choosen
 * @property {string} choose - choose
 * @property {string} builderOrigin - ADI, Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form_comp_id
 * @property {GUID} vsi - vsi
 * @property {string} template - template
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderConditionalFormIfFilledSelectionOptionParams>} LogObject<formBuilderConditionalFormIfFilledSelectionOptionParams>
 */
export function formBuilderConditionalFormIfFilledSelectionOption(params) {
    return { evid: 1101, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderConditionalFormThenClickOnDropdown' event (evid: 1102)
 *
 * Event description: Form Builder - conditional form - THEN - click on dropdown
 *
 * @param {formBuilderConditionalFormThenClickOnDropdownParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI, Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form_comp_id
 * @property {GUID} vsi - vsi
 * @property {string} template - template
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderConditionalFormThenClickOnDropdownParams>} LogObject<formBuilderConditionalFormThenClickOnDropdownParams>
 */
export function formBuilderConditionalFormThenClickOnDropdown(params) {
    return { evid: 1102, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderConditionalFormThenChooseFromDropdown' event (evid: 1103)
 *
 * Event description: Form Builder - conditional form - THEN - choose from dropdown
 *
 * @param {formBuilderConditionalFormThenChooseFromDropdownParams} params - The parameters for this event
 * @property {number} count - how many fields selected
 * @property {string} builderOrigin - ADI, Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form_comp_id
 * @property {GUID} vsi - vsi
 * @property {string} template - template
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderConditionalFormThenChooseFromDropdownParams>} LogObject<formBuilderConditionalFormThenChooseFromDropdownParams>
 */
export function formBuilderConditionalFormThenChooseFromDropdown(params) {
    return { evid: 1103, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderConditionalFormIsClickOnDropdown' event (evid: 1104)
 *
 * Event description: Form Builder - conditional form - IS - click on dropdown
 *
 * @param {formBuilderConditionalFormIsClickOnDropdownParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI, Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form_comp_id
 * @property {GUID} vsi - vsi
 * @property {string} template - template
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderConditionalFormIsClickOnDropdownParams>} LogObject<formBuilderConditionalFormIsClickOnDropdownParams>
 */
export function formBuilderConditionalFormIsClickOnDropdown(params) {
    return { evid: 1104, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderConditionalFormIsChooseFromDropdown' event (evid: 1105)
 *
 * Event description: Form Builder - conditional form - IS - choose from dropdown
 *
 * @param {formBuilderConditionalFormIsChooseFromDropdownParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI, Editor
 * @property {string} option - which option the user choose
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form_comp_id
 * @property {GUID} vsi - vsi
 * @property {string} template - template
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderConditionalFormIsChooseFromDropdownParams>} LogObject<formBuilderConditionalFormIsChooseFromDropdownParams>
 */
export function formBuilderConditionalFormIsChooseFromDropdown(params) {
    return { evid: 1105, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderConditionalFormSaveRule' event (evid: 1106)
 *
 * Event description: Form Builder - conditional form - save rule
 *
 * @param {formBuilderConditionalFormSaveRuleParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI, Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form_comp_id
 * @property {GUID} vsi - vsi
 * @property {string} template - template
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderConditionalFormSaveRuleParams>} LogObject<formBuilderConditionalFormSaveRuleParams>
 */
export function formBuilderConditionalFormSaveRule(params) {
    return { evid: 1106, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderConditionalFormMoreActionClick' event (evid: 1107)
 *
 * Event description: Form Builder - conditional form - more action - click
 *
 * @param {formBuilderConditionalFormMoreActionClickParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI, Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form_comp_id
 * @property {GUID} vsi - vsi
 * @property {string} template - template
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderConditionalFormMoreActionClickParams>} LogObject<formBuilderConditionalFormMoreActionClickParams>
 */
export function formBuilderConditionalFormMoreActionClick(params) {
    return { evid: 1107, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderConditionalFormMoreActionChoose' event (evid: 1108)
 *
 * Event description: Form Builder - conditional form - more action - choose
 *
 * @param {formBuilderConditionalFormMoreActionChooseParams} params - The parameters for this event
 * @property {string} choose - which option the user chooses
 * @property {string} builderOrigin - ADI, Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form_comp_id
 * @property {GUID} vsi - vsi
 * @property {string} template - template
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderConditionalFormMoreActionChooseParams>} LogObject<formBuilderConditionalFormMoreActionChooseParams>
 */
export function formBuilderConditionalFormMoreActionChoose(params) {
    return { evid: 1108, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderConditionalFormContradictingRuleWarning' event (evid: 1109)
 *
 * Event description: Form Builder - conditional form - contradicting rule warning
 *
 * @param {formBuilderConditionalFormContradictingRuleWarningParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI, Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form_comp_id
 * @property {GUID} vsi - vsi
 * @property {string} template - template
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderConditionalFormContradictingRuleWarningParams>} LogObject<formBuilderConditionalFormContradictingRuleWarningParams>
 */
export function formBuilderConditionalFormContradictingRuleWarning(params) {
    return { evid: 1109, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'accountManagerFinishLoadingAccountManager' event (evid: 111)
 *
 * Event description: start loading account manager
 *
 * @param {accountManagerFinishLoadingAccountManagerParams} params - The parameters for this event
 * @property {string} referral_info - referral_info
 * @property {string} view_type - view_type
 * @property {boolean} initial_load - initial_load
 * @property {string} platform - platform
 * @property {number} loading_time - loading_time from 110
 * @return {LogObject<accountManagerFinishLoadingAccountManagerParams>} LogObject<accountManagerFinishLoadingAccountManagerParams>
 */
export function accountManagerFinishLoadingAccountManager(params) {
    return { evid: 111, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderConditionalFormSaveRuleError' event (evid: 1110)
 *
 * Event description: Form Builder - conditional form - save rule error.
 *
 * @param {formBuilderConditionalFormSaveRuleErrorParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI, Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} reason - reason why rule error
 * @property {string} form_comp_id - form_comp_id
 * @property {GUID} vsi - vsi
 * @property {string} template - template
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderConditionalFormSaveRuleErrorParams>} LogObject<formBuilderConditionalFormSaveRuleErrorParams>
 */
export function formBuilderConditionalFormSaveRuleError(params) {
    return { evid: 1110, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderMigratedFormContactFormToWixFormPhoneNumberIssue' event (evid: 1111)
 *
 * Event description: Form Builder - migrated form contact form to wix form phone number issue
 *
 * @param {formBuilderMigratedFormContactFormToWixFormPhoneNumberIssueParams} params - The parameters for this event
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form comp id
 * @property {GUID} vsi - vsi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderMigratedFormContactFormToWixFormPhoneNumberIssueParams>} LogObject<formBuilderMigratedFormContactFormToWixFormPhoneNumberIssueParams>
 */
export function formBuilderMigratedFormContactFormToWixFormPhoneNumberIssue(params) {
    return { evid: 1111, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderConditionalFormViewRuleFromFieldSettings' event (evid: 1112)
 *
 * Event description: Form Builder - conditional form - view rule from field settings
 *
 * @param {formBuilderConditionalFormViewRuleFromFieldSettingsParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI, Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form_id
 * @property {GUID} vsi - vsi
 * @property {string} template - template
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderConditionalFormViewRuleFromFieldSettingsParams>} LogObject<formBuilderConditionalFormViewRuleFromFieldSettingsParams>
 */
export function formBuilderConditionalFormViewRuleFromFieldSettings(params) {
    return { evid: 1112, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderConditionalFormLearnMoreFromTooltipFieldSettings' event (evid: 1113)
 *
 * Event description: Form Builder - conditional form - learn more from tooltip field settings.
 *
 * @param {formBuilderConditionalFormLearnMoreFromTooltipFieldSettingsParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI, Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form_comp_id
 * @property {GUID} vsi - vsi
 * @property {string} template - template
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderConditionalFormLearnMoreFromTooltipFieldSettingsParams>} LogObject<formBuilderConditionalFormLearnMoreFromTooltipFieldSettingsParams>
 */
export function formBuilderConditionalFormLearnMoreFromTooltipFieldSettings(params) {
    return { evid: 1113, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'crmHomeIntegrationsMarketingConnect' event (evid: 1114)
 *
 * Event description: CRM Home - integrations - marketing view all
 *
 * @param {crmHomeIntegrationsMarketingConnectParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} connectTab - which connection the user choose
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<crmHomeIntegrationsMarketingConnectParams>} LogObject<crmHomeIntegrationsMarketingConnectParams>
 */
export function crmHomeIntegrationsMarketingConnect(params) {
    return { evid: 1114, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'crmHomeIntegrationsFinanceViewAll' event (evid: 1115)
 *
 * Event description: CRM Home - integrations - marketing view all
 *
 * @param {crmHomeIntegrationsFinanceViewAllParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<crmHomeIntegrationsFinanceViewAllParams>} LogObject<crmHomeIntegrationsFinanceViewAllParams>
 */
export function crmHomeIntegrationsFinanceViewAll(params) {
    return { evid: 1115, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'crmHomeIntegrationsFinanceConnect' event (evid: 1116)
 *
 * Event description: CRM Home - integrations - finance connect
 *
 * @param {crmHomeIntegrationsFinanceConnectParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} connectTab - which connection the user choose
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<crmHomeIntegrationsFinanceConnectParams>} LogObject<crmHomeIntegrationsFinanceConnectParams>
 */
export function crmHomeIntegrationsFinanceConnect(params) {
    return { evid: 1116, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'accountSettingsDisableSocialAccountConfirmationModalLoad' event (evid: 1119)
 *
 * Event description: When the user clicks on "disable" Apple social login, and they don't have any other social login connected, he will see a modal with confirmation message
 *
 * @param {accountSettingsDisableSocialAccountConfirmationModalLoadParams} params - The parameters for this event
 * @property {string} provider_id - the social provider the user tried to disable (apple/google/facebook)
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @return {LogObject<accountSettingsDisableSocialAccountConfirmationModalLoadParams>} LogObject<accountSettingsDisableSocialAccountConfirmationModalLoadParams>
 */
export function accountSettingsDisableSocialAccountConfirmationModalLoad(params) {
    return { evid: 1119, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'accountManagerPageComponentStartLoadingAccountManager' event (evid: 112)
 *
 * Event description: page component start loading account manager module
 *
 * @param {accountManagerPageComponentStartLoadingAccountManagerParams} params - The parameters for this event
 * @property {string} referral_info - referral_info
 * @property {string} view_type - view_type
 * @property {string} sub_view - sub_view
 * @property {string} prev_view - prev_view
 * @property {string} prev_sub_view - prev_sub_view
 * @property {string} platform - platform
 * @property {string} view - view
 * @return {LogObject<accountManagerPageComponentStartLoadingAccountManagerParams>} LogObject<accountManagerPageComponentStartLoadingAccountManagerParams>
 */
export function accountManagerPageComponentStartLoadingAccountManager(params) {
    return { evid: 112, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'accountSettingsDisableSocialAccountClickDisableInConfirmationModal' event (evid: 1120)
 *
 * Event description: The user clicked on "disable" in the confirmation message shown once trying to disable Apple social account
 *
 * @param {accountSettingsDisableSocialAccountClickDisableInConfirmationModalParams} params - The parameters for this event
 * @property {string} provider_id - the social provider the user tried to disable (apple/google/facebook)
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @return {LogObject<accountSettingsDisableSocialAccountClickDisableInConfirmationModalParams>} LogObject<accountSettingsDisableSocialAccountClickDisableInConfirmationModalParams>
 */
export function accountSettingsDisableSocialAccountClickDisableInConfirmationModal(params) {
    return { evid: 1120, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'crmHomeGoToMarketingTools' event (evid: 1122)
 *
 * Event description: CRM Home - go to marketing tools
 *
 * @param {crmHomeGoToMarketingToolsParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<crmHomeGoToMarketingToolsParams>} LogObject<crmHomeGoToMarketingToolsParams>
 */
export function crmHomeGoToMarketingTools(params) {
    return { evid: 1122, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderPaymentFormMoveStateInFunnel' event (evid: 1123)
 *
 * Event description: Form Builder - payment form -  move state in funnel
 *
 * @param {formBuilderPaymentFormMoveStateInFunnelParams} params - The parameters for this event
 * @property {string} fromState - which state (step) the user was from
 * @property {string} builderOrigin - ADI, Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form id
 * @property {GUID} vsi - vsi
 * @property {string} toState - which state the user moved to
 * @property {string} template - template of the form
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderPaymentFormMoveStateInFunnelParams>} LogObject<formBuilderPaymentFormMoveStateInFunnelParams>
 */
export function formBuilderPaymentFormMoveStateInFunnel(params) {
    return { evid: 1123, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderPaymentFormCloseFunnel' event (evid: 1124)
 *
 * Event description: Form Builder - payment form -  close funnel
 *
 * @param {formBuilderPaymentFormCloseFunnelParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI, Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form id
 * @property {GUID} vsi - vsi
 * @property {string} template - template of the form
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderPaymentFormCloseFunnelParams>} LogObject<formBuilderPaymentFormCloseFunnelParams>
 */
export function formBuilderPaymentFormCloseFunnel(params) {
    return { evid: 1124, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderPaymentFormQuestionMarkFunnel' event (evid: 1125)
 *
 * Event description: Form Builder - payment form -  question mark funnel
 *
 * @param {formBuilderPaymentFormQuestionMarkFunnelParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI, Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form id
 * @property {GUID} vsi - vsi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderPaymentFormQuestionMarkFunnelParams>} LogObject<formBuilderPaymentFormQuestionMarkFunnelParams>
 */
export function formBuilderPaymentFormQuestionMarkFunnel(params) {
    return { evid: 1125, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderPaymentFormDemoSiteFunnel' event (evid: 1126)
 *
 * Event description: Form Builder - payment form -  demo site funnel
 *
 * @param {formBuilderPaymentFormDemoSiteFunnelParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI, Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form id
 * @property {GUID} vsi - vsi
 * @property {string} template - template of the form
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderPaymentFormDemoSiteFunnelParams>} LogObject<formBuilderPaymentFormDemoSiteFunnelParams>
 */
export function formBuilderPaymentFormDemoSiteFunnel(params) {
    return { evid: 1126, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderPaymentFormChoosePaymentFormType' event (evid: 1127)
 *
 * Event description: Form Builder - payment form -  choose payment form type (ex. single item, list of items, visitors enter price)
 *
 * @param {formBuilderPaymentFormChoosePaymentFormTypeParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI, Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form id
 * @property {GUID} vsi - vsi
 * @property {string} template - template of the form
 * @property {string} type - type of payment form
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderPaymentFormChoosePaymentFormTypeParams>} LogObject<formBuilderPaymentFormChoosePaymentFormTypeParams>
 */
export function formBuilderPaymentFormChoosePaymentFormType(params) {
    return { evid: 1127, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderPaymentFormEnterItem' event (evid: 1128)
 *
 * Event description: Form Builder - payment form -  enter item
 *
 * @param {formBuilderPaymentFormEnterItemParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI, Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form id
 * @property {GUID} vsi - vsi
 * @property {string} origin - origin
 * @property {string} template - template of the form
 * @property {GUID} msid - msid
 * @property {string} value - value
 * @return {LogObject<formBuilderPaymentFormEnterItemParams>} LogObject<formBuilderPaymentFormEnterItemParams>
 */
export function formBuilderPaymentFormEnterItem(params) {
    return { evid: 1128, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderPaymentFormEnterPrice' event (evid: 1129)
 *
 * Event description: Form Builder - payment form -  enter price
 *
 * @param {formBuilderPaymentFormEnterPriceParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI, Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form id
 * @property {GUID} vsi - vsi
 * @property {string} origin - origin
 * @property {string} template - template of the form
 * @property {GUID} msid - msid
 * @property {string} value - value
 * @return {LogObject<formBuilderPaymentFormEnterPriceParams>} LogObject<formBuilderPaymentFormEnterPriceParams>
 */
export function formBuilderPaymentFormEnterPrice(params) {
    return { evid: 1129, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'accountManagerPageComponentFinishLoadingAccountManager' event (evid: 113)
 *
 * Event description: start loading account manager module
 *
 * @param {accountManagerPageComponentFinishLoadingAccountManagerParams} params - The parameters for this event
 * @property {string} referral_info - referral_info
 * @property {string} view_type - view_type
 * @property {string} sub_view - sub_view
 * @property {string} prev_view - prev_view
 * @property {string} prev_sub_view - prev_sub_view
 * @property {string} platform - platform
 * @property {string} view - view
 * @property {number} loading_time - loading_time
 * @return {LogObject<accountManagerPageComponentFinishLoadingAccountManagerParams>} LogObject<accountManagerPageComponentFinishLoadingAccountManagerParams>
 */
export function accountManagerPageComponentFinishLoadingAccountManager(params) {
    return { evid: 113, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dummyNameSrc5Evid1130' event (evid: 1130)
 *
 * Event description: dummy-name.
 *
 * @param {dummyNameSrc5Evid1130Params} params - The parameters for this event
 * @property {string} channel - channel
 * @property {string} correlation_id - correlation_id
 * @property {string} notification_id - notification_id
 * @property {string} app_id - app_id
 * @property {string} target - target
 * @property {string} contact_id - contact_id
 * @return {LogObject<dummyNameSrc5Evid1130Params>} LogObject<dummyNameSrc5Evid1130Params>
 */
export function dummyNameSrc5Evid1130(params) {
    return { evid: 1130, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dummyNameSrc5Evid1131' event (evid: 1131)
 *
 * Event description: dummy-name.
 *
 * @param {dummyNameSrc5Evid1131Params} params - The parameters for this event
 * @return {LogObject<dummyNameSrc5Evid1131Params>} LogObject<dummyNameSrc5Evid1131Params>
 */
export function dummyNameSrc5Evid1131(params) {
    return { evid: 1131, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'notificationInvalidTokens' event (evid: 1132)
 *
 * Event description: Notification - Invalid tokens
 *
 * @param {notificationInvalidTokensParams} params - The parameters for this event
 * @property {string} channel - mobile/ browser notification
 * @property {string} device_token - device_token
 * @property {string} app - wix_app / wix_browser_notifications
 * @property {string} contact_id - contact_id
 * @return {LogObject<notificationInvalidTokensParams>} LogObject<notificationInvalidTokensParams>
 */
export function notificationInvalidTokens(params) {
    return { evid: 1132, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderPaymentFormHoverPrice' event (evid: 1133)
 *
 * Event description: Form Builder - payment form -  hover price or 'next' buttons
 *
 * @param {formBuilderPaymentFormHoverPriceParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI, Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form id
 * @property {GUID} vsi - vsi
 * @property {string} origin - ex. ‘paymentWizard_single’/ ‘next_paymentWizard_single’
 * @property {string} template - template of the form
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderPaymentFormHoverPriceParams>} LogObject<formBuilderPaymentFormHoverPriceParams>
 */
export function formBuilderPaymentFormHoverPrice(params) {
    return { evid: 1133, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderPaymentFormDeleteItem' event (evid: 1134)
 *
 * Event description: Form Builder - payment form -  delete item
 *
 * @param {formBuilderPaymentFormDeleteItemParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI, Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form id
 * @property {GUID} vsi - vsi
 * @property {string} template - template of the form
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderPaymentFormDeleteItemParams>} LogObject<formBuilderPaymentFormDeleteItemParams>
 */
export function formBuilderPaymentFormDeleteItem(params) {
    return { evid: 1134, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderPaymentFormAddAnotherItem' event (evid: 1135)
 *
 * Event description: Form Builder - payment form -  add new item
 *
 * @param {formBuilderPaymentFormAddAnotherItemParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI, Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form id
 * @property {GUID} vsi - vsi
 * @property {string} template - template of the form
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderPaymentFormAddAnotherItemParams>} LogObject<formBuilderPaymentFormAddAnotherItemParams>
 */
export function formBuilderPaymentFormAddAnotherItem(params) {
    return { evid: 1135, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderPaymentFormHoverDeleteItem' event (evid: 1136)
 *
 * Event description: Form Builder - payment form -  hover delete item
 *
 * @param {formBuilderPaymentFormHoverDeleteItemParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI, Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form id
 * @property {GUID} vsi - vsi
 * @property {string} template - template of the form
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderPaymentFormHoverDeleteItemParams>} LogObject<formBuilderPaymentFormHoverDeleteItemParams>
 */
export function formBuilderPaymentFormHoverDeleteItem(params) {
    return { evid: 1136, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderPaymentFormReachLimitOfItems' event (evid: 1137)
 *
 * Event description: Form Builder - payment form -  Reach limit of items
 *
 * @param {formBuilderPaymentFormReachLimitOfItemsParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI, Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {number} numberOfItems - number_of_items reached
 * @property {string} form_comp_id - form id
 * @property {GUID} vsi - vsi
 * @property {string} template - template of the form
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderPaymentFormReachLimitOfItemsParams>} LogObject<formBuilderPaymentFormReachLimitOfItemsParams>
 */
export function formBuilderPaymentFormReachLimitOfItems(params) {
    return { evid: 1137, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderPaymentFormTellUsMoreItems' event (evid: 1138)
 *
 * Event description: Form Builder - payment form -  tell us more items
 *
 * @param {formBuilderPaymentFormTellUsMoreItemsParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI, Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form id
 * @property {GUID} vsi - vsi
 * @property {string} template - template of the form
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderPaymentFormTellUsMoreItemsParams>} LogObject<formBuilderPaymentFormTellUsMoreItemsParams>
 */
export function formBuilderPaymentFormTellUsMoreItems(params) {
    return { evid: 1138, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderPaymentFormEnterMinMaxPrice' event (evid: 1139)
 *
 * Event description: Form Builder - payment form -  enter max price
 *
 * @param {formBuilderPaymentFormEnterMinMaxPriceParams} params - The parameters for this event
 * @property {string} minMax - if the value inserted in min or max
 * @property {string} builderOrigin - ADI, Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form id
 * @property {GUID} vsi - vsi
 * @property {string} origin - origin
 * @property {string} template - template of the form
 * @property {GUID} msid - msid
 * @property {string} value - value
 * @return {LogObject<formBuilderPaymentFormEnterMinMaxPriceParams>} LogObject<formBuilderPaymentFormEnterMinMaxPriceParams>
 */
export function formBuilderPaymentFormEnterMinMaxPrice(params) {
    return { evid: 1139, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'accountManagerClickOnSidebarItem' event (evid: 114)
 *
 * Event description: user clicks on an item from the sidebar in the account manager
 *
 * @param {accountManagerClickOnSidebarItemParams} params - The parameters for this event
 * @property {string} name - unique name that doesn't change when changing the name on the side bar
 * @property {string} sidebar_name - the name that appears in the sidebar - can be changed
 * @property {string} referral_info - referral_info
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @return {LogObject<accountManagerClickOnSidebarItemParams>} LogObject<accountManagerClickOnSidebarItemParams>
 */
export function accountManagerClickOnSidebarItem(params) {
    return { evid: 114, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderPaymentFormConnectPaymentMethod' event (evid: 1140)
 *
 * Event description: Form Builder - payment form -  connect payment method
 *
 * @param {formBuilderPaymentFormConnectPaymentMethodParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI, Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form id
 * @property {GUID} vsi - vsi
 * @property {string} template - template of the form
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderPaymentFormConnectPaymentMethodParams>} LogObject<formBuilderPaymentFormConnectPaymentMethodParams>
 */
export function formBuilderPaymentFormConnectPaymentMethod(params) {
    return { evid: 1140, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderPaymentFormLearnMoreStep4' event (evid: 1141)
 *
 * Event description: Form Builder - payment form -  learn more receive donations
 *
 * @param {formBuilderPaymentFormLearnMoreStep4Params} params - The parameters for this event
 * @property {string} builderOrigin - ADI, Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form id
 * @property {GUID} vsi - vsi
 * @property {string} template - template of the form
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderPaymentFormLearnMoreStep4Params>} LogObject<formBuilderPaymentFormLearnMoreStep4Params>
 */
export function formBuilderPaymentFormLearnMoreStep4(params) {
    return { evid: 1141, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderPaymentFormDashboardContinueGreenBanner' event (evid: 1142)
 *
 * Event description: Form Builder - payment form dashboard -  continue green banner
 *
 * @param {formBuilderPaymentFormDashboardContinueGreenBannerParams} params - The parameters for this event
 * @property {GUID} visitor_id - visitor_id
 * @property {GUID} vsi - vsi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderPaymentFormDashboardContinueGreenBannerParams>} LogObject<formBuilderPaymentFormDashboardContinueGreenBannerParams>
 */
export function formBuilderPaymentFormDashboardContinueGreenBanner(params) {
    return { evid: 1142, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderPaymentFormDashboardCloseGreenBanner' event (evid: 1143)
 *
 * Event description: Form Builder - payment form dashboard -  close green banner
 *
 * @param {formBuilderPaymentFormDashboardCloseGreenBannerParams} params - The parameters for this event
 * @property {GUID} visitor_id - visitor_id
 * @property {GUID} vsi - vsi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderPaymentFormDashboardCloseGreenBannerParams>} LogObject<formBuilderPaymentFormDashboardCloseGreenBannerParams>
 */
export function formBuilderPaymentFormDashboardCloseGreenBanner(params) {
    return { evid: 1143, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderPaymentFormChangePaymentMethod' event (evid: 1145)
 *
 * Event description: Form Builder - payment form -  change payment method
 *
 * @param {formBuilderPaymentFormChangePaymentMethodParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI, Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form id
 * @property {GUID} vsi - vsi
 * @property {string} template - template of the form
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderPaymentFormChangePaymentMethodParams>} LogObject<formBuilderPaymentFormChangePaymentMethodParams>
 */
export function formBuilderPaymentFormChangePaymentMethod(params) {
    return { evid: 1145, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderPaymentFormDiscardFunnel' event (evid: 1146)
 *
 * Event description: Form Builder - payment form -  discard funnel
 *
 * @param {formBuilderPaymentFormDiscardFunnelParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI, Editor
 * @property {string} option - 'continue','discard','cancel'
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form id
 * @property {GUID} vsi - vsi
 * @property {string} template - template of the form
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderPaymentFormDiscardFunnelParams>} LogObject<formBuilderPaymentFormDiscardFunnelParams>
 */
export function formBuilderPaymentFormDiscardFunnel(params) {
    return { evid: 1146, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderPaymentFormPaymentSettings' event (evid: 1147)
 *
 * Event description: Form Builder - payment form -  payment settings
 *
 * @param {formBuilderPaymentFormPaymentSettingsParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI, Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form id
 * @property {GUID} vsi - vsi
 * @property {string} template - template of the form
 * @property {string} fieldType - fieldType
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderPaymentFormPaymentSettingsParams>} LogObject<formBuilderPaymentFormPaymentSettingsParams>
 */
export function formBuilderPaymentFormPaymentSettings(params) {
    return { evid: 1147, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderPaymentFormOpenPaymentOverview' event (evid: 1148)
 *
 * Event description: Form Builder - payment form -  open payment overview
 *
 * @param {formBuilderPaymentFormOpenPaymentOverviewParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI, Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form id
 * @property {GUID} vsi - vsi
 * @property {string} template - template of the form
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderPaymentFormOpenPaymentOverviewParams>} LogObject<formBuilderPaymentFormOpenPaymentOverviewParams>
 */
export function formBuilderPaymentFormOpenPaymentOverview(params) {
    return { evid: 1148, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderPaymentFormGeneralSettings' event (evid: 1149)
 *
 * Event description: Form Builder - payment form -  general settings
 *
 * @param {formBuilderPaymentFormGeneralSettingsParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI, Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form id
 * @property {GUID} vsi - vsi
 * @property {string} template - template of the form
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderPaymentFormGeneralSettingsParams>} LogObject<formBuilderPaymentFormGeneralSettingsParams>
 */
export function formBuilderPaymentFormGeneralSettings(params) {
    return { evid: 1149, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'accountManagerClickOnBackInSidebarItem' event (evid: 115)
 *
 * Event description: user clicks on back from the sidebar in the account manager
 *
 * @param {accountManagerClickOnBackInSidebarItemParams} params - The parameters for this event
 * @property {string} name - unique name that doesn't change when changing the name on the side bar
 * @property {string} sidebar_name - the name that appears in the sidebar - can be changed
 * @property {string} referral_info - referral_info
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @return {LogObject<accountManagerClickOnBackInSidebarItemParams>} LogObject<accountManagerClickOnBackInSidebarItemParams>
 */
export function accountManagerClickOnBackInSidebarItem(params) {
    return { evid: 115, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderPaymentFormSettingsAddAnotherItem' event (evid: 1150)
 *
 * Event description: Form Builder - payment form settings -  add another item
 *
 * @param {formBuilderPaymentFormSettingsAddAnotherItemParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI, Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form id
 * @property {GUID} vsi - vsi
 * @property {string} template - template of the form
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderPaymentFormSettingsAddAnotherItemParams>} LogObject<formBuilderPaymentFormSettingsAddAnotherItemParams>
 */
export function formBuilderPaymentFormSettingsAddAnotherItem(params) {
    return { evid: 1150, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderPaymentFormSettingsItemMoreActions' event (evid: 1151)
 *
 * Event description: Form Builder - payment form settings -  item more actions
 *
 * @param {formBuilderPaymentFormSettingsItemMoreActionsParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI, Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form id
 * @property {GUID} vsi - vsi
 * @property {string} template - template of the form
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderPaymentFormSettingsItemMoreActionsParams>} LogObject<formBuilderPaymentFormSettingsItemMoreActionsParams>
 */
export function formBuilderPaymentFormSettingsItemMoreActions(params) {
    return { evid: 1151, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderPaymentFormSettingsItemMoreActionsChoose' event (evid: 1152)
 *
 * Event description: Form Builder - payment form settings -  item more actions choose
 *
 * @param {formBuilderPaymentFormSettingsItemMoreActionsChooseParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI, Editor
 * @property {string} option - 'edit','delete','rename'
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form id
 * @property {GUID} vsi - vsi
 * @property {string} template - template of the form
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderPaymentFormSettingsItemMoreActionsChooseParams>} LogObject<formBuilderPaymentFormSettingsItemMoreActionsChooseParams>
 */
export function formBuilderPaymentFormSettingsItemMoreActionsChoose(params) {
    return { evid: 1152, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderPaymentFormSettingsConnectPaymentWhenPaymentNotConnected' event (evid: 1153)
 *
 * Event description: Form Builder - payment form settings -  connect payment (when payment not connected)
 *
 * @param {formBuilderPaymentFormSettingsConnectPaymentWhenPaymentNotConnectedParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI, Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form id
 * @property {GUID} vsi - vsi
 * @property {string} origin - hover,general
 * @property {string} template - template of the form
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderPaymentFormSettingsConnectPaymentWhenPaymentNotConnectedParams>} LogObject<formBuilderPaymentFormSettingsConnectPaymentWhenPaymentNotConnectedParams>
 */
export function formBuilderPaymentFormSettingsConnectPaymentWhenPaymentNotConnected(params) {
    return { evid: 1153, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderPaymentFormSettingsRestoreField' event (evid: 1154)
 *
 * Event description: Form Builder - payment form settings -  restore field
 *
 * @param {formBuilderPaymentFormSettingsRestoreFieldParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI, Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form id
 * @property {GUID} vsi - vsi
 * @property {string} origin - hover,general
 * @property {string} template - template of the form
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderPaymentFormSettingsRestoreFieldParams>} LogObject<formBuilderPaymentFormSettingsRestoreFieldParams>
 */
export function formBuilderPaymentFormSettingsRestoreField(params) {
    return { evid: 1154, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderPaymentFormSettingsStopAcceptingPayments' event (evid: 1155)
 *
 * Event description: Form Builder - payment form settings -  stop accepting payments
 *
 * @param {formBuilderPaymentFormSettingsStopAcceptingPaymentsParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI, Editor
 * @property {string} option - keep,delete,cancel
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form id
 * @property {GUID} vsi - vsi
 * @property {string} template - template of the form
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderPaymentFormSettingsStopAcceptingPaymentsParams>} LogObject<formBuilderPaymentFormSettingsStopAcceptingPaymentsParams>
 */
export function formBuilderPaymentFormSettingsStopAcceptingPayments(params) {
    return { evid: 1155, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'settingsLobbySectionIsSeen' event (evid: 1156)
 *
 * Event description: when a section is seen (actually) in setting lobby page
 *
 * @param {settingsLobbySectionIsSeenParams} params - The parameters for this event
 * @property {string} section_name - site-details/general/ecommerce/..
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} section_loaction_on_page - the location of section in page (order from 0,1,..)
 * @property {string} hosting - MA/editor/onboarding
 * @property {GUID} msid - --
 * @return {LogObject<settingsLobbySectionIsSeenParams>} LogObject<settingsLobbySectionIsSeenParams>
 */
export function settingsLobbySectionIsSeen(params) {
    return { evid: 1156, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'settingsLobbyClickOnItem' event (evid: 1158)
 *
 * Event description: when a user clicks on an item in one of the settings' sections,
 *
 * @param {settingsLobbyClickOnItemParams} params - The parameters for this event
 * @property {number} item_location_on_page - the location of item in page (order from 0,1,..
 * @property {string} section_name - site-details/general/ecommerce/..
 * @property {string} click_type - if the helper is dismiss then the value is 'dismissed'
 * @property {string} view_type - view_type
 * @property {string} cta_name - the cta value (if exists) - f.e. “Get a business number”
 * @property {string} page_id - page component id of lined page
 * @property {string} item_location - item_location in this format {section,column,row}
 * @property {string} item_name - upgrade/connect_domain/.../website settings/business info/ roles and permissions/.../accept payments…
 * @property {string} status - If the red badge is shown when the user clicks then "true", if not "false"
 * @property {string} platform - platform
 * @property {string} hosting - MA/editor/onboarding
 * @property {GUID} msid - --
 * @return {LogObject<settingsLobbyClickOnItemParams>} LogObject<settingsLobbyClickOnItemParams>
 */
export function settingsLobbyClickOnItem(params) {
    return { evid: 1158, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderSubmissionLimitReasonForLimit' event (evid: 1159)
 *
 * Event description: Form Builder - submission limit - reason for limit
 *
 * @param {formBuilderSubmissionLimitReasonForLimitParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI, Editor
 * @property {string} option - which option the user choose
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form id
 * @property {GUID} vsi - vsi
 * @property {string} template - template of the form
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderSubmissionLimitReasonForLimitParams>} LogObject<formBuilderSubmissionLimitReasonForLimitParams>
 */
export function formBuilderSubmissionLimitReasonForLimit(params) {
    return { evid: 1159, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'foldersMarkUnmarkSelectAllButton' event (evid: 116)
 *
 * Event description: mark/unmark 'select all' button
 *
 * @param {foldersMarkUnmarkSelectAllButtonParams} params - The parameters for this event
 * @property {string} name - mark/unmark
 * @property {string} view_type - view_type
 * @property {string} sub_view - grid/ list-view
 * @property {string} platform - platform
 * @property {string} hosting - MA
 * @property {string} view - my-sites
 * @return {LogObject<foldersMarkUnmarkSelectAllButtonParams>} LogObject<foldersMarkUnmarkSelectAllButtonParams>
 */
export function foldersMarkUnmarkSelectAllButton(params) {
    return { evid: 116, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderSubmissionLimitReasonForLimitInfoHover' event (evid: 1160)
 *
 * Event description: Form Builder - submission limit - reason for limit info hover
 *
 * @param {formBuilderSubmissionLimitReasonForLimitInfoHoverParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI, Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form id
 * @property {GUID} vsi - vsi
 * @property {string} template - template of the form
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderSubmissionLimitReasonForLimitInfoHoverParams>} LogObject<formBuilderSubmissionLimitReasonForLimitInfoHoverParams>
 */
export function formBuilderSubmissionLimitReasonForLimitInfoHover(params) {
    return { evid: 1160, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'reportNetwork' event (evid: 11601)
 *
 * Event description: report network metrics for performance measurement
 *
 * @param {reportNetworkParams} params - The parameters for this event
 * @property {string} referer_host - referer host
 * @property {number} duration - total duration of the request
 * @property {boolean} has_been_active - if the user was active before the resource was fetched (Chrome feature)
 * @property {boolean} is_cached - is_cached
 * @property {number} encoded_body_size - response size (without headers)
 * @property {string} path - resource path
 * @property {number} headers_size - response header size
 * @property {boolean} is_blocking - is_blocking
 * @property {number} stall_queue_time - time that the request was delayed by the browser
 * @property {string} last_referer_host - last_referer_host
 * @property {number} user_interactions_count - user_interactions_count
 * @property {number} response_start - response_start
 * @property {string} last_referer_path_name - last_referer_path_name
 * @property {number} transferSize - transfer_size
 * @property {number} request_start - request_start
 * @property {string} initiator_type - the type of the resource initiator (img, css, xhr, fetch...)
 * @property {string} host_name - resource hostName
 * @property {number} download_time - time to fetch all bytes from the server
 * @property {number} dns_time - time to initiate DNS connection
 * @property {string} pixel_session_id - session id of the running script (per instance)
 * @property {string} navigation_id - navigation_id
 * @property {string} referer_path_name - referer path
 * @property {number} dcl - dom content loaded time
 * @property {number} version_num - script version
 * @property {number} connection_time - time to connect to the server (HTTP)
 * @property {number} response_status_code - response_status_code
 * @property {number} load_time - dom load time
 * @property {string} referer - referer
 * @property {number} server_response_time - time that took the server to retrieve the first byte
 * @property {number} event_start_time - time of the resource event
 * @property {number} dom_complete - dom complete time
 * @property {string} protocol - protocol
 * @return {LogObject<reportNetworkParams>} LogObject<reportNetworkParams>
 */
export function reportNetwork(params) {
    return { evid: 11601, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderSubmissionLimitLimitByNumberTotalNumber' event (evid: 1161)
 *
 * Event description: Form Builder - submission limit - limit by number - total number
 *
 * @param {formBuilderSubmissionLimitLimitByNumberTotalNumberParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI, Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form id
 * @property {GUID} vsi - vsi
 * @property {string} template - template of the form
 * @property {GUID} msid - msid
 * @property {number} value - How many users have entered a numeric value for the limit
 * @return {LogObject<formBuilderSubmissionLimitLimitByNumberTotalNumberParams>} LogObject<formBuilderSubmissionLimitLimitByNumberTotalNumberParams>
 */
export function formBuilderSubmissionLimitLimitByNumberTotalNumber(params) {
    return { evid: 1161, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderSubmissionLimitLimitByNumberEditMessage' event (evid: 1162)
 *
 * Event description: Form Builder - submission limit - limit by number - edit message
 *
 * @param {formBuilderSubmissionLimitLimitByNumberEditMessageParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI, Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form id
 * @property {GUID} vsi - vsi
 * @property {string} template - template of the form
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderSubmissionLimitLimitByNumberEditMessageParams>} LogObject<formBuilderSubmissionLimitLimitByNumberEditMessageParams>
 */
export function formBuilderSubmissionLimitLimitByNumberEditMessage(params) {
    return { evid: 1162, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderSubmissionLimitLimitByNumberNumberInfoHover' event (evid: 1163)
 *
 * Event description: Form Builder - submission limit - limit by number - number info hover
 *
 * @param {formBuilderSubmissionLimitLimitByNumberNumberInfoHoverParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI, Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form id
 * @property {GUID} vsi - vsi
 * @property {string} template - template of the form
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderSubmissionLimitLimitByNumberNumberInfoHoverParams>} LogObject<formBuilderSubmissionLimitLimitByNumberNumberInfoHoverParams>
 */
export function formBuilderSubmissionLimitLimitByNumberNumberInfoHover(params) {
    return { evid: 1163, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderSubmissionLimitLimitByNumberMessageInfoHover' event (evid: 1164)
 *
 * Event description: Form Builder - submission limit - limit by number - message info hover
 *
 * @param {formBuilderSubmissionLimitLimitByNumberMessageInfoHoverParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI, Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form id
 * @property {GUID} vsi - vsi
 * @property {string} template - template of the form
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderSubmissionLimitLimitByNumberMessageInfoHoverParams>} LogObject<formBuilderSubmissionLimitLimitByNumberMessageInfoHoverParams>
 */
export function formBuilderSubmissionLimitLimitByNumberMessageInfoHover(params) {
    return { evid: 1164, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderSubmissionLimitLimitByDateEnteredDate' event (evid: 1165)
 *
 * Event description: Form Builder - submission limit - limit by date - entered date
 *
 * @param {formBuilderSubmissionLimitLimitByDateEnteredDateParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI, Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form id
 * @property {GUID} vsi - vsi
 * @property {string} template - template of the form
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderSubmissionLimitLimitByDateEnteredDateParams>} LogObject<formBuilderSubmissionLimitLimitByDateEnteredDateParams>
 */
export function formBuilderSubmissionLimitLimitByDateEnteredDate(params) {
    return { evid: 1165, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderSubmissionLimitLimitByDateChangeTimeFormat' event (evid: 1166)
 *
 * Event description: Form Builder - submission limit - limit by date - change time format
 *
 * @param {formBuilderSubmissionLimitLimitByDateChangeTimeFormatParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI, Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form id
 * @property {GUID} vsi - vsi
 * @property {string} template - template of the form
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderSubmissionLimitLimitByDateChangeTimeFormatParams>} LogObject<formBuilderSubmissionLimitLimitByDateChangeTimeFormatParams>
 */
export function formBuilderSubmissionLimitLimitByDateChangeTimeFormat(params) {
    return { evid: 1166, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderSubmissionLimitLimitByDateChangeTimeFormatInvalid' event (evid: 1167)
 *
 * Event description: Form Builder - submission limit - limit by date - change time format - invalid
 *
 * @param {formBuilderSubmissionLimitLimitByDateChangeTimeFormatInvalidParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI, Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form id
 * @property {GUID} vsi - vsi
 * @property {string} template - template of the form
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderSubmissionLimitLimitByDateChangeTimeFormatInvalidParams>} LogObject<formBuilderSubmissionLimitLimitByDateChangeTimeFormatInvalidParams>
 */
export function formBuilderSubmissionLimitLimitByDateChangeTimeFormatInvalid(params) {
    return { evid: 1167, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderSubmissionLimitLimitByDateChangeDefaultTime' event (evid: 1168)
 *
 * Event description: Form Builder - submission limit - limit by date - change default time
 *
 * @param {formBuilderSubmissionLimitLimitByDateChangeDefaultTimeParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI, Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form id
 * @property {GUID} vsi - vsi
 * @property {string} template - template of the form
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderSubmissionLimitLimitByDateChangeDefaultTimeParams>} LogObject<formBuilderSubmissionLimitLimitByDateChangeDefaultTimeParams>
 */
export function formBuilderSubmissionLimitLimitByDateChangeDefaultTime(params) {
    return { evid: 1168, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderSubmissionLimitLimitByDateChangeMessage' event (evid: 1169)
 *
 * Event description: Copy of Form Builder - submission limit - limit by date - change message
 *
 * @param {formBuilderSubmissionLimitLimitByDateChangeMessageParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI, Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form id
 * @property {GUID} vsi - vsi
 * @property {string} template - template of the form
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderSubmissionLimitLimitByDateChangeMessageParams>} LogObject<formBuilderSubmissionLimitLimitByDateChangeMessageParams>
 */
export function formBuilderSubmissionLimitLimitByDateChangeMessage(params) {
    return { evid: 1169, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'foldersClickOnChangeViewMode' event (evid: 117)
 *
 * Event description: sort list view
 *
 * @param {foldersClickOnChangeViewModeParams} params - The parameters for this event
 * @property {string} click_name - list-view/grid
 * @property {string} view_mode - list-view/grid - shows the previous mode
 * @property {string} view_type - view_type
 * @property {string} sub_view - sub_view
 * @property {string} origin - origin
 * @property {string} platform - platform
 * @property {string} hosting - MA/editor
 * @property {string} view - my-sites
 * @return {LogObject<foldersClickOnChangeViewModeParams>} LogObject<foldersClickOnChangeViewModeParams>
 */
export function foldersClickOnChangeViewMode(params) {
    return { evid: 117, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderSubmissionLimitLimitByDateTimezoneSettings' event (evid: 1170)
 *
 * Event description: Form Builder - submission limit - limit by date - timezone settings
 *
 * @param {formBuilderSubmissionLimitLimitByDateTimezoneSettingsParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI, Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form id
 * @property {GUID} vsi - vsi
 * @property {string} template - template of the form
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderSubmissionLimitLimitByDateTimezoneSettingsParams>} LogObject<formBuilderSubmissionLimitLimitByDateTimezoneSettingsParams>
 */
export function formBuilderSubmissionLimitLimitByDateTimezoneSettings(params) {
    return { evid: 1170, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderSubmissionLimitRestoreSuccessMessage' event (evid: 1171)
 *
 * Event description: Form Builder - submission limit - restore success message
 *
 * @param {formBuilderSubmissionLimitRestoreSuccessMessageParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI, Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form id
 * @property {GUID} vsi - vsi
 * @property {string} template - template of the form
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderSubmissionLimitRestoreSuccessMessageParams>} LogObject<formBuilderSubmissionLimitRestoreSuccessMessageParams>
 */
export function formBuilderSubmissionLimitRestoreSuccessMessage(params) {
    return { evid: 1171, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'viewInDashboard' event (evid: 1172)
 *
 * Event description: when a specific item is shown to the user (for example the feature modal step in setup widget)
 *
 * @param {viewInDashboardParams} params - The parameters for this event
 * @property {string} name - item name
 * @property {string} widget_name - the widget name in dashboard (this field added only in new dashboard)
 * @property {string} hosting - ma
 * @property {GUID} msid - --
 * @return {LogObject<viewInDashboardParams>} LogObject<viewInDashboardParams>
 */
export function viewInDashboard(params) {
    return { evid: 1172, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderAutofillMemberEmailsEnableToggle' event (evid: 1173)
 *
 * Event description: Form Builder - submission limit - restore success message
 *
 * @param {formBuilderAutofillMemberEmailsEnableToggleParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI, Editor
 * @property {boolean} toggle - on or off (true or false)
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form id
 * @property {GUID} vsi - vsi
 * @property {string} template - template of the form
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderAutofillMemberEmailsEnableToggleParams>} LogObject<formBuilderAutofillMemberEmailsEnableToggleParams>
 */
export function formBuilderAutofillMemberEmailsEnableToggle(params) {
    return { evid: 1173, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderAutofillMemberEmailsMembersAreaLearnMore' event (evid: 1174)
 *
 * Event description: Form Builder - Autofill Member Emails - Members Area - learn more
 *
 * @param {formBuilderAutofillMemberEmailsMembersAreaLearnMoreParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI, Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form id
 * @property {GUID} vsi - vsi
 * @property {string} template - template of the form
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderAutofillMemberEmailsMembersAreaLearnMoreParams>} LogObject<formBuilderAutofillMemberEmailsMembersAreaLearnMoreParams>
 */
export function formBuilderAutofillMemberEmailsMembersAreaLearnMore(params) {
    return { evid: 1174, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderAutofillMemberEmailsBrowserAutocompleteLearnMore' event (evid: 1175)
 *
 * Event description: Form Builder - Autofill Member Emails - Browser autocomplete - learn more
 *
 * @param {formBuilderAutofillMemberEmailsBrowserAutocompleteLearnMoreParams} params - The parameters for this event
 * @property {string} state - if the user have members area or not
 * @property {string} builderOrigin - ADI, Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form id
 * @property {GUID} vsi - vsi
 * @property {string} template - template of the form
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderAutofillMemberEmailsBrowserAutocompleteLearnMoreParams>} LogObject<formBuilderAutofillMemberEmailsBrowserAutocompleteLearnMoreParams>
 */
export function formBuilderAutofillMemberEmailsBrowserAutocompleteLearnMore(params) {
    return { evid: 1175, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderAutofillMemberEmailsMainTooltipHover' event (evid: 1176)
 *
 * Event description: Form Builder - Autofill Member Emails - Main tooltip Hover
 *
 * @param {formBuilderAutofillMemberEmailsMainTooltipHoverParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI, Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form id
 * @property {GUID} vsi - vsi
 * @property {string} template - template of the form
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderAutofillMemberEmailsMainTooltipHoverParams>} LogObject<formBuilderAutofillMemberEmailsMainTooltipHoverParams>
 */
export function formBuilderAutofillMemberEmailsMainTooltipHover(params) {
    return { evid: 1176, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderAutofillMemberEmailsLetMembersEdit' event (evid: 1177)
 *
 * Event description: Form Builder - Autofill Member Emails - let members edit
 *
 * @param {formBuilderAutofillMemberEmailsLetMembersEditParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI, Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form id
 * @property {GUID} vsi - vsi
 * @property {string} template - template of the form
 * @property {GUID} msid - msid
 * @property {string} value - yes or no
 * @return {LogObject<formBuilderAutofillMemberEmailsLetMembersEditParams>} LogObject<formBuilderAutofillMemberEmailsLetMembersEditParams>
 */
export function formBuilderAutofillMemberEmailsLetMembersEdit(params) {
    return { evid: 1177, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderAutofillMemberEmailsDropdownEmail' event (evid: 1178)
 *
 * Event description: Form Builder - Autofill Member Emails - dropdown email
 *
 * @param {formBuilderAutofillMemberEmailsDropdownEmailParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI, Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form id
 * @property {GUID} vsi - vsi
 * @property {string} template - template of the form
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderAutofillMemberEmailsDropdownEmailParams>} LogObject<formBuilderAutofillMemberEmailsDropdownEmailParams>
 */
export function formBuilderAutofillMemberEmailsDropdownEmail(params) {
    return { evid: 1178, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderAutofillMemberEmailsChooseDifferentEmail' event (evid: 1179)
 *
 * Event description: Form Builder - Autofill Member Emails - choose different email
 *
 * @param {formBuilderAutofillMemberEmailsChooseDifferentEmailParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI, Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form id
 * @property {GUID} vsi - vsi
 * @property {string} template - template of the form
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderAutofillMemberEmailsChooseDifferentEmailParams>} LogObject<formBuilderAutofillMemberEmailsChooseDifferentEmailParams>
 */
export function formBuilderAutofillMemberEmailsChooseDifferentEmail(params) {
    return { evid: 1179, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'foldersTooltipShown' event (evid: 118)
 *
 * Event description: When a user moves a site to Trash for the first time show a tooltip.
 *
 * @param {foldersTooltipShownParams} params - The parameters for this event
 * @property {string} name - trash_tooltip
 * @property {string} view_type - view_type
 * @property {string} sub_view - grid/list
 * @property {string} platform - platform
 * @property {string} hosting - MA
 * @property {string} view - my-sites
 * @return {LogObject<foldersTooltipShownParams>} LogObject<foldersTooltipShownParams>
 */
export function foldersTooltipShown(params) {
    return { evid: 118, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderAutofillMemberEmailsAddAnEmailField' event (evid: 1180)
 *
 * Event description: Form Builder - Autofill Member Emails - add an email field
 *
 * @param {formBuilderAutofillMemberEmailsAddAnEmailFieldParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI, Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form id
 * @property {GUID} vsi - vsi
 * @property {string} template - template of the form
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderAutofillMemberEmailsAddAnEmailFieldParams>} LogObject<formBuilderAutofillMemberEmailsAddAnEmailFieldParams>
 */
export function formBuilderAutofillMemberEmailsAddAnEmailField(params) {
    return { evid: 1180, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'veloIdeModalIsOpened' event (evid: 11801)
 *
 * Event description: Velo IDE - Modal is Opene
 *
 * @param {veloIdeModalIsOpenedParams} params - The parameters for this event
 * @property {string} modal_type - Custom Action code
 * @property {string} context - Additional data in Json structure
 * @property {string} page_id - page id (for now- of Automation)
 * @property {number} window_width - window_width
 * @property {string} origin - Where did the modal open from? Create code CTA / Edit CTA / More action CTA
 * @property {GUID} external_id - External key (like rule id in Automation)
 * @property {GUID} app_id - app id (for now- Automation's id)
 * @property {number} window_height - window_height
 * @property {GUID} msid - Site id
 * @return {LogObject<veloIdeModalIsOpenedParams>} LogObject<veloIdeModalIsOpenedParams>
 */
export function veloIdeModalIsOpened(params) {
    return { evid: 11801, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'veloIdeCodeHasBeenUpdated' event (evid: 11802)
 *
 * Event description: Velo IDE - Something was changed in the code (no matter what was the change or how meaningful this change is)
 *
 * @param {veloIdeCodeHasBeenUpdatedParams} params - The parameters for this event
 * @property {string} modal_type - Custom Action code
 * @property {string} context - Additional data in Json structure
 * @property {string} page_id - page id (for now- of Automation)
 * @property {number} window_width - window_width
 * @property {string} origin - Where did the modal open from? Create code / Edit
 * @property {GUID} external_id - External key (like rule id in Automation)
 * @property {GUID} app_id - app id (for now- Automation's id)
 * @property {number} window_height - window_height
 * @property {GUID} msid - Site id
 * @return {LogObject<veloIdeCodeHasBeenUpdatedParams>} LogObject<veloIdeCodeHasBeenUpdatedParams>
 */
export function veloIdeCodeHasBeenUpdated(params) {
    return { evid: 11802, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'veloIdeClickOnMoreActions' event (evid: 11803)
 *
 * Event description: Velo IDE - Sent when a user click on the sign of "more actions" or on one of its options
 *
 * @param {veloIdeClickOnMoreActionsParams} params - The parameters for this event
 * @property {string} modal_type - Custom Action code
 * @property {string} action_name - What was the clicked action? Open more actions/ Manage secrets / Install Velo packages / Manage CMS / View Velo API Reference
 * @property {string} context - Additional data in Json structure
 * @property {string} page_id - page id (for now- of Automation)
 * @property {number} window_width - window_width
 * @property {string} origin - Where did the modal open from? Create code / Edit
 * @property {GUID} external_id - External key (like rule id in Automation)
 * @property {GUID} app_id - app id (for now- Automation's id)
 * @property {number} window_height - window_height
 * @property {GUID} msid - Site id
 * @return {LogObject<veloIdeClickOnMoreActionsParams>} LogObject<veloIdeClickOnMoreActionsParams>
 */
export function veloIdeClickOnMoreActions(params) {
    return { evid: 11803, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'veloIdeClickOnATab' event (evid: 11804)
 *
 * Event description: Velo IDE - Sent when a user click on a tab in the modal
 *
 * @param {veloIdeClickOnATabParams} params - The parameters for this event
 * @property {string} modal_type - Custom Action code
 * @property {string} tab_name - The chosen tab’s name
 * @property {string} context - Additional data in Json structure
 * @property {string} page_id - page id (for now- of Automation)
 * @property {string} tab_type - The chosen tab’s type: Editable Code / Read only documentation
 * @property {number} window_width - window_width
 * @property {string} origin - Where did the modal open from? Create code / Edit
 * @property {GUID} external_id - External key (like rule id in Automation)
 * @property {GUID} app_id - app id (for now- Automation's id)
 * @property {number} window_height - window_height
 * @property {GUID} msid - Site id
 * @return {LogObject<veloIdeClickOnATabParams>} LogObject<veloIdeClickOnATabParams>
 */
export function veloIdeClickOnATab(params) {
    return { evid: 11804, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'veloIdeModalEndOfProcess' event (evid: 11805)
 *
 * Event description: Velo IDE - Sent when a user wants to finish his work with the modal and clicks on a CTA (Save / Cancel)
 *
 * @param {veloIdeModalEndOfProcessParams} params - The parameters for this event
 * @property {string} modal_type - Custom Action code
 * @property {string} context - Additional data in Json structure
 * @property {string} page_id - page id (for now- of Automation)
 * @property {number} window_width - window_width
 * @property {string} origin - Where did the modal open from? Create code / Edit
 * @property {GUID} external_id - External key (like rule id in Automation)
 * @property {GUID} app_id - app id (for now- Automation's id)
 * @property {string} end_type - How did the process end? Save successfully / Save with errors / Cancel
 * @property {number} window_height - window_height
 * @property {GUID} msid - Site id
 * @return {LogObject<veloIdeModalEndOfProcessParams>} LogObject<veloIdeModalEndOfProcessParams>
 */
export function veloIdeModalEndOfProcess(params) {
    return { evid: 11805, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'veloIdeModalClickOnLinks' event (evid: 11806)
 *
 * Event description: Velo IDE - Sent when a user clicks on the modal's links: learn more / Go to the Velo editor
 *
 * @param {veloIdeModalClickOnLinksParams} params - The parameters for this event
 * @property {string} modal_type - Custom Action code
 * @property {string} context - Additional data in Json structure
 * @property {string} page_id - page id (for now- of Automation)
 * @property {string} link_to - What was the chosen link? Learn More / Go to the Velo editor
 * @property {number} window_width - window_width
 * @property {string} origin - Where did the modal open from? Create code / Edit
 * @property {GUID} external_id - External key (like rule id in Automation)
 * @property {GUID} app_id - app id (for now- Automation's id)
 * @property {number} window_height - window_height
 * @property {GUID} msid - Site id
 * @return {LogObject<veloIdeModalClickOnLinksParams>} LogObject<veloIdeModalClickOnLinksParams>
 */
export function veloIdeModalClickOnLinks(params) {
    return { evid: 11806, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'veloIdeModalUnsuccessfulSave' event (evid: 11807)
 *
 * Event description: Velo IDE - Sent when a user wants to finish his work with the modal but he gets an error message
 *
 * @param {veloIdeModalUnsuccessfulSaveParams} params - The parameters for this event
 * @property {string} modal_type - Custom Action code
 * @property {string} context - Additional data in Json structure
 * @property {string} page_id - page id (for now- of Automation)
 * @property {string} error_type - Error type, like: Network issues
 * @property {number} window_width - window_width
 * @property {string} origin - Where did the modal open from? Create code / Edit
 * @property {GUID} external_id - External key (like rule id in Automation)
 * @property {GUID} app_id - app id (for now- Automation's id)
 * @property {number} window_height - window_height
 * @property {GUID} msid - Site id
 * @return {LogObject<veloIdeModalUnsuccessfulSaveParams>} LogObject<veloIdeModalUnsuccessfulSaveParams>
 */
export function veloIdeModalUnsuccessfulSave(params) {
    return { evid: 11807, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderAutofillMemberEmailsAddedMembersArea' event (evid: 1181)
 *
 * Event description: Copy of Form Builder - Autofill Member Emails - added members area
 *
 * @param {formBuilderAutofillMemberEmailsAddedMembersAreaParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI, Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form id
 * @property {GUID} vsi - vsi
 * @property {string} template - template of the form
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderAutofillMemberEmailsAddedMembersAreaParams>} LogObject<formBuilderAutofillMemberEmailsAddedMembersAreaParams>
 */
export function formBuilderAutofillMemberEmailsAddedMembersArea(params) {
    return { evid: 1181, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderSubmissionLimitUouSeenLimitMessage' event (evid: 1182)
 *
 * Event description: Form Builder - submission limit - restore success message
 *
 * @param {formBuilderSubmissionLimitUouSeenLimitMessageParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI, Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form id
 * @property {GUID} vsi - vsi
 * @property {string} template - template of the form
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderSubmissionLimitUouSeenLimitMessageParams>} LogObject<formBuilderSubmissionLimitUouSeenLimitMessageParams>
 */
export function formBuilderSubmissionLimitUouSeenLimitMessage(params) {
    return { evid: 1182, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'sidebarModalOfFteToTheNewSidebarIsLoadedWithSpecificCluster' event (evid: 1185)
 *
 * Event description: Sidebar > Modal of FTE to the new sidebar is loaded
 *
 * @param {sidebarModalOfFteToTheNewSidebarIsLoadedWithSpecificClusterParams} params - The parameters for this event
 * @property {string} category_items_list - the list of items which new and presented
 * @property {string} origin - FTE or tooltip
 * @property {string} installedApps - installed_apps
 * @property {string} pageName - page_name
 * @property {string} clusterName - the cluster name
 * @return {LogObject<sidebarModalOfFteToTheNewSidebarIsLoadedWithSpecificClusterParams>} LogObject<sidebarModalOfFteToTheNewSidebarIsLoadedWithSpecificClusterParams>
 */
export function sidebarModalOfFteToTheNewSidebarIsLoadedWithSpecificCluster(params) {
    return { evid: 1185, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardSiteSettingsLocationsModalPageView' event (evid: 1189)
 *
 * Event description: Locations Modal page view
 *
 * @param {dashboardSiteSettingsLocationsModalPageViewParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} origin - name of previous tab
 * @property {string} fields - not sent
 * @property {string} platform - platform
 * @property {string} location_details - 0- first location (create), 1-second location, 2- third location,...
 * @property {string} hosting - from where user arrived to locations modal (Editor/MA/bookings...)
 * @property {GUID} msid - msid
 * @return {LogObject<dashboardSiteSettingsLocationsModalPageViewParams>} LogObject<dashboardSiteSettingsLocationsModalPageViewParams>
 */
export function dashboardSiteSettingsLocationsModalPageView(params) {
    return { evid: 1189, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'foldersClickOnShowMoreShoeLess' event (evid: 119)
 *
 * Event description: Click on 'show more' or 'show less' button from my-sites to see more/less folders
 *
 * @param {foldersClickOnShowMoreShoeLessParams} params - The parameters for this event
 * @property {string} name - the name of the button
 * @property {string} view_mode - grid
 * @property {string} view_type - view_type
 * @property {string} sub_view - sub_view
 * @property {string} platform - platform
 * @property {string} hosting - MA
 * @property {string} view - my-sites
 * @return {LogObject<foldersClickOnShowMoreShoeLessParams>} LogObject<foldersClickOnShowMoreShoeLessParams>
 */
export function foldersClickOnShowMoreShoeLess(params) {
    return { evid: 119, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardUpgradeLink' event (evid: 12)
 *
 * Event description: click on upgrade from my account
 *
 * @param {dashboardUpgradeLinkParams} params - The parameters for this event
 * @property {string} name - name
 * @property {string} view_type - view_type
 * @property {string} origin - upgrade button
 * @property {string} platform - platform
 * @return {LogObject<dashboardUpgradeLinkParams>} LogObject<dashboardUpgradeLinkParams>
 */
export function dashboardUpgradeLink(params) {
    return { evid: 12, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'ascendPagePageNavigationClick' event (evid: 120)
 *
 * Event description: click on one of the items in the page
 *
 * @param {ascendPagePageNavigationClickParams} params - The parameters for this event
 * @property {string} referral_info - referral_info
 * @property {string} view_type - view_type
 * @property {string} item_name - inbox /chat/seo wiz/ coupons etc.
 * @property {string} category - marketing / customer
 * @property {string} prev_view - prev_view
 * @property {string} platform - platform
 * @property {number} loading_time - loading_time
 * @return {LogObject<ascendPagePageNavigationClickParams>} LogObject<ascendPagePageNavigationClickParams>
 */
export function ascendPagePageNavigationClick(params) {
    return { evid: 120, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'workspaceSelectorSelectWorkspaceModalView' event (evid: 12002)
 *
 * Event description: when the user clicks on a workspace in the workspace selector and the model is opened
 *
 * @param {workspaceSelectorSelectWorkspaceModalViewParams} params - The parameters for this event
 * @property {number} num_workspaces - num_workspaces
 * @property {string} page_view - Dashboard / my sites / editor
 * @property {string} account_type - the current logged account id's type (workspace type), DIY/Partners/Studio/enterprise
 * @property {GUID} clicked_workspace_id - the selected workspace's id
 * @property {string} clicked_workspace_role - the logged user's role in the selected workspace
 * @property {string} platform - platform
 * @property {string} previous_workspace_id - the previous workspace's id
 * @property {string} previous_workspace_role - the logged user's role in the previous workspace
 * @return {LogObject<workspaceSelectorSelectWorkspaceModalViewParams>} LogObject<workspaceSelectorSelectWorkspaceModalViewParams>
 */
export function workspaceSelectorSelectWorkspaceModalView(params) {
    return { evid: 12002, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'workspaceSelectorSelectWorkspaceModalCta' event (evid: 12003)
 *
 * Event description: when the user clicks on a workspace in the workspace selector and the model is opened
 *
 * @param {workspaceSelectorSelectWorkspaceModalCtaParams} params - The parameters for this event
 * @property {number} num_workspaces - number of workspaces (=accounts) the logged user is connected to
 * @property {string} page_view - Dashboard / my sites/editor
 * @property {string} account_type - the current logged account id's type (workspace type), DIY/Partners/Studio/enterprise
 * @property {GUID} clicked_workspace_id - the current logged account id's type (workspace type), DIY/Partners/Studio/enterprise
 * @property {string} clicked_workspace_role - the logged user's role in the selected workspace
 * @property {string} platform - platform
 * @property {string} previous_workspace_id - the previous workspace's id
 * @property {string} previous_workspace_role - the logged user's role in the previous workspace
 * @property {string} cta - cta
 * @return {LogObject<workspaceSelectorSelectWorkspaceModalCtaParams>} LogObject<workspaceSelectorSelectWorkspaceModalCtaParams>
 */
export function workspaceSelectorSelectWorkspaceModalCta(params) {
    return { evid: 12003, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'workspaceSelectorSelectWorkspaceModalClose' event (evid: 12004)
 *
 * Event description: workspace selector - select workplace modal is closed
 *
 * @param {workspaceSelectorSelectWorkspaceModalCloseParams} params - The parameters for this event
 * @property {number} num_workspaces - num_workspaces
 * @property {string} page_view - Dashboard / my sites/editor
 * @property {string} account_type - the current logged account id's type (workspace type), DIY/Partners/Studio/enterprise
 * @property {GUID} clicked_workspace_id - the selected workspace's id
 * @property {string} clicked_workspace_role - the logged user's role in the selected workspace
 * @property {string} platform - platform
 * @property {string} previous_workspace_id - the previous workspace's id
 * @property {string} previous_workspace_role - the logged user's role in the previous workspace
 * @property {string} reason - ESC/backdrop (and other Cases where the modal disappears)
 * @return {LogObject<workspaceSelectorSelectWorkspaceModalCloseParams>} LogObject<workspaceSelectorSelectWorkspaceModalCloseParams>
 */
export function workspaceSelectorSelectWorkspaceModalClose(params) {
    return { evid: 12004, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'switchWorkspaceModalSelectWorkspaceModalView' event (evid: 12010)
 *
 * Event description: when the workspace model is opened
 *
 * @param {switchWorkspaceModalSelectWorkspaceModalViewParams} params - The parameters for this event
 * @property {string} page_view - Dashboard / my sites / editor
 * @property {GUID} active_workspace_id - the selected workspace's id
 * @property {string} active_workspace_role - the logged user's role in the selected workspace
 * @property {string} original_workspace_id - the previous workspace's id
 * @property {string} original_workspace_role - the logged user's role in the previous workspace
 * @return {LogObject<switchWorkspaceModalSelectWorkspaceModalViewParams>} LogObject<switchWorkspaceModalSelectWorkspaceModalViewParams>
 */
export function switchWorkspaceModalSelectWorkspaceModalView(params) {
    return { evid: 12010, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'switchWorkspaceModalSelectWorkspaceModalCta' event (evid: 12011)
 *
 * Event description: when the user clicks the workspace model
 *
 * @param {switchWorkspaceModalSelectWorkspaceModalCtaParams} params - The parameters for this event
 * @property {string} page_view - Dashboard / my sites/editor
 * @property {GUID} active_workspace_id - the current logged account id's type (workspace type), DIY/Partners/Studio/enterprise
 * @property {string} active_workspace_role - the logged user's role in the selected workspace
 * @property {string} original_workspace_id - the previous workspace's id
 * @property {string} original_workspace_role - the logged user's role in the previous workspace
 * @property {string} cta - cta
 * @return {LogObject<switchWorkspaceModalSelectWorkspaceModalCtaParams>} LogObject<switchWorkspaceModalSelectWorkspaceModalCtaParams>
 */
export function switchWorkspaceModalSelectWorkspaceModalCta(params) {
    return { evid: 12011, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'switchWorkspaceModalWorkspaceModalClose' event (evid: 12012)
 *
 * Event description: Switch Workspace Modal is closed
 *
 * @param {switchWorkspaceModalWorkspaceModalCloseParams} params - The parameters for this event
 * @property {string} page_view - Dashboard / my sites/editor
 * @property {GUID} active_workspace_id - the selected workspace's id
 * @property {string} active_workspace_role - the logged user's role in the selected workspace
 * @property {string} original_workspace_id - the previous workspace's id
 * @property {string} original_workspace_role - the logged user's role in the previous workspace
 * @property {string} reason - ESC/backdrop (and other Cases where the modal disappears)
 * @return {LogObject<switchWorkspaceModalWorkspaceModalCloseParams>} LogObject<switchWorkspaceModalWorkspaceModalCloseParams>
 */
export function switchWorkspaceModalWorkspaceModalClose(params) {
    return { evid: 12012, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderBizMgrFormsBizTipsClickOnTheTip' event (evid: 1208)
 *
 * Event description: Form Builder - Biz Mgr - Forms Biz Tips - click on the tip
 *
 * @param {formBuilderBizMgrFormsBizTipsClickOnTheTipParams} params - The parameters for this event
 * @property {GUID} visitor_id - visitor_id
 * @property {GUID} vsi - vsi
 * @property {string} app_name - 'automations', 'email marketing' , 'inbox' ,..
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderBizMgrFormsBizTipsClickOnTheTipParams>} LogObject<formBuilderBizMgrFormsBizTipsClickOnTheTipParams>
 */
export function formBuilderBizMgrFormsBizTipsClickOnTheTip(params) {
    return { evid: 1208, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'invoicesAddAProductVariantOpenModal' event (evid: 1209)
 *
 * Event description: Invoices - Add a product Variant - open modal
 *
 * @param {invoicesAddAProductVariantOpenModalParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<invoicesAddAProductVariantOpenModalParams>} LogObject<invoicesAddAProductVariantOpenModalParams>
 */
export function invoicesAddAProductVariantOpenModal(params) {
    return { evid: 1209, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'ascendPageAscendVideoClick' event (evid: 121)
 *
 * Event description: when user clicked on the video
 *
 * @param {ascendPageAscendVideoClickParams} params - The parameters for this event
 * @property {string} referral_info - referral_info
 * @property {string} view_type - view_type
 * @property {string} prev_view - prev_view
 * @property {string} platform - platform
 * @property {number} loading_time - loading_time
 * @return {LogObject<ascendPageAscendVideoClickParams>} LogObject<ascendPageAscendVideoClickParams>
 */
export function ascendPageAscendVideoClick(params) {
    return { evid: 121, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'invoicesAddAProductVariantAddToInvoice' event (evid: 1210)
 *
 * Event description: Invoices - Add a product Variant - add to invoice
 *
 * @param {invoicesAddAProductVariantAddToInvoiceParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<invoicesAddAProductVariantAddToInvoiceParams>} LogObject<invoicesAddAProductVariantAddToInvoiceParams>
 */
export function invoicesAddAProductVariantAddToInvoice(params) {
    return { evid: 1210, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'foldersHoverOverThePermissionIcon1212' event (evid: 1212)
 *
 * Event description: When the user hovers over the permission icon
 *
 * @param {foldersHoverOverThePermissionIcon1212Params} params - The parameters for this event
 * @property {string} sub_view - list-view/grid/inside-folder
 * @property {string} folder - folder_id
 * @property {string} origin - site-list-partners-DIY
 * @property {string} view_level - root\folder
 * @property {string} platform - platform
 * @property {GUID} msid - msid - if it's on site and not a folder
 * @property {string} folder_name - folder_name
 * @property {number} number_of_items - number shown in the icon
 * @return {LogObject<foldersHoverOverThePermissionIcon1212Params>} LogObject<foldersHoverOverThePermissionIcon1212Params>
 */
export function foldersHoverOverThePermissionIcon1212(params) {
    return { evid: 1212, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'invoicesCreateOrderNewInvoiceClick' event (evid: 1213)
 *
 * Event description: Invoices - Add a product Variant - add to invoice
 *
 * @param {invoicesCreateOrderNewInvoiceClickParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<invoicesCreateOrderNewInvoiceClickParams>} LogObject<invoicesCreateOrderNewInvoiceClickParams>
 */
export function invoicesCreateOrderNewInvoiceClick(params) {
    return { evid: 1213, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardFinishLoadingLoadingTimeFromStartModule' event (evid: 1215)
 *
 * Event description: event to check the loading time from start loading
 *
 * @param {dashboardFinishLoadingLoadingTimeFromStartModuleParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} sub_view - sub_view
 * @property {string} platform - --
 * @property {string} hosting - dashboard/editor/onboarding
 * @property {string} refferal_info - refferal
 * @property {GUID} msid - --
 * @property {string} view - requested view
 * @property {number} loading_time - loading from start loading the page
 * @return {LogObject<dashboardFinishLoadingLoadingTimeFromStartModuleParams>} LogObject<dashboardFinishLoadingLoadingTimeFromStartModuleParams>
 */
export function dashboardFinishLoadingLoadingTimeFromStartModule(params) {
    return { evid: 1215, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'sitesListPageFoldersLoaded1216' event (evid: 1216)
 *
 * Event description: When My site page is loaded this event is being sent with the folders that were loaded.
 *
 * @param {sitesListPageFoldersLoaded1216Params} params - The parameters for this event
 * @property {string} view_mode - grid\list
 * @property {string} folders - json of the folders state
 * @property {number} num_displayed_sites - The number of sites that are displayed in the current folder
 * @property {string} platform - platform
 * @return {LogObject<sitesListPageFoldersLoaded1216Params>} LogObject<sitesListPageFoldersLoaded1216Params>
 */
export function sitesListPageFoldersLoaded1216(params) {
    return { evid: 1216, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'deleteLocationModalIsOpened' event (evid: 1217)
 *
 * Event description: When the delete modal is opened (after clicking delete location)
 *
 * @param {deleteLocationModalIsOpenedParams} params - The parameters for this event
 * @property {boolean} is_multiple_choice - true/ false if the modal present a few options to choose from
 * @property {boolean} is_default - true if trying to delete default location
 * @property {string} page_view - business info
 * @property {string} view_type - view_type
 * @property {boolean} is_draft - true if the location is a draft or not
 * @property {string} platform - platform
 * @property {string} hosting - dashboard/editor/ADI
 * @property {GUID} msid - msid
 * @return {LogObject<deleteLocationModalIsOpenedParams>} LogObject<deleteLocationModalIsOpenedParams>
 */
export function deleteLocationModalIsOpened(params) {
    return { evid: 1217, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'successfullyDeletedLocation' event (evid: 1218)
 *
 * Event description: When the user clicks on delete location and the location successfully deleted and removed from the db
 *
 * @param {successfullyDeletedLocationParams} params - The parameters for this event
 * @property {boolean} is_multiple_choice - true/ false if the modal present a few options to choose from
 * @property {boolean} is_default - true if trying to delete default location
 * @property {string} page_view - business info
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} hosting - dashboard/editor/ADI
 * @property {GUID} msid - msid
 * @return {LogObject<successfullyDeletedLocationParams>} LogObject<successfullyDeletedLocationParams>
 */
export function successfullyDeletedLocation(params) {
    return { evid: 1218, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'foldersClickOnCreateNewFolder' event (evid: 122)
 *
 * Event description: when a user clicks on the 'Create New Folder' button from my-site or dialog
 *
 * @param {foldersClickOnCreateNewFolderParams} params - The parameters for this event
 * @property {string} source - top-bar/dialog/topbar-folder-dropdown
 * @property {string} view_type - view_type
 * @property {string} sub_view - grid / list-view
 * @property {number} nesting_level - 0 (my-sites)/1 (folder) /2/3...
 * @property {string} origin - origin
 * @property {string} view_level - search/filter/folder/root
 * @property {string} platform - platform
 * @property {string} hosting - MA
 * @property {string} view - sites-list-enterprise-page/ enterprise-folder-view
 * @return {LogObject<foldersClickOnCreateNewFolderParams>} LogObject<foldersClickOnCreateNewFolderParams>
 */
export function foldersClickOnCreateNewFolder(params) {
    return { evid: 122, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'locationModalFloatingNotification' event (evid: 1225)
 *
 * Event description: If the server returns an error for adding a new location, we should show an error notification while keeping the modal with all the same input values before the add action.
 *
 * @param {locationModalFloatingNotificationParams} params - The parameters for this event
 * @property {string} name - notification name
 * @property {string} page_view - locations-modal
 * @property {string} view_type - view_type
 * @property {string} origin - which app the modal is opened from
 * @property {string} type - error
 * @property {string} platform - platform
 * @property {string} hosting - dashboard/editor/ADI
 * @property {GUID} msid - metasite id
 * @return {LogObject<locationModalFloatingNotificationParams>} LogObject<locationModalFloatingNotificationParams>
 */
export function locationModalFloatingNotification(params) {
    return { evid: 1225, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'foldersClickOnCreateNewFolderInDialog' event (evid: 123)
 *
 * Event description: when a user clicks on 'Create' from new folder dialog
 *
 * @param {foldersClickOnCreateNewFolderInDialogParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} sub_view - grid/list-view
 * @property {number} nesting_level - 0 (my-sites)/1 (folder) /2/3..
 * @property {string} platform - platform
 * @property {string} hosting - MA
 * @property {string} folder_name - the name of the folder
 * @property {string} view - my-sites/folder-view
 * @return {LogObject<foldersClickOnCreateNewFolderInDialogParams>} LogObject<foldersClickOnCreateNewFolderInDialogParams>
 */
export function foldersClickOnCreateNewFolderInDialog(params) {
    return { evid: 123, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'apesSaveEditedNotification' event (evid: 1234)
 *
 * Event description: APeS - Save edited notification
 *
 * @param {apesSaveEditedNotificationParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {GUID} rule_id - rule id
 * @property {string} componentChanged - which component was changed
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<apesSaveEditedNotificationParams>} LogObject<apesSaveEditedNotificationParams>
 */
export function apesSaveEditedNotification(params) {
    return { evid: 1234, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'apesSaveEditedNotificationSrc5Evid1235' event (evid: 1235)
 *
 * Event description: APeS - Save edited notification
 *
 * @param {apesSaveEditedNotificationSrc5Evid1235Params} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {GUID} rule_id - rule id
 * @property {string} componentChanged - which component was changed
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<apesSaveEditedNotificationSrc5Evid1235Params>} LogObject<apesSaveEditedNotificationSrc5Evid1235Params>
 */
export function apesSaveEditedNotificationSrc5Evid1235(params) {
    return { evid: 1235, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'apesEditNotificationSelectAudience' event (evid: 1238)
 *
 * Event description: APeS - Save edited notification
 *
 * @param {apesEditNotificationSelectAudienceParams} params - The parameters for this event
 * @property {string} audience - which audience was chosen
 * @property {string} view_type - view_type
 * @property {GUID} rule_id - rule id
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<apesEditNotificationSelectAudienceParams>} LogObject<apesEditNotificationSelectAudienceParams>
 */
export function apesEditNotificationSelectAudience(params) {
    return { evid: 1238, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'foldersClickOnMoveToFolderFromDialog' event (evid: 124)
 *
 * Event description: When a user clicks on ‘Move to Folder’ from the dialog shown
 *
 * @param {foldersClickOnMoveToFolderFromDialogParams} params - The parameters for this event
 * @property {Url} referral_url - The url of the current page
 * @property {number} destination_nesting_level - 0 (my-sites), 1 (folder), 2(folder in 1 folder) etc
 * @property {number} num_sites_moved - number of sites move to the folder
 * @property {string} view_type - view_type
 * @property {number} origin_nesting_level - 0 (my-sites), 1 (folder), 2(folder in 1 folder)
 * @property {string} folder - the name of the chosen folder
 * @property {string} origin - site-list \ site-list-enterprise
 * @property {string} moved_item_type - folder \ site
 * @property {string} platform - platform
 * @property {number} num_folders_moved - number of folders move to the folder
 * @property {string} msid - The site msid
 * @return {LogObject<foldersClickOnMoveToFolderFromDialogParams>} LogObject<foldersClickOnMoveToFolderFromDialogParams>
 */
export function foldersClickOnMoveToFolderFromDialog(params) {
    return { evid: 124, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'suggestionsFeedbackClickOnNavigationButtonInPopup' event (evid: 1240)
 *
 * Event description: When the header is loaded with a logo
 *
 * @param {suggestionsFeedbackClickOnNavigationButtonInPopupParams} params - The parameters for this event
 * @property {string} logo_value - logo_value
 * @property {string} hosting_platform - Deprecated - will be implicit in the future
 * @property {string} platformName - account managr/BM/devcenter/etc. (biPageView )
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} hosting - hosting
 * @property {GUID} msid - msid
 * @return {LogObject<suggestionsFeedbackClickOnNavigationButtonInPopupParams>} LogObject<suggestionsFeedbackClickOnNavigationButtonInPopupParams>
 */
export function suggestionsFeedbackClickOnNavigationButtonInPopup(params) {
    return { evid: 1240, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderBizMgrClickOnMoreActions' event (evid: 1243)
 *
 * Event description: Form Builder - Biz Mgr - Click on More Actions
 *
 * @param {formBuilderBizMgrClickOnMoreActionsParams} params - The parameters for this event
 * @property {GUID} visitor_id - visitor_id
 * @property {GUID} vsi - vsi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderBizMgrClickOnMoreActionsParams>} LogObject<formBuilderBizMgrClickOnMoreActionsParams>
 */
export function formBuilderBizMgrClickOnMoreActions(params) {
    return { evid: 1243, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderBizMgrClickOnMoreActionsOfASpecificForm' event (evid: 1246)
 *
 * Event description: Click on More Actions of a specific form
 *
 * @param {formBuilderBizMgrClickOnMoreActionsOfASpecificFormParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} template - template name
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderBizMgrClickOnMoreActionsOfASpecificFormParams>} LogObject<formBuilderBizMgrClickOnMoreActionsOfASpecificFormParams>
 */
export function formBuilderBizMgrClickOnMoreActionsOfASpecificForm(params) {
    return { evid: 1246, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderBizMgrClickOnViewForm' event (evid: 1247)
 *
 * Event description: - Click on View Form
 *
 * @param {formBuilderBizMgrClickOnViewFormParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} template - template name
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderBizMgrClickOnViewFormParams>} LogObject<formBuilderBizMgrClickOnViewFormParams>
 */
export function formBuilderBizMgrClickOnViewForm(params) {
    return { evid: 1247, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderBizMgrClickOnEditForm' event (evid: 1248)
 *
 * Event description: - Click on Edit Form
 *
 * @param {formBuilderBizMgrClickOnEditFormParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} template - template name
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderBizMgrClickOnEditFormParams>} LogObject<formBuilderBizMgrClickOnEditFormParams>
 */
export function formBuilderBizMgrClickOnEditForm(params) {
    return { evid: 1248, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderBizMgrClickOnDeleteForm' event (evid: 1249)
 *
 * Event description: - Click on Delete Form
 *
 * @param {formBuilderBizMgrClickOnDeleteFormParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} template - template name
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderBizMgrClickOnDeleteFormParams>} LogObject<formBuilderBizMgrClickOnDeleteFormParams>
 */
export function formBuilderBizMgrClickOnDeleteForm(params) {
    return { evid: 1249, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'foldersClickOnFolderSQuickActions' event (evid: 125)
 *
 * Event description: click folder's quick actions
 *
 * @param {foldersClickOnFolderSQuickActionsParams} params - The parameters for this event
 * @property {string} name - name of quick action
 * @property {string} view_mode - grid/list-view
 * @property {string} view_type - view_type
 * @property {string} sub_view - sub_view
 * @property {number} nesting_level - 0 (my-sites)/1/2/3… the number define the nested folder number.
 * @property {string} origin - sites-list-enterprise\site-list
 * @property {string} cta - top menu/folder
 * @property {string} view_level - page(ROOT)/ folder/ search/filter
 * @property {string} platform - platform
 * @return {LogObject<foldersClickOnFolderSQuickActionsParams>} LogObject<foldersClickOnFolderSQuickActionsParams>
 */
export function foldersClickOnFolderSQuickActions(params) {
    return { evid: 125, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'customerNotificationsSettingsClickInsidePageWithoutEmailsSections' event (evid: 1250)
 *
 * Event description: Click on the main page
 * without sections -
 * Automated emails you created,
 * Recommended automated emails,
 * System Notifications
 *
 * @param {customerNotificationsSettingsClickInsidePageWithoutEmailsSectionsParams} params - The parameters for this event
 * @property {string} name - button name - f.e. "go to events"
 * @property {string} section_name - name of the component - f.e. "More notifications"
 * @property {string} view_type - view_type
 * @property {string} page_id - page id of the next page - f.e. page_id of stores settings
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<customerNotificationsSettingsClickInsidePageWithoutEmailsSectionsParams>} LogObject<customerNotificationsSettingsClickInsidePageWithoutEmailsSectionsParams>
 */
export function customerNotificationsSettingsClickInsidePageWithoutEmailsSections(params) {
    return { evid: 1250, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'customerNotificationsSettingsClickOnHideUnhide' event (evid: 1251)
 *
 * Event description: When the user clicks on "hide/unhide" in each section in the page
 *
 * @param {customerNotificationsSettingsClickOnHideUnhideParams} params - The parameters for this event
 * @property {string} section_name - component name: notifications_channel/more_notifications/automated_emails you created/system_notifications
 * @property {string} view_type - view_type
 * @property {string} origin - from where the hide/unhide happened
 * @property {boolean} status - true - click on unhide , false - click on hide
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @property {string} template_id - template_id
 * @return {LogObject<customerNotificationsSettingsClickOnHideUnhideParams>} LogObject<customerNotificationsSettingsClickOnHideUnhideParams>
 */
export function customerNotificationsSettingsClickOnHideUnhide(params) {
    return { evid: 1251, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'customerNotificationsSettingsPreviewEditClickOnToggle' event (evid: 1252)
 *
 * Event description: When the user clicks on the toggle to mute/unmute each channel
 *
 * @param {customerNotificationsSettingsPreviewEditClickOnToggleParams} params - The parameters for this event
 * @property {string} channel - email/mobile/sms
 * @property {string} view_type - view_type
 * @property {GUID} rule_id - automations rule_id
 * @property {boolean} status - on=true, off=false
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @property {string} template_id - ping template_id
 * @return {LogObject<customerNotificationsSettingsPreviewEditClickOnToggleParams>} LogObject<customerNotificationsSettingsPreviewEditClickOnToggleParams>
 */
export function customerNotificationsSettingsPreviewEditClickOnToggle(params) {
    return { evid: 1252, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'customerNotificationsSettingsPageLoad' event (evid: 1253)
 *
 * Event description: When the page is loaded
 *
 * @param {customerNotificationsSettingsPageLoadParams} params - The parameters for this event
 * @property {string} available_sections - all the components loaded to the user
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<customerNotificationsSettingsPageLoadParams>} LogObject<customerNotificationsSettingsPageLoadParams>
 */
export function customerNotificationsSettingsPageLoad(params) {
    return { evid: 1253, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'bizManagerShowWarningMessage' event (evid: 1254)
 *
 * Event description: warning message is shown
 *
 * @param {bizManagerShowWarningMessageParams} params - The parameters for this event
 * @property {string} name - the name of the message (for example unsupported language message)
 * @property {string} page_view - The page where the warning message is shown
 * @property {string} view_type - view_type
 * @property {string} unsupported_language - the chosen language
 * @property {string} unsupport_apps - unsupport_apps
 * @property {string} fold_name - fold_name
 * @property {string} platform - deprecated
 * @property {string} hosting - MA/editor
 * @property {GUID} msid - msid
 * @return {LogObject<bizManagerShowWarningMessageParams>} LogObject<bizManagerShowWarningMessageParams>
 */
export function bizManagerShowWarningMessage(params) {
    return { evid: 1254, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderBizMgrClickOnGoToEditorToPublishYourSite' event (evid: 1256)
 *
 * Event description: Click on Go to Editor to Publish Your Site
 *
 * @param {formBuilderBizMgrClickOnGoToEditorToPublishYourSiteParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} template - template name
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderBizMgrClickOnGoToEditorToPublishYourSiteParams>} LogObject<formBuilderBizMgrClickOnGoToEditorToPublishYourSiteParams>
 */
export function formBuilderBizMgrClickOnGoToEditorToPublishYourSite(params) {
    return { evid: 1256, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderBizMgrClickOnGoToEditorToCreateSubmissionTable' event (evid: 1257)
 *
 * Event description: Click on Go to Editor to Create Submission Table
 *
 * @param {formBuilderBizMgrClickOnGoToEditorToCreateSubmissionTableParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} template - template name
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderBizMgrClickOnGoToEditorToCreateSubmissionTableParams>} LogObject<formBuilderBizMgrClickOnGoToEditorToCreateSubmissionTableParams>
 */
export function formBuilderBizMgrClickOnGoToEditorToCreateSubmissionTable(params) {
    return { evid: 1257, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'copyOfFormBuilderBizMgrClickOnGoToEditorToRemoveForm' event (evid: 1258)
 *
 * Event description: Click on Go to Editor to  Remove Form
 *
 * @param {copyOfFormBuilderBizMgrClickOnGoToEditorToRemoveFormParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} template - template name
 * @property {GUID} msid - msid
 * @return {LogObject<copyOfFormBuilderBizMgrClickOnGoToEditorToRemoveFormParams>} LogObject<copyOfFormBuilderBizMgrClickOnGoToEditorToRemoveFormParams>
 */
export function copyOfFormBuilderBizMgrClickOnGoToEditorToRemoveForm(params) {
    return { evid: 1258, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'customerNotificationsSettingsPreviewEditShowTooltip' event (evid: 1259)
 *
 * Event description: when the user tries to mute all channels the last button is disabled and if he hovers over it a tooltip is shown
 *
 * @param {customerNotificationsSettingsPreviewEditShowTooltipParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} rule_id - automations rule id
 * @property {string} platform - deprecated
 * @property {GUID} msid - msid
 * @property {string} error_name - turn_off_all_channels
 * @property {string} template_id - ping template_id
 * @return {LogObject<customerNotificationsSettingsPreviewEditShowTooltipParams>} LogObject<customerNotificationsSettingsPreviewEditShowTooltipParams>
 */
export function customerNotificationsSettingsPreviewEditShowTooltip(params) {
    return { evid: 1259, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'foldersApproveActionFromFolderSQuickActionPopup' event (evid: 126)
 *
 * Event description: approve action from folder's quick action popup
 *
 * @param {foldersApproveActionFromFolderSQuickActionPopupParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {number} nesting_level - 0 (my-sites)/1 (folder) /2/3...
 * @property {string} origin - site-list \ site-list-enterprise
 * @property {string} cta - folder’s quick action / quick actions button
 * @property {string} platform - platform
 * @property {string} popup_name - delete_folder/rename_folder
 * @property {string} folder_name - the name of the folder
 * @return {LogObject<foldersApproveActionFromFolderSQuickActionPopupParams>} LogObject<foldersApproveActionFromFolderSQuickActionPopupParams>
 */
export function foldersApproveActionFromFolderSQuickActionPopup(params) {
    return { evid: 126, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderBizMgrEmptyStateClickOnWatchVideo' event (evid: 1263)
 *
 * Event description: - Empty State - click on Watch Video
 *
 * @param {formBuilderBizMgrEmptyStateClickOnWatchVideoParams} params - The parameters for this event
 * @property {GUID} visitor_id - visitor_id
 * @property {GUID} vsi - vsi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderBizMgrEmptyStateClickOnWatchVideoParams>} LogObject<formBuilderBizMgrEmptyStateClickOnWatchVideoParams>
 */
export function formBuilderBizMgrEmptyStateClickOnWatchVideo(params) {
    return { evid: 1263, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderBizMgrClickOnLoadMoreForms' event (evid: 1264)
 *
 * Event description: Click on Load More Forms
 *
 * @param {formBuilderBizMgrClickOnLoadMoreFormsParams} params - The parameters for this event
 * @property {GUID} visitor_id - visitor_id
 * @property {GUID} vsi - vsi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderBizMgrClickOnLoadMoreFormsParams>} LogObject<formBuilderBizMgrClickOnLoadMoreFormsParams>
 */
export function formBuilderBizMgrClickOnLoadMoreForms(params) {
    return { evid: 1264, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderBizMgrMoreActionsViewRemovedForms' event (evid: 1265)
 *
 * Event description: More Actions - View Removed Forms
 *
 * @param {formBuilderBizMgrMoreActionsViewRemovedFormsParams} params - The parameters for this event
 * @property {GUID} visitor_id - visitor_id
 * @property {GUID} vsi - vsi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderBizMgrMoreActionsViewRemovedFormsParams>} LogObject<formBuilderBizMgrMoreActionsViewRemovedFormsParams>
 */
export function formBuilderBizMgrMoreActionsViewRemovedForms(params) {
    return { evid: 1265, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderBizMgrMoreActionsLearnMore' event (evid: 1266)
 *
 * Event description: More Actions - Learn More
 *
 * @param {formBuilderBizMgrMoreActionsLearnMoreParams} params - The parameters for this event
 * @property {GUID} visitor_id - visitor_id
 * @property {GUID} vsi - vsi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderBizMgrMoreActionsLearnMoreParams>} LogObject<formBuilderBizMgrMoreActionsLearnMoreParams>
 */
export function formBuilderBizMgrMoreActionsLearnMore(params) {
    return { evid: 1266, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderBizMgrMoreActionsSendFeedback' event (evid: 1267)
 *
 * Event description: More Actions - Send Feedback
 *
 * @param {formBuilderBizMgrMoreActionsSendFeedbackParams} params - The parameters for this event
 * @property {GUID} visitor_id - visitor_id
 * @property {GUID} vsi - vsi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderBizMgrMoreActionsSendFeedbackParams>} LogObject<formBuilderBizMgrMoreActionsSendFeedbackParams>
 */
export function formBuilderBizMgrMoreActionsSendFeedback(params) {
    return { evid: 1267, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'sidebarTooltipOfModalOfFteToTheNewSidebarIsClicked' event (evid: 1268)
 *
 * Event description: Sidebar > Tooltip of Modal of FTE to the new sidebar is clicked
 *
 * @param {sidebarTooltipOfModalOfFteToTheNewSidebarIsClickedParams} params - The parameters for this event
 * @return {LogObject<sidebarTooltipOfModalOfFteToTheNewSidebarIsClickedParams>} LogObject<sidebarTooltipOfModalOfFteToTheNewSidebarIsClickedParams>
 */
export function sidebarTooltipOfModalOfFteToTheNewSidebarIsClicked(params) {
    return { evid: 1268, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'foldersSortListView' event (evid: 127)
 *
 * Event description: sort list view
 *
 * @param {foldersSortListViewParams} params - The parameters for this event
 * @property {string} name - name/date_created/last_edited(name of field sorted by)
 * @property {string} view_type - view_type
 * @property {string} sub_view - list-view
 * @property {string} order - desc/asc
 * @property {string} platform - platform
 * @property {string} view - my-sites
 * @return {LogObject<foldersSortListViewParams>} LogObject<foldersSortListViewParams>
 */
export function foldersSortListView(params) {
    return { evid: 127, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'verticalsEmailNotificationSentSrc5Evid1270' event (evid: 1270)
 *
 * Event description: When A vertical send an email notification which doesn't go via Ping!
 *
 * @param {verticalsEmailNotificationSentSrc5Evid1270Params} params - The parameters for this event
 * @property {string} channel - email
 * @property {string} view_type - view_type
 * @property {GUID} notificationId - Notification ID
 * @property {string} contact_id - If the email has been sent to member/contact
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @property {string} template_id - Descriptive name for the type of email. e.g. Identity.Member_Approved
 * @return {LogObject<verticalsEmailNotificationSentSrc5Evid1270Params>} LogObject<verticalsEmailNotificationSentSrc5Evid1270Params>
 */
export function verticalsEmailNotificationSentSrc5Evid1270(params) {
    return { evid: 1270, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'verticalsEmailNotificationSent' event (evid: 1271)
 *
 * Event description: When a user opens vertical's email  notification which doesn't go via Ping!
 *
 * @param {verticalsEmailNotificationSentParams} params - The parameters for this event
 * @property {string} channel - email
 * @property {string} view_type - view_type
 * @property {string} contact_id - If the email has been sent to member/contact
 * @property {string} platform - platform
 * @property {string} notificationid - Notification ID
 * @property {GUID} msid - msid
 * @property {string} template_id - Descriptive name for the type of email. e.g. Identity.Member_Approved
 * @return {LogObject<verticalsEmailNotificationSentParams>} LogObject<verticalsEmailNotificationSentParams>
 */
export function verticalsEmailNotificationSent(params) {
    return { evid: 1271, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'verticalsEmailNotificationClicked' event (evid: 1272)
 *
 * Event description: When a user clicks on a CTA on a vertical's email notification which doesn't go via Ping!
 *
 * @param {verticalsEmailNotificationClickedParams} params - The parameters for this event
 * @property {string} channel - email
 * @property {string} button_name - cta name (in english)
 * @property {string} view_type - view_type
 * @property {string} contact_id - If the email has been sent to member/contact
 * @property {string} platform - platform
 * @property {string} notificationid - notification_id
 * @property {GUID} msid - msid
 * @property {string} deep_link - deep_link
 * @property {string} template_id - Descriptive name for the type of email. e.g. Identity.Member_Approved
 * @return {LogObject<verticalsEmailNotificationClickedParams>} LogObject<verticalsEmailNotificationClickedParams>
 */
export function verticalsEmailNotificationClicked(params) {
    return { evid: 1272, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'sidebarTooltipOfModalOfFteToTheNewSidebarIsShown' event (evid: 1274)
 *
 * Event description: Sidebar > Tooltip of Modal of FTE to the new sidebar is shown
 *
 * @param {sidebarTooltipOfModalOfFteToTheNewSidebarIsShownParams} params - The parameters for this event
 * @return {LogObject<sidebarTooltipOfModalOfFteToTheNewSidebarIsShownParams>} LogObject<sidebarTooltipOfModalOfFteToTheNewSidebarIsShownParams>
 */
export function sidebarTooltipOfModalOfFteToTheNewSidebarIsShown(params) {
    return { evid: 1274, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'sidebarModalOfFteToTheNewSidebarIsClicked' event (evid: 1276)
 *
 * Event description: Sidebar > Modal of FTE to the new sidebar is clicked
 *
 * @param {sidebarModalOfFteToTheNewSidebarIsClickedParams} params - The parameters for this event
 * @property {string} category_items_list - the list of items which new and presented
 * @property {string} clickName - click_name
 * @property {string} installedApps - installed_apps
 * @property {string} pageName - page_name
 * @property {string} clusterName - the cluster name
 * @return {LogObject<sidebarModalOfFteToTheNewSidebarIsClickedParams>} LogObject<sidebarModalOfFteToTheNewSidebarIsClickedParams>
 */
export function sidebarModalOfFteToTheNewSidebarIsClicked(params) {
    return { evid: 1276, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'apesLoadSystemNotificationsModalEnd' event (evid: 1277)
 *
 * Event description: APeS - load system notifications modal - start
 *
 * @param {apesLoadSystemNotificationsModalEndParams} params - The parameters for this event
 * @property {boolean} isPreinstalled - if the automation is pre installed
 * @property {string} view_type - view_type
 * @property {string} origin - app id
 * @property {number} loadTime - how much time it took to load the modal
 * @property {boolean} edited - is it second time that the modal is opened (after edit mode)
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<apesLoadSystemNotificationsModalEndParams>} LogObject<apesLoadSystemNotificationsModalEndParams>
 */
export function apesLoadSystemNotificationsModalEnd(params) {
    return { evid: 1277, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'accountSettingsCloseYourWixAccountEnterPage' event (evid: 1278)
 *
 * Event description: new UX for the close your account
 *
 * https://docs.google.com/presentation/d/1toummTuN1-7cxFR3TgbGMi5F5UR-vYntZHpCRfYhkOo/edit#slide=id.gaa2182f012_3_18
 *
 * @param {accountSettingsCloseYourWixAccountEnterPageParams} params - The parameters for this event
 * @property {GUID} uuid - user id
 * @property {boolean} is_workspace - is this form for closing workspace
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @return {LogObject<accountSettingsCloseYourWixAccountEnterPageParams>} LogObject<accountSettingsCloseYourWixAccountEnterPageParams>
 */
export function accountSettingsCloseYourWixAccountEnterPage(params) {
    return { evid: 1278, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'accountSettingsCloseYourWixAccountCloseAccountRequestSubmited' event (evid: 1279)
 *
 * Event description: the user clicks on the "close my account" button
 *
 * https://docs.google.com/presentation/d/1toummTuN1-7cxFR3TgbGMi5F5UR-vYntZHpCRfYhkOo/edit#slide=id.gaa2182f012_3_18
 *
 * @param {accountSettingsCloseYourWixAccountCloseAccountRequestSubmitedParams} params - The parameters for this event
 * @property {string} context - is this form closes only a workspace\account\workspace and closes the account
 * @property {GUID} uuid - user id
 * @property {boolean} is_workspace - is the user closing his workspace or his account
 * @property {string} view_type - view_type
 * @property {string} reason - why are you closing the account
 * @property {string} platform - platform
 * @property {string} free_text - users feedback
 * @return {LogObject<accountSettingsCloseYourWixAccountCloseAccountRequestSubmitedParams>} LogObject<accountSettingsCloseYourWixAccountCloseAccountRequestSubmitedParams>
 */
export function accountSettingsCloseYourWixAccountCloseAccountRequestSubmited(params) {
    return { evid: 1279, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'foldersMarkASite' event (evid: 128)
 *
 * Event description: marking a site
 *
 * @param {foldersMarkASiteParams} params - The parameters for this event
 * @property {string} name - mark/unmark
 * @property {string} view_type - view_type
 * @property {string} sub_view - grid/ list-view
 * @property {string} platform - platform
 * @property {string} hosting - MA
 * @property {GUID} msid - msid
 * @property {string} view - my-sites
 * @return {LogObject<foldersMarkASiteParams>} LogObject<foldersMarkASiteParams>
 */
export function foldersMarkASite(params) {
    return { evid: 128, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderComplexPhoneSettingsShowCountryCodeDropdownToggle' event (evid: 1280)
 *
 * Event description: Form Builder - Complex Phone Settings - show country code dropdown toggle
 *
 * @param {formBuilderComplexPhoneSettingsShowCountryCodeDropdownToggleParams} params - The parameters for this event
 * @property {boolean} toggle_state - on/off
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} selection - deprecated
 * @property {GUID} msid - msid
 * @property {string} action - 'toggle updated by user' , 'toggle updated automatically (the field was deleted)'
 * @return {LogObject<formBuilderComplexPhoneSettingsShowCountryCodeDropdownToggleParams>} LogObject<formBuilderComplexPhoneSettingsShowCountryCodeDropdownToggleParams>
 */
export function formBuilderComplexPhoneSettingsShowCountryCodeDropdownToggle(params) {
    return { evid: 1280, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderComplexPhoneSettingsShowFieldTitleToggle' event (evid: 1281)
 *
 * Event description: Form Builder - Complex Phone Settings -  show field title toggle
 *
 * @param {formBuilderComplexPhoneSettingsShowFieldTitleToggleParams} params - The parameters for this event
 * @property {boolean} toggle_state - on/off
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} selection - deprecated
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderComplexPhoneSettingsShowFieldTitleToggleParams>} LogObject<formBuilderComplexPhoneSettingsShowFieldTitleToggleParams>
 */
export function formBuilderComplexPhoneSettingsShowFieldTitleToggle(params) {
    return { evid: 1281, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderComplexPhoneSettingsEnterFieldTitle' event (evid: 1282)
 *
 * Event description: Form Builder - Complex Phone Settings -  show field title
 *
 * @param {formBuilderComplexPhoneSettingsEnterFieldTitleParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {GUID} msid - msid
 * @property {string} value - title name
 * @return {LogObject<formBuilderComplexPhoneSettingsEnterFieldTitleParams>} LogObject<formBuilderComplexPhoneSettingsEnterFieldTitleParams>
 */
export function formBuilderComplexPhoneSettingsEnterFieldTitle(params) {
    return { evid: 1282, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderComplexPhoneSettingsShowInitialTextOfThePhoneFieldSelection' event (evid: 1283)
 *
 * Event description: Complex Phone Settings - show initial text of the phone field - selection
 *
 * @param {formBuilderComplexPhoneSettingsShowInitialTextOfThePhoneFieldSelectionParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} selection - 'None'/'Placeholder text'
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderComplexPhoneSettingsShowInitialTextOfThePhoneFieldSelectionParams>} LogObject<formBuilderComplexPhoneSettingsShowInitialTextOfThePhoneFieldSelectionParams>
 */
export function formBuilderComplexPhoneSettingsShowInitialTextOfThePhoneFieldSelection(params) {
    return { evid: 1283, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderComplexPhoneSettingsPlaceHolderTextOfThePhoneField' event (evid: 1284)
 *
 * Event description: Complex Phone Settings - place holder text of the phone field
 *
 * @param {formBuilderComplexPhoneSettingsPlaceHolderTextOfThePhoneFieldParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {GUID} msid - msid
 * @property {string} value - value
 * @return {LogObject<formBuilderComplexPhoneSettingsPlaceHolderTextOfThePhoneFieldParams>} LogObject<formBuilderComplexPhoneSettingsPlaceHolderTextOfThePhoneFieldParams>
 */
export function formBuilderComplexPhoneSettingsPlaceHolderTextOfThePhoneField(params) {
    return { evid: 1284, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderComplexPhoneSettingsIsFieldRequired' event (evid: 1285)
 *
 * Event description: Form Builder - Complex Phone Settings - is field required
 *
 * @param {formBuilderComplexPhoneSettingsIsFieldRequiredParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {boolean} is_required - yes/no
 * @property {GUID} vsi - vsi
 * @property {string} selection - deprecated
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderComplexPhoneSettingsIsFieldRequiredParams>} LogObject<formBuilderComplexPhoneSettingsIsFieldRequiredParams>
 */
export function formBuilderComplexPhoneSettingsIsFieldRequired(params) {
    return { evid: 1285, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderComplexPhoneSettingsCountryCodeEnterFieldTitle' event (evid: 1286)
 *
 * Event description: Form Builder - Complex Phone Settings - country code - enter field title
 *
 * @param {formBuilderComplexPhoneSettingsCountryCodeEnterFieldTitleParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {GUID} msid - msid
 * @property {string} value - entered name
 * @return {LogObject<formBuilderComplexPhoneSettingsCountryCodeEnterFieldTitleParams>} LogObject<formBuilderComplexPhoneSettingsCountryCodeEnterFieldTitleParams>
 */
export function formBuilderComplexPhoneSettingsCountryCodeEnterFieldTitle(params) {
    return { evid: 1286, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderComplexPhoneSettingsCountryCodeIncludeCodesFrom' event (evid: 1287)
 *
 * Event description: Form Builder - Complex Phone Settings - country code - include codes from
 *
 * @param {formBuilderComplexPhoneSettingsCountryCodeIncludeCodesFromParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} selection - 'All countries' / 'My own list'
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderComplexPhoneSettingsCountryCodeIncludeCodesFromParams>} LogObject<formBuilderComplexPhoneSettingsCountryCodeIncludeCodesFromParams>
 */
export function formBuilderComplexPhoneSettingsCountryCodeIncludeCodesFrom(params) {
    return { evid: 1287, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderComplexPhoneSettingsCountryCodeShowInitialTextSelection' event (evid: 1289)
 *
 * Event description: Form Builder - Complex Phone Settings - country code  - show initial text - selection
 *
 * @param {formBuilderComplexPhoneSettingsCountryCodeShowInitialTextSelectionParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} selection - 'None'/'Placeholder text'/'Select from code list'
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderComplexPhoneSettingsCountryCodeShowInitialTextSelectionParams>} LogObject<formBuilderComplexPhoneSettingsCountryCodeShowInitialTextSelectionParams>
 */
export function formBuilderComplexPhoneSettingsCountryCodeShowInitialTextSelection(params) {
    return { evid: 1289, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'myAccountSelectSiteFromSiteListPopup' event (evid: 129)
 *
 * Event description: multi selection 'Move to Folder' button (mapped to 2/129)
 *
 * @param {myAccountSelectSiteFromSiteListPopupParams} params - The parameters for this event
 * @property {GUID} site_id - site_id
 * @property {string} view_type - view_type
 * @property {string} sub_view - grid/list-view
 * @property {number} num_selected_sites - number of sites selected
 * @property {string} origin - origin
 * @property {string} place - place
 * @property {string} platform - platform
 * @property {string} hosting - MA
 * @property {GUID} msid - msid
 * @property {string} view - my-sites
 * @return {LogObject<myAccountSelectSiteFromSiteListPopupParams>} LogObject<myAccountSelectSiteFromSiteListPopupParams>
 */
export function myAccountSelectSiteFromSiteListPopup(params) {
    return { evid: 129, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderComplexPhoneSettingsCountryCodeShowInitialTextValue' event (evid: 1290)
 *
 * Event description: Form Builder - Complex Phone Settings - country code  - show initial text - value
 *
 * @param {formBuilderComplexPhoneSettingsCountryCodeShowInitialTextValueParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} selection - 'None'/'Placeholder text'/'Select from code list'
 * @property {GUID} msid - msid
 * @property {string} value - Placeholder text
 * @return {LogObject<formBuilderComplexPhoneSettingsCountryCodeShowInitialTextValueParams>} LogObject<formBuilderComplexPhoneSettingsCountryCodeShowInitialTextValueParams>
 */
export function formBuilderComplexPhoneSettingsCountryCodeShowInitialTextValue(params) {
    return { evid: 1290, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderComplexPhoneSettingsSelectNumberFormat' event (evid: 1291)
 *
 * Event description: Form Builder - Complex Phone Settings - select number format
 *
 * @param {formBuilderComplexPhoneSettingsSelectNumberFormatParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} selection - 'Unformatted','Standard','Custom','Advanced (Regex)'
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderComplexPhoneSettingsSelectNumberFormatParams>} LogObject<formBuilderComplexPhoneSettingsSelectNumberFormatParams>
 */
export function formBuilderComplexPhoneSettingsSelectNumberFormat(params) {
    return { evid: 1291, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderComplexPhoneSettingsEnteredNumberFormat' event (evid: 1292)
 *
 * Event description: Form Builder - Complex Phone Settings - entered number format
 *
 * @param {formBuilderComplexPhoneSettingsEnteredNumberFormatParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} selection - 'Unformatted','Standard','Custom','Advanced (Regex)'
 * @property {GUID} msid - msid
 * @property {string} value - format value entered
 * @return {LogObject<formBuilderComplexPhoneSettingsEnteredNumberFormatParams>} LogObject<formBuilderComplexPhoneSettingsEnteredNumberFormatParams>
 */
export function formBuilderComplexPhoneSettingsEnteredNumberFormat(params) {
    return { evid: 1292, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderComplexPhoneSettingsCountryCodeClickOnManageCodeList' event (evid: 1295)
 *
 * Event description: Form Builder - Complex Phone Settings - country code -  click on Manage code list
 *
 * @param {formBuilderComplexPhoneSettingsCountryCodeClickOnManageCodeListParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderComplexPhoneSettingsCountryCodeClickOnManageCodeListParams>} LogObject<formBuilderComplexPhoneSettingsCountryCodeClickOnManageCodeListParams>
 */
export function formBuilderComplexPhoneSettingsCountryCodeClickOnManageCodeList(params) {
    return { evid: 1295, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderComplexPhoneEditFieldClick' event (evid: 1299)
 *
 * Event description: Complex Phone -  Edit field - click
 *
 * @param {formBuilderComplexPhoneEditFieldClickParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI/ Editor
 * @property {string} field_type - 'main field','country code','phone'
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} template - template name
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderComplexPhoneEditFieldClickParams>} LogObject<formBuilderComplexPhoneEditFieldClickParams>
 */
export function formBuilderComplexPhoneEditFieldClick(params) {
    return { evid: 1299, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardSearch' event (evid: 13)
 *
 * Event description: dashboard > search.
 *
 * @param {dashboardSearchParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {number} no_of_html_sites - number of html sites
 * @property {string} text - deprecated
 * @property {number} no_of_folders - number of folders
 * @property {string} place - where the search took place: site-home, my-sites
 * @property {number} no_of_sites - deprecated
 * @property {string} platform - platform
 * @property {GUID} msid - deprecated
 * @return {LogObject<dashboardSearchParams>} LogObject<dashboardSearchParams>
 */
export function dashboardSearch(params) {
    return { evid: 13, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'foldersClickOnFolder' event (evid: 130)
 *
 * Event description: click on the folder from my-sites and see it's content
 *
 * @param {foldersClickOnFolderParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} sub_view - list-view/grid
 * @property {string} platform - platform
 * @property {string} hosting - MA
 * @property {GUID} msid - --
 * @property {string} folder_name - the name of the folder
 * @property {string} view - my-sites
 * @return {LogObject<foldersClickOnFolderParams>} LogObject<foldersClickOnFolderParams>
 */
export function foldersClickOnFolder(params) {
    return { evid: 130, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'crmHomeScrollDown' event (evid: 1300)
 *
 * Event description: CRM Home - scroll down
 *
 * @param {crmHomeScrollDownParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<crmHomeScrollDownParams>} LogObject<crmHomeScrollDownParams>
 */
export function crmHomeScrollDown(params) {
    return { evid: 1300, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'financialServicesSettingsChangeTab' event (evid: 1301)
 *
 * Event description: Financial Services Settings - Change Tab
 *
 * @param {financialServicesSettingsChangeTabParams} params - The parameters for this event
 * @property {string} tabTo - tabTo
 * @property {string} view_type - view_type
 * @property {string} tabFrom - tabFrom
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<financialServicesSettingsChangeTabParams>} LogObject<financialServicesSettingsChangeTabParams>
 */
export function financialServicesSettingsChangeTab(params) {
    return { evid: 1301, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'financialServicesSettingsInvoicesClickCard' event (evid: 1302)
 *
 * Event description: Financial Services Settings - invoices - click card
 *
 * @param {financialServicesSettingsInvoicesClickCardParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} card - which card was clicked
 * @property {GUID} msid - msid
 * @return {LogObject<financialServicesSettingsInvoicesClickCardParams>} LogObject<financialServicesSettingsInvoicesClickCardParams>
 */
export function financialServicesSettingsInvoicesClickCard(params) {
    return { evid: 1302, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'financialServicesSettingsInvoicesEditNumbering' event (evid: 1303)
 *
 * Event description: Financial Services Settings - invoices - edit numbering
 *
 * @param {financialServicesSettingsInvoicesEditNumberingParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<financialServicesSettingsInvoicesEditNumberingParams>} LogObject<financialServicesSettingsInvoicesEditNumberingParams>
 */
export function financialServicesSettingsInvoicesEditNumbering(params) {
    return { evid: 1303, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'financialServicesSettingsInvoicesEditLogo' event (evid: 1304)
 *
 * Event description: Financial Services Settings - invoices - edit logo
 *
 * @param {financialServicesSettingsInvoicesEditLogoParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<financialServicesSettingsInvoicesEditLogoParams>} LogObject<financialServicesSettingsInvoicesEditLogoParams>
 */
export function financialServicesSettingsInvoicesEditLogo(params) {
    return { evid: 1304, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'financialServicesSettingsInvoicesBusinessInfoEditThem' event (evid: 1305)
 *
 * Event description: Financial Services Settings - invoices - business info - edit them
 *
 * @param {financialServicesSettingsInvoicesBusinessInfoEditThemParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<financialServicesSettingsInvoicesBusinessInfoEditThemParams>} LogObject<financialServicesSettingsInvoicesBusinessInfoEditThemParams>
 */
export function financialServicesSettingsInvoicesBusinessInfoEditThem(params) {
    return { evid: 1305, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'financialServicesSettingsInvoicesBusinessInfoEditField' event (evid: 1306)
 *
 * Event description: Financial Services Settings - invoices - business info - edit field
 *
 * @param {financialServicesSettingsInvoicesBusinessInfoEditFieldParams} params - The parameters for this event
 * @property {string} field - field
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<financialServicesSettingsInvoicesBusinessInfoEditFieldParams>} LogObject<financialServicesSettingsInvoicesBusinessInfoEditFieldParams>
 */
export function financialServicesSettingsInvoicesBusinessInfoEditField(params) {
    return { evid: 1306, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'financialServicesSettingsInvoicesDefaultsNotesEditNotes' event (evid: 1307)
 *
 * Event description: Financial Services Settings - invoices - defaults notes - edit notes
 *
 * @param {financialServicesSettingsInvoicesDefaultsNotesEditNotesParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<financialServicesSettingsInvoicesDefaultsNotesEditNotesParams>} LogObject<financialServicesSettingsInvoicesDefaultsNotesEditNotesParams>
 */
export function financialServicesSettingsInvoicesDefaultsNotesEditNotes(params) {
    return { evid: 1307, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'financialServicesSettingsInvoicesDefaultsNotesLegalTerms' event (evid: 1308)
 *
 * Event description: Financial Services Settings - invoices - defaults notes - legal terms
 *
 * @param {financialServicesSettingsInvoicesDefaultsNotesLegalTermsParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<financialServicesSettingsInvoicesDefaultsNotesLegalTermsParams>} LogObject<financialServicesSettingsInvoicesDefaultsNotesLegalTermsParams>
 */
export function financialServicesSettingsInvoicesDefaultsNotesLegalTerms(params) {
    return { evid: 1308, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'financialServicesSettingsInvoicesDefaultsNotesPreviewInvoice' event (evid: 1309)
 *
 * Event description: Financial Services Settings - invoices - defaults notes - preview invoice
 *
 * @param {financialServicesSettingsInvoicesDefaultsNotesPreviewInvoiceParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<financialServicesSettingsInvoicesDefaultsNotesPreviewInvoiceParams>} LogObject<financialServicesSettingsInvoicesDefaultsNotesPreviewInvoiceParams>
 */
export function financialServicesSettingsInvoicesDefaultsNotesPreviewInvoice(params) {
    return { evid: 1309, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'ascendPpPageView' event (evid: 131)
 *
 * Event description: User view Ascend PP
 *
 * @param {ascendPpPageViewParams} params - The parameters for this event
 * @property {string} referralInfo - button name open PP
 * @property {string} view_type - view_type
 * @property {string} origin - product name open PP
 * @property {GUID} app_id - app_id
 * @property {number} num_of_packages - num_of_packages presented in the PP
 * @property {string} platform - native or web
 * @return {LogObject<ascendPpPageViewParams>} LogObject<ascendPpPageViewParams>
 */
export function ascendPpPageView(params) {
    return { evid: 131, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'financialServicesSettingsPriceQuotesBusinessDetailsSiteSettings' event (evid: 1310)
 *
 * Event description: Financial Services Settings - Price Quotes - business details - site settings
 *
 * @param {financialServicesSettingsPriceQuotesBusinessDetailsSiteSettingsParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<financialServicesSettingsPriceQuotesBusinessDetailsSiteSettingsParams>} LogObject<financialServicesSettingsPriceQuotesBusinessDetailsSiteSettingsParams>
 */
export function financialServicesSettingsPriceQuotesBusinessDetailsSiteSettings(params) {
    return { evid: 1310, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'financialServicesSettingsPriceQuotesBusinessDetailsGoToSiteSettings' event (evid: 1311)
 *
 * Event description: Financial Services Settings - Price Quotes - business details - go to site settings
 *
 * @param {financialServicesSettingsPriceQuotesBusinessDetailsGoToSiteSettingsParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<financialServicesSettingsPriceQuotesBusinessDetailsGoToSiteSettingsParams>} LogObject<financialServicesSettingsPriceQuotesBusinessDetailsGoToSiteSettingsParams>
 */
export function financialServicesSettingsPriceQuotesBusinessDetailsGoToSiteSettings(params) {
    return { evid: 1311, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'financialServicesSettingsPriceQuotesEditNumbering' event (evid: 1312)
 *
 * Event description: Financial Services Settings - Price Quotes - edit numbering
 *
 * @param {financialServicesSettingsPriceQuotesEditNumberingParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<financialServicesSettingsPriceQuotesEditNumberingParams>} LogObject<financialServicesSettingsPriceQuotesEditNumberingParams>
 */
export function financialServicesSettingsPriceQuotesEditNumbering(params) {
    return { evid: 1312, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'financialServicesSettingsInvoicesSettingsClick' event (evid: 1313)
 *
 * Event description: Financial Services Settings - Invoices - Settings click
 *
 * @param {financialServicesSettingsInvoicesSettingsClickParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} origin - holds the origin of click
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<financialServicesSettingsInvoicesSettingsClickParams>} LogObject<financialServicesSettingsInvoicesSettingsClickParams>
 */
export function financialServicesSettingsInvoicesSettingsClick(params) {
    return { evid: 1313, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'crmHomeGeneralVideo' event (evid: 1314)
 *
 * Event description: CRM Home - General Video
 *
 * @param {crmHomeGeneralVideoParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} origin - origin of the video
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<crmHomeGeneralVideoParams>} LogObject<crmHomeGeneralVideoParams>
 */
export function crmHomeGeneralVideo(params) {
    return { evid: 1314, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'invoicesItemsListChooseAProduct' event (evid: 1315)
 *
 * Event description: Invoices - Items List - choose a product
 *
 * @param {invoicesItemsListChooseAProductParams} params - The parameters for this event
 * @property {boolean} ifVariantModal - For subscriptions, the item selection is not from dropdown, it’s from the modal
 * @property {string} view_type - view_type
 * @property {GUID} appDefId - appDefId
 * @property {string} invoiceType - ’recurringAutoCharge’/ 'recurring'/ 'one time'
 * @property {string} origin - invoice/ invoice and order
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<invoicesItemsListChooseAProductParams>} LogObject<invoicesItemsListChooseAProductParams>
 */
export function invoicesItemsListChooseAProduct(params) {
    return { evid: 1315, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'invoicesItemsListAddNewProduct' event (evid: 1316)
 *
 * Event description: Invoices - Items List - add new product
 *
 * @param {invoicesItemsListAddNewProductParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<invoicesItemsListAddNewProductParams>} LogObject<invoicesItemsListAddNewProductParams>
 */
export function invoicesItemsListAddNewProduct(params) {
    return { evid: 1316, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'invoicesItemsListLinkInTooltipProducts' event (evid: 1317)
 *
 * Event description: Invoices - Items List - link in tooltip products
 *
 * @param {invoicesItemsListLinkInTooltipProductsParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {GUID} appDefId - appDefId
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<invoicesItemsListLinkInTooltipProductsParams>} LogObject<invoicesItemsListLinkInTooltipProductsParams>
 */
export function invoicesItemsListLinkInTooltipProducts(params) {
    return { evid: 1317, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'ascendPpClickOnShowMoreLess' event (evid: 132)
 *
 * Event description: User click on show more/less in Ascend PP
 *
 * @param {ascendPpClickOnShowMoreLessParams} params - The parameters for this event
 * @property {string} referralInfo - button name open PP
 * @property {string} view_type - view_type
 * @property {string} ascend_product - CRM / Promote product  - click show more
 * @property {string} origin - product name open PP
 * @property {string} productName - product name of show more/less
 * @property {string} platform - platform
 * @property {string} action - more/less
 * @return {LogObject<ascendPpClickOnShowMoreLessParams>} LogObject<ascendPpClickOnShowMoreLessParams>
 */
export function ascendPpClickOnShowMoreLess(params) {
    return { evid: 132, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'invoicesWidgetMoreAction' event (evid: 1320)
 *
 * Event description: Invoices - widget - more action
 *
 * @param {invoicesWidgetMoreActionParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {GUID} invoiceId - invoice id
 * @property {GUID} contactId - contact id
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<invoicesWidgetMoreActionParams>} LogObject<invoicesWidgetMoreActionParams>
 */
export function invoicesWidgetMoreAction(params) {
    return { evid: 1320, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'invoicesWidgetMoreActionChooseAnAction' event (evid: 1321)
 *
 * Event description: Invoices - widget - more action - choose an action
 *
 * @param {invoicesWidgetMoreActionChooseAnActionParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {GUID} invoiceId - invoice id
 * @property {string} origin - ‘crm home widget/ ‘os-dashboard’
 * @property {GUID} contactId - contact id
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @property {string} action - action name
 * @return {LogObject<invoicesWidgetMoreActionChooseAnActionParams>} LogObject<invoicesWidgetMoreActionChooseAnActionParams>
 */
export function invoicesWidgetMoreActionChooseAnAction(params) {
    return { evid: 1321, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'invoicesWidgetResendViaEmail' event (evid: 1322)
 *
 * Event description: Invoices - widget - resend via email
 *
 * @param {invoicesWidgetResendViaEmailParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {GUID} invoiceId - invoice id
 * @property {GUID} contactId - contact id
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<invoicesWidgetResendViaEmailParams>} LogObject<invoicesWidgetResendViaEmailParams>
 */
export function invoicesWidgetResendViaEmail(params) {
    return { evid: 1322, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'invoicesWidgetChangeTab' event (evid: 1323)
 *
 * Event description: Invoices - widget - Change tab
 *
 * @param {invoicesWidgetChangeTabParams} params - The parameters for this event
 * @property {string} tabTo - tab to
 * @property {string} view_type - view_type
 * @property {string} tabFrom - tab from
 * @property {string} origin - ‘crm home widget/ ‘os-dashboard’
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<invoicesWidgetChangeTabParams>} LogObject<invoicesWidgetChangeTabParams>
 */
export function invoicesWidgetChangeTab(params) {
    return { evid: 1323, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'invoicesWidgetCreateNew' event (evid: 1324)
 *
 * Event description: Invoices - widget - Create New
 *
 * @param {invoicesWidgetCreateNewParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} origin - ‘crm home widget/ ‘os-dashboard’
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<invoicesWidgetCreateNewParams>} LogObject<invoicesWidgetCreateNewParams>
 */
export function invoicesWidgetCreateNew(params) {
    return { evid: 1324, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'invoicesWidgetPreviewInvoice' event (evid: 1325)
 *
 * Event description: Invoices - widget - Create New
 *
 * @param {invoicesWidgetPreviewInvoiceParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {GUID} invoiceId - invoice Id
 * @property {string} origin - ‘crm home widget/ ‘os-dashboard'
 * @property {GUID} contactId - contact id
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<invoicesWidgetPreviewInvoiceParams>} LogObject<invoicesWidgetPreviewInvoiceParams>
 */
export function invoicesWidgetPreviewInvoice(params) {
    return { evid: 1325, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'invoicesWidgetSeeAllInvoices' event (evid: 1326)
 *
 * Event description: Invoices - widget - see all invoices
 *
 * @param {invoicesWidgetSeeAllInvoicesParams} params - The parameters for this event
 * @property {GUID} externalId - An external id of an entity, relevant to the invoiceSource application
 * @property {string} view_type - view_type
 * @property {GUID} appDefId - appDefId of the source
 * @property {string} origin - ‘invoice preview’, ‘crm home widget/ ‘os-dashboard)
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<invoicesWidgetSeeAllInvoicesParams>} LogObject<invoicesWidgetSeeAllInvoicesParams>
 */
export function invoicesWidgetSeeAllInvoices(params) {
    return { evid: 1326, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'invoicesWidgetReportsViewReport' event (evid: 1327)
 *
 * Event description: Invoices - widget - see all invoices
 *
 * @param {invoicesWidgetReportsViewReportParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} origin - ‘crm home widget/ ‘os-dashboard’
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<invoicesWidgetReportsViewReportParams>} LogObject<invoicesWidgetReportsViewReportParams>
 */
export function invoicesWidgetReportsViewReport(params) {
    return { evid: 1327, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'invoicesWidgetReportsTimePicker' event (evid: 1328)
 *
 * Event description: Invoices - widget - see all invoices
 *
 * @param {invoicesWidgetReportsTimePickerParams} params - The parameters for this event
 * @property {string} time_frame - time picker
 * @property {string} view_type - view_type
 * @property {string} origin - ‘crm home widget/ ‘os-dashboard’
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<invoicesWidgetReportsTimePickerParams>} LogObject<invoicesWidgetReportsTimePickerParams>
 */
export function invoicesWidgetReportsTimePicker(params) {
    return { evid: 1328, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'invoicesEditModesEditInvoice' event (evid: 1329)
 *
 * Event description: Invoices - edit invoice
 *
 * @param {invoicesEditModesEditInvoiceParams} params - The parameters for this event
 * @property {boolean} ifOrderExist - if order exist
 * @property {boolean} hasViewedInvoice - if the uou seen the invoice
 * @property {string} view_type - view_type
 * @property {string} origin - origin of the invoice
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @property {string} invoiceStatus - status of the invoice
 * @return {LogObject<invoicesEditModesEditInvoiceParams>} LogObject<invoicesEditModesEditInvoiceParams>
 */
export function invoicesEditModesEditInvoice(params) {
    return { evid: 1329, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'ascendPpScrollToEnd' event (evid: 133)
 *
 * Event description: User scroll to end of table
 *
 * @param {ascendPpScrollToEndParams} params - The parameters for this event
 * @property {number} timeInPage - in milisec
 * @property {string} referralInfo - button name open PP
 * @property {string} view_type - view_type
 * @property {string} origin - product name open PP
 * @property {string} platform - platform
 * @return {LogObject<ascendPpScrollToEndParams>} LogObject<ascendPpScrollToEndParams>
 */
export function ascendPpScrollToEnd(params) {
    return { evid: 133, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'invoicesEditModesEditCustomerInfoModalChoose' event (evid: 1330)
 *
 * Event description: Invoices - edit modes - edit customer info modal
 *
 * @param {invoicesEditModesEditCustomerInfoModalChooseParams} params - The parameters for this event
 * @property {string} option - option chosen - cancel or proceed
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @property {string} invoiceStatus - which status was the invoice
 * @return {LogObject<invoicesEditModesEditCustomerInfoModalChooseParams>} LogObject<invoicesEditModesEditCustomerInfoModalChooseParams>
 */
export function invoicesEditModesEditCustomerInfoModalChoose(params) {
    return { evid: 1330, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'invoicesEditModesNegativePriceToast' event (evid: 1331)
 *
 * Event description: Invoices - edit modes - negative price toast
 *
 * @param {invoicesEditModesNegativePriceToastParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @property {string} invoiceStatus - if no status then create
 * @return {LogObject<invoicesEditModesNegativePriceToastParams>} LogObject<invoicesEditModesNegativePriceToastParams>
 */
export function invoicesEditModesNegativePriceToast(params) {
    return { evid: 1331, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'crmDiscoverCrmTools' event (evid: 1333)
 *
 * Event description: CRM - Discover CRM Tools
 *
 * @param {crmDiscoverCrmToolsParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} pageView - which page clicked this link
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<crmDiscoverCrmToolsParams>} LogObject<crmDiscoverCrmToolsParams>
 */
export function crmDiscoverCrmTools(params) {
    return { evid: 1333, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderComplexPhoneLayoutsDesignSelected' event (evid: 1334)
 *
 * Event description: Complex Phone - Layouts - Design selected
 *
 * @param {formBuilderComplexPhoneLayoutsDesignSelectedParams} params - The parameters for this event
 * @property {string} selected_design - selected_design
 * @property {string} field - field
 * @property {string} builderOrigin - ADI/ Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} template - template name
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderComplexPhoneLayoutsDesignSelectedParams>} LogObject<formBuilderComplexPhoneLayoutsDesignSelectedParams>
 */
export function formBuilderComplexPhoneLayoutsDesignSelected(params) {
    return { evid: 1334, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderComplexAddressShowTheseSubfields' event (evid: 1337)
 *
 * Event description: Form Builder - Complex address - Show these subfields
 *
 * @param {formBuilderComplexAddressShowTheseSubfieldsParams} params - The parameters for this event
 * @property {GUID} visitor_id - visitor_id
 * @property {string} button_name - name of button
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} template - template name
 * @property {GUID} msid - msid
 * @property {boolean} isOn - is it on true if off false
 * @return {LogObject<formBuilderComplexAddressShowTheseSubfieldsParams>} LogObject<formBuilderComplexAddressShowTheseSubfieldsParams>
 */
export function formBuilderComplexAddressShowTheseSubfields(params) {
    return { evid: 1337, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderComplexAddressIncludeCountriesFrom' event (evid: 1338)
 *
 * Event description: Form Builder - Complex address - include countries from
 *
 * @param {formBuilderComplexAddressIncludeCountriesFromParams} params - The parameters for this event
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} selection - which selection was made
 * @property {string} template - template name
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderComplexAddressIncludeCountriesFromParams>} LogObject<formBuilderComplexAddressIncludeCountriesFromParams>
 */
export function formBuilderComplexAddressIncludeCountriesFrom(params) {
    return { evid: 1338, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderComplexAddressShowSubfieldTitles' event (evid: 1339)
 *
 * Event description: Form Builder - Complex address - include countries from
 *
 * @param {formBuilderComplexAddressShowSubfieldTitlesParams} params - The parameters for this event
 * @property {boolean} toggle - true if on false if off
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} template - template name
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderComplexAddressShowSubfieldTitlesParams>} LogObject<formBuilderComplexAddressShowSubfieldTitlesParams>
 */
export function formBuilderComplexAddressShowSubfieldTitles(params) {
    return { evid: 1339, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'ascendPpClickOnPackageInPp' event (evid: 134)
 *
 * Event description: User click on select in pp
 *
 * @param {ascendPpClickOnPackageInPpParams} params - The parameters for this event
 * @property {boolean} isChecked - is most popular
 * @property {number} timeInPage - in milisec
 * @property {string} referralInfo - button name open PP
 * @property {string} buttonType - regular/hover/swipe_reg/swipe_hover
 * @property {string} view_type - view_type
 * @property {string} package_name - package name
 * @property {string} origin - product name open PP
 * @property {GUID} packageId - package id
 * @property {string} platform - platform
 * @return {LogObject<ascendPpClickOnPackageInPpParams>} LogObject<ascendPpClickOnPackageInPpParams>
 */
export function ascendPpClickOnPackageInPp(params) {
    return { evid: 134, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderComplexAddressSubfieldTitles' event (evid: 1340)
 *
 * Event description: Form Builder - Complex address - subfield titles
 *
 * @param {formBuilderComplexAddressSubfieldTitlesParams} params - The parameters for this event
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} template - template name
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderComplexAddressSubfieldTitlesParams>} LogObject<formBuilderComplexAddressSubfieldTitlesParams>
 */
export function formBuilderComplexAddressSubfieldTitles(params) {
    return { evid: 1340, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderComplexAddressSubfieldPlaceholder' event (evid: 1341)
 *
 * Event description: Form Builder - Complex address - subfield placeholder
 *
 * @param {formBuilderComplexAddressSubfieldPlaceholderParams} params - The parameters for this event
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} template - template name
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderComplexAddressSubfieldPlaceholderParams>} LogObject<formBuilderComplexAddressSubfieldPlaceholderParams>
 */
export function formBuilderComplexAddressSubfieldPlaceholder(params) {
    return { evid: 1341, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderComplexAddressGeneralSettingRequired' event (evid: 1342)
 *
 * Event description: Form Builder - Complex address - general setting - required
 *
 * @param {formBuilderComplexAddressGeneralSettingRequiredParams} params - The parameters for this event
 * @property {GUID} visitor_id - visitor_id
 * @property {boolean} checkbox - true if on false if off
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} template - template name
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderComplexAddressGeneralSettingRequiredParams>} LogObject<formBuilderComplexAddressGeneralSettingRequiredParams>
 */
export function formBuilderComplexAddressGeneralSettingRequired(params) {
    return { evid: 1342, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderComplexAddressSubfieldTitlesEnterText' event (evid: 1343)
 *
 * Event description: Form Builder - Complex address - subfield titles - enter text
 *
 * @param {formBuilderComplexAddressSubfieldTitlesEnterTextParams} params - The parameters for this event
 * @property {string} field - which field it was
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} template - template name
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderComplexAddressSubfieldTitlesEnterTextParams>} LogObject<formBuilderComplexAddressSubfieldTitlesEnterTextParams>
 */
export function formBuilderComplexAddressSubfieldTitlesEnterText(params) {
    return { evid: 1343, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderComplexAddressSubfieldPlaceholdersEnterText' event (evid: 1344)
 *
 * Event description: Form Builder - Complex address - subfield placeholders - enter text
 *
 * @param {formBuilderComplexAddressSubfieldPlaceholdersEnterTextParams} params - The parameters for this event
 * @property {string} field - which field it was
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} template - template name
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderComplexAddressSubfieldPlaceholdersEnterTextParams>} LogObject<formBuilderComplexAddressSubfieldPlaceholdersEnterTextParams>
 */
export function formBuilderComplexAddressSubfieldPlaceholdersEnterText(params) {
    return { evid: 1344, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderComplexAddressSubfieldPlaceholdersDefaultCountryChoose' event (evid: 1345)
 *
 * Event description: Form Builder - Complex address - subfield placeholders - enter text
 *
 * @param {formBuilderComplexAddressSubfieldPlaceholdersDefaultCountryChooseParams} params - The parameters for this event
 * @property {GUID} visitor_id - visitor_id
 * @property {string} country - which country was choosen
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} template - template name
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderComplexAddressSubfieldPlaceholdersDefaultCountryChooseParams>} LogObject<formBuilderComplexAddressSubfieldPlaceholdersDefaultCountryChooseParams>
 */
export function formBuilderComplexAddressSubfieldPlaceholdersDefaultCountryChoose(params) {
    return { evid: 1345, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderComplexAddressManageCountriesList' event (evid: 1346)
 *
 * Event description: Form Builder - Complex address - manage countries list
 *
 * @param {formBuilderComplexAddressManageCountriesListParams} params - The parameters for this event
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} template - template name
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderComplexAddressManageCountriesListParams>} LogObject<formBuilderComplexAddressManageCountriesListParams>
 */
export function formBuilderComplexAddressManageCountriesList(params) {
    return { evid: 1346, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderComplexAddressManageCountriesListFinish' event (evid: 1347)
 *
 * Event description: Form Builder - Complex address - manage countries list - finish
 *
 * @param {formBuilderComplexAddressManageCountriesListFinishParams} params - The parameters for this event
 * @property {string} option - which option was choosen
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} template - template name
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderComplexAddressManageCountriesListFinishParams>} LogObject<formBuilderComplexAddressManageCountriesListFinishParams>
 */
export function formBuilderComplexAddressManageCountriesListFinish(params) {
    return { evid: 1347, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderComplexAddressSelectRequiredSubfieldOpen' event (evid: 1348)
 *
 * Event description: Form Builder - Complex address - select required subfield
 *
 * @param {formBuilderComplexAddressSelectRequiredSubfieldOpenParams} params - The parameters for this event
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} template - template name
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderComplexAddressSelectRequiredSubfieldOpenParams>} LogObject<formBuilderComplexAddressSelectRequiredSubfieldOpenParams>
 */
export function formBuilderComplexAddressSelectRequiredSubfieldOpen(params) {
    return { evid: 1348, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderComplexAddressSelectRequiredSubfieldChoose' event (evid: 1349)
 *
 * Event description: Form Builder - Complex address - select required subfield
 *
 * @param {formBuilderComplexAddressSelectRequiredSubfieldChooseParams} params - The parameters for this event
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} template - template name
 * @property {string} requiredFields - subset of required fields
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderComplexAddressSelectRequiredSubfieldChooseParams>} LogObject<formBuilderComplexAddressSelectRequiredSubfieldChooseParams>
 */
export function formBuilderComplexAddressSelectRequiredSubfieldChoose(params) {
    return { evid: 1349, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'ascendPpCyclePageView' event (evid: 135)
 *
 * Event description: User view Ascend cycle page
 *
 * @param {ascendPpCyclePageViewParams} params - The parameters for this event
 * @property {string} referralInfo - button name open PP
 * @property {string} view_type - view_type
 * @property {string} package_name - package name
 * @property {string} origin - product name open PP
 * @property {GUID} app_id - app_id
 * @property {GUID} packageId - package id
 * @property {string} platform - platform
 * @return {LogObject<ascendPpCyclePageViewParams>} LogObject<ascendPpCyclePageViewParams>
 */
export function ascendPpCyclePageView(params) {
    return { evid: 135, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderAutocompleteAddressFieldShowFieldTitleToggle' event (evid: 1353)
 *
 * Event description: Form Builder - Complex Phone - Layouts - click on Customized Design
 *
 * @param {formBuilderAutocompleteAddressFieldShowFieldTitleToggleParams} params - The parameters for this event
 * @property {boolean} toggle - true if on
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} template - template name
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderAutocompleteAddressFieldShowFieldTitleToggleParams>} LogObject<formBuilderAutocompleteAddressFieldShowFieldTitleToggleParams>
 */
export function formBuilderAutocompleteAddressFieldShowFieldTitleToggle(params) {
    return { evid: 1353, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderAutocompleteAddressFieldFieldTitle' event (evid: 1354)
 *
 * Event description: Form Builder - Autocomplete Address Field - field title
 *
 * @param {formBuilderAutocompleteAddressFieldFieldTitleParams} params - The parameters for this event
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} template - template name
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderAutocompleteAddressFieldFieldTitleParams>} LogObject<formBuilderAutocompleteAddressFieldFieldTitleParams>
 */
export function formBuilderAutocompleteAddressFieldFieldTitle(params) {
    return { evid: 1354, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderAutocompleteAddressFieldPlaceholderText' event (evid: 1356)
 *
 * Event description: Form Builder - Autocomplete Address Field - placeholder text
 *
 * @param {formBuilderAutocompleteAddressFieldPlaceholderTextParams} params - The parameters for this event
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} template - template name
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderAutocompleteAddressFieldPlaceholderTextParams>} LogObject<formBuilderAutocompleteAddressFieldPlaceholderTextParams>
 */
export function formBuilderAutocompleteAddressFieldPlaceholderText(params) {
    return { evid: 1356, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderAutocompleteAddressFieldRequired' event (evid: 1357)
 *
 * Event description: Form Builder - Autocomplete Address Field - required
 *
 * @param {formBuilderAutocompleteAddressFieldRequiredParams} params - The parameters for this event
 * @property {string} option - which selection was made
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} template - template name
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderAutocompleteAddressFieldRequiredParams>} LogObject<formBuilderAutocompleteAddressFieldRequiredParams>
 */
export function formBuilderAutocompleteAddressFieldRequired(params) {
    return { evid: 1357, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderAutocompleteAddressFieldCountrySearch' event (evid: 1358)
 *
 * Event description: Form Builder - Autocomplete Address Field - country search
 *
 * @param {formBuilderAutocompleteAddressFieldCountrySearchParams} params - The parameters for this event
 * @property {string} option - which selection was made
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} template - template name
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderAutocompleteAddressFieldCountrySearchParams>} LogObject<formBuilderAutocompleteAddressFieldCountrySearchParams>
 */
export function formBuilderAutocompleteAddressFieldCountrySearch(params) {
    return { evid: 1358, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderAutocompleteAddressFieldCountrySearchOption' event (evid: 1359)
 *
 * Event description: Form Builder - Autocomplete Address Field - country search
 *
 * @param {formBuilderAutocompleteAddressFieldCountrySearchOptionParams} params - The parameters for this event
 * @property {GUID} visitor_id - visitor_id
 * @property {boolean} changed - is changed
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} template - template name
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderAutocompleteAddressFieldCountrySearchOptionParams>} LogObject<formBuilderAutocompleteAddressFieldCountrySearchOptionParams>
 */
export function formBuilderAutocompleteAddressFieldCountrySearchOption(params) {
    return { evid: 1359, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'ascendPpClickOnCycleInPp' event (evid: 136)
 *
 * Event description: User click on a cycle
 *
 * @param {ascendPpClickOnCycleInPpParams} params - The parameters for this event
 * @property {string} cycle_name - cycle name
 * @property {string} referralInfo - button name open PP
 * @property {string} view_type - view_type
 * @property {string} package_name - packagename
 * @property {string} origin - product name open PP
 * @property {GUID} packageId - packageid
 * @property {string} platform - platform
 * @property {number} cycleId - cycle id
 * @return {LogObject<ascendPpClickOnCycleInPpParams>} LogObject<ascendPpClickOnCycleInPpParams>
 */
export function ascendPpClickOnCycleInPp(params) {
    return { evid: 136, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderAutocompleteAddressFieldAddressLayoutChanged' event (evid: 1360)
 *
 * Event description: Form Builder - Autocomplete Address Field - address layout changed
 *
 * @param {formBuilderAutocompleteAddressFieldAddressLayoutChangedParams} params - The parameters for this event
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} template - template name
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderAutocompleteAddressFieldAddressLayoutChangedParams>} LogObject<formBuilderAutocompleteAddressFieldAddressLayoutChangedParams>
 */
export function formBuilderAutocompleteAddressFieldAddressLayoutChanged(params) {
    return { evid: 1360, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderAutocompleteAddressFieldViewerChooseAnAddress' event (evid: 1363)
 *
 * Event description: Copy of Form Builder - Autocomplete Address Field - viewer - choose an address
 *
 * @param {formBuilderAutocompleteAddressFieldViewerChooseAnAddressParams} params - The parameters for this event
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} template - template name
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderAutocompleteAddressFieldViewerChooseAnAddressParams>} LogObject<formBuilderAutocompleteAddressFieldViewerChooseAnAddressParams>
 */
export function formBuilderAutocompleteAddressFieldViewerChooseAnAddress(params) {
    return { evid: 1363, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'ascendPpClickOnNextInCyclePage' event (evid: 137)
 *
 * Event description: User click on select in cycle page
 *
 * @param {ascendPpClickOnNextInCyclePageParams} params - The parameters for this event
 * @property {string} cycle_name - cycle name
 * @property {boolean} isChecked - is most popular
 * @property {number} timeInPage - in milisec
 * @property {string} referralInfo - button name open PP
 * @property {string} view_type - view_type
 * @property {string} package_name - package name
 * @property {string} origin - product name open PP
 * @property {number} cycle_id - cycle id
 * @property {GUID} packageId - packageid
 * @property {string} platform - platform
 * @return {LogObject<ascendPpClickOnNextInCyclePageParams>} LogObject<ascendPpClickOnNextInCyclePageParams>
 */
export function ascendPpClickOnNextInCyclePage(params) {
    return { evid: 137, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'customerNotificationsSettingsPreviewEditChooseAudience' event (evid: 1375)
 *
 * Event description: When the user chooses an audience for blog
 *
 * @param {customerNotificationsSettingsPreviewEditChooseAudienceParams} params - The parameters for this event
 * @property {string} name - the audience selection in english. f.e "site members"
 * @property {string} view_type - view_type
 * @property {GUID} rule_id - automations rule id
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @property {string} template_id - ping template id
 * @return {LogObject<customerNotificationsSettingsPreviewEditChooseAudienceParams>} LogObject<customerNotificationsSettingsPreviewEditChooseAudienceParams>
 */
export function customerNotificationsSettingsPreviewEditChooseAudience(params) {
    return { evid: 1375, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderComplexPhoneCountryCodeFieldDeleted' event (evid: 1376)
 *
 * Event description: Form Builder - Complex Phone  - country code field deleted
 *
 * @param {formBuilderComplexPhoneCountryCodeFieldDeletedParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderComplexPhoneCountryCodeFieldDeletedParams>} LogObject<formBuilderComplexPhoneCountryCodeFieldDeletedParams>
 */
export function formBuilderComplexPhoneCountryCodeFieldDeleted(params) {
    return { evid: 1376, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardSiteSelectorIsOpen' event (evid: 1377)
 *
 * Event description: When the site dropdown in the header is opened successfully (the image is loaded and there is no error)
 *
 * @param {dashboardSiteSelectorIsOpenParams} params - The parameters for this event
 * @property {string} page_view - my-sites /dashboard / account settings
 * @property {string} view_type - view_type
 * @property {string} site_list - a list with all the msids shown to the user, the first item is the first item, second item is the second msid and so on…)
 * @property {string} platform - platform
 * @property {GUID} msid - metasite id
 * @property {number} loading_time - loading_time
 * @return {LogObject<dashboardSiteSelectorIsOpenParams>} LogObject<dashboardSiteSelectorIsOpenParams>
 */
export function dashboardSiteSelectorIsOpen(params) {
    return { evid: 1377, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardSiteSelectorIsLoadedWithoutScreenshots' event (evid: 1378)
 *
 * Event description: When the site  dropdown in the header is shown and returns with zero sites
 *
 * @param {dashboardSiteSelectorIsLoadedWithoutScreenshotsParams} params - The parameters for this event
 * @property {string} page_view - my-sites /dashboard / account settings/partners-dashboard
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {number} loading_time - loading time
 * @return {LogObject<dashboardSiteSelectorIsLoadedWithoutScreenshotsParams>} LogObject<dashboardSiteSelectorIsLoadedWithoutScreenshotsParams>
 */
export function dashboardSiteSelectorIsLoadedWithoutScreenshots(params) {
    return { evid: 1378, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardSiteSelectorErrorLoading' event (evid: 1379)
 *
 * Event description: When the site  dropdown in the header list failed to load (error is presented)
 *
 * @param {dashboardSiteSelectorErrorLoadingParams} params - The parameters for this event
 * @property {boolean} is_from_search - Did the error happen when the user searched in the dropdown?
 * @property {string} page_view - my-sites /dashboard / account settings
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {GUID} msid - metasite id
 * @property {number} loading_time - from click to error
 * @return {LogObject<dashboardSiteSelectorErrorLoadingParams>} LogObject<dashboardSiteSelectorErrorLoadingParams>
 */
export function dashboardSiteSelectorErrorLoading(params) {
    return { evid: 1379, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'ascendPpPurchasePageView' event (evid: 138)
 *
 * Event description: User view Payment page
 *
 * @param {ascendPpPurchasePageViewParams} params - The parameters for this event
 * @property {string} cycle_name - cycle name
 * @property {string} referralInfo - button name open PP
 * @property {string} view_type - view_type
 * @property {string} package_name - package name
 * @property {string} origin - product name open PP
 * @property {GUID} app_id - app_id
 * @property {GUID} packageId - package id
 * @property {string} platform - platform
 * @property {number} cycleId - cycle id
 * @return {LogObject<ascendPpPurchasePageViewParams>} LogObject<ascendPpPurchasePageViewParams>
 */
export function ascendPpPurchasePageView(params) {
    return { evid: 138, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardSiteSelectorClickOnSite' event (evid: 1380)
 *
 * Event description: When the user  dropdown in the header on a site in the site selector
 *
 * @param {dashboardSiteSelectorClickOnSiteParams} params - The parameters for this event
 * @property {string} location - the location of the site in the list (0 is first, 1 is second…)
 * @property {boolean} is_from_search - is the site selection out of a search results list?
 * @property {string} page_view - my-sites /dashboard / account settings
 * @property {GUID} msid_clicked - msid_clicked
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {GUID} msid - metasite id
 * @return {LogObject<dashboardSiteSelectorClickOnSiteParams>} LogObject<dashboardSiteSelectorClickOnSiteParams>
 */
export function dashboardSiteSelectorClickOnSite(params) {
    return { evid: 1380, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardClickInSiteSelector' event (evid: 1381)
 *
 * Event description: When the user clicks on “create new site” OR “all sites” OR "Show more results" in the site  dropdown in the header
 *
 * @param {dashboardClickInSiteSelectorParams} params - The parameters for this event
 * @property {boolean} is_from_search - Did the user clicked on the cta when the dropdown shows search results?
 * @property {string} page_view - my-sites /dashboard / account settings
 * @property {string} view_type - view_type
 * @property {string} item_name - item clicked: all-sites/create-new-site /show-more-site-results
 * @property {string} platform - platform
 * @property {GUID} msid - metasite id
 * @return {LogObject<dashboardClickInSiteSelectorParams>} LogObject<dashboardClickInSiteSelectorParams>
 */
export function dashboardClickInSiteSelector(params) {
    return { evid: 1381, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderComplexAddressEditFieldClick' event (evid: 1382)
 *
 * Event description: Form Builder - Complex Address - Edit field - click
 *
 * @param {formBuilderComplexAddressEditFieldClickParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI/ Editor
 * @property {string} field_type - 'main field','country code','phone'
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} template - template name
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderComplexAddressEditFieldClickParams>} LogObject<formBuilderComplexAddressEditFieldClickParams>
 */
export function formBuilderComplexAddressEditFieldClick(params) {
    return { evid: 1382, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'crmHomeInboxViewMessages' event (evid: 1383)
 *
 * Event description: CRM Home - inbox - view messages
 *
 * @param {crmHomeInboxViewMessagesParams} params - The parameters for this event
 * @property {number} countMessages - count_messages
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<crmHomeInboxViewMessagesParams>} LogObject<crmHomeInboxViewMessagesParams>
 */
export function crmHomeInboxViewMessages(params) {
    return { evid: 1383, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'crmHomeTopCarouselClick' event (evid: 1384)
 *
 * Event description: CRM Home - Top carousel click
 *
 * @param {crmHomeTopCarouselClickParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<crmHomeTopCarouselClickParams>} LogObject<crmHomeTopCarouselClickParams>
 */
export function crmHomeTopCarouselClick(params) {
    return { evid: 1384, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'crmHomeTopCarouselMainCtaClick' event (evid: 1385)
 *
 * Event description: CRM Home - Top carousel main CTA click
 *
 * @param {crmHomeTopCarouselMainCtaClickParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @property {string} bannerName - which banner was clicked
 * @return {LogObject<crmHomeTopCarouselMainCtaClickParams>} LogObject<crmHomeTopCarouselMainCtaClickParams>
 */
export function crmHomeTopCarouselMainCtaClick(params) {
    return { evid: 1385, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'crmHomeTopCarouselLoadStart' event (evid: 1386)
 *
 * Event description: CRM Home - Top carousel main CTA click
 *
 * @param {crmHomeTopCarouselLoadStartParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<crmHomeTopCarouselLoadStartParams>} LogObject<crmHomeTopCarouselLoadStartParams>
 */
export function crmHomeTopCarouselLoadStart(params) {
    return { evid: 1386, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'crmHomeTopCarouselLoadEnd' event (evid: 1387)
 *
 * Event description: CRM Home - Top carousel main CTA click
 *
 * @param {crmHomeTopCarouselLoadEndParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {number} loadingTime - loading time in ms
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<crmHomeTopCarouselLoadEndParams>} LogObject<crmHomeTopCarouselLoadEndParams>
 */
export function crmHomeTopCarouselLoadEnd(params) {
    return { evid: 1387, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderReportOnSubmissionAsSpam' event (evid: 1389)
 *
 * Event description: user can report on form sub as spam, referral from email
 *
 * @param {formBuilderReportOnSubmissionAsSpamParams} params - The parameters for this event
 * @property {GUID} uuid - user id
 * @property {GUID} visitor_id - visitor_id
 * @property {string} button_name - report/learn more
 * @property {GUID} vsi - vsi
 * @property {string} origin - mail/web/oneapp
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderReportOnSubmissionAsSpamParams>} LogObject<formBuilderReportOnSubmissionAsSpamParams>
 */
export function formBuilderReportOnSubmissionAsSpam(params) {
    return { evid: 1389, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'ascendPpPurchasePageChangeCard' event (evid: 139)
 *
 * Event description: User click on credit card option
 *
 * @param {ascendPpPurchasePageChangeCardParams} params - The parameters for this event
 * @property {string} cycle_name - cycle name
 * @property {string} referralInfo - button name open PP
 * @property {string} view_type - view_type
 * @property {string} package_name - package name
 * @property {string} selection - saved card / another card
 * @property {string} origin - product name open PP
 * @property {GUID} app_id - app_id
 * @property {GUID} packageId - package id
 * @property {string} platform - platform
 * @property {number} cycleId - cycle id
 * @return {LogObject<ascendPpPurchasePageChangeCardParams>} LogObject<ascendPpPurchasePageChangeCardParams>
 */
export function ascendPpPurchasePageChangeCard(params) {
    return { evid: 139, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'ascendSelectCancelReason' event (evid: 1390)
 *
 * Event description: User click on cancel reason in cancelation screen
 *
 * @param {ascendSelectCancelReasonParams} params - The parameters for this event
 * @property {string} referralInfo - from where the screen was opened
 * @property {string} cancel_reason_text - cancel reason free text
 * @property {string} cancel_reason_name - cancel reason selection
 * @property {string} view_type - view_type
 * @property {string} premium - premium_id
 * @property {string} platform - native or web
 * @property {GUID} msid - msid
 * @return {LogObject<ascendSelectCancelReasonParams>} LogObject<ascendSelectCancelReasonParams>
 */
export function ascendSelectCancelReason(params) {
    return { evid: 1390, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'ascendCancelWindowApproveCancel' event (evid: 1391)
 *
 * Event description: User click on cancel plan or keep alive
 *
 * @param {ascendCancelWindowApproveCancelParams} params - The parameters for this event
 * @property {string} referralInfo - from where the screen was opened
 * @property {string} view_type - view_type
 * @property {string} selection - cancel plan / keep plan
 * @property {string} premium - premium_id
 * @property {string} platform - native or web
 * @property {GUID} msid - msid
 * @return {LogObject<ascendCancelWindowApproveCancelParams>} LogObject<ascendCancelWindowApproveCancelParams>
 */
export function ascendCancelWindowApproveCancel(params) {
    return { evid: 1391, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'ascendPpPurchasePageEnterPromo' event (evid: 140)
 *
 * Event description: User click on enter promo code or apply
 *
 * @param {ascendPpPurchasePageEnterPromoParams} params - The parameters for this event
 * @property {string} cycle_name - cycle name
 * @property {string} referralInfo - button name open PP
 * @property {string} view_type - view_type
 * @property {string} package_name - package name
 * @property {string} selection - enter click / apply
 * @property {string} origin - product name open PP
 * @property {GUID} app_id - app_id
 * @property {GUID} packageId - package id
 * @property {string} platform - platform
 * @property {number} cycleId - cycle id
 * @return {LogObject<ascendPpPurchasePageEnterPromoParams>} LogObject<ascendPpPurchasePageEnterPromoParams>
 */
export function ascendPpPurchasePageEnterPromo(params) {
    return { evid: 140, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'rolesAndPermissionsSetUpTeamClick' event (evid: 1400)
 *
 * Event description: The user clicked on "set up team" in order to create a team and add team members
 *
 * @param {rolesAndPermissionsSetUpTeamClickParams} params - The parameters for this event
 * @property {string} click_origin - partners dashboard/my sites quick view
 * @property {string} platform - platform
 * @property {string} app_id - app_id (context = app)
 * @return {LogObject<rolesAndPermissionsSetUpTeamClickParams>} LogObject<rolesAndPermissionsSetUpTeamClickParams>
 */
export function rolesAndPermissionsSetUpTeamClick(params) {
    return { evid: 1400, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'teamManagementTeammatesPageLoad' event (evid: 1401)
 *
 * Event description: Page load success for 'Roles & Permissions' (site level) or 'Team' (account level) pages, depends on the context
 *
 * @param {teamManagementTeammatesPageLoadParams} params - The parameters for this event
 * @property {string} context - account/site
 * @property {string} referral_info - where the user came to this page from
 * @property {string} origin - where the user came to this page from
 * @property {string} platform - platform
 * @property {GUID} msid - sent only for site level
 * @property {string} app_id - app_id (context = app)
 * @property {number} contributors_quota - this site quota of contributors
 * @property {number} contributors_count - Number of contributors on this site
 * @return {LogObject<teamManagementTeammatesPageLoadParams>} LogObject<teamManagementTeammatesPageLoadParams>
 */
export function teamManagementTeammatesPageLoad(params) {
    return { evid: 1401, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'teamManagementFilterByStatus' event (evid: 1402)
 *
 * Event description: User selection from the 'Status' filter in the team members list (context=account)/contributors list (context=site)
 *
 * @param {teamManagementFilterByStatusParams} params - The parameters for this event
 * @property {string} context - account/site
 * @property {string} status_selected - all/pending/expired
 * @property {string} platform - platform
 * @property {GUID} msid - sent only for site level
 * @return {LogObject<teamManagementFilterByStatusParams>} LogObject<teamManagementFilterByStatusParams>
 */
export function teamManagementFilterByStatus(params) {
    return { evid: 1402, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'teamManagementFilterByRole' event (evid: 1403)
 *
 * Event description: User selection from the 'Role' filter in the team members list (context=account) / contributors list (context=site)
 *
 * @param {teamManagementFilterByRoleParams} params - The parameters for this event
 * @property {number} num_selected - number of roles selected in current filter selection
 * @property {string} context - account/site
 * @property {string} platform - platform
 * @property {GUID} msid - sent only for site level
 * @return {LogObject<teamManagementFilterByRoleParams>} LogObject<teamManagementFilterByRoleParams>
 */
export function teamManagementFilterByRole(params) {
    return { evid: 1403, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'teamManagementViewTeamClicked' event (evid: 1404)
 *
 * Event description: A user clicks on "View Team", after clicking the 'info' icon when hovering on the "Name" column in the teammates list
 *
 * @param {teamManagementViewTeamClickedParams} params - The parameters for this event
 * @property {string} context - account/site
 * @property {string} platform - platform
 * @return {LogObject<teamManagementViewTeamClickedParams>} LogObject<teamManagementViewTeamClickedParams>
 */
export function teamManagementViewTeamClicked(params) {
    return { evid: 1404, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'teamManagementChangeRoleOpenDialog' event (evid: 1405)
 *
 * Event description: Click on the action 'change Role' for a teammate (context=account) or a contributor (context=site).  note the id of the clicked member (teammate_id) will be the account_id for a team account or user_id for an individual user.
 *
 * @param {teamManagementChangeRoleOpenDialogParams} params - The parameters for this event
 * @property {GUID} teammate_id - the user_id of the team/teammate whose role is being changed (if status is pending then invite_id)
 * @property {string} invite_status - pending/expired/accepted
 * @property {string} context - account/site
 * @property {string} current_role_ids - the current role of the teammate
 * @property {string} platform - platform
 * @property {GUID} msid - sent only for site level
 * @return {LogObject<teamManagementChangeRoleOpenDialogParams>} LogObject<teamManagementChangeRoleOpenDialogParams>
 */
export function teamManagementChangeRoleOpenDialog(params) {
    return { evid: 1405, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'teamManagementChangeRoleUpdate' event (evid: 1406)
 *
 * Event description: Click on save, to update role for a teammate (context=account) or a contributor (context=site). note the id of the clicked member (teammate_id) will be the account_id for a team account or user_id for an individual user.
 *
 * @param {teamManagementChangeRoleUpdateParams} params - The parameters for this event
 * @property {GUID} teammate_id - the user_id of the team/teammate who's role is being updated (if status is pending then invite_id)
 * @property {string} new_role_ids - the new updated role id
 * @property {string} invite_status - pending/expired/accepted
 * @property {string} context - account/site
 * @property {string} prev_role_ids - previous role_ids
 * @property {string} assignment_type - all/specific
 * @property {boolean} is_client - is this user marked as client
 * @property {number} num_sites - number of distinct sites in the updated assignment
 * @property {string} platform - platform
 * @property {GUID} msid - sent only for site level
 * @property {number} num_folders - number of distinct folders in the updated assignment
 * @return {LogObject<teamManagementChangeRoleUpdateParams>} LogObject<teamManagementChangeRoleUpdateParams>
 */
export function teamManagementChangeRoleUpdate(params) {
    return { evid: 1406, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'teamManagementRemoveTeammateOpenDialog' event (evid: 1407)
 *
 * Event description: User clicks on the action 'remove' (teammate)/'remove from team', or 'leave team' if a teammate leaves by himself (note the id of the clicked member will be the user_id)
 *
 * @param {teamManagementRemoveTeammateOpenDialogParams} params - The parameters for this event
 * @property {GUID} teammate_id - the user_id of the removed team/team member (if status is pending then invite_id)
 * @property {string} invite_status - pending/expired/accepted/leave team
 * @property {string} context - account/site
 * @property {string} role_ids - role_ids of the removed user
 * @property {string} platform - platform
 * @property {GUID} msid - sent only for site level
 * @property {string} app_id - app_id (context = app)
 * @return {LogObject<teamManagementRemoveTeammateOpenDialogParams>} LogObject<teamManagementRemoveTeammateOpenDialogParams>
 */
export function teamManagementRemoveTeammateOpenDialog(params) {
    return { evid: 1407, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'teamManagementRemoveTeammateRemoveSuccess' event (evid: 1408)
 *
 * Event description: User clicks on 'remove' or on 'leave team' (if a teammate leaves by himself), in the remove teammate window (note the id of the clicked member will be the user_id)
 *
 * @param {teamManagementRemoveTeammateRemoveSuccessParams} params - The parameters for this event
 * @property {GUID} teammate_id - the user_id of the removed team/team member (if status is pending then invite_id)
 * @property {string} invite_status - pending/expired/accepted/leave_team
 * @property {string} context - account/site
 * @property {string} role_ids - role_id of the removed user
 * @property {string} platform - platform
 * @property {GUID} msid - sent only for site level
 * @property {string} app_id - app_id (context = app)
 * @return {LogObject<teamManagementRemoveTeammateRemoveSuccessParams>} LogObject<teamManagementRemoveTeammateRemoveSuccessParams>
 */
export function teamManagementRemoveTeammateRemoveSuccess(params) {
    return { evid: 1408, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'teamManagementInvitePeopleClick' event (evid: 1409)
 *
 * Event description: User clicks on 'invite people' (account context) or 'add contributor' (site context)
 *
 * @param {teamManagementInvitePeopleClickParams} params - The parameters for this event
 * @property {string} context - account/site
 * @property {string} origin - where the user clicked on invite people - team screen/site actions/roles list
 * @property {string} platform - platform
 * @property {boolean} upgrade_required - does the user need to upgrade his plan in order to be able to invite more contributors (contributors enforcement)
 * @property {GUID} msid - sent only for site level
 * @property {string} app_id - app_id (context = app)
 * @return {LogObject<teamManagementInvitePeopleClickParams>} LogObject<teamManagementInvitePeopleClickParams>
 */
export function teamManagementInvitePeopleClick(params) {
    return { evid: 1409, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'ascendPpPurchasePageSubmitPurchase' event (evid: 141)
 *
 * Event description: User click on Submit Purchase
 *
 * @param {ascendPpPurchasePageSubmitPurchaseParams} params - The parameters for this event
 * @property {string} cycle_name - cycle name
 * @property {string} referralInfo - button name open PP
 * @property {string} view_type - view_type
 * @property {string} package_name - package name
 * @property {string} origin - product name open PP
 * @property {GUID} app_id - app_id
 * @property {GUID} packageId - package id
 * @property {string} platform - platform
 * @property {number} cycleId - cycle id
 * @return {LogObject<ascendPpPurchasePageSubmitPurchaseParams>} LogObject<ascendPpPurchasePageSubmitPurchaseParams>
 */
export function ascendPpPurchasePageSubmitPurchase(params) {
    return { evid: 141, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'teamManagementInvitePeoplePageLoad' event (evid: 1410)
 *
 * Event description: Page load success for 'invite people' (account context) or 'add contributor' (site context) pages
 *
 * @param {teamManagementInvitePeoplePageLoadParams} params - The parameters for this event
 * @property {string} context - account/site
 * @property {string} origin - where the user came to this page from
 * @property {string} platform - platform
 * @property {GUID} msid - sent only for site level
 * @property {number} contributors_quota - How many contributors can be added to the site based on the premium package quota
 * @property {number} contributors_count - How many contributors are actually active on the site
 * @property {string} app_id - app_id (context = app)
 * @property {boolean} Has_ai_assistant - Does the user has AI assistant in this page
 * @return {LogObject<teamManagementInvitePeoplePageLoadParams>} LogObject<teamManagementInvitePeoplePageLoadParams>
 */
export function teamManagementInvitePeoplePageLoad(params) {
    return { evid: 1410, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'teamManagementInvitePeopleSendInvite' event (evid: 1411)
 *
 * Event description: User clicks on 'send invite' in the add people window
 *
 * @param {teamManagementInvitePeopleSendInviteParams} params - The parameters for this event
 * @property {string} context - account/site
 * @property {number} number_of_invalid_emails - number of invalid emails (only errors for not typing correctly - exclude errors for existing emails)
 * @property {string} invite_role_ids - the role_ids that the user sends to the invitees
 * @property {string} assignment_type - all/specific
 * @property {number} number_of_existing_emails - emails that already exist in the team
 * @property {string} origin - where the modal was clicked from
 * @property {GUID} invite_id - the invite_id
 * @property {number} num_sites - the distinct number of sites in the invite (null if all)
 * @property {string} platform - platform
 * @property {GUID} msid - sent only for site level
 * @property {number} number_of_valid_emails - number of valid emails
 * @property {number} num_folders - the distinct number of folders in the invite (null if all)
 * @property {number} contributors_quota - How many contributors can be added to the site based on the premium package quota
 *
 * @property {number} contributors_count - How many contributors are actually active on the site
 * @property {string} app_id - app_id (context = app)
 * @property {boolean} Has_ai_assistant - Does the user has AI assistant on this page
 *
 * @return {LogObject<teamManagementInvitePeopleSendInviteParams>} LogObject<teamManagementInvitePeopleSendInviteParams>
 */
export function teamManagementInvitePeopleSendInvite(params) {
    return { evid: 1411, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'teamManagementInvitePeopleResendInvite' event (evid: 1412)
 *
 * Event description: User clicks on resend invite
 *
 * @param {teamManagementInvitePeopleResendInviteParams} params - The parameters for this event
 * @property {string} invite_status - pending/expired
 * @property {string} context - account/site
 * @property {string} invite_role_ids - the role_id that the user sends to the invitees
 * @property {GUID} invite_id - the invite id
 * @property {string} platform - platform
 * @property {GUID} msid - sent only for site level
 * @property {string} app_id - app_id (context = app)
 * @return {LogObject<teamManagementInvitePeopleResendInviteParams>} LogObject<teamManagementInvitePeopleResendInviteParams>
 */
export function teamManagementInvitePeopleResendInvite(params) {
    return { evid: 1412, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'teamManagementInvitePeopleGetInviteLink' event (evid: 1413)
 *
 * Event description: User clicks on 'get invite link'
 *
 * @param {teamManagementInvitePeopleGetInviteLinkParams} params - The parameters for this event
 * @property {string} invite_status - deprecated - status can only be pending
 * @property {string} context - account/site
 * @property {GUID} invite_id - the invite id
 * @property {string} platform - platform
 * @property {GUID} msid - sent only for site level
 * @property {string} app_id - app_id (context = app)
 * @return {LogObject<teamManagementInvitePeopleGetInviteLinkParams>} LogObject<teamManagementInvitePeopleGetInviteLinkParams>
 */
export function teamManagementInvitePeopleGetInviteLink(params) {
    return { evid: 1413, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'teamManagementManageRolesClick' event (evid: 1414)
 *
 * Event description: The user clicked on Manage Roles, can click on it from a few places
 *
 * @param {teamManagementManageRolesClickParams} params - The parameters for this event
 * @property {string} context - account/site
 * @property {string} origin - where the user clicked on manage roles - role filter/invite people/team screen
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<teamManagementManageRolesClickParams>} LogObject<teamManagementManageRolesClickParams>
 */
export function teamManagementManageRolesClick(params) {
    return { evid: 1414, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'teamManagementManageRolesPageLoad' event (evid: 1415)
 *
 * Event description: Page load success for 'site roles' (site level) or 'team roles' (account level) pages, depends on the context
 *
 * @param {teamManagementManageRolesPageLoadParams} params - The parameters for this event
 * @property {string} context - account/site
 * @property {string} origin - where the user came to this page from
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<teamManagementManageRolesPageLoadParams>} LogObject<teamManagementManageRolesPageLoadParams>
 */
export function teamManagementManageRolesPageLoad(params) {
    return { evid: 1415, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'teamManagementManageRolesViewRole' event (evid: 1416)
 *
 * Event description: User clicks on 'view role' from the role actions menu
 *
 * @param {teamManagementManageRolesViewRoleParams} params - The parameters for this event
 * @property {string} context - account/site
 * @property {string} role_id - the role_id
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<teamManagementManageRolesViewRoleParams>} LogObject<teamManagementManageRolesViewRoleParams>
 */
export function teamManagementManageRolesViewRole(params) {
    return { evid: 1416, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'teamManagementManageRolesRolePageLoad' event (evid: 1417)
 *
 * Event description: Page load success for 'view role' or 'edit role' action - the user views the details of the specific role he chose in view/edit mode.
 *
 * @param {teamManagementManageRolesRolePageLoadParams} params - The parameters for this event
 * @property {string} context - account/site
 * @property {string} role_id - role_id
 * @property {string} origin - where the user came to this page from
 * @property {string} mode - what mode the page was opened as - view/edit
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<teamManagementManageRolesRolePageLoadParams>} LogObject<teamManagementManageRolesRolePageLoadParams>
 */
export function teamManagementManageRolesRolePageLoad(params) {
    return { evid: 1417, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'teamManagementManageRolesDuplicateAndEditRole' event (evid: 1418)
 *
 * Event description: User clicks on 'duplicate & edit' from the role actions menu (considered as creating a new role). The user can click on a custom role or a pre-defined role.
 *
 * @param {teamManagementManageRolesDuplicateAndEditRoleParams} params - The parameters for this event
 * @property {string} context - account/site
 * @property {string} role_id - role_id of the role that the user is duplicating
 * @property {string} role_type - custom/predefined
 * @property {string} origin - where the user clicked from - roles list/role page
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<teamManagementManageRolesDuplicateAndEditRoleParams>} LogObject<teamManagementManageRolesDuplicateAndEditRoleParams>
 */
export function teamManagementManageRolesDuplicateAndEditRole(params) {
    return { evid: 1418, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'teamManagementManageRolesEditCustomRole' event (evid: 1419)
 *
 * Event description: User clicks on 'edit' (for a custom role only) from the role actions menu
 *
 * @param {teamManagementManageRolesEditCustomRoleParams} params - The parameters for this event
 * @property {string} context - account/site
 * @property {string} role_id - the role_id
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<teamManagementManageRolesEditCustomRoleParams>} LogObject<teamManagementManageRolesEditCustomRoleParams>
 */
export function teamManagementManageRolesEditCustomRole(params) {
    return { evid: 1419, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'teamManagementManageRolesUpdateRole' event (evid: 1420)
 *
 * Event description: User clicks on 'save' after editing an existing role
 *
 * @param {teamManagementManageRolesUpdateRoleParams} params - The parameters for this event
 * @property {number} num_scopes - number of scopes chosen for the custom role
 * @property {string} context - account/site
 * @property {string} role_id - the role_id
 * @property {string} old_scope_ids - the previous scope ids of the role, before it was updated
 * @property {string} new_scope_ids - the new scope ids chosen for the role
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<teamManagementManageRolesUpdateRoleParams>} LogObject<teamManagementManageRolesUpdateRoleParams>
 */
export function teamManagementManageRolesUpdateRole(params) {
    return { evid: 1420, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'teamManagementManageRolesCreateNewRoleClick' event (evid: 1421)
 *
 * Event description: User clicks on 'create new role'
 *
 * @param {teamManagementManageRolesCreateNewRoleClickParams} params - The parameters for this event
 * @property {string} context - account/site
 * @property {string} origin - where the user clicked on create new role - roles list/role filter/invite people
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @property {boolean} Has_ai_assistant - Does the user has AI assistant on this page
 * @return {LogObject<teamManagementManageRolesCreateNewRoleClickParams>} LogObject<teamManagementManageRolesCreateNewRoleClickParams>
 */
export function teamManagementManageRolesCreateNewRoleClick(params) {
    return { evid: 1421, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'teamManagementManageRolesSaveNewRole' event (evid: 1422)
 *
 * Event description: User clicks on 'save' after creating a new role
 *
 * @param {teamManagementManageRolesSaveNewRoleParams} params - The parameters for this event
 * @property {string} custom_role_scopes - the scopes chosen for the custom role
 * @property {number} num_scopes - number of scopes chosen for the custom role
 * @property {string} context - account/site
 * @property {string} role_id - the role_id
 * @property {string} origin - where the user clicked on create new role - roles list/role filter/invite people/duplicate role
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<teamManagementManageRolesSaveNewRoleParams>} LogObject<teamManagementManageRolesSaveNewRoleParams>
 */
export function teamManagementManageRolesSaveNewRole(params) {
    return { evid: 1422, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'teamManagementManageRolesDeleteCustomRoleClick' event (evid: 1423)
 *
 * Event description: User clicks on delete role from the actions menu
 *
 * @param {teamManagementManageRolesDeleteCustomRoleClickParams} params - The parameters for this event
 * @property {number} num_scopes - number of scopes chosen for the deleted role
 * @property {string} context - account/site
 * @property {string} role_id - the role_id
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<teamManagementManageRolesDeleteCustomRoleClickParams>} LogObject<teamManagementManageRolesDeleteCustomRoleClickParams>
 */
export function teamManagementManageRolesDeleteCustomRoleClick(params) {
    return { evid: 1423, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'teamManagementManageRolesDeleteCustomRoleSuccess' event (evid: 1424)
 *
 * Event description: User clicks on 'delete' in the 'delete role' dialog and thus confirms the deletion
 *
 * @param {teamManagementManageRolesDeleteCustomRoleSuccessParams} params - The parameters for this event
 * @property {number} num_scopes - number of scopes chosen for the deleted role
 * @property {string} context - account/site
 * @property {string} role_id - the role_id
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<teamManagementManageRolesDeleteCustomRoleSuccessParams>} LogObject<teamManagementManageRolesDeleteCustomRoleSuccessParams>
 */
export function teamManagementManageRolesDeleteCustomRoleSuccess(params) {
    return { evid: 1424, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'teamManagementManageRolesCannotDeleteRole' event (evid: 1425)
 *
 * Event description: The user tries to delete a role that is assigned to teammates, then sees a message which notifies him about this and allows him to click on cancel, or view the teammates assigned with this role.
 *
 * @param {teamManagementManageRolesCannotDeleteRoleParams} params - The parameters for this event
 * @property {number} num_scopes - number of scopes chosen for the deleted role
 * @property {string} context - account/site
 * @property {string} role_id - the role_id
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @property {string} action - cancel/view teammates
 * @return {LogObject<teamManagementManageRolesCannotDeleteRoleParams>} LogObject<teamManagementManageRolesCannotDeleteRoleParams>
 */
export function teamManagementManageRolesCannotDeleteRole(params) {
    return { evid: 1425, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'teamManagementLearnMoreClick' event (evid: 1426)
 *
 * Event description: Click on "learn more" from a few places:
 *
 * @param {teamManagementLearnMoreClickParams} params - The parameters for this event
 * @property {string} context - account/site
 * @property {string} origin - set up team/edit team profile/team management/teammates info/invite people/change role/roles list
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @property {string} app_id - app_id (context = app)
 * @return {LogObject<teamManagementLearnMoreClickParams>} LogObject<teamManagementLearnMoreClickParams>
 */
export function teamManagementLearnMoreClick(params) {
    return { evid: 1426, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'teamManagementEditTeamProfileClick' event (evid: 1427)
 *
 * Event description: The user clicks on "edit team profile" from the "more actions" menu in the team dashboard
 *
 * @param {teamManagementEditTeamProfileClickParams} params - The parameters for this event
 * @property {string} platform - platform
 * @return {LogObject<teamManagementEditTeamProfileClickParams>} LogObject<teamManagementEditTeamProfileClickParams>
 */
export function teamManagementEditTeamProfileClick(params) {
    return { evid: 1427, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'teamManagementSaveTeamProfile' event (evid: 1428)
 *
 * Event description: The user clicks to save his edit team profile properties
 *
 * @param {teamManagementSaveTeamProfileParams} params - The parameters for this event
 * @property {boolean} is_logo_shown - true/false
 * @property {boolean} onboarding - true/false
 * @property {string} platform - platform
 * @property {boolean} is_valid_team_name - true/false (false if error shows)
 * @return {LogObject<teamManagementSaveTeamProfileParams>} LogObject<teamManagementSaveTeamProfileParams>
 */
export function teamManagementSaveTeamProfile(params) {
    return { evid: 1428, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'teamManagementJoinTheTeamPageLoad' event (evid: 1429)
 *
 * Event description: "Join the team" page load, after the invitee clicks on "accept invite" from the invite email, to become a team member. Also sent when a contributor clicks to accept an invite and sees the acceptance page.
 *
 * @param {teamManagementJoinTheTeamPageLoadParams} params - The parameters for this event
 * @property {GUID} accepted_by_user - If it's an existing user - user_id of the user that accepted the invite (not necessarily the user that received the email)
 * @property {boolean} already_accepted - true id invite was already accepted
 * @property {GUID} invited_to_account_id - the account_id that the invitee is invited to
 * @property {string} context - site/account
 * @property {string} origin - opened the page from email/direct link
 * @property {GUID} invite_id - invite_id
 * @property {string} invitee_type - invitee wix type ("Wix"/"Studio")
 * @property {string} platform - platform
 * @property {string} email_type - Wix email type ("Wix"/"Studio")
 * @property {string} app_id - app_id (context = app)
 * @return {LogObject<teamManagementJoinTheTeamPageLoadParams>} LogObject<teamManagementJoinTheTeamPageLoadParams>
 */
export function teamManagementJoinTheTeamPageLoad(params) {
    return { evid: 1429, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'teamManagementJoinTheTeamClickContinue' event (evid: 1430)
 *
 * Event description: When a logged in user clicks to accept an invite to a team, chooses one of the 3 options and clicks continue: 1. sign up and join using another email, 2. replace the email associated with your existing account, 3. create another account associated with your existing email
 *
 * @param {teamManagementJoinTheTeamClickContinueParams} params - The parameters for this event
 * @property {GUID} accepted_by_user - user_id of the user that accepted the invite (not necessarily the user that received the email)
 * @property {GUID} invited_to_account_id - the account_id that the invitee is invited to
 * @property {GUID} invite_id - invite_id
 * @property {string} action_chosen - sign up using another email/replace email in existing account/create another account
 * @property {string} platform - platform
 * @property {string} app_id - app_id (context = app)
 * @property {string} context - site/account/app
 * @return {LogObject<teamManagementJoinTheTeamClickContinueParams>} LogObject<teamManagementJoinTheTeamClickContinueParams>
 */
export function teamManagementJoinTheTeamClickContinue(params) {
    return { evid: 1430, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'teamManagementJoinTheTeamClickOnLearnMore' event (evid: 1431)
 *
 * Event description: The invitee clicked on "need help? learn more" in the "join team" page
 *
 * @param {teamManagementJoinTheTeamClickOnLearnMoreParams} params - The parameters for this event
 * @property {GUID} accepted_by_user - If it's an existing user - user_id of the user that accepted the invite (not necessarily the user that received the email)
 * @property {boolean} already_accepted - true id invite was already accepted
 * @property {GUID} invited_to_account_id - the account_id that the invitee is invited to
 * @property {GUID} invite_id - invite_id
 * @property {string} platform - platform
 * @return {LogObject<teamManagementJoinTheTeamClickOnLearnMoreParams>} LogObject<teamManagementJoinTheTeamClickOnLearnMoreParams>
 */
export function teamManagementJoinTheTeamClickOnLearnMore(params) {
    return { evid: 1431, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'rolesAndPermissionsClickOnUpgradeButton' event (evid: 1432)
 *
 * Event description: User clicks on upgrade button in order to be able to invite more contributors (contributors enforcement) - currently only site level
 *
 * @param {rolesAndPermissionsClickOnUpgradeButtonParams} params - The parameters for this event
 * @property {string} context - account/site
 * @property {string} origin - where the user clicked on upgrade - team screen/roles list page/upgrade pop up
 * @property {string} platform - platform
 * @property {GUID} msid - sent only for site level
 * @return {LogObject<rolesAndPermissionsClickOnUpgradeButtonParams>} LogObject<rolesAndPermissionsClickOnUpgradeButtonParams>
 */
export function rolesAndPermissionsClickOnUpgradeButton(params) {
    return { evid: 1432, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'rolesAndPermissionsInvitePeopleError' event (evid: 1433)
 *
 * Event description: sent when a user tries to invite people and gets an error in the invited emails text box - can be because he reached his contributors limit for this site, invalid emails, etc.
 *
 * @param {rolesAndPermissionsInvitePeopleErrorParams} params - The parameters for this event
 * @property {string} context - account/site
 * @property {string} error_message - the error message shown to the user
 * @property {string} platform - platform
 * @property {GUID} msid - sent only for site level
 * @property {string} app_id - app_id (context = app)
 * @return {LogObject<rolesAndPermissionsInvitePeopleErrorParams>} LogObject<rolesAndPermissionsInvitePeopleErrorParams>
 */
export function rolesAndPermissionsInvitePeopleError(params) {
    return { evid: 1433, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'rolesAndPermissionsUpgradePopUpLoad' event (evid: 1434)
 *
 * Event description: Sent when the upgrade pop up loads (within the R&P app) after the user tries to add more contributors then his current plan allows
 *
 * @param {rolesAndPermissionsUpgradePopUpLoadParams} params - The parameters for this event
 * @property {string} context - account/site
 * @property {string} origin - where the user clicked on invite people - team management screen/roles list page/site actions
 * @property {string} platform - platform
 * @property {GUID} msid - sent only for site level
 * @return {LogObject<rolesAndPermissionsUpgradePopUpLoadParams>} LogObject<rolesAndPermissionsUpgradePopUpLoadParams>
 */
export function rolesAndPermissionsUpgradePopUpLoad(params) {
    return { evid: 1434, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'rolesAndPermissionsAcceptInviteFromMobilePageLoad' event (evid: 1435)
 *
 * Event description: The user accepted the invite from mobile - page load (context: site - for contributors' invites, account - for team members' invite)
 *
 * @param {rolesAndPermissionsAcceptInviteFromMobilePageLoadParams} params - The parameters for this event
 * @property {string} context - site/account
 * @property {string} inviteToken - token
 * @property {string} invite_id - invite_id
 * @property {string} platform - platform
 * @property {GUID} msid - msid (only for site level, null for account level)
 * @return {LogObject<rolesAndPermissionsAcceptInviteFromMobilePageLoadParams>} LogObject<rolesAndPermissionsAcceptInviteFromMobilePageLoadParams>
 */
export function rolesAndPermissionsAcceptInviteFromMobilePageLoad(params) {
    return { evid: 1435, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'rolesAndPermissionsAcceptInviteFromMobileClickContinueToSite' event (evid: 1436)
 *
 * Event description: The user clicked on "continue to site" in the mobile accept invite page (site/account)
 *
 * @param {rolesAndPermissionsAcceptInviteFromMobileClickContinueToSiteParams} params - The parameters for this event
 * @property {string} context - site/account
 * @property {string} inviteToken - token
 * @property {string} invite_id - invite_id
 * @property {string} platform - platform
 * @property {GUID} msid - msid (only for site level, null for account level)
 * @return {LogObject<rolesAndPermissionsAcceptInviteFromMobileClickContinueToSiteParams>} LogObject<rolesAndPermissionsAcceptInviteFromMobileClickContinueToSiteParams>
 */
export function rolesAndPermissionsAcceptInviteFromMobileClickContinueToSite(params) {
    return { evid: 1436, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'rolesAndPermissionsAcceptInviteFromMobileClickManageSiteOnTheWixApp' event (evid: 1437)
 *
 * Event description: The user clicked on "manage site on the wix app" in the mobile accept invite page (site/account)
 *
 * @param {rolesAndPermissionsAcceptInviteFromMobileClickManageSiteOnTheWixAppParams} params - The parameters for this event
 * @property {string} context - site/account
 * @property {string} inviteToken - token
 * @property {string} invite_id - invite_id
 * @property {string} platform - platform
 * @property {GUID} msid - msid (only for site level, null for account level)
 * @return {LogObject<rolesAndPermissionsAcceptInviteFromMobileClickManageSiteOnTheWixAppParams>} LogObject<rolesAndPermissionsAcceptInviteFromMobileClickManageSiteOnTheWixAppParams>
 */
export function rolesAndPermissionsAcceptInviteFromMobileClickManageSiteOnTheWixApp(params) {
    return { evid: 1437, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'rolesAndPermissionsInvitePeopleAnswerOnInvitePurpose' event (evid: 1438)
 *
 * Event description: the user answers the "invite purpose" form.
 *
 * @param {rolesAndPermissionsInvitePeopleAnswerOnInvitePurposeParams} params - The parameters for this event
 * @property {string} other_text - If the user chose "other" as the invite purpose and entered free text
 * @property {string} context - account/site
 * @property {boolean} is_partner - is the sender a partner or not
 * @property {string} invite_for - a client/a partner or freelancer (a agency or freelancer)/a colleague/a friend/other (someone else)
 * @property {GUID} invite_id - the invite_id
 * @property {string} platform - platform
 * @property {GUID} msid - sent only for site level
 * @property {string} num_invites - how many people were invited - one/multiple
 * @return {LogObject<rolesAndPermissionsInvitePeopleAnswerOnInvitePurposeParams>} LogObject<rolesAndPermissionsInvitePeopleAnswerOnInvitePurposeParams>
 */
export function rolesAndPermissionsInvitePeopleAnswerOnInvitePurpose(params) {
    return { evid: 1438, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'rolesAndPermissionsInvitePeopleSkipOnInvitePurposeQuestion' event (evid: 1439)
 *
 * Event description: The user skipped the invite purpose modal that pops after sending a contributor invite (and didn't answer the question)
 *
 * @param {rolesAndPermissionsInvitePeopleSkipOnInvitePurposeQuestionParams} params - The parameters for this event
 * @property {string} click_type - how the user closed the modal: by clicking skip, clicking x, or clicking on the background
 * @property {string} context - account/site
 * @property {boolean} is_partner - is the sender a partner or not
 * @property {GUID} invite_id - the invite_id
 * @property {string} platform - platform
 * @property {GUID} msid - sent only for site level
 * @property {string} num_invites - how many people were invited - one/multiple
 * @return {LogObject<rolesAndPermissionsInvitePeopleSkipOnInvitePurposeQuestionParams>} LogObject<rolesAndPermissionsInvitePeopleSkipOnInvitePurposeQuestionParams>
 */
export function rolesAndPermissionsInvitePeopleSkipOnInvitePurposeQuestion(params) {
    return { evid: 1439, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'rolesAndPermissionsSitesAndFoldersSelectSitesAndFoldersModalLoad' event (evid: 1440)
 *
 * Event description: Select Sites and Folders modal load after the user chose "specific sites and folders"  in the "give site access" section, in the invite people flow for team management
 *
 * @param {rolesAndPermissionsSitesAndFoldersSelectSitesAndFoldersModalLoadParams} params - The parameters for this event
 * @property {GUID} teammate_id - for update role only - user_id of the team/teammate whose role is being updated (if invite status is pending then invite_id)
 * @property {string} context - account/site
 * @property {string} role_ids - the roles for which the user is choosing specific sites and folders permissions
 * @property {string} role_id - the role for which the user is choosing specific sites and folders permissions
 * @property {string} platform - platform
 * @property {string} view - invite/update role (what action did the user try to do - invite a new teammate or edit role for an existing teammate)
 * @return {LogObject<rolesAndPermissionsSitesAndFoldersSelectSitesAndFoldersModalLoadParams>} LogObject<rolesAndPermissionsSitesAndFoldersSelectSitesAndFoldersModalLoadParams>
 */
export function rolesAndPermissionsSitesAndFoldersSelectSitesAndFoldersModalLoad(params) {
    return { evid: 1440, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'rolesAndPermissionsSitesAndFoldersClickOnSelectInSfModal' event (evid: 1441)
 *
 * Event description: The user selected specific sites and folders when creating an invite for a new team member/updating a role for an existing team member, and clicked "select" in the modal
 *
 * @param {rolesAndPermissionsSitesAndFoldersClickOnSelectInSfModalParams} params - The parameters for this event
 * @property {GUID} teammate_id - for update role only - user_id of the team/teammate whose role is being updated (if invite status is pending then invite_id)
 * @property {string} context - account/site
 * @property {string} role_ids - the roles for which the user is choosing specific sites and folders permissions
 * @property {string} role_id - the role for which the user is choosing specific sites and folders permissions
 * @property {string} assignment_type - all/specific
 * @property {number} num_sites - the number of sites selected
 * @property {string} platform - platform
 * @property {number} num_folders - the number of folders selected
 * @property {string} view - invite/update role (what action did the user try to do - invite a new teammate or edit role for an existing teammate)
 * @return {LogObject<rolesAndPermissionsSitesAndFoldersClickOnSelectInSfModalParams>} LogObject<rolesAndPermissionsSitesAndFoldersClickOnSelectInSfModalParams>
 */
export function rolesAndPermissionsSitesAndFoldersClickOnSelectInSfModal(params) {
    return { evid: 1441, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'rolesAndPermissionsSitesAndFoldersClickOnSelectMore' event (evid: 1442)
 *
 * Event description: The user clicked on the blue "select more" (=sites and folders) text in the "give site access" section
 *
 * @param {rolesAndPermissionsSitesAndFoldersClickOnSelectMoreParams} params - The parameters for this event
 * @property {GUID} teammate_id - for update role only - user_id of the team/teammate whose role is being updated (if invite status is pending then invite_id)
 * @property {string} context - account/site
 * @property {string} role_ids - the roles for which the user is choosing specific sites and folders permissions
 * @property {string} role_id - the role for which the user is choosing specific sites and folders permissions
 * @property {string} platform - platform
 * @property {string} view - invite/update role (what action did the user try to do - invite a new teammate or edit role for an existing teammate)
 * @return {LogObject<rolesAndPermissionsSitesAndFoldersClickOnSelectMoreParams>} LogObject<rolesAndPermissionsSitesAndFoldersClickOnSelectMoreParams>
 */
export function rolesAndPermissionsSitesAndFoldersClickOnSelectMore(params) {
    return { evid: 1442, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'rolesAndPermissionsSitesAndFoldersClickOnShowMoreSites' event (evid: 1443)
 *
 * Event description: The user clicked on the blue "show more sites" text in the "give site access" section, after choosing specific sites & folders and closing the modal.
 *
 * @param {rolesAndPermissionsSitesAndFoldersClickOnShowMoreSitesParams} params - The parameters for this event
 * @property {GUID} teammate_id - for update role only - user_id of the team/teammate whose role is being updated (if invite status is pending then invite_id)
 * @property {string} context - account/site
 * @property {string} role_ids - the roles for which the user is choosing specific sites and folders permissions
 * @property {string} role_id - the role for which the user is choosing specific sites and folders permissions
 * @property {string} platform - platform
 * @property {string} view - invite/update role (what action did the user try to do - invite a new teammate or edit role for an existing teammate)
 * @return {LogObject<rolesAndPermissionsSitesAndFoldersClickOnShowMoreSitesParams>} LogObject<rolesAndPermissionsSitesAndFoldersClickOnShowMoreSitesParams>
 */
export function rolesAndPermissionsSitesAndFoldersClickOnShowMoreSites(params) {
    return { evid: 1443, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'rolesAndPermissionsSitesAndFoldersRemoveSiteFolderClick' event (evid: 1444)
 *
 * Event description: The user removed a site/folder from the list in the "give site access" section, after choosing specific sites & folders in the invite.
 *
 * @param {rolesAndPermissionsSitesAndFoldersRemoveSiteFolderClickParams} params - The parameters for this event
 * @property {GUID} teammate_id - for update role only - user_id of the team/teammate whose role is being updated (if invite status is pending then invite_id)
 * @property {string} context - account/site
 * @property {string} type_removed - site/folder
 * @property {string} role_ids - the roles for which the user is choosing specific sites and folders permissions
 * @property {string} role_id - the role for which the user is choosing specific sites and folders permissions
 * @property {string} platform - platform
 * @property {string} view - invite/update role (what action did the user try to do - invite a new teammate or edit role for an existing teammate)
 * @return {LogObject<rolesAndPermissionsSitesAndFoldersRemoveSiteFolderClickParams>} LogObject<rolesAndPermissionsSitesAndFoldersRemoveSiteFolderClickParams>
 */
export function rolesAndPermissionsSitesAndFoldersRemoveSiteFolderClick(params) {
    return { evid: 1444, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'rolesAndPermissionsSitesAndFoldersClickOnAssignMoreRoles' event (evid: 1445)
 *
 * Event description: The user clicked on "assign more roles" text in the "give site access" section
 *
 * @param {rolesAndPermissionsSitesAndFoldersClickOnAssignMoreRolesParams} params - The parameters for this event
 * @property {GUID} teammate_id - for update role only - user_id of the team/teammate whose role is being updated (if invite status is pending then invite_id)
 * @property {string} context - account/site
 * @property {string} platform - platform
 * @property {string} view - invite/update role (what action did the user try to do - invite a new teammate or edit role for an existing teammate)
 * @return {LogObject<rolesAndPermissionsSitesAndFoldersClickOnAssignMoreRolesParams>} LogObject<rolesAndPermissionsSitesAndFoldersClickOnAssignMoreRolesParams>
 */
export function rolesAndPermissionsSitesAndFoldersClickOnAssignMoreRoles(params) {
    return { evid: 1445, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'rolesAndPermissionsSitesAndFoldersSiteRpWithTeamModalLoad' event (evid: 1446)
 *
 * Event description: When the team owner clicks on invite people in site level (=contributor), he will see a modal clarifying the invitee will only be able to work on that specific site, and a suggestion to add the invitee as a team member
 *
 * @param {rolesAndPermissionsSitesAndFoldersSiteRpWithTeamModalLoadParams} params - The parameters for this event
 * @property {string} context - account/site
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<rolesAndPermissionsSitesAndFoldersSiteRpWithTeamModalLoadParams>} LogObject<rolesAndPermissionsSitesAndFoldersSiteRpWithTeamModalLoadParams>
 */
export function rolesAndPermissionsSitesAndFoldersSiteRpWithTeamModalLoad(params) {
    return { evid: 1446, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'rolesAndPermissionsSitesAndFoldersChooseActionInSiteRpWithTeamModal' event (evid: 1447)
 *
 * Event description: The team owner confirmed that the invitee will only have access to the specific site, clicked on invite to team, or closed the modal
 *
 * @param {rolesAndPermissionsSitesAndFoldersChooseActionInSiteRpWithTeamModalParams} params - The parameters for this event
 * @property {string} context - account/site
 * @property {string} action_chosen - continue/invite to team/close
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<rolesAndPermissionsSitesAndFoldersChooseActionInSiteRpWithTeamModalParams>} LogObject<rolesAndPermissionsSitesAndFoldersChooseActionInSiteRpWithTeamModalParams>
 */
export function rolesAndPermissionsSitesAndFoldersChooseActionInSiteRpWithTeamModal(params) {
    return { evid: 1447, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'rolesAndPermissionsPeoplePermissionsComponentLoad' event (evid: 1448)
 *
 * Event description: The people permissions component, specific per site/folder (for example in 'my sites' page) was loaded
 *
 * @param {rolesAndPermissionsPeoplePermissionsComponentLoadParams} params - The parameters for this event
 * @property {number} folder_id - folder_id for which the component was loaded (if none then null)
 * @property {string} platform - platform
 * @property {GUID} msid - msid for which the component was loaded (if none then null)
 * @return {LogObject<rolesAndPermissionsPeoplePermissionsComponentLoadParams>} LogObject<rolesAndPermissionsPeoplePermissionsComponentLoadParams>
 */
export function rolesAndPermissionsPeoplePermissionsComponentLoad(params) {
    return { evid: 1448, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'rolesAndPermissionsPeoplePermissionsComponentClickOnManage' event (evid: 1449)
 *
 * Event description: The team owner clicked on 'manage roles & permissions' (=site level, contributors) or 'manage team account' (=account level, team members) in the permissions component that loads per site/folder (in 'my sites' page for example)
 *
 * @param {rolesAndPermissionsPeoplePermissionsComponentClickOnManageParams} params - The parameters for this event
 * @property {number} folder_id - folder_id for which the component was loaded (if none then null)
 * @property {string} manage_type - team account/roles and permissions
 * @property {string} platform - platform
 * @property {GUID} msid - msid for which the component was loaded (if none then null)
 * @return {LogObject<rolesAndPermissionsPeoplePermissionsComponentClickOnManageParams>} LogObject<rolesAndPermissionsPeoplePermissionsComponentClickOnManageParams>
 */
export function rolesAndPermissionsPeoplePermissionsComponentClickOnManage(params) {
    return { evid: 1449, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'rolesAndPermissionsTeamManagementSearchText' event (evid: 1450)
 *
 * Event description: The user entered a text in the search component (the result can show one of the teammates' names, a site name, folder name etc.)
 *
 * @param {rolesAndPermissionsTeamManagementSearchTextParams} params - The parameters for this event
 * @property {string} context - account/site
 * @property {string} platform - platform
 * @return {LogObject<rolesAndPermissionsTeamManagementSearchTextParams>} LogObject<rolesAndPermissionsTeamManagementSearchTextParams>
 */
export function rolesAndPermissionsTeamManagementSearchText(params) {
    return { evid: 1450, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'headerLoaded' event (evid: 1452)
 *
 * Event description: when the header is shown to the user in my-sites/bizmgr/account manager/partner dashboard the event is sent
 *
 * @param {headerLoadedParams} params - The parameters for this event
 * @property {string} page_view - name of the page - my-sites/bizmgr/account manager/partner dashboard
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {GUID} msid - in account level/my-sites send null
 * @return {LogObject<headerLoadedParams>} LogObject<headerLoadedParams>
 */
export function headerLoaded(params) {
    return { evid: 1452, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderCaptchaBoxModalLoadedClient' event (evid: 1453)
 *
 * Event description: Form Builder - Captcha box - Modal loaded
 *
 * @param {formBuilderCaptchaBoxModalLoadedClientParams} params - The parameters for this event
 * @property {GUID} visitor_id - visitor_id
 * @property {string} reason - reason for appearance
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} origin - web/oneapp
 * @property {string} btype - bot detection reason
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderCaptchaBoxModalLoadedClientParams>} LogObject<formBuilderCaptchaBoxModalLoadedClientParams>
 */
export function formBuilderCaptchaBoxModalLoadedClient(params) {
    return { evid: 1453, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderCaptchaBoxModalClosedClient' event (evid: 1454)
 *
 * Event description: Form Builder - Captcha box - Modal closed
 *
 * @param {formBuilderCaptchaBoxModalClosedClientParams} params - The parameters for this event
 * @property {GUID} visitor_id - visitor_id
 * @property {string} reason - 'resolved', 'manually closed'
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} origin - web/oneapp
 * @property {string} btype - bot detection reason
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderCaptchaBoxModalClosedClientParams>} LogObject<formBuilderCaptchaBoxModalClosedClientParams>
 */
export function formBuilderCaptchaBoxModalClosedClient(params) {
    return { evid: 1454, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'customerNotificationsSettingsPreviewEditLoadingTime' event (evid: 1455)
 *
 * Event description: When the user come back from shoutout composer the event is send when the modal is fully loaded.
 *
 * @param {customerNotificationsSettingsPreviewEditLoadingTimeParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {number} loadingTime - The time between page was loaded and the modal was loaded
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<customerNotificationsSettingsPreviewEditLoadingTimeParams>} LogObject<customerNotificationsSettingsPreviewEditLoadingTimeParams>
 */
export function customerNotificationsSettingsPreviewEditLoadingTime(params) {
    return { evid: 1455, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'settingsLobbyHoverOverAnItem' event (evid: 1457)
 *
 * Event description: When the user hovers over an item in the lobby
 *
 * @param {settingsLobbyHoverOverAnItemParams} params - The parameters for this event
 * @property {number} item_location_on_page - Item order (f.e. 0,1 etc.)
 * @property {string} section_name - general/ecommerce/..
 * @property {string} view_type - view_type
 * @property {string} cta_name - the cta value (if exists) - f.e. “Get a business number”
 * @property {string} page_id - the pageComppnentId of the item that was hovered on
 * @property {string} item_location - will be in this format {section,column,row}.  F.e. website settings will be {1,1,1}.  If there are no sections send 0.
 * @property {string} item_name - upgrade/connect_domain/.../website settings/business info/ roles and permissions/.../accept payments…
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<settingsLobbyHoverOverAnItemParams>} LogObject<settingsLobbyHoverOverAnItemParams>
 */
export function settingsLobbyHoverOverAnItem(params) {
    return { evid: 1457, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'bizmgrComponentRequestToLoad' event (evid: 1458)
 *
 * Event description: Generic component event - When the component is suppose to be loaded (before the loading starts)
 *
 * @param {bizmgrComponentRequestToLoadParams} params - The parameters for this event
 * @property {string} component_name - The component name
 * @property {string} state - The expected state of the component -  regular/empty_state/no_permission
 * @property {string} view_type - view_type
 * @property {string} sub_view - The sub_view of the hosted page in Bizmgr
 * @property {string} component_app_id - The app_id of the component
 * @property {string} app_id - The app_id of the page which hosts the component
 * @property {string} platform - platform
 * @property {string} component_id - the Id of the component
 * @property {string} hosting - MA/Editor/onboarding
 * @property {GUID} msid - msid
 * @property {string} view - The view of the hosted page in Bizmgr
 * @return {LogObject<bizmgrComponentRequestToLoadParams>} LogObject<bizmgrComponentRequestToLoadParams>
 */
export function bizmgrComponentRequestToLoad(params) {
    return { evid: 1458, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'bizmgrComponentLoadingStart' event (evid: 1459)
 *
 * Event description: Generic loading component event in the Bizmgr- When the component start loading
 *
 * @param {bizmgrComponentLoadingStartParams} params - The parameters for this event
 * @property {string} component_name - The component name
 * @property {string} hosting_platform - accountmanagr/bizmanagr/devcenter/etc.
 * @property {string} state - The expected state of the component -  regular/empty_state/no_permission
 * @property {string} view_type - view_type
 * @property {string} sub_view - The sub_view of the hosted page in Bizmgr
 * @property {string} page_id - the page id, please send always the page_id, no matter what is the type of the component
 * @property {string} host_id - the host id (meaningful string - f.e. ‘sidebar’,’settings-lobby’)
 * @property {string} component_app_id - The app_id of the component
 * @property {string} app_id - The app_id of the page which hosts the component
 * @property {string} platform - platform
 * @property {string} component_id - the Id of the component
 * @property {string} hosting_platform_context_id - context id: when the context is site - msid, when the context is app_id (like in devCenter f.e) - appDefId. In account manager is null
 * @property {string} hosting - MA/Editor/onboarding
 * @property {string} component_type - page/widget/modal/sidebar/header
 * @property {GUID} msid - msid
 * @property {string} view - The view of the hosted page in Bizmgr
 * @return {LogObject<bizmgrComponentLoadingStartParams>} LogObject<bizmgrComponentLoadingStartParams>
 */
export function bizmgrComponentLoadingStart(params) {
    return { evid: 1459, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'bizmgrComponentLoadingFinish' event (evid: 1460)
 *
 * Event description: Generic loading component event in the Bizmgr- When the component finishes loading
 *
 * @param {bizmgrComponentLoadingFinishParams} params - The parameters for this event
 * @property {string} component_name - The component name
 * @property {string} hosting_platform - accountmanagr/bizmanagr/devcenter/etc.
 * @property {string} state - The expected state of the component -  regular/empty_state/no_permission
 * @property {number} loading_time_from_start_loading_page - deprecated
 * @property {string} view_type - view_type
 * @property {string} prev_page_id - the previous page id
 * @property {number} loading_time_from_host_load - loading time from the start loading of the page
 * @property {string} sub_view - The sub_view of the hosted page in Bizmgr
 * @property {string} page_id - the page id
 * @property {boolean} is_first - True if the component loaded as part of the first page in session (before navigation). otherwise false
 * @property {string} host_id - the host id (meaningful string - f.e. ‘sidebar’,’settings-lobby’)
 * @property {string} component_app_id - The app_id of the component
 * @property {number} loading_time_from_host_platform_load - loading time from the start loading of the hosting platform
 * @property {string} app_id - The app_id of the page which hosts the component
 * @property {string} platform - platform
 * @property {string} component_id - the Id of the component
 * @property {string} hosting_platform_context_id - context id: when the context is site - msid, when the context is app_id (like in devCenter f.e) - appDefId. In account manager is null
 * @property {string} hosting - MA/Editor/onboarding
 * @property {string} component_type - page/widget/modal/sidebar/header
 * @property {GUID} msid - msid
 * @property {string} view - The view of the hosted page in Bizmgr
 * @property {number} loading_time - loading time from the start loading of the componen
 * @return {LogObject<bizmgrComponentLoadingFinishParams>} LogObject<bizmgrComponentLoadingFinishParams>
 */
export function bizmgrComponentLoadingFinish(params) {
    return { evid: 1460, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'bizmgrComponentLoadingWithAnError' event (evid: 1461)
 *
 * Event description: When component crashed for some reason
 *
 * @param {bizmgrComponentLoadingWithAnErrorParams} params - The parameters for this event
 * @property {string} component_name - The component name
 * @property {string} hosting_platform - accountmanagr/bizmanagr/devcenter/etc.
 * @property {string} state - error
 * @property {string} context - when the context is site - send msid, when the context is app for example (like in devCenter) send appDefId, etc.
 * @property {string} view_type - view_type
 * @property {number} loading_time_from_host_load - loading time from the start loading of the page which hosting the component until the component crashed (in ms)
 * @property {string} sub_view - The sub_view of the hosted page in Bizmgr
 * @property {string} error_type - the type of the error (f.e: permissions, system error, etc.)
 * @property {string} host_id - the host id (meaningful string - f.e. ‘sidebar’,’settings-lobby’)
 * @property {string} component_app_id - The app_id of the component
 * @property {number} loading_time_from_host_platform_load - loading time from the start loading of the hosting platform until the component crashed (in ms)
 * @property {string} app_id - The app_id of the page which hosts the component
 * @property {string} platform - platform
 * @property {string} component_id - the Id of the component
 * @property {string} hosting - MA/Editor/onboarding
 * @property {string} component_type - page/widget/sidebar/header
 * @property {GUID} msid - msid
 * @property {number} interval_load_time - load time of this component until it crashed in ms
 * @property {string} view - The view of the hosted page in Bizmgr
 * @return {LogObject<bizmgrComponentLoadingWithAnErrorParams>} LogObject<bizmgrComponentLoadingWithAnErrorParams>
 */
export function bizmgrComponentLoadingWithAnError(params) {
    return { evid: 1461, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'bizmgrComponentComponentWasShown' event (evid: 1462)
 *
 * Event description: Generic loading component event in the Bizmgr- When the component is shown (if it's below the fold it is sent only when the user scrolls down)
 *
 * @param {bizmgrComponentComponentWasShownParams} params - The parameters for this event
 * @property {string} component_name - The component name
 * @property {string} state - The expected state of the component -  regular/empty_state/no_permission
 * @property {string} view_type - view_type
 * @property {string} sub_view - The sub_view of the hosted page in Bizmgr
 * @property {string} host_id - the host id (meaningful string - f.e. ‘sidebar’,’settings-lobby’)
 * @property {string} component_app_id - The app_id of the component
 * @property {string} app_id - The app_id of the page which hosts the component
 * @property {string} platform - platform
 * @property {string} component_id - the Id of the component
 * @property {string} hosting - MA/Editor/onboarding
 * @property {GUID} msid - msid
 * @property {string} view - The view of the hosted page in Bizmgr
 * @return {LogObject<bizmgrComponentComponentWasShownParams>} LogObject<bizmgrComponentComponentWasShownParams>
 */
export function bizmgrComponentComponentWasShown(params) {
    return { evid: 1462, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardFinishLoadingBasicDashboardWidgets' event (evid: 1463)
 *
 * Event description: the event is sent once all the basic widgets are loaded in the dashboard (dashboard 3.0). the basic widgets are site-details, sales, setup, suggestions, more than & help-widget.
 *
 * @param {dashboardFinishLoadingBasicDashboardWidgetsParams} params - The parameters for this event
 * @property {number} loading_time_from_start - loading from start loading bizmgr (561)
 * @property {string} sub_view - sub_view
 * @property {number} loading_time_from_module - loading from start loading home module (564)
 * @property {string} hosting - dashboard/editor/onboarding
 * @property {string} refferal_info - refferal
 * @property {GUID} msid - --
 * @property {string} view - requested view
 * @property {number} loading_time - loading from start loading the page
 * @return {LogObject<dashboardFinishLoadingBasicDashboardWidgetsParams>} LogObject<dashboardFinishLoadingBasicDashboardWidgetsParams>
 */
export function dashboardFinishLoadingBasicDashboardWidgets(params) {
    return { evid: 1463, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'invoicesSetBusinessInfoModalClickOnAddContinue' event (evid: 1464)
 *
 * Event description: Set Business Info Modal - click on Add & Continue
 *
 * @param {invoicesSetBusinessInfoModalClickOnAddContinueParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {GUID} appDefId - application id
 * @property {string} origin - origin page - from which place this action was made (invoices, contacts full page, crm home...)
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<invoicesSetBusinessInfoModalClickOnAddContinueParams>} LogObject<invoicesSetBusinessInfoModalClickOnAddContinueParams>
 */
export function invoicesSetBusinessInfoModalClickOnAddContinue(params) {
    return { evid: 1464, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'invoicesSetBusinessInfoModalClickOnCancel' event (evid: 1465)
 *
 * Event description: Set Business Info Modal - click on cancel
 *
 * @param {invoicesSetBusinessInfoModalClickOnCancelParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {GUID} appDefId - application ID
 * @property {string} origin - origin page - from which place this action was made (invoices, contacts full page, crm home...)
 * @property {string} cancelType - cancel/ close
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<invoicesSetBusinessInfoModalClickOnCancelParams>} LogObject<invoicesSetBusinessInfoModalClickOnCancelParams>
 */
export function invoicesSetBusinessInfoModalClickOnCancel(params) {
    return { evid: 1465, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'headerFullyLoaded' event (evid: 1467)
 *
 * Event description: when the header is fully loaded in my-sites/bizmgr/account manager/partner dashboard the event is sent
 *
 * @param {headerFullyLoadedParams} params - The parameters for this event
 * @property {string} page_view - name of the page - my-sites/bizmgr/account manager/partner dashboard
 * @property {boolean} is_partner - is_partner
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {GUID} msid - in account level/my-sites send null
 * @return {LogObject<headerFullyLoadedParams>} LogObject<headerFullyLoadedParams>
 */
export function headerFullyLoaded(params) {
    return { evid: 1467, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardClickOnItemFromHeader' event (evid: 147)
 *
 * Event description: When a user clicks on an item in the header that redirects him to another page
 *
 * @param {dashboardClickOnItemFromHeaderParams} params - The parameters for this event
 * @property {string} name - the item clicked name (my-sites/partner dashors'
 * @property {string} page_view - my-sites /dashboard / account settings
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} hosting - MA
 * @property {GUID} msid - --
 * @return {LogObject<dashboardClickOnItemFromHeaderParams>} LogObject<dashboardClickOnItemFromHeaderParams>
 */
export function dashboardClickOnItemFromHeader(params) {
    return { evid: 147, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'rolesAndPermissionsInvitePeopleAddRemoveAnotherRoleOnDiffSiteClick' event (evid: 1472)
 *
 * Event description: user clicking the Add Assignment button in the invite people to team flow
 *
 * @param {rolesAndPermissionsInvitePeopleAddRemoveAnotherRoleOnDiffSiteClickParams} params - The parameters for this event
 * @property {string} referral_info - where the user came to this page from
 * @property {string} button_name - add/remove
 * @property {string} role_id - role_id
 * @property {string} origin - where the user came to this page from
 * @property {GUID} invite_id - invite_id
 * @property {string} platform - platform
 * @property {GUID} msid - sent only for site level
 * @property {string} view - invite/update role
 * @return {LogObject<rolesAndPermissionsInvitePeopleAddRemoveAnotherRoleOnDiffSiteClickParams>} LogObject<rolesAndPermissionsInvitePeopleAddRemoveAnotherRoleOnDiffSiteClickParams>
 */
export function rolesAndPermissionsInvitePeopleAddRemoveAnotherRoleOnDiffSiteClick(params) {
    return { evid: 1472, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'nyaExposureEvent' event (evid: 148)
 *
 * Event description: server exposure event for AB tests
 *
 * @param {nyaExposureEventParams} params - The parameters for this event
 * @property {GUID} msid - metasite id
 * @property {string} exposure_name - the exposure name of the AB test
 * @return {LogObject<nyaExposureEventParams>} LogObject<nyaExposureEventParams>
 */
export function nyaExposureEvent(params) {
    return { evid: 148, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'generalExposureEvent' event (evid: 149)
 *
 * Event description: general exposure event . can be used in several cases
 *
 * @param {generalExposureEventParams} params - The parameters for this event
 * @property {string} exposure_name - exposure_name
 * @property {string} label_name - A is spec=false , B is spec=true
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} hosting - MA/editor
 * @property {GUID} msid - metasite id
 * @return {LogObject<generalExposureEventParams>} LogObject<generalExposureEventParams>
 */
export function generalExposureEvent(params) {
    return { evid: 149, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderBizManagerChooseAForm' event (evid: 1493)
 *
 * Event description: Form Builder - biz manager - choose a form
 *
 * @param {formBuilderBizManagerChooseAFormParams} params - The parameters for this event
 * @property {string} option - which option the user choose
 * @property {GUID} visitor_id - visitor_id
 * @property {GUID} vsi - vsi
 * @property {string} origin - from where the user clicked
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderBizManagerChooseAFormParams>} LogObject<formBuilderBizManagerChooseAFormParams>
 */
export function formBuilderBizManagerChooseAForm(params) {
    return { evid: 1493, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderBackofficeFormChooseATemplate' event (evid: 1494)
 *
 * Event description: Form Builder - biz manager - choose a form
 *
 * @param {formBuilderBackofficeFormChooseATemplateParams} params - The parameters for this event
 * @property {string} option - which option the user choose
 * @property {GUID} visitor_id - visitor_id
 * @property {GUID} vsi - vsi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderBackofficeFormChooseATemplateParams>} LogObject<formBuilderBackofficeFormChooseATemplateParams>
 */
export function formBuilderBackofficeFormChooseATemplate(params) {
    return { evid: 1494, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderBackofficeFormChooseElement' event (evid: 1496)
 *
 * Event description: Form Builder - backoffice form - Choose element
 *
 * @param {formBuilderBackofficeFormChooseElementParams} params - The parameters for this event
 * @property {string} builderOrigin - builderOrigin
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form_comp_id
 * @property {GUID} vsi - vsi
 * @property {string} fieldType - fieldType
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderBackofficeFormChooseElementParams>} LogObject<formBuilderBackofficeFormChooseElementParams>
 */
export function formBuilderBackofficeFormChooseElement(params) {
    return { evid: 1496, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderBackofficeFormDeleteElement' event (evid: 1497)
 *
 * Event description: Form Builder - backoffice form - delete element
 *
 * @param {formBuilderBackofficeFormDeleteElementParams} params - The parameters for this event
 * @property {string} builderOrigin - builderOrigin
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form_comp_id
 * @property {GUID} vsi - vsi
 * @property {string} fieldType - fieldType
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderBackofficeFormDeleteElementParams>} LogObject<formBuilderBackofficeFormDeleteElementParams>
 */
export function formBuilderBackofficeFormDeleteElement(params) {
    return { evid: 1497, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderBackofficeFormCloneElement' event (evid: 1498)
 *
 * Event description: Form Builder - backoffice form - delete element
 *
 * @param {formBuilderBackofficeFormCloneElementParams} params - The parameters for this event
 * @property {string} builderOrigin - builderOrigin
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form_comp_id
 * @property {GUID} vsi - vsi
 * @property {string} fieldType - fieldType
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderBackofficeFormCloneElementParams>} LogObject<formBuilderBackofficeFormCloneElementParams>
 */
export function formBuilderBackofficeFormCloneElement(params) {
    return { evid: 1498, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardSiteNavigation' event (evid: 15)
 *
 * Event description: dashboard > site -> navigation.
 *
 * @param {dashboardSiteNavigationParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} link - link
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<dashboardSiteNavigationParams>} LogObject<dashboardSiteNavigationParams>
 */
export function dashboardSiteNavigation(params) {
    return { evid: 15, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardMySitesActionSelectionPageView' event (evid: 150)
 *
 * Event description: my sites selection page
 *
 * @param {dashboardMySitesActionSelectionPageViewParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {number} no_of_html_sites - number of html sites
 * @property {string} origin - origin of page
 * @property {number} no_of_sites - number of sites user have
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<dashboardMySitesActionSelectionPageViewParams>} LogObject<dashboardMySitesActionSelectionPageViewParams>
 */
export function dashboardMySitesActionSelectionPageView(params) {
    return { evid: 150, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderBackofficeFormSaveForm' event (evid: 1501)
 *
 * Event description: Form Builder - backoffice form - save form
 *
 * @param {formBuilderBackofficeFormSaveFormParams} params - The parameters for this event
 * @property {string} template_name - form template name
 * @property {string} builderOrigin - builderOrigin
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form_comp_id
 * @property {GUID} vsi - vsi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderBackofficeFormSaveFormParams>} LogObject<formBuilderBackofficeFormSaveFormParams>
 */
export function formBuilderBackofficeFormSaveForm(params) {
    return { evid: 1501, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderBackofficeFormShareForm' event (evid: 1504)
 *
 * Event description: Form Builder - backoffice form - share form
 *
 * @param {formBuilderBackofficeFormShareFormParams} params - The parameters for this event
 * @property {string} builderOrigin - builderOrigin
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form_comp_id
 * @property {GUID} vsi - vsi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderBackofficeFormShareFormParams>} LogObject<formBuilderBackofficeFormShareFormParams>
 */
export function formBuilderBackofficeFormShareForm(params) {
    return { evid: 1504, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderBackofficeFormPreviewForm' event (evid: 1505)
 *
 * Event description: Form Builder - backoffice form - preview form
 *
 * @param {formBuilderBackofficeFormPreviewFormParams} params - The parameters for this event
 * @property {string} builderOrigin - builderOrigin
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form_comp_id
 * @property {GUID} vsi - vsi
 * @property {GUID} form_guid - form_guid
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderBackofficeFormPreviewFormParams>} LogObject<formBuilderBackofficeFormPreviewFormParams>
 */
export function formBuilderBackofficeFormPreviewForm(params) {
    return { evid: 1505, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderBackofficeFormFormSettings' event (evid: 1506)
 *
 * Event description: Form Builder - backoffice form - form settings
 *
 * @param {formBuilderBackofficeFormFormSettingsParams} params - The parameters for this event
 * @property {string} builderOrigin - builderOrigin
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form_comp_id
 * @property {GUID} vsi - vsi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderBackofficeFormFormSettingsParams>} LogObject<formBuilderBackofficeFormFormSettingsParams>
 */
export function formBuilderBackofficeFormFormSettings(params) {
    return { evid: 1506, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderBackofficeFormEditTitleDescription' event (evid: 1507)
 *
 * Event description: Form Builder - backoffice form - edit title description
 *
 * @param {formBuilderBackofficeFormEditTitleDescriptionParams} params - The parameters for this event
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form_comp_id
 * @property {GUID} vsi - vsi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderBackofficeFormEditTitleDescriptionParams>} LogObject<formBuilderBackofficeFormEditTitleDescriptionParams>
 */
export function formBuilderBackofficeFormEditTitleDescription(params) {
    return { evid: 1507, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardMySitesSiteSelectionPageView' event (evid: 151)
 *
 * Event description: my sites selection page
 *
 * @param {dashboardMySitesSiteSelectionPageViewParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {number} no_of_html_sites - number of html sites
 * @property {string} origin - origin of page
 * @property {number} no_of_sites - number of sites user have
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<dashboardMySitesSiteSelectionPageViewParams>} LogObject<dashboardMySitesSiteSelectionPageViewParams>
 */
export function dashboardMySitesSiteSelectionPageView(params) {
    return { evid: 151, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'crmHomeSuggestionsCarouselClickCta' event (evid: 1511)
 *
 * Event description: CRM Home - Suggestions carousel click CTA
 *
 * @param {crmHomeSuggestionsCarouselClickCtaParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @property {string} bannerName - which banner was clicked
 * @return {LogObject<crmHomeSuggestionsCarouselClickCtaParams>} LogObject<crmHomeSuggestionsCarouselClickCtaParams>
 */
export function crmHomeSuggestionsCarouselClickCta(params) {
    return { evid: 1511, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'crmHomeSuggestionsCarouselCloseBanner' event (evid: 1512)
 *
 * Event description: CRM Home - Suggestions carousel close banner
 *
 * @param {crmHomeSuggestionsCarouselCloseBannerParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @property {string} bannerName - which banner was clicked
 * @return {LogObject<crmHomeSuggestionsCarouselCloseBannerParams>} LogObject<crmHomeSuggestionsCarouselCloseBannerParams>
 */
export function crmHomeSuggestionsCarouselCloseBanner(params) {
    return { evid: 1512, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'crmHomeSuggestionsCarouselClickOnCarousel' event (evid: 1513)
 *
 * Event description: CRM Home - Suggestions carousel click on carousel
 *
 * @param {crmHomeSuggestionsCarouselClickOnCarouselParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<crmHomeSuggestionsCarouselClickOnCarouselParams>} LogObject<crmHomeSuggestionsCarouselClickOnCarouselParams>
 */
export function crmHomeSuggestionsCarouselClickOnCarousel(params) {
    return { evid: 1513, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardMySitesSiteSelectionPageNumberView' event (evid: 152)
 *
 * Event description: my sites selection page
 *
 * @param {dashboardMySitesSiteSelectionPageNumberViewParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {number} no_of_html_sites - number of html sites
 * @property {number} no_of_sites - number of sites user have
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @property {number} page_number - פשעק מוצנקר
 * @property {number} prev_page - previous page
 * @return {LogObject<dashboardMySitesSiteSelectionPageNumberViewParams>} LogObject<dashboardMySitesSiteSelectionPageNumberViewParams>
 */
export function dashboardMySitesSiteSelectionPageNumberView(params) {
    return { evid: 152, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardMySitesClickPromote' event (evid: 153)
 *
 * Event description: my sites selection page
 *
 * @param {dashboardMySitesClickPromoteParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} origin - original page
 * @property {string} place - place inside origin page
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<dashboardMySitesClickPromoteParams>} LogObject<dashboardMySitesClickPromoteParams>
 */
export function dashboardMySitesClickPromote(params) {
    return { evid: 153, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderBackofficeFormSubmissionClick' event (evid: 1531)
 *
 * Event description: Form Builder - backoffice form - submission click
 *
 * @param {formBuilderBackofficeFormSubmissionClickParams} params - The parameters for this event
 * @property {string} form_name - form_name
 * @property {GUID} visitorId - visitor_id
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_url - form_url
 * @property {string} form_comp_id - form_comp_id
 * @property {GUID} vsi - vsi
 * @property {string} origin - origin
 * @property {GUID} form_guid - form_guid
 * @property {string} template - template
 * @property {string} referrer - referrer
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderBackofficeFormSubmissionClickParams>} LogObject<formBuilderBackofficeFormSubmissionClickParams>
 */
export function formBuilderBackofficeFormSubmissionClick(params) {
    return { evid: 1531, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderBackofficeFormSubmissionSuccess' event (evid: 1532)
 *
 * Event description: Form Builder - backoffice form - submission success
 *
 * @param {formBuilderBackofficeFormSubmissionSuccessParams} params - The parameters for this event
 * @property {string} form_name - form_name
 * @property {GUID} visitorId - visitor_id
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_url - form_url
 * @property {string} form_comp_id - form_comp_id
 * @property {GUID} vsi - vsi
 * @property {string} origin - origin
 * @property {GUID} form_guid - form_guid
 * @property {string} template - template
 * @property {string} referrer - referrer
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderBackofficeFormSubmissionSuccessParams>} LogObject<formBuilderBackofficeFormSubmissionSuccessParams>
 */
export function formBuilderBackofficeFormSubmissionSuccess(params) {
    return { evid: 1532, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderBackofficeFormSubmissionFailed' event (evid: 1533)
 *
 * Event description: Form Builder - backoffice form - submission success
 *
 * @param {formBuilderBackofficeFormSubmissionFailedParams} params - The parameters for this event
 * @property {string} form_name - form_name
 * @property {GUID} visitorId - visitor_id
 * @property {GUID} visitor_id - visitor_id
 * @property {string} errorReason - errorReason
 * @property {string} form_url - form_url
 * @property {string} form_comp_id - form_comp_id
 * @property {GUID} vsi - vsi
 * @property {string} origin - origin
 * @property {GUID} form_guid - form_guid
 * @property {string} template - template
 * @property {string} referrer - referrer
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderBackofficeFormSubmissionFailedParams>} LogObject<formBuilderBackofficeFormSubmissionFailedParams>
 */
export function formBuilderBackofficeFormSubmissionFailed(params) {
    return { evid: 1533, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderBackofficeFormReorderElements' event (evid: 1534)
 *
 * Event description: Form Builder - backoffice form - submission success
 *
 * @param {formBuilderBackofficeFormReorderElementsParams} params - The parameters for this event
 * @property {string} builderOrigin - builderOrigin
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form_comp_id
 * @property {GUID} vsi - vsi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderBackofficeFormReorderElementsParams>} LogObject<formBuilderBackofficeFormReorderElementsParams>
 */
export function formBuilderBackofficeFormReorderElements(params) {
    return { evid: 1534, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderBackofficeFormViewSubmissionTableFromSettings' event (evid: 1535)
 *
 * Event description: Form Builder - backoffice form - view submission table from settings
 *
 * @param {formBuilderBackofficeFormViewSubmissionTableFromSettingsParams} params - The parameters for this event
 * @property {string} builderOrigin - builderOrigin
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form_comp_id
 * @property {GUID} vsi - vsi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderBackofficeFormViewSubmissionTableFromSettingsParams>} LogObject<formBuilderBackofficeFormViewSubmissionTableFromSettingsParams>
 */
export function formBuilderBackofficeFormViewSubmissionTableFromSettings(params) {
    return { evid: 1535, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderBackofficeFormAddEmailInSettings' event (evid: 1536)
 *
 * Event description: Form Builder - backoffice form - add email in settings
 *
 * @param {formBuilderBackofficeFormAddEmailInSettingsParams} params - The parameters for this event
 * @property {string} builderOrigin - builderOrigin
 * @property {string} emailType - emailType
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form_comp_id
 * @property {GUID} vsi - vsi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderBackofficeFormAddEmailInSettingsParams>} LogObject<formBuilderBackofficeFormAddEmailInSettingsParams>
 */
export function formBuilderBackofficeFormAddEmailInSettings(params) {
    return { evid: 1536, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderBackofficeFormSettingsToggleEmailType' event (evid: 1539)
 *
 * Event description: Form Builder - backoffice form - settings - toggle email type
 *
 * @param {formBuilderBackofficeFormSettingsToggleEmailTypeParams} params - The parameters for this event
 * @property {string} builderOrigin - builderOrigin
 * @property {string} emailType - emailType
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form_comp_id
 * @property {GUID} vsi - vsi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderBackofficeFormSettingsToggleEmailTypeParams>} LogObject<formBuilderBackofficeFormSettingsToggleEmailTypeParams>
 */
export function formBuilderBackofficeFormSettingsToggleEmailType(params) {
    return { evid: 1539, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardMySitesWelcomeMessageForProsDisplayed' event (evid: 154)
 *
 * Event description: welcome message of pro account is displayed
 *
 * @param {dashboardMySitesWelcomeMessageForProsDisplayedParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @return {LogObject<dashboardMySitesWelcomeMessageForProsDisplayedParams>} LogObject<dashboardMySitesWelcomeMessageForProsDisplayedParams>
 */
export function dashboardMySitesWelcomeMessageForProsDisplayed(params) {
    return { evid: 154, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesCreateInvoiceEnterItemDescription' event (evid: 1540)
 *
 * Event description: Create invoice - Enter Item Description
 *
 * @param {quotesCreateInvoiceEnterItemDescriptionParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} invoiceType - ’recurringAutoCharge’/ 'recurring'/ 'one time'
 * @property {string} origin - create invoice, edit invoice
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {GUID} invoice_id - invoice guid
 * @return {LogObject<quotesCreateInvoiceEnterItemDescriptionParams>} LogObject<quotesCreateInvoiceEnterItemDescriptionParams>
 */
export function quotesCreateInvoiceEnterItemDescription(params) {
    return { evid: 1540, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesCreateInvoiceClickOnSeeMoreItems' event (evid: 1541)
 *
 * Event description: Create invoice - Click on “See More Items”
 *
 * @param {quotesCreateInvoiceClickOnSeeMoreItemsParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} productSource - product source
 * @property {string} invoiceType - ’recurringAutoCharge’/ 'recurring'/ 'one time'
 * @property {string} origin - create invoice, edit invoice
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {GUID} invoice_id - invoice guid
 * @return {LogObject<quotesCreateInvoiceClickOnSeeMoreItemsParams>} LogObject<quotesCreateInvoiceClickOnSeeMoreItemsParams>
 */
export function quotesCreateInvoiceClickOnSeeMoreItems(params) {
    return { evid: 1541, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesCreateInvoiceRearrangeItems' event (evid: 1542)
 *
 * Event description: Quotes - Create invoice - Rearrange Items.
 *
 * @param {quotesCreateInvoiceRearrangeItemsParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} invoiceType - ’recurringAutoCharge’/ 'recurring'/ 'one time'
 * @property {string} origin - create invoice, edit invoice
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<quotesCreateInvoiceRearrangeItemsParams>} LogObject<quotesCreateInvoiceRearrangeItemsParams>
 */
export function quotesCreateInvoiceRearrangeItems(params) {
    return { evid: 1542, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesCreateInvoiceClickOnAddTax' event (evid: 1543)
 *
 * Event description: Create invoice - user Clicks on Add Tax
 *
 * @param {quotesCreateInvoiceClickOnAddTaxParams} params - The parameters for this event
 * @property {string} source - deprecated
 * @property {string} view_type - view_type
 * @property {string} invoiceType - ’recurringAutoCharge’/ 'recurring'/ 'one time'
 * @property {string} origin - create invoice, edit invoice
 * @property {string} platform - deprecated
 * @property {string} msid - msid
 * @property {GUID} invoice_id - invoice guid
 * @return {LogObject<quotesCreateInvoiceClickOnAddTaxParams>} LogObject<quotesCreateInvoiceClickOnAddTaxParams>
 */
export function quotesCreateInvoiceClickOnAddTax(params) {
    return { evid: 1543, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesCreateInvoiceTaxSelected' event (evid: 1544)
 *
 * Event description: Create invoice - user Clicks on Add Tax
 *
 * @param {quotesCreateInvoiceTaxSelectedParams} params - The parameters for this event
 * @property {string} source - deprecated
 * @property {string} view_type - view_type
 * @property {string} invoiceType - ’recurringAutoCharge’/ 'recurring'/ 'one time'
 * @property {string} origin - create invoice, edit invoice
 * @property {string} platform - deprecated
 * @property {string} msid - msid
 * @property {string} value - value of tax
 * @property {GUID} invoice_id - invoice guid
 * @return {LogObject<quotesCreateInvoiceTaxSelectedParams>} LogObject<quotesCreateInvoiceTaxSelectedParams>
 */
export function quotesCreateInvoiceTaxSelected(params) {
    return { evid: 1544, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesCreateInvoiceClickOnInvoiceSettings' event (evid: 1545)
 *
 * Event description: Quotes - Create invoice - click on invoice settings.
 *
 * @param {quotesCreateInvoiceClickOnInvoiceSettingsParams} params - The parameters for this event
 * @property {string} source - source
 * @property {string} view_type - view_type
 * @property {string} invoiceType - ’recurringAutoCharge’/ 'recurring'/ 'one time'
 * @property {string} origin - origin
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {GUID} invoice_id - invoice guid
 * @return {LogObject<quotesCreateInvoiceClickOnInvoiceSettingsParams>} LogObject<quotesCreateInvoiceClickOnInvoiceSettingsParams>
 */
export function quotesCreateInvoiceClickOnInvoiceSettings(params) {
    return { evid: 1545, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesCreateInvoiceAddRemoveDiscount' event (evid: 1546)
 *
 * Event description: Create invoice - user adding or removing discounts
 *
 * @param {quotesCreateInvoiceAddRemoveDiscountParams} params - The parameters for this event
 * @property {string} source - source
 * @property {string} view_type - view_type
 * @property {string} invoiceType - ’recurringAutoCharge’/ 'recurring'/ 'one time'
 * @property {string} origin - create invoice, edit invoice
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {string} value - add/remove
 * @property {GUID} invoice_id - invoice guid
 * @return {LogObject<quotesCreateInvoiceAddRemoveDiscountParams>} LogObject<quotesCreateInvoiceAddRemoveDiscountParams>
 */
export function quotesCreateInvoiceAddRemoveDiscount(params) {
    return { evid: 1546, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesCreateInvoiceLeavingCreateInvoicePagePopUpAppears' event (evid: 1547)
 *
 * Event description: Create invoice - user leaving the create invoice page leading to a pop up appearance
 *
 * @param {quotesCreateInvoiceLeavingCreateInvoicePagePopUpAppearsParams} params - The parameters for this event
 * @property {string} source - source
 * @property {string} view_type - view_type
 * @property {string} origin - create invoice, edit invoice
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {GUID} invoice_id - invoice guid
 * @return {LogObject<quotesCreateInvoiceLeavingCreateInvoicePagePopUpAppearsParams>} LogObject<quotesCreateInvoiceLeavingCreateInvoicePagePopUpAppearsParams>
 */
export function quotesCreateInvoiceLeavingCreateInvoicePagePopUpAppears(params) {
    return { evid: 1547, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesCreateInvoiceLeavingCreateInvoicePagePopUpResolution' event (evid: 1548)
 *
 * Event description: Create invoice - user choose between saving and leaving w/o saving the invoice
 *
 * @param {quotesCreateInvoiceLeavingCreateInvoicePagePopUpResolutionParams} params - The parameters for this event
 * @property {string} source - source
 * @property {string} view_type - view_type
 * @property {string} origin - create invoice, edit invoice
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {string} value - save / do not save / X
 * @property {GUID} invoice_id - invoice guid
 * @return {LogObject<quotesCreateInvoiceLeavingCreateInvoicePagePopUpResolutionParams>} LogObject<quotesCreateInvoiceLeavingCreateInvoicePagePopUpResolutionParams>
 */
export function quotesCreateInvoiceLeavingCreateInvoicePagePopUpResolution(params) {
    return { evid: 1548, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesPreviewInvoiceClickInPreviewPageMenu' event (evid: 1549)
 *
 * Event description: Create invoice - user click in preview page menu
 *
 * @param {quotesPreviewInvoiceClickInPreviewPageMenuParams} params - The parameters for this event
 * @property {string} source - (invoices/ crm home/ os dashboard)
 * @property {GUID} externalId - external_id
 * @property {string} view_type - view_type
 * @property {string} invoiceType - ’recurringAutoCharge’/ 'recurring'/ 'one time'
 * @property {string} origin - create invoice, edit invoice
 * @property {GUID} invoiceSource - invoice_source
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {string} value - share / print / edit / resend via email/ send via email
 * @property {GUID} invoice_id - invoice guid
 * @return {LogObject<quotesPreviewInvoiceClickInPreviewPageMenuParams>} LogObject<quotesPreviewInvoiceClickInPreviewPageMenuParams>
 */
export function quotesPreviewInvoiceClickInPreviewPageMenu(params) {
    return { evid: 1549, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardMySitesWelcomeMessageForProsClick' event (evid: 155)
 *
 * Event description: user clicked in welcome message of pro account, clicks":  close, disable, "check it out"
 *
 * @param {dashboardMySitesWelcomeMessageForProsClickParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} action - check it out, close, disable
 * @return {LogObject<dashboardMySitesWelcomeMessageForProsClickParams>} LogObject<dashboardMySitesWelcomeMessageForProsClickParams>
 */
export function dashboardMySitesWelcomeMessageForProsClick(params) {
    return { evid: 155, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesCreateInvoiceUserClickOnSendInvoice' event (evid: 1550)
 *
 * Event description: Create invoice -user click on send invoice
 *
 * @param {quotesCreateInvoiceUserClickOnSendInvoiceParams} params - The parameters for this event
 * @property {string} source - source
 * @property {string} view_type - view_type
 * @property {string} invoiceType - ’recurringAutoCharge’/ 'recurring'/ 'one time'
 * @property {string} origin - create invoice, edit invoice
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {GUID} invoice_id - invoice guid
 * @return {LogObject<quotesCreateInvoiceUserClickOnSendInvoiceParams>} LogObject<quotesCreateInvoiceUserClickOnSendInvoiceParams>
 */
export function quotesCreateInvoiceUserClickOnSendInvoice(params) {
    return { evid: 1550, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesCreateInvoiceSendInvoiceModalResolution' event (evid: 1551)
 *
 * Event description: Create invoice - user choose between Send or cancel in invoice final modal
 *
 * @param {quotesCreateInvoiceSendInvoiceModalResolutionParams} params - The parameters for this event
 * @property {string} source - source
 * @property {string} view_type - view_type
 * @property {string} invoiceType - ’recurringAutoCharge’/ 'recurring'/ 'one time'
 * @property {string} origin - create invoice, edit invoice
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {string} value - send / cancel / X
 * @property {GUID} invoice_id - invoice guid
 * @return {LogObject<quotesCreateInvoiceSendInvoiceModalResolutionParams>} LogObject<quotesCreateInvoiceSendInvoiceModalResolutionParams>
 */
export function quotesCreateInvoiceSendInvoiceModalResolution(params) {
    return { evid: 1551, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesCreateInvoiceSendInvoiceModalFieldChange' event (evid: 1552)
 *
 * Event description: Create invoice - user change message or subject line in the send invoice final modal
 *
 * @param {quotesCreateInvoiceSendInvoiceModalFieldChangeParams} params - The parameters for this event
 * @property {string} source - source
 * @property {string} view_type - view_type
 * @property {string} invoiceType - ’recurringAutoCharge’/ 'recurring'/ 'one time'
 * @property {string} fieldName - subject line /message
 * @property {string} origin - create invoice, edit invoice
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {GUID} invoice_id - invoice guid
 * @return {LogObject<quotesCreateInvoiceSendInvoiceModalFieldChangeParams>} LogObject<quotesCreateInvoiceSendInvoiceModalFieldChangeParams>
 */
export function quotesCreateInvoiceSendInvoiceModalFieldChange(params) {
    return { evid: 1552, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesCreateInvoiceAdditionalInfoFieldChange' event (evid: 1553)
 *
 * Event description: Create invoice - user change notes or legal terms fields in the Additional Info section
 *
 * @param {quotesCreateInvoiceAdditionalInfoFieldChangeParams} params - The parameters for this event
 * @property {string} source - source
 * @property {string} view_type - view_type
 * @property {string} invoiceType - ’recurringAutoCharge’/ 'recurring'/ 'one time'
 * @property {string} fieldName - notes  /legal terms
 * @property {string} origin - create invoice, edit invoice
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {GUID} invoice_id - invoice guid
 * @return {LogObject<quotesCreateInvoiceAdditionalInfoFieldChangeParams>} LogObject<quotesCreateInvoiceAdditionalInfoFieldChangeParams>
 */
export function quotesCreateInvoiceAdditionalInfoFieldChange(params) {
    return { evid: 1553, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesCreateInvoiceChangingEmailOfAContactForPaidInvoice' event (evid: 1554)
 *
 * Event description: Create invoice - user Changing email of a contact for paid invoice - pop up resolution
 *
 * @param {quotesCreateInvoiceChangingEmailOfAContactForPaidInvoiceParams} params - The parameters for this event
 * @property {string} source - source
 * @property {string} view_type - view_type
 * @property {string} origin - create invoice, edit invoice
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {string} value - proceed / cancel / X
 * @property {GUID} invoice_id - invoice guid
 * @return {LogObject<quotesCreateInvoiceChangingEmailOfAContactForPaidInvoiceParams>} LogObject<quotesCreateInvoiceChangingEmailOfAContactForPaidInvoiceParams>
 */
export function quotesCreateInvoiceChangingEmailOfAContactForPaidInvoice(params) {
    return { evid: 1554, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesCreateInvoiceAdditionalInfoHoverOnTooltipShown' event (evid: 1555)
 *
 * Event description: Create invoice - user hover over notes or legal terms fields in the Additional Info section, leading to tooltip appear
 *
 * @param {quotesCreateInvoiceAdditionalInfoHoverOnTooltipShownParams} params - The parameters for this event
 * @property {string} source - source
 * @property {string} view_type - view_type
 * @property {string} invoiceType - ’recurringAutoCharge’/ 'recurring'/ 'one time'
 * @property {string} fieldName - notes  /legal terms
 * @property {string} origin - create invoice, edit invoice
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {GUID} invoice_id - invoice guid
 * @return {LogObject<quotesCreateInvoiceAdditionalInfoHoverOnTooltipShownParams>} LogObject<quotesCreateInvoiceAdditionalInfoHoverOnTooltipShownParams>
 */
export function quotesCreateInvoiceAdditionalInfoHoverOnTooltipShown(params) {
    return { evid: 1555, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'notificationClickOnAccountNotification' event (evid: 1556)
 *
 * Event description: user clicks on a account notification and opens app
 *
 * @param {notificationClickOnAccountNotificationParams} params - The parameters for this event
 * @property {string} feed_name - account notifications
 * @property {string} channel - Web / browser / mobile / SMS / email
 * @property {string} view_type - view_type
 * @property {string} grouped_sites - json {site:<msid> , badge:<num of unread notifications>}>
 * @property {string} contact_id - contact_id
 * @property {string} platform - -
 * @property {GUID} msid - msid of the notification
 * @return {LogObject<notificationClickOnAccountNotificationParams>} LogObject<notificationClickOnAccountNotificationParams>
 */
export function notificationClickOnAccountNotification(params) {
    return { evid: 1556, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderBackofficeFormSettingsContactSync' event (evid: 1557)
 *
 * Event description: Form Builder - backoffice form - settings - contact sync
 *
 * @param {formBuilderBackofficeFormSettingsContactSyncParams} params - The parameters for this event
 * @property {string} builderOrigin - builderOrigin
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form_comp_id
 * @property {GUID} vsi - vsi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderBackofficeFormSettingsContactSyncParams>} LogObject<formBuilderBackofficeFormSettingsContactSyncParams>
 */
export function formBuilderBackofficeFormSettingsContactSync(params) {
    return { evid: 1557, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardAccountSettingsRenderedWithShowProBoxValue' event (evid: 156)
 *
 * Event description: Account settings rendered with indicator if pro-account box is shown
 *
 * @param {dashboardAccountSettingsRenderedWithShowProBoxValueParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {boolean} show_pro_box - true if box is shown
 * @property {string} platform - platform
 * @return {LogObject<dashboardAccountSettingsRenderedWithShowProBoxValueParams>} LogObject<dashboardAccountSettingsRenderedWithShowProBoxValueParams>
 */
export function dashboardAccountSettingsRenderedWithShowProBoxValue(params) {
    return { evid: 156, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderBackofficeFormRemoveDescription' event (evid: 1560)
 *
 * Event description: Form Builder - backoffice form - remove description
 *
 * @param {formBuilderBackofficeFormRemoveDescriptionParams} params - The parameters for this event
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form_comp_id
 * @property {GUID} vsi - vsi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderBackofficeFormRemoveDescriptionParams>} LogObject<formBuilderBackofficeFormRemoveDescriptionParams>
 */
export function formBuilderBackofficeFormRemoveDescription(params) {
    return { evid: 1560, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'invoicesNewRecurrentInvoiceClick' event (evid: 1564)
 *
 * Event description: Invoices - New Recurrent invoice click
 *
 * @param {invoicesNewRecurrentInvoiceClickParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<invoicesNewRecurrentInvoiceClickParams>} LogObject<invoicesNewRecurrentInvoiceClickParams>
 */
export function invoicesNewRecurrentInvoiceClick(params) {
    return { evid: 1564, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'invoicesChooseADueDateRecurringInvoices' event (evid: 1565)
 *
 * Event description: Quotes - choose a due date - recurring invoices
 *
 * @param {invoicesChooseADueDateRecurringInvoicesParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<invoicesChooseADueDateRecurringInvoicesParams>} LogObject<invoicesChooseADueDateRecurringInvoicesParams>
 */
export function invoicesChooseADueDateRecurringInvoices(params) {
    return { evid: 1565, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'invoicesRecurringSelectABillingCycle' event (evid: 1566)
 *
 * Event description: Quotes - recurring - select a billing cycle
 *
 * @param {invoicesRecurringSelectABillingCycleParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {string} value - selected value of billing cycle
 * @return {LogObject<invoicesRecurringSelectABillingCycleParams>} LogObject<invoicesRecurringSelectABillingCycleParams>
 */
export function invoicesRecurringSelectABillingCycle(params) {
    return { evid: 1566, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'invoicesRecurringSelectNumberOfOccurrences' event (evid: 1567)
 *
 * Event description: Quotes - recurring - select number of occurrences
 *
 * @param {invoicesRecurringSelectNumberOfOccurrencesParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {string} value - selected value of occurrences
 * @return {LogObject<invoicesRecurringSelectNumberOfOccurrencesParams>} LogObject<invoicesRecurringSelectNumberOfOccurrencesParams>
 */
export function invoicesRecurringSelectNumberOfOccurrences(params) {
    return { evid: 1567, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'invoicesRecurringSelectCustomNumberOfOccurrences' event (evid: 1568)
 *
 * Event description: Quotes - recurring - select custom number of occurrences
 *
 * @param {invoicesRecurringSelectCustomNumberOfOccurrencesParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {string} value - selected value of occurrences
 * @return {LogObject<invoicesRecurringSelectCustomNumberOfOccurrencesParams>} LogObject<invoicesRecurringSelectCustomNumberOfOccurrencesParams>
 */
export function invoicesRecurringSelectCustomNumberOfOccurrences(params) {
    return { evid: 1568, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'invoicesRecurringIsAutoCharge' event (evid: 1569)
 *
 * Event description: user selects if to charge the customer automatically or user will pay for each time
 *
 * @param {invoicesRecurringIsAutoChargeParams} params - The parameters for this event
 * @property {boolean} chargeAutomatically - true/ false
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<invoicesRecurringIsAutoChargeParams>} LogObject<invoicesRecurringIsAutoChargeParams>
 */
export function invoicesRecurringIsAutoCharge(params) {
    return { evid: 1569, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardMySitesSiteHomeAlertMessageFromPremiumDisplay' event (evid: 157)
 *
 * Event description: when a user opens my-sites/site-home he receives a message based on notifications that transferred from premiums. This event collects  about what shown to user
 *
 * @param {dashboardMySitesSiteHomeAlertMessageFromPremiumDisplayParams} params - The parameters for this event
 * @property {GUID} alert_id - deprecated
 * @property {string} alert_type - alert_message
 * @property {string} view_type - view_type
 * @property {string} premium_alert_id - alert received from premium
 * @property {string} platform - platform
 * @property {string} hosting - MA/editor
 * @return {LogObject<dashboardMySitesSiteHomeAlertMessageFromPremiumDisplayParams>} LogObject<dashboardMySitesSiteHomeAlertMessageFromPremiumDisplayParams>
 */
export function dashboardMySitesSiteHomeAlertMessageFromPremiumDisplay(params) {
    return { evid: 157, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'invoicesRecurringClickOnGetStarted' event (evid: 1570)
 *
 * Event description: Quotes - recurring - click on Get Started
 *
 * @param {invoicesRecurringClickOnGetStartedParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<invoicesRecurringClickOnGetStartedParams>} LogObject<invoicesRecurringClickOnGetStartedParams>
 */
export function invoicesRecurringClickOnGetStarted(params) {
    return { evid: 1570, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'invoicesRecurringClickOnHowDoRecurringInvoicesWork' event (evid: 1571)
 *
 * Event description: user clicks on 'How do recurring invoices work’
 *
 * @param {invoicesRecurringClickOnHowDoRecurringInvoicesWorkParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<invoicesRecurringClickOnHowDoRecurringInvoicesWorkParams>} LogObject<invoicesRecurringClickOnHowDoRecurringInvoicesWorkParams>
 */
export function invoicesRecurringClickOnHowDoRecurringInvoicesWork(params) {
    return { evid: 1571, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'invoicesRecurringSetPaymentTermsPageClickOnNext' event (evid: 1572)
 *
 * Event description: Invoices - recurring - Set Payment Terms page - click on Next
 *
 * @param {invoicesRecurringSetPaymentTermsPageClickOnNextParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<invoicesRecurringSetPaymentTermsPageClickOnNextParams>} LogObject<invoicesRecurringSetPaymentTermsPageClickOnNextParams>
 */
export function invoicesRecurringSetPaymentTermsPageClickOnNext(params) {
    return { evid: 1572, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'invoicesRecurringSetPaymentTermsPageClickOnCancel' event (evid: 1573)
 *
 * Event description: Invoices - recurring - Set Payment Terms page - click on Cancel
 *
 * @param {invoicesRecurringSetPaymentTermsPageClickOnCancelParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<invoicesRecurringSetPaymentTermsPageClickOnCancelParams>} LogObject<invoicesRecurringSetPaymentTermsPageClickOnCancelParams>
 */
export function invoicesRecurringSetPaymentTermsPageClickOnCancel(params) {
    return { evid: 1573, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'invoicesRecurringClickOnBackToastInNewRecurringInvoicesCreationPage' event (evid: 1574)
 *
 * Event description: user clicks on back toast in the New Recurring Invoices creation page
 *
 * @param {invoicesRecurringClickOnBackToastInNewRecurringInvoicesCreationPageParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<invoicesRecurringClickOnBackToastInNewRecurringInvoicesCreationPageParams>} LogObject<invoicesRecurringClickOnBackToastInNewRecurringInvoicesCreationPageParams>
 */
export function invoicesRecurringClickOnBackToastInNewRecurringInvoicesCreationPage(params) {
    return { evid: 1574, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'invoicesRecurringClickOnConnectNowForAutoCharging' event (evid: 1575)
 *
 * Event description: Invoices - recurring - click on connect now for auto charging
 *
 * @param {invoicesRecurringClickOnConnectNowForAutoChargingParams} params - The parameters for this event
 * @property {string} source - hover / page
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<invoicesRecurringClickOnConnectNowForAutoChargingParams>} LogObject<invoicesRecurringClickOnConnectNowForAutoChargingParams>
 */
export function invoicesRecurringClickOnConnectNowForAutoCharging(params) {
    return { evid: 1575, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'invoicesRecurringClickOnLearnMoreAboutAutomaticCharging' event (evid: 1576)
 *
 * Event description: Invoices - recurring - click on Learn More about automatic charging
 *
 * @param {invoicesRecurringClickOnLearnMoreAboutAutomaticChargingParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<invoicesRecurringClickOnLearnMoreAboutAutomaticChargingParams>} LogObject<invoicesRecurringClickOnLearnMoreAboutAutomaticChargingParams>
 */
export function invoicesRecurringClickOnLearnMoreAboutAutomaticCharging(params) {
    return { evid: 1576, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'invoicesRecurringFilterInvoices' event (evid: 1577)
 *
 * Event description: user filters the recurring invoices view
 *
 * @param {invoicesRecurringFilterInvoicesParams} params - The parameters for this event
 * @property {string} name - name of filter
 * @property {number} num_of_invoices - number of invoices the user has
 * @property {string} view_type - view_type
 * @property {string} origin_device - web,native
 * @property {string} platform - platform
 * @property {string} filter_type - period, currency, display
 * @property {string} msid - msid
 * @return {LogObject<invoicesRecurringFilterInvoicesParams>} LogObject<invoicesRecurringFilterInvoicesParams>
 */
export function invoicesRecurringFilterInvoices(params) {
    return { evid: 1577, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'invoicesRecurringTableActions' event (evid: 1578)
 *
 * Event description: user selecting an action in recurring invoices table for a specific invoice
 *
 * @param {invoicesRecurringTableActionsParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {GUID} invoiceId - instanceId
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {string} action - edit/duplicate/view invoices/cancel
 * @return {LogObject<invoicesRecurringTableActionsParams>} LogObject<invoicesRecurringTableActionsParams>
 */
export function invoicesRecurringTableActions(params) {
    return { evid: 1578, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'invoicesRecurringSearchInvoices' event (evid: 1579)
 *
 * Event description: user searches in the invoices view
 *
 * @param {invoicesRecurringSearchInvoicesParams} params - The parameters for this event
 * @property {number} num_of_invoices - number of invoices the user has
 * @property {string} view_type - view_type
 * @property {string} text - text searched
 * @property {number} num_of_results - number of returned results
 * @property {string} origin_device - web,native
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<invoicesRecurringSearchInvoicesParams>} LogObject<invoicesRecurringSearchInvoicesParams>
 */
export function invoicesRecurringSearchInvoices(params) {
    return { evid: 1579, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardMySitesSiteHomeAlertMessageFromPremiumClick' event (evid: 158)
 *
 * Event description: when a user opens my-sites/site-home he receives a message based on notifications that transferred from premiums. This event collects data about what user choose
 *
 * @param {dashboardMySitesSiteHomeAlertMessageFromPremiumClickParams} params - The parameters for this event
 * @property {string} alert_type - alert_message
 * @property {string} view_type - view_type
 * @property {string} premium_alert_id - alert received from premium
 * @property {string} platform - platform
 * @property {string} hosting - hosting
 * @property {string} action - close (window), cancel , OK
 * @return {LogObject<dashboardMySitesSiteHomeAlertMessageFromPremiumClickParams>} LogObject<dashboardMySitesSiteHomeAlertMessageFromPremiumClickParams>
 */
export function dashboardMySitesSiteHomeAlertMessageFromPremiumClick(params) {
    return { evid: 158, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'invoicesRecurringCancelSubscription' event (evid: 1580)
 *
 * Event description: Invoices - recurring- cancel subscription
 *
 * @param {invoicesRecurringCancelSubscriptionParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {string} value - ’cancel subscription’ / ‘cancel’ / ‘X’
 * @return {LogObject<invoicesRecurringCancelSubscriptionParams>} LogObject<invoicesRecurringCancelSubscriptionParams>
 */
export function invoicesRecurringCancelSubscription(params) {
    return { evid: 1580, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'invoicesRecurringClickOnNewRecurringInvoiceSrc5Evid1581' event (evid: 1581)
 *
 * Event description: User clicks on New Recurring Invoice
 *
 * @param {invoicesRecurringClickOnNewRecurringInvoiceSrc5Evid1581Params} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<invoicesRecurringClickOnNewRecurringInvoiceSrc5Evid1581Params>} LogObject<invoicesRecurringClickOnNewRecurringInvoiceSrc5Evid1581Params>
 */
export function invoicesRecurringClickOnNewRecurringInvoiceSrc5Evid1581(params) {
    return { evid: 1581, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'invoicesRecurringHoverOnNextWhenNotConnectedToPaymentMethod' event (evid: 1582)
 *
 * Event description: Hover on next when user is not connected to a supported payment method
 *
 * @param {invoicesRecurringHoverOnNextWhenNotConnectedToPaymentMethodParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<invoicesRecurringHoverOnNextWhenNotConnectedToPaymentMethodParams>} LogObject<invoicesRecurringHoverOnNextWhenNotConnectedToPaymentMethodParams>
 */
export function invoicesRecurringHoverOnNextWhenNotConnectedToPaymentMethod(params) {
    return { evid: 1582, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'invoicesRecurringBackToRecurringInvoiceFromConnectPayment' event (evid: 1583)
 *
 * Event description: Invoices - recurring- back to recurring invoice from connect payment
 *
 * @param {invoicesRecurringBackToRecurringInvoiceFromConnectPaymentParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<invoicesRecurringBackToRecurringInvoiceFromConnectPaymentParams>} LogObject<invoicesRecurringBackToRecurringInvoiceFromConnectPaymentParams>
 */
export function invoicesRecurringBackToRecurringInvoiceFromConnectPayment(params) {
    return { evid: 1583, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cookieBannerThemeClicked' event (evid: 1584)
 *
 * Event description: User chooses a banner theme
 *
 * @param {cookieBannerThemeClickedParams} params - The parameters for this event
 * @property {string} is_banner_live - yes / no
 * @property {string} theme_clicked - light / dark / custom
 * @return {LogObject<cookieBannerThemeClickedParams>} LogObject<cookieBannerThemeClickedParams>
 */
export function cookieBannerThemeClicked(params) {
    return { evid: 1584, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderFormSettingsNotificationsClickOnButton' event (evid: 1586)
 *
 * Event description: form notification setting, user click on a button (business manager)
 *
 * @param {formBuilderFormSettingsNotificationsClickOnButtonParams} params - The parameters for this event
 * @property {string} recommendations_chosen - is the user in the recommendations section? (true or false)
 * @property {GUID} uuid - uuid
 * @property {GUID} visitor_id - visitor_id
 * @property {string} button_name - button name
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} origin - from where the user clicked
 * @property {string} type - website form or standalone form
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderFormSettingsNotificationsClickOnButtonParams>} LogObject<formBuilderFormSettingsNotificationsClickOnButtonParams>
 */
export function formBuilderFormSettingsNotificationsClickOnButton(params) {
    return { evid: 1586, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'invoicesRecurringClickOnNewRecurringInvoice' event (evid: 1587)
 *
 * Event description: Click on New Recurring Invoice
 *
 * @param {invoicesRecurringClickOnNewRecurringInvoiceParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} origin - [create new recurring invoice, create first recurring invoice]
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<invoicesRecurringClickOnNewRecurringInvoiceParams>} LogObject<invoicesRecurringClickOnNewRecurringInvoiceParams>
 */
export function invoicesRecurringClickOnNewRecurringInvoice(params) {
    return { evid: 1587, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderFormSettingsNotificationsToggle' event (evid: 1588)
 *
 * Event description: Form notification setting, user select how he wants to get notified when the form is submitted (business manager)
 *
 * @param {formBuilderFormSettingsNotificationsToggleParams} params - The parameters for this event
 * @property {GUID} uuid - uuid
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} origin - from where the user clicked
 * @property {string} type - website form or standalone form
 * @property {GUID} msid - msid
 * @property {string} value - 'Recommended' or 'Email Only'
 * @return {LogObject<formBuilderFormSettingsNotificationsToggleParams>} LogObject<formBuilderFormSettingsNotificationsToggleParams>
 */
export function formBuilderFormSettingsNotificationsToggle(params) {
    return { evid: 1588, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'mySitesShowTooltip' event (evid: 159)
 *
 * Event description: select a site tooltip
 *
 * @param {mySitesShowTooltipParams} params - The parameters for this event
 * @property {string} name - tooltip name
 * @property {string} view_type - view_type
 * @property {string} num_of_sites - num of sites on screen
 * @property {string} platform - platform
 * @return {LogObject<mySitesShowTooltipParams>} LogObject<mySitesShowTooltipParams>
 */
export function mySitesShowTooltip(params) {
    return { evid: 159, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'inAppTipsGenericExposureEvent' event (evid: 1590)
 *
 * Event description: general in-app tip exposure event
 *
 * @param {inAppTipsGenericExposureEventParams} params - The parameters for this event
 * @property {GUID} offering_guid - offering guid from dealer
 * @property {string} platform - --
 * @property {GUID} msid - msid
 * @return {LogObject<inAppTipsGenericExposureEventParams>} LogObject<inAppTipsGenericExposureEventParams>
 */
export function inAppTipsGenericExposureEvent(params) {
    return { evid: 1590, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'invoicesOwnerappClickOnCreateNewInvoice' event (evid: 1592)
 *
 * Event description: In invoices widget click on new invoice empty state
 *
 * @param {invoicesOwnerappClickOnCreateNewInvoiceParams} params - The parameters for this event
 * @property {string} paymentType - one time, recurring
 * @property {string} view_type - view_type
 * @property {string} tabName - most recent / overdue
 * @property {string} invoiceType - ’recurringAutoCharge’/ 'recurring'/ 'one time'
 * @property {string} origin - my invoices, edit invoice, widget
 * @property {string} origin_device - web,native
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<invoicesOwnerappClickOnCreateNewInvoiceParams>} LogObject<invoicesOwnerappClickOnCreateNewInvoiceParams>
 */
export function invoicesOwnerappClickOnCreateNewInvoice(params) {
    return { evid: 1592, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'invoicesOwnerappClickOnInvoice' event (evid: 1593)
 *
 * Event description: Click on invoice in owner app widget
 *
 * @param {invoicesOwnerappClickOnInvoiceParams} params - The parameters for this event
 * @property {string} paymentType - one time, recurring
 * @property {string} view_type - view_type
 * @property {string} tabName - most recent / overdue
 * @property {string} invoiceType - ’recurringAutoCharge’/ 'recurring'/ 'one time'
 * @property {string} origin - my invoices, edit invoice, widget
 * @property {string} origin_device - web,native
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {GUID} invoice_id - invoice guid
 * @return {LogObject<invoicesOwnerappClickOnInvoiceParams>} LogObject<invoicesOwnerappClickOnInvoiceParams>
 */
export function invoicesOwnerappClickOnInvoice(params) {
    return { evid: 1593, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'invoicesOwnerappClickOnViewAllInvoice' event (evid: 1594)
 *
 * Event description: Click on  view all invoice in owner app widget
 *
 * @param {invoicesOwnerappClickOnViewAllInvoiceParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} tabName - most recent / overdue
 * @property {string} origin - my invoices, edit invoice, widget
 * @property {string} origin_device - web,native
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<invoicesOwnerappClickOnViewAllInvoiceParams>} LogObject<invoicesOwnerappClickOnViewAllInvoiceParams>
 */
export function invoicesOwnerappClickOnViewAllInvoice(params) {
    return { evid: 1594, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'invoicesOwnerappClickOnTabs' event (evid: 1595)
 *
 * Event description: Click on  tabs in owner app widget
 *
 * @param {invoicesOwnerappClickOnTabsParams} params - The parameters for this event
 * @property {string} button_name - most recent / overdue / manage invoices
 * @property {string} view_type - view_type
 * @property {string} origin - my invoices, edit invoice, widget
 * @property {string} origin_device - web,native
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<invoicesOwnerappClickOnTabsParams>} LogObject<invoicesOwnerappClickOnTabsParams>
 */
export function invoicesOwnerappClickOnTabs(params) {
    return { evid: 1595, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardSiteSelectorStartLoading' event (evid: 1596)
 *
 * Event description: send when site selector start loading
 *
 * @param {dashboardSiteSelectorStartLoadingParams} params - The parameters for this event
 * @property {string} filtered - premium/published/adi / none
 * @property {string} selectionType - single / multi
 * @property {string} view_type - view_type
 * @property {Url} action_url - action_url
 * @property {Url} referral - from where the screen was open
 * @property {string} status - no thumbnails / empty state / success
 * @property {string} siteType - htmlWeb / modal
 * @property {string} version_experienced - which experience the user is getting in Site Selector (old/new)
 * @property {number} site_type_enriched - site_type
 * @property {string} platform - platform
 * @property {Url} page_url - page url
 * @property {string} device - mobile / desktop
 * @return {LogObject<dashboardSiteSelectorStartLoadingParams>} LogObject<dashboardSiteSelectorStartLoadingParams>
 */
export function dashboardSiteSelectorStartLoading(params) {
    return { evid: 1596, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardSiteSelectorSearch' event (evid: 1597)
 *
 * Event description: when users searches in site selector
 *
 * @param {dashboardSiteSelectorSearchParams} params - The parameters for this event
 * @property {string} filtered_by - premium/published/adi / none
 * @property {string} selectionType - single / multi
 * @property {string} view_type - view_type
 * @property {string} site_type - HtmlWeb / modal
 * @property {string} siteType - HtmlWeb / modal
 * @property {number} site_type_enriched - site_type
 * @property {string} platform - platform
 * @property {string} device - mobile / desktop
 * @return {LogObject<dashboardSiteSelectorSearchParams>} LogObject<dashboardSiteSelectorSearchParams>
 */
export function dashboardSiteSelectorSearch(params) {
    return { evid: 1597, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardSiteSelectorSearchResults' event (evid: 1598)
 *
 * Event description: dashboard > site selector search results.
 *
 * @param {dashboardSiteSelectorSearchResultsParams} params - The parameters for this event
 * @property {string} filtered_by - premium/published/adi / none
 * @property {string} selectionType - single / multi
 * @property {string} view_type - view_type
 * @property {string} site_type - HtmlWeb / modal
 * @property {string} status - success / no match
 * @property {number} site_type_enriched - site_type
 * @property {string} type - HtmlWeb /modal
 * @property {string} platform - platform
 * @property {string} device - mobile / desktop
 * @return {LogObject<dashboardSiteSelectorSearchResultsParams>} LogObject<dashboardSiteSelectorSearchResultsParams>
 */
export function dashboardSiteSelectorSearchResults(params) {
    return { evid: 1598, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardSiteSelectorUserNotification' event (evid: 1599)
 *
 * Event description: when users got any notification in site selector
 *
 * @param {dashboardSiteSelectorUserNotificationParams} params - The parameters for this event
 * @property {string} filtered_by - premium/published/adi / none
 * @property {string} selectionType - single / multi
 * @property {string} view_type - view_type
 * @property {string} notificationType - unsupported editor / no permissions / selection limit
 * @property {string} siteType - HtmlWeb / modal
 * @property {number} site_type_enriched - site_type
 * @property {string} platform - platform
 * @property {string} device - mobile / desktop
 * @return {LogObject<dashboardSiteSelectorUserNotificationParams>} LogObject<dashboardSiteSelectorUserNotificationParams>
 */
export function dashboardSiteSelectorUserNotification(params) {
    return { evid: 1599, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardSiteQuickActionClick' event (evid: 16)
 *
 * Event description: dashboard > quick action click.
 *
 * @param {dashboardSiteQuickActionClickParams} params - The parameters for this event
 * @property {string} name - The quick action name (quick_actions.rename_site, quick_actions.move_to_trash, etc.)
 * @property {string} site_class - site_class
 * @property {string} view_type - view_type
 * @property {string} sub_view - sub_view
 * @property {string} referral - --
 * @property {string} origin - sites-list-enterprise\site-list
 * @property {string} cta - ‘sidepanel’ \ ‘menu’
 * @property {GUID} esi - editing session id -  is generated when clicking edit site, it will remain until the url is changed, by navigating to another page or closing the tab
 * @property {string} platform - deprecated
 * @property {string} hosting - editor/ma
 * @property {GUID} msid - The site guid the user opened the menu for
 * @return {LogObject<dashboardSiteQuickActionClickParams>} LogObject<dashboardSiteQuickActionClickParams>
 */
export function dashboardSiteQuickActionClick(params) {
    return { evid: 16, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'mySitesTooltipClose' event (evid: 160)
 *
 * Event description: close the tooltip
 *
 * @param {mySitesTooltipCloseParams} params - The parameters for this event
 * @property {string} name - tooltip name
 * @property {string} view_type - view_type
 * @property {string} num_of_sites - num of sites on screen
 * @property {string} platform - platform
 * @return {LogObject<mySitesTooltipCloseParams>} LogObject<mySitesTooltipCloseParams>
 */
export function mySitesTooltipClose(params) {
    return { evid: 160, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'headerStartLoading' event (evid: 1601)
 *
 * Event description: when the header started loading in my-sites/bizmgr/account manager/partner dashboard the event is sent
 *
 * @param {headerStartLoadingParams} params - The parameters for this event
 * @property {string} page_view - name of the page - my-sites/bizmgr/account manager/partner dashboard
 * @property {boolean} is_partner - true/false
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {GUID} msid - in account level/my-sites send null
 * @return {LogObject<headerStartLoadingParams>} LogObject<headerStartLoadingParams>
 */
export function headerStartLoading(params) {
    return { evid: 1601, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'invoicesRecurringMessagePresentedWhenUserReachesMaxNumberOfRecurringInvoices' event (evid: 1602)
 *
 * Event description: Invoices - recurring- message presented when user reaches max number of recurring invoices.
 *
 * @param {invoicesRecurringMessagePresentedWhenUserReachesMaxNumberOfRecurringInvoicesParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<invoicesRecurringMessagePresentedWhenUserReachesMaxNumberOfRecurringInvoicesParams>} LogObject<invoicesRecurringMessagePresentedWhenUserReachesMaxNumberOfRecurringInvoicesParams>
 */
export function invoicesRecurringMessagePresentedWhenUserReachesMaxNumberOfRecurringInvoices(params) {
    return { evid: 1602, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderWixDataCheck' event (evid: 1607)
 *
 * Event description: Form Builder - wix data check
 *
 * @param {formBuilderWixDataCheckParams} params - The parameters for this event
 * @property {GUID} visitor_id - visitor_id
 * @property {GUID} vsi - vsi
 * @property {string} origin - origin
 * @property {GUID} msid - msid
 * @property {boolean} installed - if the wix data is installed or not
 * @return {LogObject<formBuilderWixDataCheckParams>} LogObject<formBuilderWixDataCheckParams>
 */
export function formBuilderWixDataCheck(params) {
    return { evid: 1607, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardSiteSelectorMoreSitesLoadedSuccessfully' event (evid: 1608)
 *
 * Event description: when user scrolls and loads more sites
 *
 * @param {dashboardSiteSelectorMoreSitesLoadedSuccessfullyParams} params - The parameters for this event
 * @property {string} filtered - premium/published/adi / none
 * @property {string} selectionType - single / multi
 * @property {string} view_type - view_type
 * @property {string} site_type - HtmlWeb / modal
 * @property {Url} referral - referral
 * @property {number} loadingTime - in ms
 * @property {string} status - no thumbnails / empty state / success
 * @property {string} siteType - HtmlWeb / modal
 * @property {number} site_type_enriched - id
 * @property {string} platform - relevant for mobile only
 * @property {number} sites_count - # sites loaded
 * @property {string} device - mobile / desktop
 * @return {LogObject<dashboardSiteSelectorMoreSitesLoadedSuccessfullyParams>} LogObject<dashboardSiteSelectorMoreSitesLoadedSuccessfullyParams>
 */
export function dashboardSiteSelectorMoreSitesLoadedSuccessfully(params) {
    return { evid: 1608, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'mySitesHoverSite' event (evid: 161)
 *
 * Event description: send when a users hover site
 *
 * @param {mySitesHoverSiteParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} sub_view - sub_view
 * @property {string} ds_origin - editor/ adi / editorX
 * @property {string} origin - origin
 * @property {string} view_level - view_level
 * @property {boolean} is_premium - is_premium
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @property {boolean} is_published - is_published
 * @return {LogObject<mySitesHoverSiteParams>} LogObject<mySitesHoverSiteParams>
 */
export function mySitesHoverSite(params) {
    return { evid: 161, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderBackofficeFormPostSaveForm' event (evid: 1611)
 *
 * Event description: Form Builder - backoffice form - post save form
 * An event like 1501 (save form) but WITH form ID
 *
 * @param {formBuilderBackofficeFormPostSaveFormParams} params - The parameters for this event
 * @property {string} template_name - from template name
 * @property {string} builderOrigin - builderOrigin
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form_comp_id
 * @property {GUID} vsi - vsi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderBackofficeFormPostSaveFormParams>} LogObject<formBuilderBackofficeFormPostSaveFormParams>
 */
export function formBuilderBackofficeFormPostSaveForm(params) {
    return { evid: 1611, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderBackOfficeFormClickEditForm' event (evid: 1618)
 *
 * Event description: Click on the "edit" button - standalone form. different origin (Form Submissions or templates page)
 *
 * @param {formBuilderBackOfficeFormClickEditFormParams} params - The parameters for this event
 * @property {string} form_name - form_name
 * @property {string} template_name - form template name
 * @property {string} builderOrigin - builderOrigin
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form_comp_id
 * @property {GUID} vsi - vsi
 * @property {string} origin - from where the user clicked "edit"
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderBackOfficeFormClickEditFormParams>} LogObject<formBuilderBackOfficeFormClickEditFormParams>
 */
export function formBuilderBackOfficeFormClickEditForm(params) {
    return { evid: 1618, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'searchSearchInDialog' event (evid: 162)
 *
 * Event description: when a user is searching in search dialog send event at the end of the results
 *
 * @param {searchSearchInDialogParams} params - The parameters for this event
 * @property {string} query - the users's query search
 * @property {string} view_type - view_type
 * @property {string} triggred_from - search/show_all
 * @property {string} sub_view - page in app
 * @property {string} results - send all results who return on time in the following way -> section: number of results: time to load
 * @property {string} origin - settings lobby / bizmgr
 * @property {string} seen_results - send only results who were seen in search -> section: number of results: time to load
 * @property {string} platform - platform
 * @property {string} view - requested view
 * @property {string} hosting_platform_context_id - context id: when the context is site - msid, when the context is app_id (like in devCenter f.e) - appDefId. In account manager is null
 * @return {LogObject<searchSearchInDialogParams>} LogObject<searchSearchInDialogParams>
 */
export function searchSearchInDialog(params) {
    return { evid: 162, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderBackofficeFormShareOpenForm' event (evid: 1621)
 *
 * Event description: Form Builder - backoffice form - share form --> open in new tab
 *
 * @param {formBuilderBackofficeFormShareOpenFormParams} params - The parameters for this event
 * @property {string} builderOrigin - builderOrigin
 * @property {GUID} uuid - uuid
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form_comp_id
 * @property {GUID} vsi - vsi
 * @property {string} template - template_name
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderBackofficeFormShareOpenFormParams>} LogObject<formBuilderBackofficeFormShareOpenFormParams>
 */
export function formBuilderBackofficeFormShareOpenForm(params) {
    return { evid: 1621, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderBackofficeFormShareCopyLink' event (evid: 1622)
 *
 * Event description: Form Builder - backoffice form - share form --> copy link
 *
 * @param {formBuilderBackofficeFormShareCopyLinkParams} params - The parameters for this event
 * @property {string} builderOrigin - builderOrigin
 * @property {GUID} uuid - uuid
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form_comp_id
 * @property {GUID} vsi - vsi
 * @property {string} template - template_name
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderBackofficeFormShareCopyLinkParams>} LogObject<formBuilderBackofficeFormShareCopyLinkParams>
 */
export function formBuilderBackofficeFormShareCopyLink(params) {
    return { evid: 1622, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'rolesAndPermissionsInvitePeopleClickOnGetYourMailbox' event (evid: 1625)
 *
 * Event description: The user clicked on "get your mailbox" in the invite people screen, which is shown in specific cases of invitee/s email/s (such as an invitee with a generic email domain).
 *
 * @param {rolesAndPermissionsInvitePeopleClickOnGetYourMailboxParams} params - The parameters for this event
 * @property {string} context - account/site
 * @property {string} platform - platform
 * @property {GUID} msid - sent only for site level
 * @return {LogObject<rolesAndPermissionsInvitePeopleClickOnGetYourMailboxParams>} LogObject<rolesAndPermissionsInvitePeopleClickOnGetYourMailboxParams>
 */
export function rolesAndPermissionsInvitePeopleClickOnGetYourMailbox(params) {
    return { evid: 1625, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'rolesAndPermissionsMarkAsAClient' event (evid: 1626)
 *
 * Event description: User marks another user as "Client"
 *
 * @param {rolesAndPermissionsMarkAsAClientParams} params - The parameters for this event
 * @property {GUID} teammate_id - the user_id
 * @property {string} invite_status - pending/expired/accepted
 * @property {string} role_ids - role_ids of the user
 * @property {string} platform - platform
 * @property {GUID} msid - sent only for site level
 * @return {LogObject<rolesAndPermissionsMarkAsAClientParams>} LogObject<rolesAndPermissionsMarkAsAClientParams>
 */
export function rolesAndPermissionsMarkAsAClient(params) {
    return { evid: 1626, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardDuplicateSiteActionWindowNavigationClick' event (evid: 1627)
 *
 * Event description: when user click on quick action, and then approve the duplication options from the popped window
 *
 * @param {dashboardDuplicateSiteActionWindowNavigationClickParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} origin - my sites / dashboard
 * @property {string} cta - duplicate / cancel
 * @property {string} platform - relevant only for mobile view
 * @property {string} hosting - ma/editor
 * @property {GUID} msid - --
 * @return {LogObject<dashboardDuplicateSiteActionWindowNavigationClickParams>} LogObject<dashboardDuplicateSiteActionWindowNavigationClickParams>
 */
export function dashboardDuplicateSiteActionWindowNavigationClick(params) {
    return { evid: 1627, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderBackofficeFormCloseNote' event (evid: 1628)
 *
 * Event description: Form Builder - backoffice form - close note with more explanation
 *
 * @param {formBuilderBackofficeFormCloseNoteParams} params - The parameters for this event
 * @property {string} form_name - form_name
 * @property {string} template_name - form template name
 * @property {string} builderOrigin - builderOrigin
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form_comp_id
 * @property {GUID} vsi - vsi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderBackofficeFormCloseNoteParams>} LogObject<formBuilderBackofficeFormCloseNoteParams>
 */
export function formBuilderBackofficeFormCloseNote(params) {
    return { evid: 1628, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'searchScrollingInResultView' event (evid: 163)
 *
 * Event description: send an event when a user's scroll in search's results
 *
 * @param {searchScrollingInResultViewParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} sub_view - page in app
 * @property {string} origin - settings lobby / bizmgr
 * @property {string} platform - platform
 * @property {string} view - requested view
 * @property {string} hosting_platform_context_id - context id: when the context is site - msid, when the context is app_id (like in devCenter f.e) - appDefId. In account manager is null
 * @return {LogObject<searchScrollingInResultViewParams>} LogObject<searchScrollingInResultViewParams>
 */
export function searchScrollingInResultView(params) {
    return { evid: 163, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderBackofficeFormClickOnLink' event (evid: 1631)
 *
 * Event description: Form Builder - backoffice form - click on links
 *
 * @param {formBuilderBackofficeFormClickOnLinkParams} params - The parameters for this event
 * @property {string} form_name - form_name
 * @property {string} template_name - form template name
 * @property {string} builderOrigin - builderOrigin
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form_comp_id
 * @property {GUID} vsi - vsi
 * @property {string} origin - Identify the source of the user's click
 * @property {string} nextView - The page the user will reach after clicking
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderBackofficeFormClickOnLinkParams>} LogObject<formBuilderBackofficeFormClickOnLinkParams>
 */
export function formBuilderBackofficeFormClickOnLink(params) {
    return { evid: 1631, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'invoicesRecurringSelectPremiumPlanIncludedOnlyServices' event (evid: 1632)
 *
 * Event description: Quotes - recurring - select Premium Plan included/only services
 *
 * @param {invoicesRecurringSelectPremiumPlanIncludedOnlyServicesParams} params - The parameters for this event
 * @property {GUID} uuid - uuid
 * @property {string} view_type - view_type
 * @property {string} platform - BM/ client billing
 * @property {string} msid - msid
 * @property {string} value - value
 * @return {LogObject<invoicesRecurringSelectPremiumPlanIncludedOnlyServicesParams>} LogObject<invoicesRecurringSelectPremiumPlanIncludedOnlyServicesParams>
 */
export function invoicesRecurringSelectPremiumPlanIncludedOnlyServices(params) {
    return { evid: 1632, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'invoicesRecurringAddPremiumPlanClick' event (evid: 1633)
 *
 * Event description: Quotes - recurring - Add Premium Plan click
 *
 * @param {invoicesRecurringAddPremiumPlanClickParams} params - The parameters for this event
 * @property {GUID} uuid - uuid
 * @property {string} view_type - view_type
 * @property {string} platform - BM/ client billing
 * @property {string} msid - msid
 * @return {LogObject<invoicesRecurringAddPremiumPlanClickParams>} LogObject<invoicesRecurringAddPremiumPlanClickParams>
 */
export function invoicesRecurringAddPremiumPlanClick(params) {
    return { evid: 1633, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'invoicesRecurringPremiumPlanSelected' event (evid: 1634)
 *
 * Event description: Quotes - recurring - Premium Plan selected
 *
 * @param {invoicesRecurringPremiumPlanSelectedParams} params - The parameters for this event
 * @property {string} package_id - id of package
 * @property {GUID} uuid - uuid
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<invoicesRecurringPremiumPlanSelectedParams>} LogObject<invoicesRecurringPremiumPlanSelectedParams>
 */
export function invoicesRecurringPremiumPlanSelected(params) {
    return { evid: 1634, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'invoicesRecurringErrorMessageForInvoiceAmountLowerThenPremium' event (evid: 1635)
 *
 * Event description: When a partner try to send an recurring invoice contains premium plan, and the amount of the invoice is lower the premium plan price
 *
 * @param {invoicesRecurringErrorMessageForInvoiceAmountLowerThenPremiumParams} params - The parameters for this event
 * @property {GUID} uuid - uuid
 * @property {string} view_type - view_type
 * @property {string} errorReason - reason of error
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<invoicesRecurringErrorMessageForInvoiceAmountLowerThenPremiumParams>} LogObject<invoicesRecurringErrorMessageForInvoiceAmountLowerThenPremiumParams>
 */
export function invoicesRecurringErrorMessageForInvoiceAmountLowerThenPremium(params) {
    return { evid: 1635, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'invoicesRecurringTableActionsCancelModalClick' event (evid: 1636)
 *
 * Event description: Cancel modal click by user
 *
 * @param {invoicesRecurringTableActionsCancelModalClickParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {GUID} invoiceId - instanceId
 * @property {string} platform - BM/client billing
 * @property {string} msid - msid
 * @property {string} action - keep/cancel
 * @return {LogObject<invoicesRecurringTableActionsCancelModalClickParams>} LogObject<invoicesRecurringTableActionsCancelModalClickParams>
 */
export function invoicesRecurringTableActionsCancelModalClick(params) {
    return { evid: 1636, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'searchFocusedOnASearchResult' event (evid: 164)
 *
 * Event description: when a user is focused on a result
 *
 * @param {searchFocusedOnASearchResultParams} params - The parameters for this event
 * @property {string} title_id - result's title id
 * @property {string} result - send all results who return on time in the following way -> section: number of results: time to load
 * @property {number} section_index - the index of the section in results
 * @property {string} query - query
 * @property {string} view_type - view_type
 * @property {string} sub_view - page in app
 * @property {string} section - result's section
 * @property {number} item_index_in_section - the item's index in it's section
 * @property {string} origin - settings lobby / bizmgr
 * @property {boolean} is_first_hover - 1- first item that was hovered (without the default) , 0 - not the first
 * @property {string} title - result's title
 * @property {string} platform - platform
 * @property {number} item_index - item's index in all results
 * @property {string} view - requested view
 * @property {string} hosting_platform_context_id - context id: when the context is site - msid, when the context is app_id (like in devCenter f.e) - appDefId. In account manager is null
 * @return {LogObject<searchFocusedOnASearchResultParams>} LogObject<searchFocusedOnASearchResultParams>
 */
export function searchFocusedOnASearchResult(params) {
    return { evid: 164, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cookieBannerCustomColorInaccessible' event (evid: 1644)
 *
 * Event description: When a user selects a primary and secondary color from the custom colors that return an 'inaccessible colors' warning.
 *
 * @param {cookieBannerCustomColorInaccessibleParams} params - The parameters for this event
 * @property {string} is_banner_site_palette_equal - yes / no
 * @property {string} is_banner_live - yes / no
 * @property {string} is_site_palette_inaccessible - yes / no
 * @return {LogObject<cookieBannerCustomColorInaccessibleParams>} LogObject<cookieBannerCustomColorInaccessibleParams>
 */
export function cookieBannerCustomColorInaccessible(params) {
    return { evid: 1644, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'bizManagerSidebarItemSelectedHighlighted' event (evid: 1649)
 *
 * Event description: User has some BM Sidebar item selected (highlighted - user is on a page)
 *
 * @param {bizManagerSidebarItemSelectedHighlightedParams} params - The parameters for this event
 * @property {string} name - unique name that doesn't change when changing the name on the side bar
 * @property {string} sidebar_name - the name that appears in the sidebar - can be changed
 * @property {string} view_type - view_type
 * @property {number} counter - The value inside the counter clicked (if counter exists)
 * @property {string} app_id - app_id of the item
 * @property {string} platform - platform
 * @property {string} hosting - MA/editor
 * @property {GUID} msid - metasite id
 * @return {LogObject<bizManagerSidebarItemSelectedHighlightedParams>} LogObject<bizManagerSidebarItemSelectedHighlightedParams>
 */
export function bizManagerSidebarItemSelectedHighlighted(params) {
    return { evid: 1649, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'searchClickOnSearchResult' event (evid: 165)
 *
 * Event description: when a user is focused on a result
 *
 * @param {searchClickOnSearchResultParams} params - The parameters for this event
 * @property {string} title_id - result's title id
 * @property {number} section_index - the index of the section in results
 * @property {string} query - query
 * @property {string} view_type - view_type
 * @property {string} sub_view - page in app
 * @property {string} section - result's section
 * @property {number} item_index_in_section - the item's index in it's section
 * @property {string} origin - settings lobby / bizmgr
 * @property {string} title - result's title
 * @property {string} platform - platform
 * @property {number} item_index - item's index in all results
 * @property {string} view - requested view
 * @property {string} category - the category the result belongs to (Help Articles, Apps For Your Site,  Contacts, Tools & Settings)
 * @property {string} hosting_platform_context_id - context id: when the context is site - msid, when the context is app_id (like in devCenter f.e) - appDefId. In account manager is null
 * @return {LogObject<searchClickOnSearchResultParams>} LogObject<searchClickOnSearchResultParams>
 */
export function searchClickOnSearchResult(params) {
    return { evid: 165, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cookieBannerUouRestoreDefaultText' event (evid: 1650)
 *
 * Event description: Where in the Privacy center the User restored the default text.
 *
 * @param {cookieBannerUouRestoreDefaultTextParams} params - The parameters for this event
 * @property {boolean} is_cookie_banner_published - 1: currently published, 0: not published
 * @property {string} default_text_location - default_text_location
 * @property {boolean} was_cookie_banner_published - 1: yes, 0: no
 * @return {LogObject<cookieBannerUouRestoreDefaultTextParams>} LogObject<cookieBannerUouRestoreDefaultTextParams>
 */
export function cookieBannerUouRestoreDefaultText(params) {
    return { evid: 1650, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'invoicesRecurringClientSelected' event (evid: 1651)
 *
 * Event description: Quotes - recurring -  Client selected
 *
 * @param {invoicesRecurringClientSelectedParams} params - The parameters for this event
 * @property {GUID} uuid - uuid
 * @property {string} view_type - view_type
 * @property {string} contact_id - contact_id selected
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<invoicesRecurringClientSelectedParams>} LogObject<invoicesRecurringClientSelectedParams>
 */
export function invoicesRecurringClientSelected(params) {
    return { evid: 1651, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'invoicesRecurringSiteOfClientSelected' event (evid: 1652)
 *
 * Event description: Quotes - recurring -  Client selected
 *
 * @param {invoicesRecurringSiteOfClientSelectedParams} params - The parameters for this event
 * @property {GUID} uuid - uuid
 * @property {string} view_type - view_type
 * @property {string} clientBillingMsids - Comma separated, the msids of the site associated to a client billing subscription included in the recurring invoice, if exist.
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<invoicesRecurringSiteOfClientSelectedParams>} LogObject<invoicesRecurringSiteOfClientSelectedParams>
 */
export function invoicesRecurringSiteOfClientSelected(params) {
    return { evid: 1652, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderBizMgrFromTheAdditionalActionMenuClickAction' event (evid: 1654)
 *
 * Event description: From the additional action menu, the user clicks on one action
 *
 * @param {formBuilderBizMgrFromTheAdditionalActionMenuClickActionParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} button_name - which action chosen
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} template - template name
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderBizMgrFromTheAdditionalActionMenuClickActionParams>} LogObject<formBuilderBizMgrFromTheAdditionalActionMenuClickActionParams>
 */
export function formBuilderBizMgrFromTheAdditionalActionMenuClickAction(params) {
    return { evid: 1654, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderBizMgrFormDeletion' event (evid: 1656)
 *
 * Event description: User removes BO form
 *
 * @param {formBuilderBizMgrFormDeletionParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} button_name - which action chosen
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} template - template name
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderBizMgrFormDeletionParams>} LogObject<formBuilderBizMgrFormDeletionParams>
 */
export function formBuilderBizMgrFormDeletion(params) {
    return { evid: 1656, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'chatSettingsPcfOfflineOnlineFormChevron' event (evid: 1658)
 *
 * Event description: User unmarks another user as "Client"
 *
 * @param {chatSettingsPcfOfflineOnlineFormChevronParams} params - The parameters for this event
 * @property {GUID} teammate_id - the user_id
 * @property {string} invite_status - pending/expired/accepted
 * @property {string} role_ids - role_ids of the user
 * @property {string} platform - platform
 * @property {GUID} msid - sent only for site level
 * @return {LogObject<chatSettingsPcfOfflineOnlineFormChevronParams>} LogObject<chatSettingsPcfOfflineOnlineFormChevronParams>
 */
export function chatSettingsPcfOfflineOnlineFormChevron(params) {
    return { evid: 1658, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'searchCloseSearchDialog' event (evid: 166)
 *
 * Event description: send an event when a user's scroll in search's results
 *
 * @param {searchCloseSearchDialogParams} params - The parameters for this event
 * @property {string} result - send all results who return on time in the following way -> section: number of results: time to load
 * @property {string} query - query
 * @property {string} view_type - view_type
 * @property {string} sub_view - page in app
 * @property {string} reason - click on result/ click somewhere else/ click on x
 * @property {number} time_in_dialog - show in seconds the time spent in the dialog
 * @property {string} origin - settings lobby / bizmgr
 * @property {string} platform - platform
 * @property {string} view - requested view
 * @property {string} hosting_platform_context_id - context id: when the context is site - msid, when the context is app_id (like in devCenter f.e) - appDefId. In account manager is null
 * @return {LogObject<searchCloseSearchDialogParams>} LogObject<searchCloseSearchDialogParams>
 */
export function searchCloseSearchDialog(params) {
    return { evid: 166, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'siteActionsDropDownListShown' event (evid: 1662)
 *
 * Event description: Site actions > drop down list shown.
 *
 * @param {siteActionsDropDownListShownParams} params - The parameters for this event
 * @property {string} view_mode - list/grid
 * @property {string} site_class - client/organization, not mendatory
 * @property {GUID} sub_account_id - sub_account_id
 * @property {string} view_type - view_type
 * @property {string} sub_view - sub_view
 * @property {string} origin - my-sites/dashboard/sites-list-enterprise
 * @property {string} cta - ‘sidepanel’ \ ‘menu’
 * @property {string} platform - deprecated
 * @property {GUID} msid - site guid
 * @property {string} permitted_items - list of all the items the user can click on (unblocked items)
 * @property {string} itemsList - list of all the shown items when drop down menu is shown
 * @return {LogObject<siteActionsDropDownListShownParams>} LogObject<siteActionsDropDownListShownParams>
 */
export function siteActionsDropDownListShown(params) {
    return { evid: 1662, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'teamManagementSwitchToStudioPageLoad' event (evid: 1664)
 *
 * Event description: The "switch to studio" LP, the user gets this page after accepting the invite to join a team, and choosing to switch to Studio on the Multi-choice page.
 *
 * @param {teamManagementSwitchToStudioPageLoadParams} params - The parameters for this event
 * @property {string} platform - platform
 * @return {LogObject<teamManagementSwitchToStudioPageLoadParams>} LogObject<teamManagementSwitchToStudioPageLoadParams>
 */
export function teamManagementSwitchToStudioPageLoad(params) {
    return { evid: 1664, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderBackofficeFormUserChangeLtrRtl' event (evid: 1665)
 *
 * Event description: Form Builder - backoffice form - user change LTR/RTL
 * from the BM --> edit bo form --> Form direction:
 *
 * @param {formBuilderBackofficeFormUserChangeLtrRtlParams} params - The parameters for this event
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form_comp_id
 * @property {GUID} vsi - vsi
 * @property {GUID} msid - msid
 * @property {string} value - value
 * @return {LogObject<formBuilderBackofficeFormUserChangeLtrRtlParams>} LogObject<formBuilderBackofficeFormUserChangeLtrRtlParams>
 */
export function formBuilderBackofficeFormUserChangeLtrRtl(params) {
    return { evid: 1665, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderBackofficeFormAutoAddressRadioButton' event (evid: 1666)
 *
 * Event description: Form Builder - backoffice form - address allow search
 * - all countries
 * - specific countries
 *
 * @param {formBuilderBackofficeFormAutoAddressRadioButtonParams} params - The parameters for this event
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form_comp_id
 * @property {GUID} vsi - vsi
 * @property {GUID} msid - msid
 * @property {string} value - ‘all’ or ‘specific’
 * @return {LogObject<formBuilderBackofficeFormAutoAddressRadioButtonParams>} LogObject<formBuilderBackofficeFormAutoAddressRadioButtonParams>
 */
export function formBuilderBackofficeFormAutoAddressRadioButton(params) {
    return { evid: 1666, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cookieBannerCustomFontAndSizeClicked' event (evid: 1669)
 *
 * Event description: User, after having chosen a custom theme, clicks on either the font or
 * the size.
 *
 * @param {cookieBannerCustomFontAndSizeClickedParams} params - The parameters for this event
 * @property {string} click_description - the font or size that was clicked
 * @property {string} click_type - font / size
 * @property {string} is_banner_live - yes / no
 * @return {LogObject<cookieBannerCustomFontAndSizeClickedParams>} LogObject<cookieBannerCustomFontAndSizeClickedParams>
 */
export function cookieBannerCustomFontAndSizeClicked(params) {
    return { evid: 1669, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'clickOnSeeMoreButton' event (evid: 167)
 *
 * Event description: When a user clicks on expand results button
 *
 * @param {clickOnSeeMoreButtonParams} params - The parameters for this event
 * @property {string} title_id - result's title id
 * @property {string} result - send all results who return on time in the following way -> section: number of results: time to load
 * @property {number} section_index - the index of the section in results
 * @property {string} query - query
 * @property {string} view_type - view_type
 * @property {string} sub_view - page in app
 * @property {string} section - result's section
 * @property {string} origin - settings lobby / bizmgr
 * @property {string} title - result's title
 * @property {string} platform - platform
 * @property {string} view - requested view
 * @property {string} hosting_platform_context_id - context id: when the context is site - msid, when the context is app_id (like in devCenter f.e) - appDefId. In account manager is null
 * @return {LogObject<clickOnSeeMoreButtonParams>} LogObject<clickOnSeeMoreButtonParams>
 */
export function clickOnSeeMoreButton(params) {
    return { evid: 167, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'bizManagerSetupWidgetSectionCompleted' event (evid: 1671)
 *
 * Event description: When a user has finished a section in setup.
 *
 * @param {bizManagerSetupWidgetSectionCompletedParams} params - The parameters for this event
 * @property {string} group_id - id of category in setup widget
 * @property {string} skipped_items - a list of asset campaign IDs that were skipped in the phase
 * @property {string} resolved_items - a list of asset campaign IDs that were resolved in the phase
 * @property {string} asset_campaign_guid - OMNI setup phase id, send the event for each "completed" section
 * @property {string} visibility_trigger - step_completed / step_skipped
 * @property {string} setup_location - sidebar / dashboard (this field only since setup became in sidebar also)
 * @property {string} hosting - ADI/Editor/MA
 * @property {GUID} msid - msid
 * @return {LogObject<bizManagerSetupWidgetSectionCompletedParams>} LogObject<bizManagerSetupWidgetSectionCompletedParams>
 */
export function bizManagerSetupWidgetSectionCompleted(params) {
    return { evid: 1671, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'clickOnShowAllButton' event (evid: 168)
 *
 * Event description: When a user clicks on 'Go To ' relevant page button
 *
 * @param {clickOnShowAllButtonParams} params - The parameters for this event
 * @property {string} title_id - result's title id
 * @property {string} result - send all results who return on time in the following way -> section: number of results: time to load
 * @property {number} section_index - the index of the section in results
 * @property {string} query - query
 * @property {string} view_type - view_type
 * @property {string} sub_view - page in app
 * @property {string} section - result's section
 * @property {string} origin - bizmgr / settings lobby
 * @property {string} title - result's title
 * @property {string} platform - platform
 * @property {string} view - requested view
 * @property {string} hosting_platform_context_id - context id: when the context is site - msid, when the context is app_id (like in devCenter f.e) - appDefId. In account manager is null
 * @return {LogObject<clickOnShowAllButtonParams>} LogObject<clickOnShowAllButtonParams>
 */
export function clickOnShowAllButton(params) {
    return { evid: 168, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'ssoSettingsChangeActivationStatus' event (evid: 1684)
 *
 * Event description: The user enabled or disabled SSO settings
 *
 * @param {ssoSettingsChangeActivationStatusParams} params - The parameters for this event
 * @property {GUID} sso_id - sso_id
 * @property {string} view_type - view_type
 * @property {boolean} is_mandatory - is SSO mandatory for team member login
 * @property {string} sso_user_type - DIFM/DIY (is the SSO of type Do It For Me/ Do It Yourself)
 * @property {string} platform - platform
 * @property {string} action - enable/disable
 * @return {LogObject<ssoSettingsChangeActivationStatusParams>} LogObject<ssoSettingsChangeActivationStatusParams>
 */
export function ssoSettingsChangeActivationStatus(params) {
    return { evid: 1684, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'ssoSettingsIsMandatoryToggleStatus' event (evid: 1685)
 *
 * Event description: SSO Settings - Is Mandatory Toggle Status.
 *
 * @param {ssoSettingsIsMandatoryToggleStatusParams} params - The parameters for this event
 * @property {GUID} sso_id - sso_id
 * @property {string} view_type - view_type
 * @property {string} status - status_name
 * @property {string} platform - platform
 * @return {LogObject<ssoSettingsIsMandatoryToggleStatusParams>} LogObject<ssoSettingsIsMandatoryToggleStatusParams>
 */
export function ssoSettingsIsMandatoryToggleStatus(params) {
    return { evid: 1685, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'mySitesUnableToMoveSiteToTrashMessageShown' event (evid: 1686)
 *
 * Event description: when Unable to Move Site to Trash message shown
 *
 * @param {mySitesUnableToMoveSiteToTrashMessageShownParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} reason - the reason the site can't be deleted, for example: pending subscription/active subscription/not permitted/unknown
 * @property {string} origin - my-sites/dashboard
 * @property {string} messageTitle - the title of the message
 * @property {string} platform - deprecated
 * @property {GUID} msid - site guid
 * @return {LogObject<mySitesUnableToMoveSiteToTrashMessageShownParams>} LogObject<mySitesUnableToMoveSiteToTrashMessageShownParams>
 */
export function mySitesUnableToMoveSiteToTrashMessageShown(params) {
    return { evid: 1686, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'financialSettingsGoToInvoicesPriceQuotes' event (evid: 1688)
 *
 * Event description: financial settings - go to invoices/price quotes
 *
 * @param {financialSettingsGoToInvoicesPriceQuotesParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} type - if it's price quotes or invoices
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<financialSettingsGoToInvoicesPriceQuotesParams>} LogObject<financialSettingsGoToInvoicesPriceQuotesParams>
 */
export function financialSettingsGoToInvoicesPriceQuotes(params) {
    return { evid: 1688, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'invoicesFirstTimeExpirienceGetStarted' event (evid: 1689)
 *
 * Event description: Invoices - First time expirience - get started
 *
 * @param {invoicesFirstTimeExpirienceGetStartedParams} params - The parameters for this event
 * @property {string} name - ‘Get started’ or ‘Watch Tutorial’
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<invoicesFirstTimeExpirienceGetStartedParams>} LogObject<invoicesFirstTimeExpirienceGetStartedParams>
 */
export function invoicesFirstTimeExpirienceGetStarted(params) {
    return { evid: 1689, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'invoicesFirstTimeExpirienceLearnMore' event (evid: 1690)
 *
 * Event description: Invoices - First time expirience - learn more
 *
 * @param {invoicesFirstTimeExpirienceLearnMoreParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<invoicesFirstTimeExpirienceLearnMoreParams>} LogObject<invoicesFirstTimeExpirienceLearnMoreParams>
 */
export function invoicesFirstTimeExpirienceLearnMore(params) {
    return { evid: 1690, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'invoicesDepositRequestDeposit' event (evid: 1692)
 *
 * Event description: Invoices - Deposit - Request Deposit
 *
 * @param {invoicesDepositRequestDepositParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<invoicesDepositRequestDepositParams>} LogObject<invoicesDepositRequestDepositParams>
 */
export function invoicesDepositRequestDeposit(params) {
    return { evid: 1692, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'invoicesDepositChooseFlatOrPercentageDeposit' event (evid: 1693)
 *
 * Event description: Invoices - Deposit - choose flat or percentage deposit.
 *
 * @param {invoicesDepositChooseFlatOrPercentageDepositParams} params - The parameters for this event
 * @property {boolean} toggle - true if it's flat, false if it's percentage
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<invoicesDepositChooseFlatOrPercentageDepositParams>} LogObject<invoicesDepositChooseFlatOrPercentageDepositParams>
 */
export function invoicesDepositChooseFlatOrPercentageDeposit(params) {
    return { evid: 1693, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'invoicesDepositLearnMore' event (evid: 1694)
 *
 * Event description: Invoices - Deposit - learn more
 *
 * @param {invoicesDepositLearnMoreParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<invoicesDepositLearnMoreParams>} LogObject<invoicesDepositLearnMoreParams>
 */
export function invoicesDepositLearnMore(params) {
    return { evid: 1694, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'invoicesConnectPaymentLearnMore' event (evid: 1695)
 *
 * Event description: when a user click on 'learn more' about payment provider from invoices app
 *
 * @param {invoicesConnectPaymentLearnMoreParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} origin - origin
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<invoicesConnectPaymentLearnMoreParams>} LogObject<invoicesConnectPaymentLearnMoreParams>
 */
export function invoicesConnectPaymentLearnMore(params) {
    return { evid: 1695, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'invoicesDepositDropDeposit' event (evid: 1697)
 *
 * Event description: Copy of Invoices - Deposit - drop deposit
 *
 * @param {invoicesDepositDropDepositParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<invoicesDepositDropDepositParams>} LogObject<invoicesDepositDropDepositParams>
 */
export function invoicesDepositDropDeposit(params) {
    return { evid: 1697, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'pingPingWidgetLoadedInEditNotificationDialog' event (evid: 1698)
 *
 * Event description: Apes - Ping widget loaded in Edit Notification dialog after Automations opened that dialog when user click on Preview & Edit. this Event is for debugging purposes
 *
 * @param {pingPingWidgetLoadedInEditNotificationDialogParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} config - JSON field of the configuration, contains ape details
 * @property {boolean} isPMFlow - is pm flow
 * @property {string} platform - platform
 * @property {GUID} msid - site guid
 * @property {string} ruleId - the rule id
 * @return {LogObject<pingPingWidgetLoadedInEditNotificationDialogParams>} LogObject<pingPingWidgetLoadedInEditNotificationDialogParams>
 */
export function pingPingWidgetLoadedInEditNotificationDialog(params) {
    return { evid: 1698, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'pingSaveInEditNotificationDialog' event (evid: 1699)
 *
 * Event description: Apes - save in Edit Notification dialog. in order to get save in the dialog itself we should filter isWidgetless=false, otherwise this event will report also deactivate/activate ape action from outside the dialog.
 *
 * @param {pingSaveInEditNotificationDialogParams} params - The parameters for this event
 * @property {string} eventInfo - JSON field of schema parametrs and action recommendations - debugging purposes.
 * @property {string} previousStatus - JSON field of the previous status of muted/unmuted channels and audience
 * @property {string} pingTemplateId - pingTemplateId
 * @property {string} view_type - view_type
 * @property {string} config - JSON field of the configuration, contains ape details. only for debugging usage
 * @property {boolean} isWidgetless - True - when user activates/deactivates the ape from apes list, False - when user clicks save in the widget
 * @property {string} componentChanged - JSON field of the components that were changed
 * @property {boolean} isPMFlow - is pm flow
 * @property {string} platform - deprecated
 * @property {GUID} msid - site guid
 * @property {string} ruleId - the rule id
 * @property {string} currentStatus - JSON field of the current status of muted/unmuted channels and audience
 * @return {LogObject<pingSaveInEditNotificationDialogParams>} LogObject<pingSaveInEditNotificationDialogParams>
 */
export function pingSaveInEditNotificationDialog(params) {
    return { evid: 1699, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardSiteAppPromo' event (evid: 17)
 *
 * Event description: dashboard > site -> app promo.
 *
 * @param {dashboardSiteAppPromoParams} params - The parameters for this event
 * @property {string} name - name
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @return {LogObject<dashboardSiteAppPromoParams>} LogObject<dashboardSiteAppPromoParams>
 */
export function dashboardSiteAppPromo(params) {
    return { evid: 17, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'teamManagementClickToLearnMore' event (evid: 170)
 *
 * Event description: User clicks on 'Learn More'
 *
 * @param {teamManagementClickToLearnMoreParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} origin - team_onboarding/team_management_page/team profile dialog/MA/invite_members_dialog
 * @property {string} platform - platform
 * @return {LogObject<teamManagementClickToLearnMoreParams>} LogObject<teamManagementClickToLearnMoreParams>
 */
export function teamManagementClickToLearnMore(params) {
    return { evid: 170, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'apesUpdateTooltip' event (evid: 1701)
 *
 * Event description: APeS - update tooltip
 *
 * @param {apesUpdateTooltipParams} params - The parameters for this event
 * @property {boolean} isPreinstalled - if the automation is pre installed
 * @property {string} pingTemplateId - pingTemplateId
 * @property {string} view_type - view_type
 * @property {string} origin - app id
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @property {GUID} ruleId - ruleId
 * @return {LogObject<apesUpdateTooltipParams>} LogObject<apesUpdateTooltipParams>
 */
export function apesUpdateTooltip(params) {
    return { evid: 1701, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'apesVersioningPreviewNewEmail' event (evid: 1702)
 *
 * Event description: APeS - versioning - preview new email
 *
 * @param {apesVersioningPreviewNewEmailParams} params - The parameters for this event
 * @property {boolean} isPreinstalled - if the automation is pre installed
 * @property {string} pingTemplateId - pingTemplateId
 * @property {string} view_type - view_type
 * @property {string} origin - app id
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @property {GUID} ruleId - ruleId
 * @return {LogObject<apesVersioningPreviewNewEmailParams>} LogObject<apesVersioningPreviewNewEmailParams>
 */
export function apesVersioningPreviewNewEmail(params) {
    return { evid: 1702, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'apesVersioningUpdateNewVersion' event (evid: 1703)
 *
 * Event description: APeS - versioning - update new version
 *
 * @param {apesVersioningUpdateNewVersionParams} params - The parameters for this event
 * @property {boolean} isPreinstalled - if the automation is pre installed
 * @property {string} pingTemplateId - pingTemplateId
 * @property {string} view_type - view_type
 * @property {string} origin - app id
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @property {GUID} ruleId - ruleId
 * @return {LogObject<apesVersioningUpdateNewVersionParams>} LogObject<apesVersioningUpdateNewVersionParams>
 */
export function apesVersioningUpdateNewVersion(params) {
    return { evid: 1703, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'apesVersioningUpdateNewVersionError' event (evid: 1704)
 *
 * Event description: APeS - versioning - update new version
 *
 * @param {apesVersioningUpdateNewVersionErrorParams} params - The parameters for this event
 * @property {boolean} isPreinstalled - if the automation is pre installed
 * @property {string} pingTemplateId - pingTemplateId
 * @property {string} view_type - view_type
 * @property {string} errorReason - errorReason
 * @property {string} origin - app id
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @property {GUID} ruleId - ruleId
 * @return {LogObject<apesVersioningUpdateNewVersionErrorParams>} LogObject<apesVersioningUpdateNewVersionErrorParams>
 */
export function apesVersioningUpdateNewVersionError(params) {
    return { evid: 1704, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'apesVersioningSaveAnUpdateError' event (evid: 1705)
 *
 * Event description: APeS - versioning - save an update - error
 *
 * @param {apesVersioningSaveAnUpdateErrorParams} params - The parameters for this event
 * @property {boolean} isPreinstalled - if the automation is pre installed
 * @property {string} pingTemplateId - pingTemplateId
 * @property {string} view_type - view_type
 * @property {string} errorReason - errorReason
 * @property {string} origin - app id
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @property {GUID} ruleId - ruleId
 * @return {LogObject<apesVersioningSaveAnUpdateErrorParams>} LogObject<apesVersioningSaveAnUpdateErrorParams>
 */
export function apesVersioningSaveAnUpdateError(params) {
    return { evid: 1705, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardAfterSiteSelectorStartedLoadingAndBeforeFinished' event (evid: 1706)
 *
 * Event description: send after site selector started loading and before site selector loaded successfully. this event is for debugging purposes.
 *
 * @param {dashboardAfterSiteSelectorStartedLoadingAndBeforeFinishedParams} params - The parameters for this event
 * @property {string} filtered - premium/published/adi / none
 * @property {string} selectionType - single / multi
 * @property {string} view_type - view_type
 * @property {string} place_description - The place in the code the event being sent from
 * @property {string} referral - from where the screen was open
 * @property {string} status - no thumbnails / empty state / success
 * @property {string} siteType - htmlWeb / modal
 * @property {number} site_type_enriched - site_type
 * @property {string} platform - platform
 * @property {Url} page_url - the full URL of the page
 * @property {string} device - mobile / desktop
 * @return {LogObject<dashboardAfterSiteSelectorStartedLoadingAndBeforeFinishedParams>} LogObject<dashboardAfterSiteSelectorStartedLoadingAndBeforeFinishedParams>
 */
export function dashboardAfterSiteSelectorStartedLoadingAndBeforeFinished(params) {
    return { evid: 1706, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderEmailSettingsInSchemaButExperimentClosed' event (evid: 1708)
 *
 * Event description: Email Settings In Schema But Experiment Closed
 * specs.crm.FormsBizNewEmailsSettings
 *
 * @param {formBuilderEmailSettingsInSchemaButExperimentClosedParams} params - The parameters for this event
 * @property {GUID} uuid - uuid
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderEmailSettingsInSchemaButExperimentClosedParams>} LogObject<formBuilderEmailSettingsInSchemaButExperimentClosedParams>
 */
export function formBuilderEmailSettingsInSchemaButExperimentClosed(params) {
    return { evid: 1708, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'siteSelectorSiteChosen' event (evid: 1709)
 *
 * Event description: Site is chosen within the site selector (button is highlighted, but the selection isn't applied yet)
 *
 * @param {siteSelectorSiteChosenParams} params - The parameters for this event
 * @property {string} filtered - premium/published/adi / none
 * @property {number} positionIndex - the index of the selected site position in the site selector
 * @property {boolean} is_partner_dashboard - true - if partner dashboard chosen
 * @property {string} result - json of all chosen msid separated with comma
 * @property {string} selectionType - single / multi
 * @property {string} view_type - view_type
 * @property {number} sites_available - the number of sites available in site selector (not necessarily equal to number of sites owned)
 * @property {Url} action_url - action_url
 * @property {string} siteType - HtmlWeb / modal
 * @property {number} previous_position_index - index of previous (before change) selected site
 * @property {Url} referer - Referral url
 * @property {GUID} esi - esi
 * @property {string} platform - deprecated
 * @property {boolean} is_default_selection - Is current selection selected by default or actively
 * @property {number} sites_count - how many sites were chosen
 * @property {string} device - mobile / desktop
 * @return {LogObject<siteSelectorSiteChosenParams>} LogObject<siteSelectorSiteChosenParams>
 */
export function siteSelectorSiteChosen(params) {
    return { evid: 1709, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'teamManagementEditTeamProfileOpenDialog' event (evid: 171)
 *
 * Event description: When a user clicks to edit team profile please send this event with the next fields:
 *
 * @param {teamManagementEditTeamProfileOpenDialogParams} params - The parameters for this event
 * @property {boolean} onboarding - the dialog was opened from the onboarding page - true, from team management - false
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @return {LogObject<teamManagementEditTeamProfileOpenDialogParams>} LogObject<teamManagementEditTeamProfileOpenDialogParams>
 */
export function teamManagementEditTeamProfileOpenDialog(params) {
    return { evid: 171, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'mySitesClickOnUrl' event (evid: 1713)
 *
 * Event description: When user Clicks on URL in my sites page
 *
 * @param {mySitesClickOnUrlParams} params - The parameters for this event
 * @property {Url} url - The URL address
 * @property {string} sub_view - the page sub_view
 * @property {string} sectionTitle - the name of the section the URL appears in, for example: 'Can’t find your site?'
 * @property {string} origin - sites-list-enterprise
 * @property {string} cta - the text of the URL
 * @property {string} platform - deprecated
 * @property {string} view - my-sites
 * @return {LogObject<mySitesClickOnUrlParams>} LogObject<mySitesClickOnUrlParams>
 */
export function mySitesClickOnUrl(params) {
    return { evid: 1713, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardSiteCategoryShown' event (evid: 1714)
 *
 * Event description: When site category is shown.
 *
 * @param {dashboardSiteCategoryShownParams} params - The parameters for this event
 * @property {boolean} has_category - true/false
 * @property {string} site_category - site category/null
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} hosting - hosting
 * @property {GUID} msid - msid
 * @return {LogObject<dashboardSiteCategoryShownParams>} LogObject<dashboardSiteCategoryShownParams>
 */
export function dashboardSiteCategoryShown(params) {
    return { evid: 1714, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardSiteSelectorClickForDebuggingPurposes' event (evid: 1715)
 *
 * Event description: when user clicks on the select in site selector, this event is for debugging purposes and will be sent via native reporting approach
 *
 * @param {dashboardSiteSelectorClickForDebuggingPurposesParams} params - The parameters for this event
 * @property {string} filtered - premium/published/adi / none
 * @property {number} positionIndex - the index of the selected site position in the site selector
 * @property {GUID} site_id
 * @property {boolean} is_partner_dashboard - true - if partner dashboard chosen
 * @property {string} result - json of all chosen msid separated with comma
 * @property {string} selectionType - single / multi
 * @property {string} view_type - view_type
 * @property {string} siteTypeName - ADI/Editor
 * @property {Url} action_url - action_url
 * @property {string} siteType - HtmlWeb / modal
 * @property {number} sites_number - the number of sites available in site selector (not necessarily equal to number of sites owned)
 * @property {string} cta - x / cancel / continue
 * @property {number} position - The position of the selected site in the page. 1 is the highest site.
 * @property {number} site_type_enriched
 * @property {Url} referer - Referral url
 * @property {GUID} esi
 * @property {string} platform - deprecated
 * @property {GUID} msid - the site guid
 * @property {number} sites_count - how many sites were chosen
 * @property {string} device - mobile / desktop
 * @return {LogObject<dashboardSiteSelectorClickForDebuggingPurposesParams>} LogObject<dashboardSiteSelectorClickForDebuggingPurposesParams>
 */
export function dashboardSiteSelectorClickForDebuggingPurposes(params) {
    return { evid: 1715, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardSiteSelectorLoadedSuccessfullyForDebuggingPurposes' event (evid: 1716)
 *
 * Event description: when Site Selector loaded successfully, this event is for debugging purposes and will be sent via native reporting approach
 *
 * @param {dashboardSiteSelectorLoadedSuccessfullyForDebuggingPurposesParams} params - The parameters for this event
 * @property {string} filtered - premium/published/adi / none
 * @property {boolean} is_partner_dashboard - true - if partner dashboard displayed
 * @property {string} sitePublished - -
 * @property {string} selectionType - single / multi
 * @property {string} view_type - view_type
 * @property {number} account_sites_number - absolute account sites number
 * @property {string} referral - -
 * @property {number} loadingTime - in ms
 * @property {string} status - no thumbnails / empty state / success
 * @property {string} siteType - HtmlWeb / modal
 * @property {number} site_type_enriched - -
 * @property {string} platform - -
 * @property {number} sites_count - # sites returned to site selector
 * @property {string} device - mobile / desktop
 * @return {LogObject<dashboardSiteSelectorLoadedSuccessfullyForDebuggingPurposesParams>} LogObject<dashboardSiteSelectorLoadedSuccessfullyForDebuggingPurposesParams>
 */
export function dashboardSiteSelectorLoadedSuccessfullyForDebuggingPurposes(params) {
    return { evid: 1716, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardLabelingPointInSiteSelectorForDebuggingPurposes' event (evid: 1719)
 *
 * Event description: labeling point in site selector for debugging purposes
 *
 * @param {dashboardLabelingPointInSiteSelectorForDebuggingPurposesParams} params - The parameters for this event
 * @property {GUID} meta_site_id - deprecated
 * @property {GUID} metaSiteId - deprecated
 * @property {GUID} uuid - uuid
 * @property {string} label_version - the label the user is getting, A or B
 * @property {GUID} msid - deprecated
 * @property {Url} page_url - the url when the user is getting the label
 * @return {LogObject<dashboardLabelingPointInSiteSelectorForDebuggingPurposesParams>} LogObject<dashboardLabelingPointInSiteSelectorForDebuggingPurposesParams>
 */
export function dashboardLabelingPointInSiteSelectorForDebuggingPurposes(params) {
    return { evid: 1719, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'teamManagementPickLogo' event (evid: 172)
 *
 * Event description: when a user clicks to add/remove/replace/upload logo in edit team dialog
 *
 * @param {teamManagementPickLogoParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} action_type - replace/remove/add/upload/purchase
 * @return {LogObject<teamManagementPickLogoParams>} LogObject<teamManagementPickLogoParams>
 */
export function teamManagementPickLogo(params) {
    return { evid: 172, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderPdfAttachmentsClickOnCheckbox' event (evid: 1721)
 *
 * Event description: form notification setting, user click on PDF attachments checkbox
 *
 * @param {formBuilderPdfAttachmentsClickOnCheckboxParams} params - The parameters for this event
 * @property {GUID} uuid - uuid
 * @property {GUID} visitor_id - visitor_id
 * @property {boolean} checkbox - checkbox
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} type - website form or standalone form
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderPdfAttachmentsClickOnCheckboxParams>} LogObject<formBuilderPdfAttachmentsClickOnCheckboxParams>
 */
export function formBuilderPdfAttachmentsClickOnCheckbox(params) {
    return { evid: 1721, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'bmACallForTokenRefreshIsFailing' event (evid: 1722)
 *
 * Event description: when a call for token refresh is failing
 *
 * @param {bmACallForTokenRefreshIsFailingParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - depreceted
 * @property {GUID} msid - site guid
 * @return {LogObject<bmACallForTokenRefreshIsFailingParams>} LogObject<bmACallForTokenRefreshIsFailingParams>
 */
export function bmACallForTokenRefreshIsFailing(params) {
    return { evid: 1722, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'transferSiteSiteCanTBeTransferredPopUpView' event (evid: 1725)
 *
 * Event description: pop-up shown that the site cannot be transferred
 *
 * @param {transferSiteSiteCanTBeTransferredPopUpViewParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} origin - origin
 * @property {string} platform - platform
 * @property {string} hosting - MA /Editor
 * @property {string} block_from_transfer_reason - is_block_from_transfer_reason
 * @property {GUID} msid - msid
 * @return {LogObject<transferSiteSiteCanTBeTransferredPopUpViewParams>} LogObject<transferSiteSiteCanTBeTransferredPopUpViewParams>
 */
export function transferSiteSiteCanTBeTransferredPopUpView(params) {
    return { evid: 1725, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cookiesBannerSettingsWindowChange' event (evid: 1727)
 *
 * Event description: Cookies banner - settings window change
 *
 * @param {cookiesBannerSettingsWindowChangeParams} params - The parameters for this event
 * @property {string} new_value - json (of all settings)
 * @property {string} old_value - json (of all settings)
 * @return {LogObject<cookiesBannerSettingsWindowChangeParams>} LogObject<cookiesBannerSettingsWindowChangeParams>
 */
export function cookiesBannerSettingsWindowChange(params) {
    return { evid: 1727, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'finishFocusWidgetSection' event (evid: 1728)
 *
 * Event description: when a user finishes a section in the focus widget in the dashboard the event is sent
 *
 * @param {finishFocusWidgetSectionParams} params - The parameters for this event
 * @property {string} skipped_items - a list of asset campaign IDs that were skipped in the phase
 * @property {string} resolved_items - a list of asset campaign IDs that were resolved in the phase
 * @property {string} asset_campaign_guid - placement id in dealer
 * @property {string} section_name - offering name in dealer
 * @property {string} widget_name - focus-widget
 * @property {string} offering_guid - from dealer
 * @property {string} origin - dashboard/sidebar
 * @property {string} hosting - --
 * @property {GUID} msid - --
 * @return {LogObject<finishFocusWidgetSectionParams>} LogObject<finishFocusWidgetSectionParams>
 */
export function finishFocusWidgetSection(params) {
    return { evid: 1728, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'teamManagementSave' event (evid: 173)
 *
 * Event description: User clicks to save his edit team dialog
 *
 * @param {teamManagementSaveParams} params - The parameters for this event
 * @property {boolean} is_logo_shown - true/false
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {boolean} is_valid_team_name - true/false (false if error shows)
 * @return {LogObject<teamManagementSaveParams>} LogObject<teamManagementSaveParams>
 */
export function teamManagementSave(params) {
    return { evid: 173, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'focusWidgetClickViewAll' event (evid: 1730)
 *
 * Event description: Dashboard - widget click on 'view-all'.
 *
 * @param {focusWidgetClickViewAllParams} params - The parameters for this event
 * @property {string} name - 'see-all-steps'
 * @property {string} location - main / tooltip
 * @property {string} widget_name - widget_name
 * @property {string} origin - origin
 * @property {string} hosting - ma/editor
 * @property {GUID} msid - msid
 * @return {LogObject<focusWidgetClickViewAllParams>} LogObject<focusWidgetClickViewAllParams>
 */
export function focusWidgetClickViewAll(params) {
    return { evid: 1730, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'mySitesWhenDialogPopsUp' event (evid: 1732)
 *
 * Event description: when user triggers a dialog to open
 *
 * @param {mySitesWhenDialogPopsUpParams} params - The parameters for this event
 * @property {string} name - dialog's name: move to trash etc...
 * @property {string} view_mode - grid/list
 * @property {string} view_type - view_type
 * @property {number} num_selected_sites - number of sites selected
 * @property {string} origin - sites-list/ sites-list-enterprise
 * @property {string} view_level - view_level
 * @property {string} platform - deprecated
 * @property {string} hosting - MA
 * @return {LogObject<mySitesWhenDialogPopsUpParams>} LogObject<mySitesWhenDialogPopsUpParams>
 */
export function mySitesWhenDialogPopsUp(params) {
    return { evid: 1732, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'focusWidgetItemViewedInList' event (evid: 1733)
 *
 * Event description: event sent for every item shown in item list in the focus widget
 *
 * @param {focusWidgetItemViewedInListParams} params - The parameters for this event
 * @property {string} offering_name - offering name in dealer
 * @property {string} visibility_trigger - normal/scroll to view
 * @property {string} campaign_name - campaign name in dealer
 * @property {string} offering_guid - offer guid
 * @property {number} asset_location_from_group_list - item location inside the category
 * @property {string} origin - sidebar / dashboard (this field only since setup became in sidebar also)
 * @property {string} item_state - open/close
 * @property {string} asset_campaign_id - ids to be consistent with premium events
 * @property {string} hosting - ADI/MA/editor
 * @property {GUID} msid - site guid
 * @property {string} campaign_id - campaign id in dealer
 * @property {GUID} placement_id - placement id in dealer
 * @return {LogObject<focusWidgetItemViewedInListParams>} LogObject<focusWidgetItemViewedInListParams>
 */
export function focusWidgetItemViewedInList(params) {
    return { evid: 1733, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'mySitesClickOnButtonInDialog' event (evid: 1735)
 *
 * Event description: when user click on any button in dialog in My-Sites page. currently this BI reported from move to trash/move to folder dialogs.
 *
 * @param {mySitesClickOnButtonInDialogParams} params - The parameters for this event
 * @property {string} name - dialog name
 * @property {string} view_mode - list/grid
 * @property {string} to_level - to where the user moved the site. In case it’s sites-list main page report: ROOT, in case it’s folder report: folder_name_of_folder, ic case it’s trash folder report: folder_trash
 * @property {string} view_type - view_type
 * @property {number} num_selected_sites - number of sites move to the folder
 * @property {string} origin - sites-list-enterprise
 * @property {string} cta - X / cancel / move to trash / move to folder etc...
 * @property {string} from_level - from where the user moved the sites. In case it’s sites-list main page report: ROOT, in case it’s folder report: folder_name_of_folder, in case it’s search report search_search_term, in case it’s filter report filter
 * @property {string} platform - platform
 * @property {string} action - approve / cancel
 * @return {LogObject<mySitesClickOnButtonInDialogParams>} LogObject<mySitesClickOnButtonInDialogParams>
 */
export function mySitesClickOnButtonInDialog(params) {
    return { evid: 1735, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardFinishLoadingAllWidgets' event (evid: 1736)
 *
 * Event description: The event is sent at the first time all components that started loading have been fully loaded
 *
 * @param {dashboardFinishLoadingAllWidgetsParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {boolean} is_account_mgr - true/ false
 * @property {number} loading_time_from_host_load - Loading time from module start loading
 * @property {string} sub_view - --
 * @property {string} host_id - host
 * @property {number} loading_time_from_performance_now - loading_time_from_performance_now  when server start to load. the real beginning
 * @property {string} app_id - application id
 * @property {string} platform - platform
 * @property {string} hosting - dashboard/editor/onboarding
 * @property {GUID} msid - msid
 * @property {string} view - requested view
 * @property {number} loading_time - loading time of page
 * @return {LogObject<dashboardFinishLoadingAllWidgetsParams>} LogObject<dashboardFinishLoadingAllWidgetsParams>
 */
export function dashboardFinishLoadingAllWidgets(params) {
    return { evid: 1736, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'teamManagementAddMembersOpenDialog' event (evid: 174)
 *
 * Event description: When a user clicks to Invite/add People on account level - Team Management page
 *
 * @param {teamManagementAddMembersOpenDialogParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} roles_displayed - list of roles displayed to the user
 * @property {string} origin - where the dialog is opened from
 * @property {string} platform - platform
 * @return {LogObject<teamManagementAddMembersOpenDialogParams>} LogObject<teamManagementAddMembersOpenDialogParams>
 */
export function teamManagementAddMembersOpenDialog(params) {
    return { evid: 174, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'sapir1' event (evid: 1748)
 *
 * Event description: When error message is shown in Site Selector
 *
 * @param {sapir1Params} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} errorType - the error type. f.e: Sites failed to load/Site screenshots failed to load
 * @property {string} referral - refferral
 * @property {number} loadingTime - in ms
 * @property {string} siteType - HtmlWeb / modal
 * @property {string} platform - deprecated
 * @property {string} device - mobile / desktop
 * @return {LogObject<sapir1Params>} LogObject<sapir1Params>
 */
export function sapir1(params) {
    return { evid: 1748, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'teamManagementAddMembersSendInvite' event (evid: 175)
 *
 * Event description: When a user clicks on 'send invites' in the add member window
 *
 * @param {teamManagementAddMembersSendInviteParams} params - The parameters for this event
 * @property {number} number_of_invalid_emails - number of invalid numbers (error for not typing correctly - exclude errors for existing emails)
 * @property {string} view_type - view_type
 * @property {string} roles_displayed - list of roles displayed to the user
 * @property {number} number_of_existing_emails - emails that already exist in the team
 * @property {string} origin - where the user opened the dialog from
 * @property {string} invite_role - (please note that using the toggle changes role desc) the role the user sends to the invitees
 * @property {string} platform - platform
 * @property {number} number_of_valid_emails - number of valid emails
 * @return {LogObject<teamManagementAddMembersSendInviteParams>} LogObject<teamManagementAddMembersSendInviteParams>
 */
export function teamManagementAddMembersSendInvite(params) {
    return { evid: 175, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderBizMgrSafShareOptions' event (evid: 1751)
 *
 * Event description: Form Builder - Biz Mgr - SAF - Share Options.
 *
 * @param {formBuilderBizMgrSafShareOptionsParams} params - The parameters for this event
 * @property {GUID} visitor_id - visitor_id
 * @property {string} socialButton - Social Media name
 * @property {string} form_comp_id - form_comp_id
 * @property {GUID} vsi - vsi
 * @property {string} template - form template name
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderBizMgrSafShareOptionsParams>} LogObject<formBuilderBizMgrSafShareOptionsParams>
 */
export function formBuilderBizMgrSafShareOptions(params) {
    return { evid: 1751, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formFormsInContactPanelViewSubmission' event (evid: 1753)
 *
 * Event description: User clicks on 'view submission' from contact (contact list/ contact full page/ contact submission list)
 *
 * @param {formFormsInContactPanelViewSubmissionParams} params - The parameters for this event
 * @property {GUID} uuid - uuid
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} origin - contact list/ contact full page/ submission list
 * @property {string} template - template name
 * @property {string} contact_id - contact_id
 * @property {GUID} msid - msid
 * @return {LogObject<formFormsInContactPanelViewSubmissionParams>} LogObject<formFormsInContactPanelViewSubmissionParams>
 */
export function formFormsInContactPanelViewSubmission(params) {
    return { evid: 1753, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formFormsInContactPanelViewSubmissionsList' event (evid: 1754)
 *
 * Event description: User clicks on 'view submission LIST' from contact (contact list/ contact full page/ specific submission)
 *
 * @param {formFormsInContactPanelViewSubmissionsListParams} params - The parameters for this event
 * @property {GUID} uuid - uuid
 * @property {GUID} visitor_id - visitor_id
 * @property {GUID} vsi - vsi
 * @property {string} origin - contact list/ contact full page/ submission
 * @property {string} contact_id - contact_id
 * @property {GUID} msid - msid
 * @return {LogObject<formFormsInContactPanelViewSubmissionsListParams>} LogObject<formFormsInContactPanelViewSubmissionsListParams>
 */
export function formFormsInContactPanelViewSubmissionsList(params) {
    return { evid: 1754, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formFormsInContactPanelDownloadFileFormSubmission' event (evid: 1755)
 *
 * Event description: User download file from UoU submission
 *
 * @param {formFormsInContactPanelDownloadFileFormSubmissionParams} params - The parameters for this event
 * @property {GUID} uuid - uuid
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} origin - contact list/ contact full page/ submission
 * @property {string} file_type - file download type (png/word/excel)
 * @property {string} contact_id - contact_id
 * @property {GUID} msid - msid
 * @return {LogObject<formFormsInContactPanelDownloadFileFormSubmissionParams>} LogObject<formFormsInContactPanelDownloadFileFormSubmissionParams>
 */
export function formFormsInContactPanelDownloadFileFormSubmission(params) {
    return { evid: 1755, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderPaymentFormClickDoneAfterEnterItem' event (evid: 1757)
 *
 * Event description: Form Builder - payment form -   click 'done' button after entering or editing item
 *
 * @param {formBuilderPaymentFormClickDoneAfterEnterItemParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI, Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form id
 * @property {GUID} vsi - vsi
 * @property {string} origin - origin
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderPaymentFormClickDoneAfterEnterItemParams>} LogObject<formBuilderPaymentFormClickDoneAfterEnterItemParams>
 */
export function formBuilderPaymentFormClickDoneAfterEnterItem(params) {
    return { evid: 1757, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderPaymentFormHoverNextButtonAdi' event (evid: 1759)
 *
 * Event description: Form Builder - payment form -  hover 'next' button (ADI).
 *
 * @param {formBuilderPaymentFormHoverNextButtonAdiParams} params - The parameters for this event
 * @property {string} step - step
 * @property {string} builderOrigin - ADI, Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form id
 * @property {GUID} vsi - vsi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderPaymentFormHoverNextButtonAdiParams>} LogObject<formBuilderPaymentFormHoverNextButtonAdiParams>
 */
export function formBuilderPaymentFormHoverNextButtonAdi(params) {
    return { evid: 1759, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'teamManagementAddMembersInviteClickSuccess' event (evid: 176)
 *
 * Event description: When a user clicks on 'send invites' in the add member window - success response
 *
 * @param {teamManagementAddMembersInviteClickSuccessParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} origin - where the dialog is opened from
 * @property {string} invite_role - (please note that using the toggle changes role desc) the role the user sends to the invitees
 * @property {string} platform - platform
 * @return {LogObject<teamManagementAddMembersInviteClickSuccessParams>} LogObject<teamManagementAddMembersInviteClickSuccessParams>
 */
export function teamManagementAddMembersInviteClickSuccess(params) {
    return { evid: 176, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'headerClickOnItemInOneOfTheHeaderDialogsDropDownMenus' event (evid: 1768)
 *
 * Event description: click on item in one of the header dialogs which are drop down menus, it can be click on item in explore menu, help menu, etc.
 *
 * @param {headerClickOnItemInOneOfTheHeaderDialogsDropDownMenusParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} pageView - my-sites /dashboard / account settings
 * @property {string} itemName - the item name, f.e: courses and lessons, updates and releases, etc.
 * @property {string} platform - deprecated
 * @property {GUID} msid - site guid (when the click is in site level)
 * @property {string} view - the dropdown menu name, f.e: explore, priority support, site-dropdown, notifications, etc.
 * @return {LogObject<headerClickOnItemInOneOfTheHeaderDialogsDropDownMenusParams>} LogObject<headerClickOnItemInOneOfTheHeaderDialogsDropDownMenusParams>
 */
export function headerClickOnItemInOneOfTheHeaderDialogsDropDownMenus(params) {
    return { evid: 1768, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'teamManagementAddMembersInviteClickFail' event (evid: 177)
 *
 * Event description: When a user clicks on 'send invites' in the add member window - fail response
 *
 * @param {teamManagementAddMembersInviteClickFailParams} params - The parameters for this event
 * @property {string} error_desc - error description
 * @property {string} view_type - view_type
 * @property {string} origin - where the dialog was opened
 * @property {string} invite_role - (please note that using the toggle changes role desc) the role the user sends to the invitees
 * @property {string} platform - platform
 * @return {LogObject<teamManagementAddMembersInviteClickFailParams>} LogObject<teamManagementAddMembersInviteClickFailParams>
 */
export function teamManagementAddMembersInviteClickFail(params) {
    return { evid: 177, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'renderingPlatformRedirect' event (evid: 1770)
 *
 * Event description: Rendering Platform Redirect.
 *
 * @param {renderingPlatformRedirectParams} params - The parameters for this event
 * @property {string} reason - reason for the redirect - why is the user redirected to where we send them
 * @property {string} redirectTo - The target location of the user redirect (will they land in BM/My-Sites/Partners Dashboard)
 * @return {LogObject<renderingPlatformRedirectParams>} LogObject<renderingPlatformRedirectParams>
 */
export function renderingPlatformRedirect(params) {
    return { evid: 1770, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'mySitesUnableToMoveSitesToTrashModalIsShownOnBulkMoveToTrashOrSingleSiteMoveToTrash' event (evid: 1771)
 *
 * Event description: when Unable to Move Sites to Trash modal is shown after user tried to move to trash (the modal will appear in single site moving to trash or in bulk moving to trash)
 *
 * @param {mySitesUnableToMoveSitesToTrashModalIsShownOnBulkMoveToTrashOrSingleSiteMoveToTrashParams} params - The parameters for this event
 * @property {string} view_mode - view_mode
 * @property {string} view_type - view_type
 * @property {string} sub_view - sub_view
 * @property {string} origin - my sites / dashboard / sites-list-enterprise
 * @property {number} num_untrashed_sites - number of sites can't be moved to trash
 * @property {string} platform - deprecated
 * @property {string} hosting - MA/editor
 * @property {string} reasons - a JSON of the reasons the sites can't be moved to trash when the key is the reason and the value is a list of the sites msid's which can't be moved to trash, the keys: pending subscription/active subscription/unpermitted/tech error
 * @return {LogObject<mySitesUnableToMoveSitesToTrashModalIsShownOnBulkMoveToTrashOrSingleSiteMoveToTrashParams>} LogObject<mySitesUnableToMoveSitesToTrashModalIsShownOnBulkMoveToTrashOrSingleSiteMoveToTrashParams>
 */
export function mySitesUnableToMoveSitesToTrashModalIsShownOnBulkMoveToTrashOrSingleSiteMoveToTrash(params) {
    return { evid: 1771, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'teamManagementDeleteTeamMemberOpenDialog' event (evid: 178)
 *
 * Event description: When a user clicks on delete member
 *
 * @param {teamManagementDeleteTeamMemberOpenDialogParams} params - The parameters for this event
 * @property {string} invite_status - pending/expired/leave team
 * @property {string} role - the deleted user’s role
 * @property {string} view_type - view_type
 * @property {string} origin - where the user opened the dialog from
 * @property {GUID} member_id - the uuid of the deleted member (if status is pending then invite_id)
 * @property {string} platform - platform
 * @return {LogObject<teamManagementDeleteTeamMemberOpenDialogParams>} LogObject<teamManagementDeleteTeamMemberOpenDialogParams>
 */
export function teamManagementDeleteTeamMemberOpenDialog(params) {
    return { evid: 178, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'teamManagementDeleteTeamMemberDeleteClick' event (evid: 179)
 *
 * Event description: When a user clicks on 'delete' in the delete team member window
 *
 * @param {teamManagementDeleteTeamMemberDeleteClickParams} params - The parameters for this event
 * @property {string} invite_status - pending/expired/leave team
 * @property {string} role - the deleted user’s role
 * @property {string} view_type - view_type
 * @property {string} origin - where the dialog was opened from
 * @property {GUID} member_id - the uuid of the deleted member (if status is pending then invite_id)
 * @property {string} platform - platform
 * @return {LogObject<teamManagementDeleteTeamMemberDeleteClickParams>} LogObject<teamManagementDeleteTeamMemberDeleteClickParams>
 */
export function teamManagementDeleteTeamMemberDeleteClick(params) {
    return { evid: 179, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderOneAppModalShown' event (evid: 1790)
 *
 * Event description: Modal shown - generic event for many different modals in OneApp.
 *
 * @param {formBuilderOneAppModalShownParams} params - The parameters for this event
 * @property {GUID} uuid - uuid
 * @property {GUID} visitor_id - visitor_id
 * @property {string} modal_name - modal name
 * @property {string} form_comp_id - form_comp_id
 * @property {GUID} vsi - vsi
 * @property {string} origin - origin
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderOneAppModalShownParams>} LogObject<formBuilderOneAppModalShownParams>
 */
export function formBuilderOneAppModalShown(params) {
    return { evid: 1790, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderOneAppModalAction' event (evid: 1791)
 *
 * Event description: Action in OneApp modal.
 *
 * @param {formBuilderOneAppModalActionParams} params - The parameters for this event
 * @property {GUID} uuid - uuid
 * @property {GUID} visitor_id - visitor_id
 * @property {string} modal_name - modal_name
 * @property {string} form_comp_id - form_comp_id
 * @property {GUID} vsi - vsi
 * @property {string} origin - origin
 * @property {GUID} form_guid - form_guid
 * @property {GUID} msid - msid
 * @property {string} action - action: form selected/closed/etc.
 * @return {LogObject<formBuilderOneAppModalActionParams>} LogObject<formBuilderOneAppModalActionParams>
 */
export function formBuilderOneAppModalAction(params) {
    return { evid: 1791, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderOneAppFormSelectorEmptyState' event (evid: 1792)
 *
 * Event description: Simple event to show when a user tries to add Form section in Owner App, but has no standalone forms available.
 *
 * @param {formBuilderOneAppFormSelectorEmptyStateParams} params - The parameters for this event
 * @property {GUID} uuid - uuid
 * @property {GUID} visitor_id - visitor_id
 * @property {GUID} vsi - vsi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderOneAppFormSelectorEmptyStateParams>} LogObject<formBuilderOneAppFormSelectorEmptyStateParams>
 */
export function formBuilderOneAppFormSelectorEmptyState(params) {
    return { evid: 1792, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderFormSectionLoadedInSpacesApp' event (evid: 1794)
 *
 * Event description: When a form section is loaded for UoU in Spaces app.
 *
 * @param {formBuilderFormSectionLoadedInSpacesAppParams} params - The parameters for this event
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form_comp_id
 * @property {GUID} vsi - vsi
 * @property {string} origin - origin
 * @property {GUID} form_guid - form_guid
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderFormSectionLoadedInSpacesAppParams>} LogObject<formBuilderFormSectionLoadedInSpacesAppParams>
 */
export function formBuilderFormSectionLoadedInSpacesApp(params) {
    return { evid: 1794, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderOneAppLearnMoreClick' event (evid: 1796)
 *
 * Event description: When a user clicks on "Learn more" in OneApp.
 *
 * @param {formBuilderOneAppLearnMoreClickParams} params - The parameters for this event
 * @property {string} linkUrl - link to where learn more leads to
 * @property {GUID} visitor_id - visitor_id
 * @property {string} placement - where was the learn more click located
 * @property {GUID} vsi - vsi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderOneAppLearnMoreClickParams>} LogObject<formBuilderOneAppLearnMoreClickParams>
 */
export function formBuilderOneAppLearnMoreClick(params) {
    return { evid: 1796, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderOneApp3DotsSwipe' event (evid: 1797)
 *
 * Event description: When a user clicks on three dots or does swipe action in OneApp
 *
 * @param {formBuilderOneApp3DotsSwipeParams} params - The parameters for this event
 * @property {string} method - swipe/three_dots
 * @property {GUID} visitor_id - visitor_id
 * @property {string} placement - location where three dots/swipe action took place
 * @property {string} form_comp_id - form_id
 * @property {GUID} vsi - vsi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderOneApp3DotsSwipeParams>} LogObject<formBuilderOneApp3DotsSwipeParams>
 */
export function formBuilderOneApp3DotsSwipe(params) {
    return { evid: 1797, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardSiteNewsViewAll' event (evid: 18)
 *
 * Event description: dashboard > site -> news -> view all.
 *
 * @param {dashboardSiteNewsViewAllParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @return {LogObject<dashboardSiteNewsViewAllParams>} LogObject<dashboardSiteNewsViewAllParams>
 */
export function dashboardSiteNewsViewAll(params) {
    return { evid: 18, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'teamManagementDeleteTeamMemberDeleteClickSuccess' event (evid: 180)
 *
 * Event description: When a user clicks on 'delete' in the delete team member window - success response
 *
 * @param {teamManagementDeleteTeamMemberDeleteClickSuccessParams} params - The parameters for this event
 * @property {string} invite_status - pending/expired/leave team
 * @property {string} role - the deleted user’s role
 * @property {string} view_type - view_type
 * @property {string} origin - where the dialog was opened from
 * @property {GUID} member_id - the uuid of the deleted member (if status is pending then invite_id)
 * @property {string} platform - platform
 * @return {LogObject<teamManagementDeleteTeamMemberDeleteClickSuccessParams>} LogObject<teamManagementDeleteTeamMemberDeleteClickSuccessParams>
 */
export function teamManagementDeleteTeamMemberDeleteClickSuccess(params) {
    return { evid: 180, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderOneAppClickInsideSwipeAction' event (evid: 1800)
 *
 * Event description: When a user clicks something inside OneApp swipe action
 *
 * @param {formBuilderOneAppClickInsideSwipeActionParams} params - The parameters for this event
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form_id
 * @property {GUID} vsi - vsi
 * @property {GUID} msid - msid
 * @property {string} action - which action was chosen inside swipe
 * @return {LogObject<formBuilderOneAppClickInsideSwipeActionParams>} LogObject<formBuilderOneAppClickInsideSwipeActionParams>
 */
export function formBuilderOneAppClickInsideSwipeAction(params) {
    return { evid: 1800, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderOneAppWidgetClick' event (evid: 1805)
 *
 * Event description: When user clicks on a forms widget in OneApp
 *
 * @param {formBuilderOneAppWidgetClickParams} params - The parameters for this event
 * @property {string} click_name - click_name
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form_id
 * @property {GUID} vsi - vsi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderOneAppWidgetClickParams>} LogObject<formBuilderOneAppWidgetClickParams>
 */
export function formBuilderOneAppWidgetClick(params) {
    return { evid: 1805, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderOneAppFormsListPageOpened' event (evid: 1806)
 *
 * Event description: When forms list is opened in OneApp
 *
 * @param {formBuilderOneAppFormsListPageOpenedParams} params - The parameters for this event
 * @property {GUID} visitor_id - visitor_id
 * @property {number} form_count - how many forms users has, if empty state, then 0
 * @property {GUID} vsi - vsi
 * @property {string} origin - origin
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderOneAppFormsListPageOpenedParams>} LogObject<formBuilderOneAppFormsListPageOpenedParams>
 */
export function formBuilderOneAppFormsListPageOpened(params) {
    return { evid: 1806, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderOneAppSubmissionsListPageOpened' event (evid: 1807)
 *
 * Event description: When user opens submission page in OneApp
 *
 * @param {formBuilderOneAppSubmissionsListPageOpenedParams} params - The parameters for this event
 * @property {number} submission_count - submission_count, if empty state then 0
 * @property {string} dynamic_values - which dynamic values are being displayed: email, first name, etc.
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form_comp_id
 * @property {GUID} vsi - vsi
 * @property {string} origin - origin
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderOneAppSubmissionsListPageOpenedParams>} LogObject<formBuilderOneAppSubmissionsListPageOpenedParams>
 */
export function formBuilderOneAppSubmissionsListPageOpened(params) {
    return { evid: 1807, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'teamManagementDeleteTeamMemberDeleteClickFail' event (evid: 181)
 *
 * Event description: When a user clicks on 'delete' in the delete team member window - fail response
 *
 * @param {teamManagementDeleteTeamMemberDeleteClickFailParams} params - The parameters for this event
 * @property {string} invite_status - pending/expired/leave team
 * @property {string} role - the deleted user’s role
 * @property {string} view_type - view_type
 * @property {string} origin - where the dialog was opened from
 * @property {GUID} member_id - the uuid of the deleted member (if status is pending then invite_id)
 * @property {string} platform - platform
 * @return {LogObject<teamManagementDeleteTeamMemberDeleteClickFailParams>} LogObject<teamManagementDeleteTeamMemberDeleteClickFailParams>
 */
export function teamManagementDeleteTeamMemberDeleteClickFail(params) {
    return { evid: 181, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'focusWidgetHoverOverProgressBarToShowPopover' event (evid: 1812)
 *
 * Event description: when a user hovers over progress bar to show popover
 *
 * @param {focusWidgetHoverOverProgressBarToShowPopoverParams} params - The parameters for this event
 * @property {string} hosting - ADI/MA/editor
 * @property {GUID} msid - msid
 * @property {string} placement_id - placement_id from dealer
 * @return {LogObject<focusWidgetHoverOverProgressBarToShowPopoverParams>} LogObject<focusWidgetHoverOverProgressBarToShowPopoverParams>
 */
export function focusWidgetHoverOverProgressBarToShowPopover(params) {
    return { evid: 1812, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderOneAppFormsResultsPageOpened' event (evid: 1814)
 *
 * Event description: When the owner opens Forms results page
 *
 * @param {formBuilderOneAppFormsResultsPageOpenedParams} params - The parameters for this event
 * @property {GUID} visitor_id - visitor_id
 * @property {GUID} submissionId - submission id
 * @property {string} form_comp_id - form_comp_id
 * @property {GUID} vsi - vsi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderOneAppFormsResultsPageOpenedParams>} LogObject<formBuilderOneAppFormsResultsPageOpenedParams>
 */
export function formBuilderOneAppFormsResultsPageOpened(params) {
    return { evid: 1814, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderOneAppFormsResultsPageActions' event (evid: 1815)
 *
 * Event description: When the owner navigates through submissions in form results page
 *
 * @param {formBuilderOneAppFormsResultsPageActionsParams} params - The parameters for this event
 * @property {GUID} visitor_id - visitor_id
 * @property {GUID} submissionId - submission id, in which the user did an action
 * @property {string} form_comp_id - form_comp_id
 * @property {GUID} vsi - vsi
 * @property {GUID} msid - msid
 * @property {string} action - exit/back/forward
 * @return {LogObject<formBuilderOneAppFormsResultsPageActionsParams>} LogObject<formBuilderOneAppFormsResultsPageActionsParams>
 */
export function formBuilderOneAppFormsResultsPageActions(params) {
    return { evid: 1815, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'teamManagementGetInviteLink' event (evid: 182)
 *
 * Event description: When a user clicks on get invitation link
 *
 * @param {teamManagementGetInviteLinkParams} params - The parameters for this event
 * @property {string} invite_status - pending/expired/leave team
 * @property {string} role - the deleted user’s role
 * @property {string} view_type - view_type
 * @property {string} origin - where the dialog was opened from
 * @property {string} platform - platform
 * @return {LogObject<teamManagementGetInviteLinkParams>} LogObject<teamManagementGetInviteLinkParams>
 */
export function teamManagementGetInviteLink(params) {
    return { evid: 182, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'teamManagementEditRoleOpenDialog' event (evid: 183)
 *
 * Event description: When the user clicks on edit role
 *
 * @param {teamManagementEditRoleOpenDialogParams} params - The parameters for this event
 * @property {string} invite_status - pending/expired
 * @property {string} view_type - view_type
 * @property {string} roles_displayed - list of roles displayed to the user
 * @property {string} origin - where the dialog is opened from
 * @property {GUID} member_id - the uuid of the member which we edit the role for
 * @property {string} platform - platform
 * @return {LogObject<teamManagementEditRoleOpenDialogParams>} LogObject<teamManagementEditRoleOpenDialogParams>
 */
export function teamManagementEditRoleOpenDialog(params) {
    return { evid: 183, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'teamManagementSwitchToStudioClickToSwitch' event (evid: 1838)
 *
 * Event description: When the user clicks on "Switch to Studio" on the LP, the user gets this page after accepting the invite to join a team, and choosing to switch to Studio on the Multi-choice page.
 *
 * @param {teamManagementSwitchToStudioClickToSwitchParams} params - The parameters for this event
 * @property {string} platform - platform
 * @return {LogObject<teamManagementSwitchToStudioClickToSwitchParams>} LogObject<teamManagementSwitchToStudioClickToSwitchParams>
 */
export function teamManagementSwitchToStudioClickToSwitch(params) {
    return { evid: 1838, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'teamManagementSwitchToStudioLearnMore' event (evid: 1839)
 *
 * Event description: When the user clicks on "Learn more" on the LP, the user gets this page after accepting the invite to join a team, and choosing to switch to Studio on the Multi-choice page.
 *
 * @param {teamManagementSwitchToStudioLearnMoreParams} params - The parameters for this event
 * @property {string} platform - platform
 * @return {LogObject<teamManagementSwitchToStudioLearnMoreParams>} LogObject<teamManagementSwitchToStudioLearnMoreParams>
 */
export function teamManagementSwitchToStudioLearnMore(params) {
    return { evid: 1839, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'teamManagementEditRoleUpdateClick' event (evid: 184)
 *
 * Event description: When the user clicks on 'update' in the edit role window - success response
 *
 * @param {teamManagementEditRoleUpdateClickParams} params - The parameters for this event
 * @property {string} new_role - new role
 * @property {boolean} is_accepted - true if invite was accepted
 * @property {string} view_type - view_type
 * @property {string} roles_displayed - list of roles displayed to the user
 * @property {string} prev_role - previous role
 * @property {string} origin - where the dialog is opened from
 * @property {string} platform - platform
 * @return {LogObject<teamManagementEditRoleUpdateClickParams>} LogObject<teamManagementEditRoleUpdateClickParams>
 */
export function teamManagementEditRoleUpdateClick(params) {
    return { evid: 184, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'teamManagementResendInviteClick' event (evid: 185)
 *
 * Event description: When a user clicks on resend invite
 *
 * @param {teamManagementResendInviteClickParams} params - The parameters for this event
 * @property {string} invite_status - pending/expired
 * @property {string} view_type - view_type
 * @property {string} origin - where the user opened the dialog from
 * @property {GUID} invite_id - the invite id
 * @property {string} invite_role - the role on the invite
 * @property {string} platform - platform
 * @return {LogObject<teamManagementResendInviteClickParams>} LogObject<teamManagementResendInviteClickParams>
 */
export function teamManagementResendInviteClick(params) {
    return { evid: 185, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardContributorsClickOnMangeRolesAndPermissions' event (evid: 187)
 *
 * Event description: When a user clicks on 'manage roles and permissions' from contributors pic
 *
 * @param {dashboardContributorsClickOnMangeRolesAndPermissionsParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} hosting - MA
 * @property {GUID} msid - --
 * @return {LogObject<dashboardContributorsClickOnMangeRolesAndPermissionsParams>} LogObject<dashboardContributorsClickOnMangeRolesAndPermissionsParams>
 */
export function dashboardContributorsClickOnMangeRolesAndPermissions(params) {
    return { evid: 187, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'ascendHoverOnUpgradeAscend' event (evid: 188)
 *
 * Event description: Hover on Upgrade Ascend
 *
 * @param {ascendHoverOnUpgradeAscendParams} params - The parameters for this event
 * @property {string} appName - BM App
 * @property {GUID} uuid - uuid
 * @property {string} button_name - upgrade button / ascend title
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<ascendHoverOnUpgradeAscendParams>} LogObject<ascendHoverOnUpgradeAscendParams>
 */
export function ascendHoverOnUpgradeAscend(params) {
    return { evid: 188, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'ascendClickOnUpgradeAscend' event (evid: 189)
 *
 * Event description: Click on Upgrade Ascend
 *
 * @param {ascendClickOnUpgradeAscendParams} params - The parameters for this event
 * @property {string} appName - BM App
 * @property {GUID} uuid - uuid
 * @property {string} button_name - upgrade/upgrade business tools / ascend info / learn more
 * @property {string} view_type - view_type
 * @property {string} origin - web/native
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<ascendClickOnUpgradeAscendParams>} LogObject<ascendClickOnUpgradeAscendParams>
 */
export function ascendClickOnUpgradeAscend(params) {
    return { evid: 189, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'microActionAdditionalInfo' event (evid: 1895)
 *
 * Event description: Micro Action - Additional Info
 *
 * @param {microActionAdditionalInfoParams} params - The parameters for this event
 * @property {string} asset_version - asset_version
 * @property {string} offering_name - offering_name
 * @property {string} info_value - info_value
 * @property {string} asset_location_on_page - (0,1,2,3)
 * @property {string} info_origin - info_origin
 * @property {string} offering_guid - offering_guid
 * @property {string} info_type - info_type
 * @property {string} origin - sidebar / dashboard
 * @property {GUID} msid - msid
 * @property {string} campaign_id - campaign_id
 * @property {string} placement_id - placement_id
 * @return {LogObject<microActionAdditionalInfoParams>} LogObject<microActionAdditionalInfoParams>
 */
export function microActionAdditionalInfo(params) {
    return { evid: 1895, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardSiteNewsClickItem' event (evid: 19)
 *
 * Event description: dashboard > site -> news -> click item.
 *
 * @param {dashboardSiteNewsClickItemParams} params - The parameters for this event
 * @property {string} feed_type - type
 * @property {string} msg_origin - origin
 * @property {string} name - name
 * @property {GUID} item_id - item_id
 * @property {string} source - source
 * @property {string} url - url
 * @property {boolean} is_deleted - is_deleted
 * @property {string} view_type - view_type
 * @property {string} origin - origin
 * @property {GUID} campaignId - unique identifier of CMS items
 * @property {string} title - title of tip
 * @property {string} lang - item_lng
 * @property {string} type - type
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @property {boolean} is_archived - is_archived
 * @property {GUID} feed_id - feed_id
 * @return {LogObject<dashboardSiteNewsClickItemParams>} LogObject<dashboardSiteNewsClickItemParams>
 */
export function dashboardSiteNewsClickItem(params) {
    return { evid: 19, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'ascendPpClickOnMoveToWixPremiumPp' event (evid: 190)
 *
 * Event description: User clicks on buttons in Ascend PP
 *
 * @param {ascendPpClickOnMoveToWixPremiumPpParams} params - The parameters for this event
 * @property {number} timeInPage - in milisec
 * @property {string} referralInfo - button name open PP
 * @property {string} button_name - premium / compare
 * @property {string} view_type - view_type
 * @property {string} origin - product name open PP
 * @property {string} platform - web/mobile
 * @return {LogObject<ascendPpClickOnMoveToWixPremiumPpParams>} LogObject<ascendPpClickOnMoveToWixPremiumPpParams>
 */
export function ascendPpClickOnMoveToWixPremiumPp(params) {
    return { evid: 190, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'newFormsFormListTabOpenedOldFormsForms' event (evid: 1901)
 *
 * Event description: When a tab is opened in form list: Old forms or new forms. Clone of 156: 3205: https://bo.wix.com/bi-catalog-webapp/#/sources/156/events/3205?artifactId=com.wixpress.form-app
 *
 * @param {newFormsFormListTabOpenedOldFormsFormsParams} params - The parameters for this event
 * @property {string} tab_name - forms/old_forms
 * @property {GUID} visitor_id - visitor_id
 * @property {GUID} vsi - vsi
 * @property {GUID} msid - msid
 * @return {LogObject<newFormsFormListTabOpenedOldFormsFormsParams>} LogObject<newFormsFormListTabOpenedOldFormsFormsParams>
 */
export function newFormsFormListTabOpenedOldFormsForms(params) {
    return { evid: 1901, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'websitePageChecklistInteractWithStepInAList' event (evid: 1902)
 *
 * Event description: Create form button click inside of a form list. Clone of 156: 3209: https://bo.wix.com/bi-catalog-webapp/#/sources/156/events/3209?artifactId=com.wixpress.form-app
 *
 * @param {websitePageChecklistInteractWithStepInAListParams} params - The parameters for this event
 * @property {string} tab_name - forms/old_forms
 * @property {GUID} visitor_id - visitor_id
 * @property {GUID} vsi - vsi
 * @property {GUID} msid - msid
 * @return {LogObject<websitePageChecklistInteractWithStepInAListParams>} LogObject<websitePageChecklistInteractWithStepInAListParams>
 */
export function websitePageChecklistInteractWithStepInAList(params) {
    return { evid: 1902, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'ascendPpThankYouPage' event (evid: 191)
 *
 * Event description: Thank you page after purchasing Ascend PP
 *
 * @param {ascendPpThankYouPageParams} params - The parameters for this event
 * @property {string} package_id - package bought
 * @property {string} cycle_name - Cycle bought
 * @property {string} view_type - view_type
 * @property {string} package_name - package bought
 * @property {GUID} app_id - app_id
 * @property {string} type - Page View / Click go to Dashboard
 * @property {GUID} packageId - package id
 * @property {string} platform - web/native
 * @property {number} cycleId - cycle id
 * @return {LogObject<ascendPpThankYouPageParams>} LogObject<ascendPpThankYouPageParams>
 */
export function ascendPpThankYouPage(params) {
    return { evid: 191, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'invoicesMoreActionsClick' event (evid: 193)
 *
 * Event description: Invoices - More Actions - Click
 *
 * @param {invoicesMoreActionsClickParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} origin - origin page
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<invoicesMoreActionsClickParams>} LogObject<invoicesMoreActionsClickParams>
 */
export function invoicesMoreActionsClick(params) {
    return { evid: 193, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'invoicesMoreActionsChooseOption' event (evid: 194)
 *
 * Event description: Invoices - More Actions - Choose option
 *
 * @param {invoicesMoreActionsChooseOptionParams} params - The parameters for this event
 * @property {string} option - 'Products', 'Reports','Accept Payments', 'Invoice Settings','Feedback'
 * @property {string} view_type - view_type
 * @property {string} origin - originPage
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<invoicesMoreActionsChooseOptionParams>} LogObject<invoicesMoreActionsChooseOptionParams>
 */
export function invoicesMoreActionsChooseOption(params) {
    return { evid: 194, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'mobileClickOnCreateNewSite' event (evid: 196)
 *
 * Event description: when a user clicks on 'create new site' button in mobile view
 *
 * @param {mobileClickOnCreateNewSiteParams} params - The parameters for this event
 * @property {string} page_view - the name of the page the user is in
 * @property {string} platform - platform
 * @return {LogObject<mobileClickOnCreateNewSiteParams>} LogObject<mobileClickOnCreateNewSiteParams>
 */
export function mobileClickOnCreateNewSite(params) {
    return { evid: 196, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardFetchDealerLayoutFailed' event (evid: 1999)
 *
 * Event description: when fetching from dealer layout is failed
 *
 * @param {dashboardFetchDealerLayoutFailedParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} type - fallback/cached
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @property {string} dashboard_type - old/new
 * @return {LogObject<dashboardFetchDealerLayoutFailedParams>} LogObject<dashboardFetchDealerLayoutFailedParams>
 */
export function dashboardFetchDealerLayoutFailed(params) {
    return { evid: 1999, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardUserSeeFeed' event (evid: 20)
 *
 * Event description: whenever a news item is a fully displayed in the newsfeed send a bi-feed so I will be able to know that a user saw the feed
 *
 * @param {dashboardUserSeeFeedParams} params - The parameters for this event
 * @property {GUID} feedId - feed id
 * @property {string} source - the application/CMS that sent the feed. send the application ID.
 * @property {string} url - the link of the action
 * @property {string} view_type - view_type
 * @property {boolean} more3sec - if the item was full displayed for 3 sec or more
 * @property {string} origin - origin
 * @property {GUID} campaignId - unique identifier of CMS items
 * @property {string} title - title of feed
 * @property {string} type - type
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @property {boolean} aboveTheFold - was the item full viewed above the fold
 * @property {GUID} feed_id - feed id
 * @return {LogObject<dashboardUserSeeFeedParams>} LogObject<dashboardUserSeeFeedParams>
 */
export function dashboardUserSeeFeed(params) {
    return { evid: 20, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'mySitesClickInUnableToMoveSitesToTrashDialog' event (evid: 2000)
 *
 * Event description: My Sites - click in Unable to Move Sites to Trash dialog.
 *
 * @param {mySitesClickInUnableToMoveSitesToTrashDialogParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} origin - my-sites/dashboard
 * @property {string} cta - the button actual text/ the url actual title (only in english)
 * @property {string} platform - deprecated
 * @property {GUID} msid - the selected site guid, when the action is generic and not related to specific site (exit f.e) send null
 * @property {string} action - cancel/cta
 * @return {LogObject<mySitesClickInUnableToMoveSitesToTrashDialogParams>} LogObject<mySitesClickInUnableToMoveSitesToTrashDialogParams>
 */
export function mySitesClickInUnableToMoveSitesToTrashDialog(params) {
    return { evid: 2000, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'samplingPageFeatures' event (evid: 20000)
 *
 * Event description: sent randomly to users in pages inside the BM to discover the adoption of Wix Patterns
 *
 *
 * @param {samplingPageFeaturesParams} params - The parameters for this event
 * @property {string} pageId - the page id (the component id of the page)
 * @property {string} pageType - entity/collection
 * @property {string} pageRoute - the page's route
 * @property {number} numberOfTableComponents - number of table components
 * @property {number} numberOfTabsComponents - number of tabs components
 * @property {number} numberOfGridComponents - number of grid components
 * @property {number} numberOfNestedTablesComponents - number of nested tables components
 * @property {boolean} isWixPatternsPage - true if the page belongs to Wix Patterns
 * @property {boolean} isWixPatternsComponent - true if the component belongs to Wix Patterns
 * @property {string} wixPatternsComponentsInPage - list of all the components in the page that belong to Wix Patterns
 * @property {string} wixPatternsPageType - entity/collection
 * @return {LogObject<samplingPageFeaturesParams>} LogObject<samplingPageFeaturesParams>
 */
export function samplingPageFeatures(params) {
    return { evid: 20000, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'clickingOnQuickActionButtonThreeDots' event (evid: 2001)
 *
 * Event description: Clicking on three dots for more actions
 *
 * @param {clickingOnQuickActionButtonThreeDotsParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} origin - origin page ( Invoices Dashboard, Recurring Invoices,Pricing Quotes, Invoice Interface
 * @property {string} platform - OneApp/ Web
 * @property {string} msid - msid
 * @property {GUID} invoice_id - invoice guid
 * @return {LogObject<clickingOnQuickActionButtonThreeDotsParams>} LogObject<clickingOnQuickActionButtonThreeDotsParams>
 */
export function clickingOnQuickActionButtonThreeDots(params) {
    return { evid: 2001, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'tooltipForOwnerApp' event (evid: 2002)
 *
 * Event description: when Tooltip for owner app shown
 *
 * @param {tooltipForOwnerAppParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} origin - entry points -analytics/blog
 * @property {string} platform - platform
 * @property {string} hosting - Dashboard/editor/ADI
 * @property {GUID} msid - msid
 * @return {LogObject<tooltipForOwnerAppParams>} LogObject<tooltipForOwnerAppParams>
 */
export function tooltipForOwnerApp(params) {
    return { evid: 2002, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'tooltipForOwnerAppClick' event (evid: 2003)
 *
 * Event description: when click onTooltip for owner app
 *
 * @param {tooltipForOwnerAppClickParams} params - The parameters for this event
 * @property {string} name - cta/close
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} hosting - Dashboard/editor/ADI
 * @property {GUID} msid - msid
 * @return {LogObject<tooltipForOwnerAppClickParams>} LogObject<tooltipForOwnerAppClickParams>
 */
export function tooltipForOwnerAppClick(params) {
    return { evid: 2003, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'downloadModal' event (evid: 2004)
 *
 * Event description: whendownload modal shown
 *
 * @param {downloadModalParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} origin - activity tab/mobile app dashboard
 * @property {string} platform - platform
 * @property {string} hosting - Dashboard/editor/ADI
 * @property {GUID} msid - msid
 * @return {LogObject<downloadModalParams>} LogObject<downloadModalParams>
 */
export function downloadModal(params) {
    return { evid: 2004, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'downloadModalClick' event (evid: 2005)
 *
 * Event description: download modal click
 *
 * @param {downloadModalClickParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} origin - activity tab/mobile app dashboard
 * @property {string} platform - platform
 * @property {string} hosting - Dashboard/editor/ADI
 * @property {GUID} msid - msid
 * @property {string} action - send_link/learn_how/close
 * @return {LogObject<downloadModalClickParams>} LogObject<downloadModalClickParams>
 */
export function downloadModalClick(params) {
    return { evid: 2005, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'downloadModalSuccessMessage' event (evid: 2006)
 *
 * Event description: download modal success message sent
 *
 * @param {downloadModalSuccessMessageParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} origin - origin
 * @property {string} platform - platform
 * @property {string} hosting - Dashboard/editor/ADI
 * @property {GUID} msid - msid
 * @return {LogObject<downloadModalSuccessMessageParams>} LogObject<downloadModalSuccessMessageParams>
 */
export function downloadModalSuccessMessage(params) {
    return { evid: 2006, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'downloadModalErrorMessage' event (evid: 2007)
 *
 * Event description: download modal error message sent
 *
 * @param {downloadModalErrorMessageParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} origin - origin
 * @property {string} platform - platform
 * @property {string} hosting - Dashboard/editor/ADI
 * @property {GUID} msid - msid
 * @return {LogObject<downloadModalErrorMessageParams>} LogObject<downloadModalErrorMessageParams>
 */
export function downloadModalErrorMessage(params) {
    return { evid: 2007, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'automationMainTableUserSearchFocusOut' event (evid: 2008)
 *
 * Event description: main table > user search focus out
 *
 * @param {automationMainTableUserSearchFocusOutParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} searchText - the text the user search for
 * @property {string} platform - platform
 * @property {number} numOfResults - number of results the user get
 * @property {GUID} msid - msid
 * @return {LogObject<automationMainTableUserSearchFocusOutParams>} LogObject<automationMainTableUserSearchFocusOutParams>
 */
export function automationMainTableUserSearchFocusOut(params) {
    return { evid: 2008, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'searchClickedToOpenSearch' event (evid: 202)
 *
 * Event description: when a user clicked to open the search box on the business manager platform
 *
 * @param {searchClickedToOpenSearchParams} params - The parameters for this event
 * @property {string} sub_view - sub_view
 * @property {string} origin - origin
 * @property {string} view - view
 * @property {string} hosting_platform_context_id - context id: when the context is site - msid, when the context is app_id (like in devCenter f.e) - appDefId. In account manager is null
 * @return {LogObject<searchClickedToOpenSearchParams>} LogObject<searchClickedToOpenSearchParams>
 */
export function searchClickedToOpenSearch(params) {
    return { evid: 202, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'osClickOnFavorites' event (evid: 203)
 *
 * Event description: when a user clicks on the "favorites" button from the sidebar
 *
 * @param {osClickOnFavoritesParams} params - The parameters for this event
 * @property {string} displayMode - the sidebar status (expand or collapsed)
 * @property {string} action - open or close the favorites popup
 * @property {string} pageName - the component name of the page
 * @property {string} pageId - the page id (the component id of the page)
 * @property {string} appId - the app id of the app the page belongs to
 * @property {boolean} isEmptyFavorites - returns true if the favorites pages list is currently empty
 * @property {string} favoriteItemsList - the list of current pages in the favorite pages section
 * @property {string} hostingPlatformContextId - context id: when the context is site - msid, when the context is app_id (like in devCenter f.e) - appDefId. In account manager is null
 * @return {LogObject<osClickOnFavoritesParams>} LogObject<osClickOnFavoritesParams>
 */
export function osClickOnFavorites(params) {
    return { evid: 203, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'osFavoritesPopupShown' event (evid: 204)
 *
 * Event description: sent when a favorites popup is shown
 *
 * @param {osFavoritesPopupShownParams} params - The parameters for this event
 * @property {string} pageName - the component name of the page
 * @property {string} pageId - the page id (the component id of the page)
 * @property {string} appId - the app id of the app the page belongs to
 * @property {string} view - the type of popup display (favorite pages or add to favorites marketing)
 * @property {boolean} isEmptyFavorites - returns true if the favorites pages list is currently empty
 * @property {boolean} isEmptyRecentlyViewed - returns true if the recently viewed list is currently empty
 * @property {string} recentlyViewedItemsList - the list of current pages in the recently viewed section
 * @property {string} favoriteItemsList - the list of current pages in the favorite pages section
 * @property {string} hostingPlatformContextId - context id: when the context is site - msid, when the context is app_id (like in devCenter f.e) - appDefId. In account manager is null
 * @return {LogObject<osFavoritesPopupShownParams>} LogObject<osFavoritesPopupShownParams>
 */
export function osFavoritesPopupShown(params) {
    return { evid: 204, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardSiteNewsFilter' event (evid: 21)
 *
 * Event description: dashboard > site -> news -> filter.
 *
 * @param {dashboardSiteNewsFilterParams} params - The parameters for this event
 * @property {string} name - name
 * @property {string} location - location
 * @property {string} view_type - view_type
 * @property {string} origin - origin
 * @property {string} type - type
 * @property {string} platform - platform
 * @property {string} filter_type - filter_type
 * @property {GUID} msid - msid
 * @return {LogObject<dashboardSiteNewsFilterParams>} LogObject<dashboardSiteNewsFilterParams>
 */
export function dashboardSiteNewsFilter(params) {
    return { evid: 21, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'osFavoritesPopupCtaClicked' event (evid: 210)
 *
 * Event description: sent when a user clicks a CTA in the favorites popup
 *
 * @param {osFavoritesPopupCtaClickedParams} params - The parameters for this event
 * @property {string} pageName - the component name of the page
 * @property {string} pageId - the page id (the component id of the page)
 * @property {string} appId - the app id of the app the page belongs to
 * @property {string} view - the type of popup display (favorite pages or add to favorites marketing)
 * @property {string} cta - cta name (in english)
 * @property {string} ctaType - the section the cta belongs to (general favorites popup, favorite page, recently viewed page)
 * @property {number} numFavoritePages - the number of favorite pages currently displayed in the Favorites popup
 * @property {number} numRecentlyViewedPages - the number of recently viewed pages currently displayed in the Favorites popup
 * @property {string} hostingPlatformContextId - context id: when the context is site - msid, when the context is app_id (like in devCenter f.e) - appDefId. In account manager is null
 * @return {LogObject<osFavoritesPopupCtaClickedParams>} LogObject<osFavoritesPopupCtaClickedParams>
 */
export function osFavoritesPopupCtaClicked(params) {
    return { evid: 210, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'osFavoritesPagesEdit' event (evid: 215)
 *
 * Event description: sent when a user edit favorite pages  in the favorites popup
 *
 * @param {osFavoritesPagesEditParams} params - The parameters for this event
 * @property {string} pageName - the component name of the page
 * @property {string} pageId - the page id (the component id of the page)
 * @property {string} appId - the app id of the app the page belongs to
 * @property {string} cta - cta name (in english) - remove/cancel/enter/edit/save
 * @property {string} favoritesName - the component name of the page that the user picks
 * @property {boolean} wasSuccess - Send true if the action completed successfully
 * @property {string} hostingPlatformContextId - context id: when the context is site - msid, when the context is app_id (like in devCenter f.e) - appDefId. In account manager is null
 * @return {LogObject<osFavoritesPagesEditParams>} LogObject<osFavoritesPagesEditParams>
 */
export function osFavoritesPagesEdit(params) {
    return { evid: 215, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardSettingsUpdate' event (evid: 22)
 *
 * Event description: dashboard > settings -> update.
 *
 * @param {dashboardSettingsUpdateParams} params - The parameters for this event
 * @property {string} name - settings section name
 * @property {string} view_type - view_type
 * @property {string} providerId - social provider for enable/disable social actions (facebook/google)
 * @property {string} click_from - security box/main page
 * @property {string} origin - button/description (only for 'edit password' - where did the user click)
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @property {string} value - deprecated
 * @return {LogObject<dashboardSettingsUpdateParams>} LogObject<dashboardSettingsUpdateParams>
 */
export function dashboardSettingsUpdate(params) {
    return { evid: 22, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardTpaUpgradeClick' event (evid: 23)
 *
 * Event description: dashboard > tpa upgrade click.
 *
 * @param {dashboardTpaUpgradeClickParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} origin - origin
 * @property {GUID} app_id - app_id
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<dashboardTpaUpgradeClickParams>} LogObject<dashboardTpaUpgradeClickParams>
 */
export function dashboardTpaUpgradeClick(params) {
    return { evid: 23, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'automationsPriceQuotesInvoicesSendFeedbackForm' event (evid: 232)
 *
 * Event description: user click on Send Feedback
 *
 * @param {automationsPriceQuotesInvoicesSendFeedbackFormParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} origin - {automations, price quotes, invoices}
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<automationsPriceQuotesInvoicesSendFeedbackFormParams>} LogObject<automationsPriceQuotesInvoicesSendFeedbackFormParams>
 */
export function automationsPriceQuotesInvoicesSendFeedbackForm(params) {
    return { evid: 232, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'automationsPriceQuotesInvoicesSubmitFeedbackForm' event (evid: 233)
 *
 * Event description: user click Submit Feedback Form
 *
 * @param {automationsPriceQuotesInvoicesSubmitFeedbackFormParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} origin - {automations, price quotes, invoices}
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<automationsPriceQuotesInvoicesSubmitFeedbackFormParams>} LogObject<automationsPriceQuotesInvoicesSubmitFeedbackFormParams>
 */
export function automationsPriceQuotesInvoicesSubmitFeedbackForm(params) {
    return { evid: 233, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardSiteSelectorLoaded' event (evid: 24)
 *
 * Event description: dashboard > site selector loaded successfully.
 *
 * @param {dashboardSiteSelectorLoadedParams} params - The parameters for this event
 * @property {string} filtered - premium/published/adi / none
 * @property {boolean} is_partner_dashboard - true - if partner dashboard displayed
 * @property {string} sitePublished - publish_status
 * @property {string} selectionType - single / multi
 * @property {string} view_type - view_type
 * @property {number} account_sites_number - absolute account sites number
 * @property {string} referral - referral
 * @property {number} loadingTime - in ms
 * @property {string} status - no thumbnails / empty state / success
 * @property {string} siteType - HtmlWeb / modal
 * @property {number} site_type_enriched - site_type
 * @property {string} platform - platform
 * @property {number} sites_count - # sites returned to site selector
 * @property {string} device - mobile / desktop
 * @return {LogObject<dashboardSiteSelectorLoadedParams>} LogObject<dashboardSiteSelectorLoadedParams>
 */
export function dashboardSiteSelectorLoaded(params) {
    return { evid: 24, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'mobileClickOnChangeLng' event (evid: 244)
 *
 * Event description: when user change LNG in mobile web experience
 *
 * @param {mobileClickOnChangeLngParams} params - The parameters for this event
 * @property {string} to_lng - new lng selected
 * @property {string} platform - platform
 * @property {string} from_lng - previous lng
 * @return {LogObject<mobileClickOnChangeLngParams>} LogObject<mobileClickOnChangeLngParams>
 */
export function mobileClickOnChangeLng(params) {
    return { evid: 244, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesPrintInvoice' event (evid: 245)
 *
 * Event description: Quotes - Print Invoice
 *
 * @param {quotesPrintInvoiceParams} params - The parameters for this event
 * @property {string} paymentType - 'Recurring','One Time'
 * @property {string} view_type - view_type
 * @property {string} origin - customer for UoU, my invoices for users
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {GUID} invoice_id - invoice guid
 * @return {LogObject<quotesPrintInvoiceParams>} LogObject<quotesPrintInvoiceParams>
 */
export function quotesPrintInvoice(params) {
    return { evid: 245, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesPayInvoiceClickSrc5Evid246' event (evid: 246)
 *
 * Event description: Quotes - Pay Invoice Click
 *
 * @param {quotesPayInvoiceClickSrc5Evid246Params} params - The parameters for this event
 * @property {string} paymentType - 'Recurring','One Time'
 * @property {string} view_type - view_type
 * @property {string} origin - customer for UoU, my invoices for users
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {GUID} invoice_id - invoice guid
 * @return {LogObject<quotesPayInvoiceClickSrc5Evid246Params>} LogObject<quotesPayInvoiceClickSrc5Evid246Params>
 */
export function quotesPayInvoiceClickSrc5Evid246(params) {
    return { evid: 246, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardSiteSelectorButton' event (evid: 25)
 *
 * Event description: dashboard > site selector click.
 *
 * @param {dashboardSiteSelectorButtonParams} params - The parameters for this event
 * @property {string} filtered - premium/published/adi / none
 * @property {number} positionIndex - the index of the selected site position in the site selector
 * @property {GUID} site_id - site_id
 * @property {boolean} is_partner_dashboard - true - if partner dashboard chosen
 * @property {string} result - json of all chosen msid separated with comma
 * @property {string} selectionType - single / multi
 * @property {string} view_type - view_type
 * @property {string} siteTypeName - ADI/Editor
 * @property {Url} action_url - action_url
 * @property {string} referral - referral URL
 * @property {string} siteType - HtmlWeb / modal
 * @property {number} sites_number - the number of sites available in site selector (not necessarily equal to number of sites owned)
 * @property {string} cta - x / cancel / continue
 * @property {number} position - The position of the selected site in the page. 1 is the highest site.
 * @property {number} site_type_enriched - site_type
 * @property {GUID} esi - esi
 * @property {string} platform - deprecated
 * @property {GUID} msid - msid
 * @property {number} sites_count - how many sites were chosen
 * @property {string} device - mobile / desktop
 * @return {LogObject<dashboardSiteSelectorButtonParams>} LogObject<dashboardSiteSelectorButtonParams>
 */
export function dashboardSiteSelectorButton(params) {
    return { evid: 25, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'homeClickNotificationCta' event (evid: 250)
 *
 * Event description: user clicks on a notification and opens app (test)
 *
 * @param {homeClickNotificationCtaParams} params - The parameters for this event
 * @property {GUID} app_id - app that sent the notification
 * @property {string} app_def_id - app that sent the notification
 * @property {string} view_type - view_type
 * @property {string} activity_type - the notification / activity type
 * @property {GUID} notification_id - notification id
 * @property {number} num_of_new - number of new notifications - number in badge
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<homeClickNotificationCtaParams>} LogObject<homeClickNotificationCtaParams>
 */
export function homeClickNotificationCta(params) {
    return { evid: 250, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'waiverClientAppWaiverStatusDropdown' event (evid: 2501)
 *
 * Event description: User clicks on health waiver and by that open a dropdown of waiver statuses.
 * origin: manage participants or contact
 *
 * @param {waiverClientAppWaiverStatusDropdownParams} params - The parameters for this event
 * @property {string} origin - from where the user clicked
 * @property {string} contact_id - contact_id
 * @property {string} currentValue - current waiver status
 * @property {GUID} msid - msid
 * @return {LogObject<waiverClientAppWaiverStatusDropdownParams>} LogObject<waiverClientAppWaiverStatusDropdownParams>
 */
export function waiverClientAppWaiverStatusDropdown(params) {
    return { evid: 2501, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'waiverClientAppWaiverStatusChangedManually' event (evid: 2502)
 *
 * Event description: User clicks on health waiver and by that open a dropdown of waiver statuses.
 * origin: manage participants or contact
 *
 * @param {waiverClientAppWaiverStatusChangedManuallyParams} params - The parameters for this event
 * @property {string} previous_value - previous waiver status
 * @property {string} origin - from where the user clicked
 * @property {string} contact_id - contact_id
 * @property {string} currentValue - current waiver status
 * @property {GUID} msid - msid
 * @return {LogObject<waiverClientAppWaiverStatusChangedManuallyParams>} LogObject<waiverClientAppWaiverStatusChangedManuallyParams>
 */
export function waiverClientAppWaiverStatusChangedManually(params) {
    return { evid: 2502, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'waiverClientAppSendWaiverToClient' event (evid: 2503)
 *
 * Event description: Send waiver to client by email
 * origin: manage participants or contact
 *
 * @param {waiverClientAppSendWaiverToClientParams} params - The parameters for this event
 * @property {string} origin - from where the user clicked
 * @property {string} contact_id - contact_id
 * @property {GUID} msid - msid
 * @return {LogObject<waiverClientAppSendWaiverToClientParams>} LogObject<waiverClientAppSendWaiverToClientParams>
 */
export function waiverClientAppSendWaiverToClient(params) {
    return { evid: 2503, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'homeMarkNotificationUnread' event (evid: 251)
 *
 * Event description: user clicks on mark as unread
 *
 * @param {homeMarkNotificationUnreadParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {GUID} notification_id - notification id
 * @property {string} app_id - app that sent the notification
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<homeMarkNotificationUnreadParams>} LogObject<homeMarkNotificationUnreadParams>
 */
export function homeMarkNotificationUnread(params) {
    return { evid: 251, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'homeMarkNotificationRead' event (evid: 252)
 *
 * Event description: user clicks on mark as read
 *
 * @param {homeMarkNotificationReadParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} activity_type - activity type - not sent
 * @property {string} notification_id - notification id
 * @property {string} app_id - app that sent the notification
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<homeMarkNotificationReadParams>} LogObject<homeMarkNotificationReadParams>
 */
export function homeMarkNotificationRead(params) {
    return { evid: 252, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'homeMarkAllUnreadNotifications' event (evid: 253)
 *
 * Event description: user clicks mark all unread
 *
 * @param {homeMarkAllUnreadNotificationsParams} params - The parameters for this event
 * @property {string} channel - Web / browser / mobile / SMS / email
 * @property {string} view_type - view_type
 * @property {string} notification_ids - all notifications that were marked as read in the page ( separated with a comma)
 * @property {string} origin - MSID of the site the user is on, my-sites if on Site List. Later on, also account-settings, and other account-level pages.
 * @property {number} num_of_unread - number of unread messages
 * @property {string} platform - platform
 * @property {string} msid - deprecated
 * @return {LogObject<homeMarkAllUnreadNotificationsParams>} LogObject<homeMarkAllUnreadNotificationsParams>
 */
export function homeMarkAllUnreadNotifications(params) {
    return { evid: 253, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'homeNotificationBadgeShown' event (evid: 254)
 *
 * Event description: a badge with new notifications/ urgent notifications is shown to the user
 *
 * @param {homeNotificationBadgeShownParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {boolean} on_page_load - true if sent on page load
 * @property {string} origin - MSID of the site the user is on, my-sites if on Site List. Later on, also account-settings, and other account-level pages.
 * @property {number} num_of_new - number of new notifications - number in badge
 * @property {string} platform - platform
 * @property {string} msid - deprecated
 * @return {LogObject<homeNotificationBadgeShownParams>} LogObject<homeNotificationBadgeShownParams>
 */
export function homeNotificationBadgeShown(params) {
    return { evid: 254, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'homeAllowBlockBrowserNotificationClick' event (evid: 255)
 *
 * Event description: User clicks on Allow/Block browser notification setting
 *
 * @param {homeAllowBlockBrowserNotificationClickParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} user_reply - allow/block/dismiss
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<homeAllowBlockBrowserNotificationClickParams>} LogObject<homeAllowBlockBrowserNotificationClickParams>
 */
export function homeAllowBlockBrowserNotificationClick(params) {
    return { evid: 255, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'notificationsClickOnAllSitesTab' event (evid: 256)
 *
 * Event description: User clicks navigated between all site / this site tabs
 *
 * @param {notificationsClickOnAllSitesTabParams} params - The parameters for this event
 * @property {string} feed_name - on which tab did he clicked
 * @property {string} tab_name - deprecated
 * @property {string} view_type - view_type
 * @property {string} origin - MSID of the site the user is on, my-sites if on Site List. Later on, also account-settings, and other account-level pages.
 * @property {string} platform - platform
 * @property {string} msid - deprecated
 * @property {string} view - deprecated
 * @return {LogObject<notificationsClickOnAllSitesTabParams>} LogObject<notificationsClickOnAllSitesTabParams>
 */
export function notificationsClickOnAllSitesTab(params) {
    return { evid: 256, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardEnterEditorx' event (evid: 257)
 *
 * Event description: user enters EditorX from different origins (site_list_top, site_list_bottom, top_bar, account_templates)
 *
 * @param {dashboardEnterEditorxParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} origin - the location of the button e.g. my-sites top button
 * @property {string} platform - platform
 * @return {LogObject<dashboardEnterEditorxParams>} LogObject<dashboardEnterEditorxParams>
 */
export function dashboardEnterEditorx(params) {
    return { evid: 257, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardQuickActionsDragNDrop' event (evid: 26)
 *
 * Event description: dashboard > quick actions drag'N'drop.
 *
 * @param {dashboardQuickActionsDragNDropParams} params - The parameters for this event
 * @property {number} duration - ts
 * @property {string} name - name
 * @property {string} view_type - view_type
 * @property {string} direction - direction
 * @property {boolean} isToTopSix - is_to_top_six
 * @property {number} to - to
 * @property {boolean} isFromTopSix - is_from_top_six
 * @property {number} from - from
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<dashboardQuickActionsDragNDropParams>} LogObject<dashboardQuickActionsDragNDropParams>
 */
export function dashboardQuickActionsDragNDrop(params) {
    return { evid: 26, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'triggersServerTpaActivationInitiatedCompleted' event (evid: 260)
 *
 * Event description: successful reply from shoutout hab
 *
 * @param {triggersServerTpaActivationInitiatedCompletedParams} params - The parameters for this event
 * @property {GUID} instanceId - instance_id
 * @property {GUID} visitorId - visitor_id
 * @property {GUID} biToken - msid
 * @property {string} activationRequestId - join with shoutout events (src36)
 * @property {GUID} activityId - unique identifier for activity of rule
 * @property {string} recipeName - name of recipie
 * @property {string} activityType - name of activity sent the event.
 * @property {GUID} providerId - unique identifier for provider of activity
 * @property {string} token - Shout Out page identifier
 * @property {GUID} contactId - unique identifier for contact
 * @property {GUID} ruleId - name of rule
 * @return {LogObject<triggersServerTpaActivationInitiatedCompletedParams>} LogObject<triggersServerTpaActivationInitiatedCompletedParams>
 */
export function triggersServerTpaActivationInitiatedCompleted(params) {
    return { evid: 260, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'triggersServerTpaActivationInitiatedFailed' event (evid: 261)
 *
 * Event description: unsuccessful reply from the hab
 *
 * @param {triggersServerTpaActivationInitiatedFailedParams} params - The parameters for this event
 * @property {GUID} instanceId - instance_id
 * @property {GUID} visitorId - visitor_id
 * @property {GUID} biToken - msid
 * @property {string} activationRequestId - join with shoutout events (src36)
 * @property {GUID} activityId - unique identifier for activity of rule
 * @property {string} recipeName - name of recipie
 * @property {string} activityType - name of activity sent the event.
 * @property {GUID} providerId - unique identifier for provider of activity
 * @property {string} token - Shout Out page identifier
 * @property {GUID} contactId - unique identifier for contact
 * @property {GUID} ruleId - name of rule
 * @return {LogObject<triggersServerTpaActivationInitiatedFailedParams>} LogObject<triggersServerTpaActivationInitiatedFailedParams>
 */
export function triggersServerTpaActivationInitiatedFailed(params) {
    return { evid: 261, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'triggersServerTaskScheduled' event (evid: 262)
 *
 * Event description: Task scheduled
 *
 * @param {triggersServerTaskScheduledParams} params - The parameters for this event
 * @property {GUID} instanceId - instance_id
 * @property {GUID} visitorId - visitor_id
 * @property {GUID} biToken - msid
 * @property {GUID} activityId - unique identifier for activity of rule
 * @property {DateTime} startAt - activation assumed date
 * @property {GUID} contactId - unique identifier for contact
 * @property {GUID} ruleId - name of rule
 * @return {LogObject<triggersServerTaskScheduledParams>} LogObject<triggersServerTaskScheduledParams>
 */
export function triggersServerTaskScheduled(params) {
    return { evid: 262, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'triggersServerTpaActivationCompletedSuccessfully' event (evid: 263)
 *
 * Event description: activate trigger completed
 *
 * @param {triggersServerTpaActivationCompletedSuccessfullyParams} params - The parameters for this event
 * @property {GUID} instanceId - instance_id
 * @property {GUID} visitorId - visitor_id
 * @property {GUID} biToken - msid
 * @property {string} activationRequestId - join with shoutout events (src36)
 * @property {GUID} activityId - unique identifier for activity of rule
 * @property {GUID} ruleId - name of rule
 * @return {LogObject<triggersServerTpaActivationCompletedSuccessfullyParams>} LogObject<triggersServerTpaActivationCompletedSuccessfullyParams>
 */
export function triggersServerTpaActivationCompletedSuccessfully(params) {
    return { evid: 263, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'triggersServerTpaActivationCompleteFailed' event (evid: 264)
 *
 * Event description: trigger wasn't sent
 *
 * @param {triggersServerTpaActivationCompleteFailedParams} params - The parameters for this event
 * @property {GUID} instanceId - instance_id
 * @property {GUID} visitorId - visitor_id
 * @property {GUID} biToken - msid
 * @property {string} errorMsg - error msg
 * @property {string} activationRequestId - join with shoutout events (src36)
 * @property {GUID} activityId - unique identifier for activity of rule
 * @property {string} errorType - error type
 * @property {GUID} ruleId - name of rule
 * @return {LogObject<triggersServerTpaActivationCompleteFailedParams>} LogObject<triggersServerTpaActivationCompleteFailedParams>
 */
export function triggersServerTpaActivationCompleteFailed(params) {
    return { evid: 264, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'triggersServerTriggerScheduleCancelled' event (evid: 266)
 *
 * Event description: cancel a scheduled trigger (delayed in time)
 *
 * @param {triggersServerTriggerScheduleCancelledParams} params - The parameters for this event
 * @property {GUID} instanceId - --
 * @property {GUID} visitorId - visitor_id
 * @property {GUID} biToken - --
 * @property {GUID} activityId - unique identifier for activity of rule
 * @property {GUID} ruleId - name of rule
 * @return {LogObject<triggersServerTriggerScheduleCancelledParams>} LogObject<triggersServerTriggerScheduleCancelledParams>
 */
export function triggersServerTriggerScheduleCancelled(params) {
    return { evid: 266, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'notificationNotificationAutomationCreated' event (evid: 269)
 *
 * Event description: Notification that was created by Automations
 *
 * @param {notificationNotificationAutomationCreatedParams} params - The parameters for this event
 * @property {string} channels - Web / browser / mobile / SMS / email- multiple channels
 * @property {string} channel - deprecated
 * @property {string} recipients_type - all contributors / owner
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<notificationNotificationAutomationCreatedParams>} LogObject<notificationNotificationAutomationCreatedParams>
 */
export function notificationNotificationAutomationCreated(params) {
    return { evid: 269, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardClickOnSideBar' event (evid: 27)
 *
 * Event description: dashboard > click on side bar.
 *
 * @param {dashboardClickOnSideBarParams} params - The parameters for this event
 * @property {string} name - origin
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<dashboardClickOnSideBarParams>} LogObject<dashboardClickOnSideBarParams>
 */
export function dashboardClickOnSideBar(params) {
    return { evid: 27, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'invoicesClickOnSendInvoiceButton' event (evid: 270)
 *
 * Event description: Click on the 'send invoice' button (before the actual sending), the event is triggered also when the invoice form is not valid, please use is_valid field
 *
 * @param {invoicesClickOnSendInvoiceButtonParams} params - The parameters for this event
 * @property {GUID} instanceId - instance_id
 * @property {number} totalAmountLong - Total amount of the invoice, INTEGER multiplied by 100,000
 * @property {boolean} createOrder - create order?
 * @property {boolean} isValid - is the invoice form valid
 * @property {GUID} uuid - uuid
 * @property {string} paymentType - 'one time','recurring'
 * @property {string} view_type - view_type
 * @property {GUID} invoiceId - invoice_guid
 * @property {string} origin - create invoice, edit invoice
 * @property {string} status - Creation form/Draft/Sent/Paid
 * @property {string} currency - currency
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<invoicesClickOnSendInvoiceButtonParams>} LogObject<invoicesClickOnSendInvoiceButtonParams>
 */
export function invoicesClickOnSendInvoiceButton(params) {
    return { evid: 270, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'notificationShowNotification' event (evid: 271)
 *
 * Event description: user opens the dialog and X notifications are being displayed , after scrolling another event will be sent with a new page number
 *
 * @param {notificationShowNotificationParams} params - The parameters for this event
 * @property {boolean} is_high_priority - true / false
 * @property {string} feed_name - All sites/This site /float
 * @property {string} channel - Web / browser / mobile / SMS / email
 * @property {string} source - where the display was triggered from: site_level / account_level / home_site_level
 * @property {GUID} correlation_id - correlation_id
 * @property {string} view_type - view_type
 * @property {string} notification_ids - all notifications that were shown in the page ( separated with a comma)
 * @property {string} origin - MSID of the site the user is on, my-sites if on Site List. Later on, also account-settings, and other account-level pages.
 * @property {string} mode - online / cashed (in case of no internet)
 * @property {string} correlationId - correlation_id
 * @property {string} contact_id - contact_id guid
 * @property {string} platform - platform
 * @property {string} notificationid - deprecated
 * @property {GUID} msid - msid
 * @property {number} page_number - page number - each page is limited to 30 notifications
 * @return {LogObject<notificationShowNotificationParams>} LogObject<notificationShowNotificationParams>
 */
export function notificationShowNotification(params) {
    return { evid: 271, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'notificationClickOnNotification' event (evid: 272)
 *
 * Event description: user clicks on a notification and opens app (test)
 *
 * @param {notificationClickOnNotificationParams} params - The parameters for this event
 * @property {boolean} is_high_priority - true / false
 * @property {string} feed_name - Sub category of the channel (All Sites/This Site /Float/Oneapp notification center/ mobile os)
 * @property {string} clickOrigin - deprecated
 * @property {string} channel - Web / browser / mobile / SMS / email
 * @property {GUID} correlation_id - correlation_id
 * @property {string} click_type - mark read/mark unread/click/delete
 * @property {string} view_type - view_type
 * @property {string} notification_id - deprecated
 * @property {string} origin - (Msid/my-site) MSID of the site the user is on, my-sites if on Site List. Later on, also account-settings, and other account-level pages.
 * @property {string} correlationId - correlation_id
 * @property {string} contact_id - contact_id
 * @property {string} platform - platform
 * @property {string} notificationid - notificationid
 * @property {GUID} msid - msid of the notification
 * @property {string} deep_link - deep_link
 * @property {string} grouped_notifications - list of notification ids contain in this notification. if the notification is not grouped this field will be null
 * @return {LogObject<notificationClickOnNotificationParams>} LogObject<notificationClickOnNotificationParams>
 */
export function notificationClickOnNotification(params) {
    return { evid: 272, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'notificationsEnableDesktopNotificationsFirstTime' event (evid: 273)
 *
 * Event description: User turned on his desktop notification for the first time for all his sites (actually browser turned on)
 *
 * @param {notificationsEnableDesktopNotificationsFirstTimeParams} params - The parameters for this event
 * @property {string} feed_name - All Sites/This Site / settings
 * @property {string} view_type - view_type
 * @property {string} origin - (Msid/my-site) MSID of the site the user is on, my-sites if on Site List. Later on, also account-settings, and other account-level pages.
 * @property {string} platform - platform
 * @property {string} msid - deprecated
 * @return {LogObject<notificationsEnableDesktopNotificationsFirstTimeParams>} LogObject<notificationsEnableDesktopNotificationsFirstTimeParams>
 */
export function notificationsEnableDesktopNotificationsFirstTime(params) {
    return { evid: 273, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'notificationsPushNotificationToggleIsDisplayed' event (evid: 274)
 *
 * Event description: user clicks the "Allow/ Block " and toggle is displayed
 *
 * @param {notificationsPushNotificationToggleIsDisplayedParams} params - The parameters for this event
 * @property {string} feed_name - All Sites/This Site/ Settings
 * @property {string} view_type - view_type
 * @property {string} origin - (Msid/my-site) MSID of the site the user is on, my-sites if on Site List. Later on, also account-settings, and other account-level pages.
 * @property {string} permission_type - permission
 * @property {string} platform - platform
 * @property {string} msid - deprecated
 * @return {LogObject<notificationsPushNotificationToggleIsDisplayedParams>} LogObject<notificationsPushNotificationToggleIsDisplayedParams>
 */
export function notificationsPushNotificationToggleIsDisplayed(params) {
    return { evid: 274, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'notificationsEnableToTurnOnOffAllSiteNotificationsExperts' event (evid: 275)
 *
 * Event description: expert can enable  / disable all notifications for a specific site
 *
 * @param {notificationsEnableToTurnOnOffAllSiteNotificationsExpertsParams} params - The parameters for this event
 * @property {boolean} toggle - 1- on , 0- off
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<notificationsEnableToTurnOnOffAllSiteNotificationsExpertsParams>} LogObject<notificationsEnableToTurnOnOffAllSiteNotificationsExpertsParams>
 */
export function notificationsEnableToTurnOnOffAllSiteNotificationsExperts(params) {
    return { evid: 275, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'notificationsEnableToTurnOnOffNotificationsPerChannel' event (evid: 276)
 *
 * Event description: User turned on his desktop notification for the first time for all his sites (actually browser turned on)
 *
 * @param {notificationsEnableToTurnOnOffNotificationsPerChannelParams} params - The parameters for this event
 * @property {string} channel - desktop/email/ sms/ mobile
 * @property {boolean} toggle - 1 - on , 0- off
 * @property {string} view_type - view_type
 * @property {string} section - desktop/general/ wix chat/bookings/...
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {string} group - desktop/ contact form/  subscriber/  becomes a member/requests to be a member
 * @return {LogObject<notificationsEnableToTurnOnOffNotificationsPerChannelParams>} LogObject<notificationsEnableToTurnOnOffNotificationsPerChannelParams>
 */
export function notificationsEnableToTurnOnOffNotificationsPerChannel(params) {
    return { evid: 276, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'notificationsShowMobileDialog' event (evid: 277)
 *
 * Event description: allow to enable desktop notifications after clicking on "turn on"
 *
 * @param {notificationsShowMobileDialogParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {boolean} is_installed_oneapp - true , false
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<notificationsShowMobileDialogParams>} LogObject<notificationsShowMobileDialogParams>
 */
export function notificationsShowMobileDialog(params) {
    return { evid: 277, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'notificationsDisplayPopupForUserBlockedDesktopNotifications' event (evid: 278)
 *
 * Event description: When the user clicks the link, show a popup window telling the user they need to unblock notifications at their browser level.
 *
 * @param {notificationsDisplayPopupForUserBlockedDesktopNotificationsParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<notificationsDisplayPopupForUserBlockedDesktopNotificationsParams>} LogObject<notificationsDisplayPopupForUserBlockedDesktopNotificationsParams>
 */
export function notificationsDisplayPopupForUserBlockedDesktopNotifications(params) {
    return { evid: 278, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'notificationCloseAHighPriorityNotifications' event (evid: 279)
 *
 * Event description: Close a High priority Notifications- not in the dialog
 *
 * @param {notificationCloseAHighPriorityNotificationsParams} params - The parameters for this event
 * @property {string} feed_name - All Sites/This Site /Float
 * @property {string} channel - Web / browser / mobile / SMS / email
 * @property {string} view_type - view_type
 * @property {string} notification_ids - deprecated
 * @property {string} origin - MSID of the site the user is on, my-sites if on Site List. Later on, also account-settings, and other account-level pages.
 * @property {string} platform - platform
 * @property {string} notificationid - notificationid
 * @property {GUID} msid - msid of the notification
 * @return {LogObject<notificationCloseAHighPriorityNotificationsParams>} LogObject<notificationCloseAHighPriorityNotificationsParams>
 */
export function notificationCloseAHighPriorityNotifications(params) {
    return { evid: 279, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardShowMorePopularShortcutsClick' event (evid: 28)
 *
 * Event description: each time user clicks the 'show more' link
 *
 * @param {dashboardShowMorePopularShortcutsClickParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<dashboardShowMorePopularShortcutsClickParams>} LogObject<dashboardShowMorePopularShortcutsClickParams>
 */
export function dashboardShowMorePopularShortcutsClick(params) {
    return { evid: 28, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'notificationsDisplayDesktopNotificationsBanner' event (evid: 280)
 *
 * Event description: display desktop notifications banner
 *
 * @param {notificationsDisplayDesktopNotificationsBannerParams} params - The parameters for this event
 * @property {string} feed_name - All Sites/This Site /Float
 * @property {string} view_type - view_type
 * @property {string} origin - (Msid/my-site) MSID of the site the user is on, my-sites if on Site List. Later on, also account-settings, and other account-level pages.
 * @property {string} platform - platform
 * @return {LogObject<notificationsDisplayDesktopNotificationsBannerParams>} LogObject<notificationsDisplayDesktopNotificationsBannerParams>
 */
export function notificationsDisplayDesktopNotificationsBanner(params) {
    return { evid: 280, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'notificationsClickOnDesktopNotificationsBanner' event (evid: 281)
 *
 * Event description: display desktop notifications banner
 *
 * @param {notificationsClickOnDesktopNotificationsBannerParams} params - The parameters for this event
 * @property {string} feed_name - All Sites/This Site /Float
 * @property {string} view_type - view_type
 * @property {string} origin - (Msid/my-site) MSID of the site the user is on, my-sites if on Site List. Later on, also account-settings, and other account-level pages.
 * @property {string} platform - platform
 * @return {LogObject<notificationsClickOnDesktopNotificationsBannerParams>} LogObject<notificationsClickOnDesktopNotificationsBannerParams>
 */
export function notificationsClickOnDesktopNotificationsBanner(params) {
    return { evid: 281, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'notificationsResolveAlertNotification' event (evid: 282)
 *
 * Event description: display desktop notifications banner
 *
 * @param {notificationsResolveAlertNotificationParams} params - The parameters for this event
 * @property {string} channel - deprecated
 * @property {string} resolve_type - resolve/ revoke
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} notificationid - notificationid
 * @property {string} msid - deprecated
 * @property {string} template_id - template_id
 * @return {LogObject<notificationsResolveAlertNotificationParams>} LogObject<notificationsResolveAlertNotificationParams>
 */
export function notificationsResolveAlertNotification(params) {
    return { evid: 282, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'invoicesUserSendInvoice' event (evid: 283)
 *
 * Event description: user send invoice
 *
 * @param {invoicesUserSendInvoiceParams} params - The parameters for this event
 * @property {GUID} instanceId - instance_id
 * @property {number} totalAmountLong - Total amount of the invoice, INTEGER multiplied by 100,000
 * @property {boolean} createOrder - create order?
 * @property {GUID} uuid - uuid
 * @property {string} depositType - The optional type of the invoice deposit. Possible values: "FLAT"/"PERCENTAGE".
 * @property {string} paymentType - 'one time','recurring'
 * @property {string} view_type - view_type
 * @property {GUID} invoiceId - invoice_guid
 * @property {string} origin - create invoice, edit invoice
 * @property {string} status - Creation form/Draft/Sent/Paid
 * @property {string} invoiceTitle - invoiceTitle
 * @property {string} invoiceSource - by app_def_id
 * @property {string} currency - currency
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @property {number} discountPercentage - discountPercentage
 * @return {LogObject<invoicesUserSendInvoiceParams>} LogObject<invoicesUserSendInvoiceParams>
 */
export function invoicesUserSendInvoice(params) {
    return { evid: 283, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'bizManagerSetupWidgetOmniPhaseCompletedInDashboard' event (evid: 284)
 *
 * Event description: When a user doesn't see an open phase in the dashboard (since they completed all tasks in the OMNI widget or the phase is collapsed - since they skipped all items in the phase), sent each time the user enters the dashboard - home
 *
 * @param {bizManagerSetupWidgetOmniPhaseCompletedInDashboardParams} params - The parameters for this event
 * @property {string} skipped_items - a list of asset campaign IDs that were skipped in the phase
 * @property {string} resolved_items - a list of asset campaign IDs that were resolved in the phase
 * @property {string} asset_campaign_guid - omni setup phase id, sent the event for each "done" phase
 * @property {number} number_of_resolved_items - deprecate
 * @property {string} view_type - view_type
 * @property {number} number_of_skipped_items - deprecate
 * @property {string} platform - platform
 * @property {string} hosting - ADI/Editor/MA
 * @property {GUID} msid - msid
 * @return {LogObject<bizManagerSetupWidgetOmniPhaseCompletedInDashboardParams>} LogObject<bizManagerSetupWidgetOmniPhaseCompletedInDashboardParams>
 */
export function bizManagerSetupWidgetOmniPhaseCompletedInDashboard(params) {
    return { evid: 284, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'automationsDaComponentShowPage' event (evid: 285)
 *
 * Event description: Quotes - Invoice Table  - Download PDF
 *
 * @param {automationsDaComponentShowPageParams} params - The parameters for this event
 * @property {string} paymentType - 'Recurring','One Time'
 * @property {string} view_type - view_type
 * @property {string} origin - customer for UoU, my invoices for users
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {GUID} invoice_id - invoice guid
 * @return {LogObject<automationsDaComponentShowPageParams>} LogObject<automationsDaComponentShowPageParams>
 */
export function automationsDaComponentShowPage(params) {
    return { evid: 285, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'automationsDaComponentManageAutomations' event (evid: 286)
 *
 * Event description: Quotes - partial payment success/failure page
 *
 * @param {automationsDaComponentManageAutomationsParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {boolean} status - success,failure
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {GUID} invoice_id - invoice guid
 * @return {LogObject<automationsDaComponentManageAutomationsParams>} LogObject<automationsDaComponentManageAutomationsParams>
 */
export function automationsDaComponentManageAutomations(params) {
    return { evid: 286, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'automationsDaComponentCreateYourOwn' event (evid: 287)
 *
 * Event description: Quotes - Invoice paid - Thank you page shown
 *
 * @param {automationsDaComponentCreateYourOwnParams} params - The parameters for this event
 * @property {string} paymentType - 'recurring','one time'
 * @property {string} view_type - view_type
 * @property {string} invoiceSource - by app_def_id
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {GUID} invoice_id - invoice guid
 * @return {LogObject<automationsDaComponentCreateYourOwnParams>} LogObject<automationsDaComponentCreateYourOwnParams>
 */
export function automationsDaComponentCreateYourOwn(params) {
    return { evid: 287, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'automationsDaComponentRecommendationClick' event (evid: 288)
 *
 * Event description: Quotes - Invoice Table - Manage Plan
 *
 * @param {automationsDaComponentRecommendationClickParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {GUID} invoice_id - invoice guid
 * @return {LogObject<automationsDaComponentRecommendationClickParams>} LogObject<automationsDaComponentRecommendationClickParams>
 */
export function automationsDaComponentRecommendationClick(params) {
    return { evid: 288, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'automationsDaComponentExploreMoreClick' event (evid: 289)
 *
 * Event description: General - Exposure Analytics from Dealer
 *
 * @param {automationsDaComponentExploreMoreClickParams} params - The parameters for this event
 * @property {string} exposure_name - exposure_name
 * @property {string} view_type - view_type
 * @property {number} value_from_was - The value we get from the WAS
 * @property {number} value_from_dealer - The value we get from the Dealer
 * @property {string} platform - platform
 * @property {string} hosting - MA/editor
 * @property {GUID} msid - metasite id
 * @return {LogObject<automationsDaComponentExploreMoreClickParams>} LogObject<automationsDaComponentExploreMoreClickParams>
 */
export function automationsDaComponentExploreMoreClick(params) {
    return { evid: 289, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardLessPopularShortcutsClick' event (evid: 29)
 *
 * Event description: each time user clicks the 'less' link
 *
 * @param {dashboardLessPopularShortcutsClickParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<dashboardLessPopularShortcutsClickParams>} LogObject<dashboardLessPopularShortcutsClickParams>
 */
export function dashboardLessPopularShortcutsClick(params) {
    return { evid: 29, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'clickOnSearchInHelpCenterInSearchSrc5Evid292' event (evid: 292)
 *
 * Event description: When a user clicks on 'Search in Help Center' in Search
 *
 * @param {clickOnSearchInHelpCenterInSearchSrc5Evid292Params} params - The parameters for this event
 * @property {string} query - query
 * @property {string} view_type - view_type
 * @property {string} sub_view - page in app
 * @property {string} origin - BUSINESS_MANAGER / settings lobby
 * @property {string} view - requested view
 * @property {string} hosting_platform_context_id - context id: when the context is site - msid, when the context is app_id (like in devCenter f.e) - appDefId. In account manager is null
 * @return {LogObject<clickOnSearchInHelpCenterInSearchSrc5Evid292Params>} LogObject<clickOnSearchInHelpCenterInSearchSrc5Evid292Params>
 */
export function clickOnSearchInHelpCenterInSearchSrc5Evid292(params) {
    return { evid: 292, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'errorPageClick295' event (evid: 295)
 *
 * Event description: When a user clicks on the CTA in the error page
 *
 * @param {errorPageClick295Params} params - The parameters for this event
 * @property {string} component_name - component_name
 * @property {string} hosting_platform - hosting_platform
 * @property {string} error_location - specifies the location in page: header/sidebar/app/sidepanel etc. includes error type. different for refresh/load types of actions
 * @property {string} view_type - view_type
 * @property {string} host_id - host_id
 * @property {string} component_app_id - component_app_id
 * @property {string} platform - platform
 * @property {string} component_id - component_id
 * @property {string} hosting_platform_context_id - hosting_platform_context_id
 * @property {string} hosting - --
 * @property {string} component_type - component_type
 * @property {GUID} msid - msid
 * @property {string} error_name - null when it's a system error, permissions when the error is permission related (user has no permission for the page)
 * @return {LogObject<errorPageClick295Params>} LogObject<errorPageClick295Params>
 */
export function errorPageClick295(params) {
    return { evid: 295, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'accountDialogClickItem' event (evid: 296)
 *
 * Event description: When a user/anonymous clicks on a dialog item in the account dialog
 *
 * @param {accountDialogClickItemParams} params - The parameters for this event
 * @property {string} item_id - the page name the item leads to (e.g. account-settings)
 * @property {number} item_index_ex_separators - item's index in the entire dialog excluding separators (only for main display, index starts from 1, logout (or any side location)=0)
 * @property {string} page_view - my-sites /dashboard / account settings
 * @property {string} view_type - view_type
 * @property {string} items_displayed - items list including section separators as 'delimiter'
 * @property {string} item_name - the display name in the dialog
 * @property {string} origin - main-menu/sub-menu (e.g. languages)
 * @property {string} platform - platform
 * @property {GUID} msid - only for dashboard dialog
 * @property {number} item_index - item's index in the entire dialog (only for main display, index starts from 1, logout (or any side location)=0)
 * @return {LogObject<accountDialogClickItemParams>} LogObject<accountDialogClickItemParams>
 */
export function accountDialogClickItem(params) {
    return { evid: 296, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'errorPage297' event (evid: 297)
 *
 * Event description: an error page is displayed in one of Giza's hosting platforms (Business Manager/Account Manager/Dev Center/etc.)  in case of BizMgr it's not reported from Giza yet - to get all errors from BizMgr you should filter 'host' field is not null.
 *
 * @param {errorPage297Params} params - The parameters for this event
 * @property {string} component_name - component_name
 * @property {string} hosting_platform - hosting_platform
 * @property {string} error_location - specifies the location in page: header/sidebar/app/sidepanel etc. includes error type
 * @property {string} view_type - view_type
 * @property {string} error_type - error_type
 * @property {string} host_id - host_id
 * @property {string} component_app_id - component_app_id
 * @property {string} app_id - app_id
 * @property {string} platform - platform
 * @property {string} component_id - component_id
 * @property {string} hosting_platform_context_id - hosting_platform_context_id
 * @property {string} hosting - --
 * @property {string} component_type - component_type
 * @property {GUID} msid - msid
 * @property {string} page_url - page_url
 * @property {string} error_name - null when it's a system error, permission when the error is permission related (user has no permission for the page)
 * @return {LogObject<errorPage297Params>} LogObject<errorPage297Params>
 */
export function errorPage297(params) {
    return { evid: 297, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardTourUserSeesTourBanner' event (evid: 30)
 *
 * Event description: dashboard tour > user sees tour banner.
 *
 * @param {dashboardTourUserSeesTourBannerParams} params - The parameters for this event
 * @property {string} experiment_name - experiment_id
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<dashboardTourUserSeesTourBannerParams>} LogObject<dashboardTourUserSeesTourBannerParams>
 */
export function dashboardTourUserSeesTourBanner(params) {
    return { evid: 30, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardStartLoading' event (evid: 300)
 *
 * Event description: dashboard > start loading.
 *
 * @param {dashboardStartLoadingParams} params - The parameters for this event
 * @property {string} prev_module_id - deprecated
 * @property {string} __cookies_prefix__wixsession - authentication token. if the session exists, then the user is logged in.
 * @property {string} referral_additional_info - referral_additional_info
 * @property {string} referral_info - specific button triggered the the view loading
 * @property {string} view_type - view_type
 * @property {boolean} is_account_mgr - true / false
 * @property {string} sub_view - page in app/module
 * @property {number} screen_width - screen_width
 * @property {boolean} initial_load - deprecated
 * @property {string} app_ids - all application ids installed on Biz Mgr
 * @property {number} window_width - window_width
 * @property {string} origin - specific button triggered the the view loading (== referral info from editor)
 * @property {boolean} is_biz_mgr - true if page is loaded when Biz mgr is active
 * @property {number} screen_height - screen_height
 * @property {string} prev_view - origin view / module / app
 * @property {string} prevPageComponentId - the previous page component id, will be reliable only when page has an entry point from sidebar.
 * @property {string} app_id - application id
 * @property {string} prev_sub_view - previous page in app/module
 * @property {number} window_height - window_height
 * @property {string} platform - platform
 * @property {string} origin_app_id - origin_app_id (what app opened the bizmgr)
 * @property {string} hosting - MA/editor
 * @property {GUID} msid - msid
 * @property {string} pageComponentId - the page component id, will be reliable only when page has an entry point from sidebar. was added on 22/08/22
 * @property {string} module_id - deprecated
 * @property {string} view - requested view/ module/ app
 * @return {LogObject<dashboardStartLoadingParams>} LogObject<dashboardStartLoadingParams>
 */
export function dashboardStartLoading(params) {
    return { evid: 300, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardEntryFeeding' event (evid: 3000)
 *
 * Event description: Dashboard Entry Feeding.
 *
 * @param {dashboardEntryFeedingParams} params - The parameters for this event
 * @return {LogObject<dashboardEntryFeedingParams>} LogObject<dashboardEntryFeedingParams>
 */
export function dashboardEntryFeeding(params) {
    return { evid: 3000, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'homeCloseDialog' event (evid: 301)
 *
 * Event description: closing a dialog from home my apps, my sites, account menu
 *
 * @param {homeCloseDialogParams} params - The parameters for this event
 * @property {string} wixsession - deprecated
 * @property {string} page_view - Dashboard / my sites
 * @property {string} referral_info - -
 * @property {string} view_type - view_type
 * @property {string} origin - place of clicking my sites ( Header, top left bar). Relevant only for site list
 * @property {string} prev_view - -
 * @property {GUID} app_id - -
 * @property {string} platform - platform
 * @property {GUID} msid - -
 * @property {string} action - the action made to close the dialog: click/hover (until 05/23 dialog close only on click)
 * @property {string} view - name of dialog: my-apps, site-list, account. 'account'- regular full menu
 * ‘partner-account’- full menu with entry point to wix studio
 *  ‘WixStudio-account-menu’- lean menu
 * @return {LogObject<homeCloseDialogParams>} LogObject<homeCloseDialogParams>
 */
export function homeCloseDialog(params) {
    return { evid: 301, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardFinishLoading' event (evid: 302)
 *
 * Event description: dashboard > finish loading.
 *
 * @param {dashboardFinishLoadingParams} params - The parameters for this event
 * @property {string} __cookies_prefix__wixsession - authentication token. if the session exists, then the user is logged in.
 * @property {string} view_mode - grid/list-view
 * @property {string} referral_additional_info - referral_additional_info
 * @property {number} loading_time_from_start - loading time from start loading Bizmgr (from 561) - deprecated
 * @property {string} referral_info - specific button triggered the the view loading
 * @property {string} view_type - view_type
 * @property {boolean} is_account_mgr - true/ false
 * @property {string} sub_view - --
 * @property {number} screen_width - screen width
 * @property {boolean} initial_load - intial load
 * @property {number} loading_time_from_module - Loading time from module start loading (from 564)
 * @property {string} app_ids - all applications installed on Biz Mgr
 * @property {number} window_width - --
 * @property {number} loading_time_from_first_interaction - loading_time_from_first_interaction (309)
 * @property {string} origin - origin
 * @property {number} loading_time_from_performance_now - loading_time_from_performance_now  when server start to load. the real beginning
 * @property {boolean} is_biz_mgr - true if page is loaded when Biz mgr is active
 * @property {number} screen_height - screen height
 * @property {string} prev_view - origin view
 * @property {string} prevPageComponentId - the previous page component id, will be reliable only when page has an entry point from sidebar.
 * @property {string} app_id - application id
 * @property {string} prev_sub_view - previous sub view
 * @property {number} window_height - --
 * @property {boolean} is_pro - not in use
 * @property {string} platform - platform
 * @property {string} origin_app_id - origin_app_id (what app opened the bizmgr)
 * @property {string} hosting - dashboard/editor/onboarding
 * @property {GUID} msid - msid
 * @property {string} pageComponentId - the page component id, will be reliable only when page has an entry point from sidebar. was added on 22/08/22
 * @property {string} module_id - *not in use*
 * @property {string} view - requested view
 * @property {number} loading_time - loading time of page (from 300 )
 * @return {LogObject<dashboardFinishLoadingParams>} LogObject<dashboardFinishLoadingParams>
 */
export function dashboardFinishLoading(params) {
    return { evid: 302, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'homeOpenDialogClick' event (evid: 303)
 *
 * Event description: opening a dialog from home: my apps, my sites, account menu,notifications,priority support
 *
 * @param {homeOpenDialogClickParams} params - The parameters for this event
 * @property {string} wixsession - authentication token. if the session exists, then the user is logged in.
 * @property {string} page_view - my-sites /dashboard / account settings
 * @property {string} referral_info - -
 * @property {string} view_type - view_type
 * @property {string} origin - place of clicking my sites ( Header, top left bar). Relevant only for site list
 * @property {string} prev_view - -
 * @property {GUID} app_id - -
 * @property {string} platform - platform
 * @property {GUID} msid - -
 * @property {string} action - the action made to open the dialog: click/hover (was sent between 05/23 to 08/23)
 * @property {string} view - my-apps, site-list, account,notifications,priority support
 * @return {LogObject<homeOpenDialogClickParams>} LogObject<homeOpenDialogClickParams>
 */
export function homeOpenDialogClick(params) {
    return { evid: 303, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dialogFirstLoad' event (evid: 304)
 *
 * Event description: opening a dialog from home (sent only in the first click within the same session) {my apps, my sites}
 *
 * @param {dialogFirstLoadParams} params - The parameters for this event
 * @property {string} wixsession - authentication token. if the session exists, then the user is logged in.
 * @property {string} referral_info - -
 * @property {string} view_type - view_type
 * @property {string} origin - place of clicking my sites ( Header, top left bar). Relevant only for site list
 * @property {string} prev_view - -
 * @property {GUID} app_id - -
 * @property {string} platform - platform
 * @property {GUID} msid - -
 * @property {string} view - my-apps, site-list
 * @property {number} loading_time - loading time of page
 * @return {LogObject<dialogFirstLoadParams>} LogObject<dialogFirstLoadParams>
 */
export function dialogFirstLoad(params) {
    return { evid: 304, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'homeMultipleSitesCheck' event (evid: 305)
 *
 * Event description: checked if a user has one site or more (including sites that he is a contributor.)
 *
 * @param {homeMultipleSitesCheckParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} origin - dashboard / my-sites
 * @property {number} num_displayed_sites - num sites that are displayed on page
 * @property {boolean} has_two_sites - deprecated
 * @property {string} prev_view - search/dashboard/wix.com
 * @property {string} platform - platform
 * @property {GUID} msid - deorecated
 * @property {number} sites_count - total number of sites
 * @return {LogObject<homeMultipleSitesCheckParams>} LogObject<homeMultipleSitesCheckParams>
 */
export function homeMultipleSitesCheck(params) {
    return { evid: 305, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'homeBizMgrEligible' event (evid: 306)
 *
 * Event description: checked if a user is eligible for biz mgr, phase=4 is for main funnel sites
 *
 * @param {homeBizMgrEligibleParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {number} phase_number - phase number
 * @property {string} platform - platform
 * @property {GUID} msid - metasite id
 * @property {boolean} is_eligible - deprecated
 * @return {LogObject<homeBizMgrEligibleParams>} LogObject<homeBizMgrEligibleParams>
 */
export function homeBizMgrEligible(params) {
    return { evid: 306, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'homeClickOnCreateAnythingItem' event (evid: 307)
 *
 * Event description: click on create anything item
 *
 * @param {homeClickOnCreateAnythingItemParams} params - The parameters for this event
 * @property {string} name - item name
 * @property {string} page_view - from where the users opened the dialog
 * @property {string} view_type - view_type
 * @property {string} add_app_id - add_app_id
 * @property {GUID} app_id - deprecated
 * @property {string} platform - platform
 * @property {GUID} msid - -
 * @property {string} view - dialog name
 * @return {LogObject<homeClickOnCreateAnythingItemParams>} LogObject<homeClickOnCreateAnythingItemParams>
 */
export function homeClickOnCreateAnythingItem(params) {
    return { evid: 307, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'myAccountClickOnExpertDashboard' event (evid: 308)
 *
 * Event description: User clicks on Expert Dashboard
 *
 * @param {myAccountClickOnExpertDashboardParams} params - The parameters for this event
 * @property {string} page_view - my-sites / dashboard / account settings
 * @property {string} view_type - view_type
 * @property {string} origin - header
 * @property {string} platform - platform
 * @return {LogObject<myAccountClickOnExpertDashboardParams>} LogObject<myAccountClickOnExpertDashboardParams>
 */
export function myAccountClickOnExpertDashboard(params) {
    return { evid: 308, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardDashboardHomeIsFullyLoaded' event (evid: 309)
 *
 * Event description: dashboard (home) is fully loaded
 *
 * @param {dashboardDashboardHomeIsFullyLoadedParams} params - The parameters for this event
 * @property {number} loading_time_from_start - loading time from start loading Bizmgr (from 561)
 * @property {string} referral_info - specific button triggered the the view loading
 * @property {string} view_type - view_type
 * @property {string} sub_view - page in app
 * @property {number} screen_width - screen_width
 * @property {number} loading_time_from_module - Loading time from module start loading (from 564)
 * @property {number} window_width - window_width
 * @property {number} loading_time_from_first_interaction - deprecated
 * @property {number} loading_time_from_performance_now - loading_time_from_performance_now  when server start to load. the real beginning
 * @property {number} screen_height - screen_height
 * @property {string} prev_view - origin view
 * @property {string} prev_sub_view - prev page in app
 * @property {number} window_height - window_height
 * @property {string} platform - platform
 * @property {string} hosting - MA/editor
 * @property {GUID} msid - msid
 * @property {string} view - requested view
 * @property {number} loading_time - loading time of page (from 300 )
 * @return {LogObject<dashboardDashboardHomeIsFullyLoadedParams>} LogObject<dashboardDashboardHomeIsFullyLoadedParams>
 */
export function dashboardDashboardHomeIsFullyLoaded(params) {
    return { evid: 309, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardTourCloseTour' event (evid: 31)
 *
 * Event description: dashboard tour > close tour.
 *
 * @param {dashboardTourCloseTourParams} params - The parameters for this event
 * @property {string} experiment_name - experiment_id
 * @property {string} stage_process - phase_name
 * @property {string} view_type - view_type
 * @property {number} stage_number - phase_number
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<dashboardTourCloseTourParams>} LogObject<dashboardTourCloseTourParams>
 */
export function dashboardTourCloseTour(params) {
    return { evid: 31, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardSiteSettingsPageView' event (evid: 310)
 *
 * Event description: site settings page view
 *
 * @param {dashboardSiteSettingsPageViewParams} params - The parameters for this event
 * @property {string} available_sections - json of sections and sub-items that were loaded to settings. For example:  { ‘Site-details’: ‘connect-domain,compare-plans,get a business email’, ’General’: ‘website settings, business info, language and region’, ‘Ecommerce’: ‘accept payments, store shipping...’ ‘Bookings’:... ‘Communication’:... ... }
 * @property {string} name - name of tab
 * @property {string} focus_section - section name of the automatic scrolling if null then the page wasn't automated scrolled
 * @property {string} view_type - view_type
 * @property {string} unseen_sections - list of sections that loaded in settings lobby but the user is not seeing in the page loading separated by comma
 * @property {string} seen_sections - list of sections the user sees above the fold
 * @property {string} origin - name of previous tab
 * @property {string} alertStatus - If the red badge is shown in the sidebar then "true", if not "false"
 * @property {string} place - deprecated
 * @property {string} platform - platform
 * @property {string} hosting - from where user arrived to sitesettings (Editor/MA/...)
 * @property {GUID} msid - msid
 * @property {string} alert_sections - json of sections and sub-items that were loaded to settings with the red badge. For example: { ‘Site-details’: ‘connect-domain,compare-plans,get a business email’, ’General’: ‘website settings, business info, language and region’, ‘Ecommerce’: ‘accept payments, store shipping...’ ‘Bookings’:... ‘Communication’:... ... }
 * @property {string} subscriptions - json of sections and sub-items that were loaded to settings in the premium bar
 * @return {LogObject<dashboardSiteSettingsPageViewParams>} LogObject<dashboardSiteSettingsPageViewParams>
 */
export function dashboardSiteSettingsPageView(params) {
    return { evid: 310, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardSiteSettingsExperienceDisplayed' event (evid: 311)
 *
 * Event description: what is the experience of the user when he sees the page
 *
 * @param {dashboardSiteSettingsExperienceDisplayedParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} experience - user's experience
 * @property {string} origin - name of previous tab
 * @property {string} platform - platform
 * @property {string} hosting - from where user arrived to sitesettings (Editor/MA/...)
 * @property {GUID} msid - msid
 * @return {LogObject<dashboardSiteSettingsExperienceDisplayedParams>} LogObject<dashboardSiteSettingsExperienceDisplayedParams>
 */
export function dashboardSiteSettingsExperienceDisplayed(params) {
    return { evid: 311, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardSiteSettingsChangeValue' event (evid: 312)
 *
 * Event description: user changed a value in the site settings
 *
 * @param {dashboardSiteSettingsChangeValueParams} params - The parameters for this event
 * @property {string} name - name of the field that was changed
 * @property {string} create_method - save(pop-up),create new
 * @property {string} view_type - view_type
 * @property {string} experience - user's experience
 * @property {string} origin - name of current tab
 * @property {string} platform - platform
 * @property {string} hosting - from where user arrived to sitesettings (Editor/MA/...)
 * @property {GUID} msid - msid
 * @property {string} value - field's value
 * @return {LogObject<dashboardSiteSettingsChangeValueParams>} LogObject<dashboardSiteSettingsChangeValueParams>
 */
export function dashboardSiteSettingsChangeValue(params) {
    return { evid: 312, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardSiteSettingsChangeValueSuccess' event (evid: 313)
 *
 * Event description: user changed a value in the site settings successfully
 *
 * @param {dashboardSiteSettingsChangeValueSuccessParams} params - The parameters for this event
 * @property {string} name - name of the field that was changed
 * @property {string} create_method - save(pop-up),create new
 * @property {string} view_type - view_type
 * @property {string} experience - user's experience
 * @property {string} origin - name of current tab
 * @property {string} platform - platform
 * @property {string} hosting - from where user arrived to sitesettings (Editor/MA/...)
 * @property {GUID} msid - msid
 * @property {string} value - field's value
 * @return {LogObject<dashboardSiteSettingsChangeValueSuccessParams>} LogObject<dashboardSiteSettingsChangeValueSuccessParams>
 */
export function dashboardSiteSettingsChangeValueSuccess(params) {
    return { evid: 313, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardSiteSettingsChangeValueFailure' event (evid: 314)
 *
 * Event description: user changed a value in the dashboard > site settings > failed
 *
 * @param {dashboardSiteSettingsChangeValueFailureParams} params - The parameters for this event
 * @property {string} name - name of the field that was changed
 * @property {string} view_type - view_type
 * @property {string} experience - user's experience
 * @property {string} origin - name of current tab
 * @property {string} platform - platform
 * @property {string} hosting - from where user arrived to sitesettings (Editor/MA/...)
 * @property {GUID} msid - msid
 * @property {string} value - field's value
 * @return {LogObject<dashboardSiteSettingsChangeValueFailureParams>} LogObject<dashboardSiteSettingsChangeValueFailureParams>
 */
export function dashboardSiteSettingsChangeValueFailure(params) {
    return { evid: 314, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardSiteSettingsClickLink' event (evid: 315)
 *
 * Event description: user clicked on a link
 *
 * @param {dashboardSiteSettingsClickLinkParams} params - The parameters for this event
 * @property {string} name - link name
 * @property {string} view_type - view_type
 * @property {string} experience - user's experience
 * @property {string} origin - name of current tab
 * @property {string} platform - platform
 * @property {string} hosting - from where user arrived to sitesettings (Editor/MA/...)
 * @property {GUID} msid - msid
 * @property {string} value - Link URL
 * @return {LogObject<dashboardSiteSettingsClickLinkParams>} LogObject<dashboardSiteSettingsClickLinkParams>
 */
export function dashboardSiteSettingsClickLink(params) {
    return { evid: 315, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardSiteSettingsDeleteValue' event (evid: 316)
 *
 * Event description: user deleted/cleared a value from field
 *
 * @param {dashboardSiteSettingsDeleteValueParams} params - The parameters for this event
 * @property {string} name - name of the field that was changed
 * @property {string} view_type - view_type
 * @property {string} experience - user's experience
 * @property {string} origin - name of current tab
 * @property {string} platform - platform
 * @property {string} hosting - from where user arrived to sitesettings (Editor/MA/...)
 * @property {GUID} msid - msid
 * @property {string} value - delete/clear value
 * @return {LogObject<dashboardSiteSettingsDeleteValueParams>} LogObject<dashboardSiteSettingsDeleteValueParams>
 */
export function dashboardSiteSettingsDeleteValue(params) {
    return { evid: 316, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardSiteSettingsDeleteValueSuccess' event (evid: 317)
 *
 * Event description: user deleted/cleared a value from field - success
 *
 * @param {dashboardSiteSettingsDeleteValueSuccessParams} params - The parameters for this event
 * @property {string} name - name of the field that was changed
 * @property {string} view_type - view_type
 * @property {string} experience - user's experience
 * @property {string} origin - name of current tab
 * @property {string} platform - platform
 * @property {string} hosting - from where user arrived to sitesettings (Editor/MA/...)
 * @property {GUID} msid - msid
 * @property {string} value - delete/clear value
 * @return {LogObject<dashboardSiteSettingsDeleteValueSuccessParams>} LogObject<dashboardSiteSettingsDeleteValueSuccessParams>
 */
export function dashboardSiteSettingsDeleteValueSuccess(params) {
    return { evid: 317, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardSiteSettingsDeleteValueFailure' event (evid: 318)
 *
 * Event description: user deleted/cleared a value from field - failure
 *
 * @param {dashboardSiteSettingsDeleteValueFailureParams} params - The parameters for this event
 * @property {string} name - name of the field that was changed
 * @property {string} view_type - view_type
 * @property {string} experience - user's experience
 * @property {string} origin - name of current tab
 * @property {string} platform - platform
 * @property {string} hosting - from where user arrived to sitesettings (Editor/MA/...)
 * @property {GUID} msid - msid
 * @property {string} value - delete/clear value
 * @return {LogObject<dashboardSiteSettingsDeleteValueFailureParams>} LogObject<dashboardSiteSettingsDeleteValueFailureParams>
 */
export function dashboardSiteSettingsDeleteValueFailure(params) {
    return { evid: 318, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardSiteSettingsSelectValue' event (evid: 319)
 *
 * Event description: user selected a value and didn't change it (drop down and select image)
 *
 * @param {dashboardSiteSettingsSelectValueParams} params - The parameters for this event
 * @property {string} name - name of the field that was selected
 * @property {string} adding_method - manually(pop-up),drop-down
 * @property {string} view_type - view_type
 * @property {string} experience - user's experience
 * @property {string} origin - name of current tab
 * @property {string} place - UI type (picture/button/select/input...)
 * @property {string} platform - platform
 * @property {string} hosting - from where user arrived to sitesettings (Editor/MA/...)
 * @property {GUID} msid - msid
 * @property {string} value - user's selection
 * @return {LogObject<dashboardSiteSettingsSelectValueParams>} LogObject<dashboardSiteSettingsSelectValueParams>
 */
export function dashboardSiteSettingsSelectValue(params) {
    return { evid: 319, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardTourNextStep' event (evid: 32)
 *
 * Event description: dashboard tour > next step.
 *
 * @param {dashboardTourNextStepParams} params - The parameters for this event
 * @property {string} experiment_name - experiment_id
 * @property {string} stage_process - phase_name
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<dashboardTourNextStepParams>} LogObject<dashboardTourNextStepParams>
 */
export function dashboardTourNextStep(params) {
    return { evid: 32, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardSiteSettingsClosingComponent' event (evid: 320)
 *
 * Event description: user closed site settings' component
 *
 * @param {dashboardSiteSettingsClosingComponentParams} params - The parameters for this event
 * @property {string} name - name of the field that was selected
 * @property {string} view_type - view_type
 * @property {string} origin - name of current tab
 * @property {string} place - close type (x/cancel...)
 * @property {string} platform - platform
 * @property {string} hosting - from where user arrived to sitesettings (Editor/MA/...)
 * @property {GUID} msid - msid
 * @return {LogObject<dashboardSiteSettingsClosingComponentParams>} LogObject<dashboardSiteSettingsClosingComponentParams>
 */
export function dashboardSiteSettingsClosingComponent(params) {
    return { evid: 320, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardSiteSettingsDomainSslOption' event (evid: 321)
 *
 * Event description: User choose to Activate/ Deactivate the  HTTPS option
 *
 * @param {dashboardSiteSettingsDomainSslOptionParams} params - The parameters for this event
 * @property {string} name - name of the field that was changed
 * @property {string} view_type - view_type
 * @property {string} experience - user's experience
 * @property {string} origin - name of current tab
 * @property {string} mode - {Turn on SSL,Remove SSL}
 * @property {string} platform - platform
 * @property {string} hosting - from where user arrived to sitesettings (Editor/MA/...)
 * @property {GUID} msid - msid
 * @return {LogObject<dashboardSiteSettingsDomainSslOptionParams>} LogObject<dashboardSiteSettingsDomainSslOptionParams>
 */
export function dashboardSiteSettingsDomainSslOption(params) {
    return { evid: 321, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardSiteSettingsDomainSslPopupCancel' event (evid: 322)
 *
 * Event description: close Pop-up window either with 'cancel' option or 'X' .
 *
 * @param {dashboardSiteSettingsDomainSslPopupCancelParams} params - The parameters for this event
 * @property {string} name - name of the field that was changed
 * @property {string} view_type - view_type
 * @property {string} experience - user's experience
 * @property {string} origin - name of current tab
 * @property {string} mode - {Turn on SSL,Remove SSL}
 * @property {string} platform - platform
 * @property {string} hosting - from where user arrived to sitesettings (Editor/MA/...)
 * @property {GUID} msid - msid
 * @return {LogObject<dashboardSiteSettingsDomainSslPopupCancelParams>} LogObject<dashboardSiteSettingsDomainSslPopupCancelParams>
 */
export function dashboardSiteSettingsDomainSslPopupCancel(params) {
    return { evid: 322, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardSiteSettingsSeoClickEnterAddressManually' event (evid: 323)
 *
 * Event description: user clicked on a link 'Enter address manually' in SEO section
 *
 * @param {dashboardSiteSettingsSeoClickEnterAddressManuallyParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} experience - user's experience
 * @property {string} origin - name of current tab
 * @property {string} platform - platform
 * @property {string} hosting - from where user arrived to sitesettings (Editor/MA/...)
 * @property {GUID} msid - msid
 * @property {string} value - Link URL
 * @return {LogObject<dashboardSiteSettingsSeoClickEnterAddressManuallyParams>} LogObject<dashboardSiteSettingsSeoClickEnterAddressManuallyParams>
 */
export function dashboardSiteSettingsSeoClickEnterAddressManually(params) {
    return { evid: 323, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardSiteSettingsSeoCloseEnterAddressManuallyPopUp' event (evid: 324)
 *
 * Event description: user closed  pop up 'Enter address manually' in SEO section
 *
 * @param {dashboardSiteSettingsSeoCloseEnterAddressManuallyPopUpParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} experience - user's experience
 * @property {string} origin - name of current tab
 * @property {string} platform - platform
 * @property {string} hosting - from where user arrived to sitesettings (Editor/MA/...)
 * @property {GUID} msid - msid
 * @property {string} value - Link URL
 * @return {LogObject<dashboardSiteSettingsSeoCloseEnterAddressManuallyPopUpParams>} LogObject<dashboardSiteSettingsSeoCloseEnterAddressManuallyPopUpParams>
 */
export function dashboardSiteSettingsSeoCloseEnterAddressManuallyPopUp(params) {
    return { evid: 324, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardSiteSettingsSeoClickOnGetStarted' event (evid: 325)
 *
 * Event description: user clicked on get started button
 *
 * @param {dashboardSiteSettingsSeoClickOnGetStartedParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} origin - name of current tab
 * @property {string} platform - platform
 * @property {string} hosting - from where user arrived to sitesettings (Editor/MA/...)
 * @return {LogObject<dashboardSiteSettingsSeoClickOnGetStartedParams>} LogObject<dashboardSiteSettingsSeoClickOnGetStartedParams>
 */
export function dashboardSiteSettingsSeoClickOnGetStarted(params) {
    return { evid: 325, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardSiteSettingsOverviewUnpublishSite' event (evid: 326)
 *
 * Event description: User choose to unpublish site in pop up window
 *
 * @param {dashboardSiteSettingsOverviewUnpublishSiteParams} params - The parameters for this event
 * @property {string} name - name of the field that was changed
 * @property {string} view_type - view_type
 * @property {string} experience - user's experience
 * @property {string} origin - name of current tab
 * @property {string} platform - platform
 * @property {string} hosting - from where user arrived to sitesettings (Editor/MA/...)
 * @property {GUID} msid - msid
 * @return {LogObject<dashboardSiteSettingsOverviewUnpublishSiteParams>} LogObject<dashboardSiteSettingsOverviewUnpublishSiteParams>
 */
export function dashboardSiteSettingsOverviewUnpublishSite(params) {
    return { evid: 326, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardSiteSettingsOverviewUnpublishPopupCancel' event (evid: 327)
 *
 * Event description: close Pop-up window either with 'cancel' option or 'X' .
 *
 * @param {dashboardSiteSettingsOverviewUnpublishPopupCancelParams} params - The parameters for this event
 * @property {string} name - name of the field that was changed
 * @property {string} view_type - view_type
 * @property {string} experience - user's experience
 * @property {string} origin - name of current tab
 * @property {string} platform - platform
 * @property {string} hosting - from where user arrived to sitesettings (Editor/MA/...)
 * @property {GUID} msid - msid
 * @return {LogObject<dashboardSiteSettingsOverviewUnpublishPopupCancelParams>} LogObject<dashboardSiteSettingsOverviewUnpublishPopupCancelParams>
 */
export function dashboardSiteSettingsOverviewUnpublishPopupCancel(params) {
    return { evid: 327, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'renameSiteOpenRenameDialog' event (evid: 328)
 *
 * Event description: rename dialog is opened
 *
 * @param {renameSiteOpenRenameDialogParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} origin - site-list \ site-list-enterprise
 * @property {string} cta - ‘sidepanel’ / ‘menu’
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<renameSiteOpenRenameDialogParams>} LogObject<renameSiteOpenRenameDialogParams>
 */
export function renameSiteOpenRenameDialog(params) {
    return { evid: 328, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardChangeSiteDisplayNameSave' event (evid: 329)
 *
 * Event description: user changed site display name and clicked on save in rename dialog
 *
 * @param {dashboardChangeSiteDisplayNameSaveParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {GUID} msid - site guid
 * @return {LogObject<dashboardChangeSiteDisplayNameSaveParams>} LogObject<dashboardChangeSiteDisplayNameSaveParams>
 */
export function dashboardChangeSiteDisplayNameSave(params) {
    return { evid: 329, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardUserSeeFeedMoreThen3Sec' event (evid: 33)
 *
 * Event description: whenever a news item is a fully displayed in the newsfeed more then 3 sec send a bi-feed so I will be able to know that a user saw the feed
 *
 * @param {dashboardUserSeeFeedMoreThen3SecParams} params - The parameters for this event
 * @property {GUID} feedId - feed id
 * @property {string} source - source
 * @property {string} url - url
 * @property {string} view_type - view_type
 * @property {string} origin - origin
 * @property {GUID} campaignId - unique identifier of CMS items
 * @property {string} title - title
 * @property {string} type - type
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @property {boolean} aboveTheFold - aboveTheFold
 * @property {GUID} feed_id - feed id
 * @return {LogObject<dashboardUserSeeFeedMoreThen3SecParams>} LogObject<dashboardUserSeeFeedMoreThen3SecParams>
 */
export function dashboardUserSeeFeedMoreThen3Sec(params) {
    return { evid: 33, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardChangeUrlSave' event (evid: 330)
 *
 * Event description: user changed the url and clicked on save  in rename dialog
 *
 * @param {dashboardChangeUrlSaveParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {GUID} msid - site guid
 * @return {LogObject<dashboardChangeUrlSaveParams>} LogObject<dashboardChangeUrlSaveParams>
 */
export function dashboardChangeUrlSave(params) {
    return { evid: 330, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'needsYourActionNyaWidgetShown' event (evid: 331)
 *
 * Event description: When a user entered into the dashboard and has at least 1 NYA item
 *
 * @param {needsYourActionNyaWidgetShownParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {number} num_of_items - num of NYA items appears to users
 * @property {string} platform - platform
 * @property {string} hosting - MA/editor/ADI
 * @property {GUID} msid - msid
 * @return {LogObject<needsYourActionNyaWidgetShownParams>} LogObject<needsYourActionNyaWidgetShownParams>
 */
export function needsYourActionNyaWidgetShown(params) {
    return { evid: 331, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'needsYourActionItemIsShown' event (evid: 332)
 *
 * Event description: show 1 Needs Your Action item
 *
 * @param {needsYourActionItemIsShownParams} params - The parameters for this event
 * @property {string} item_id - id of the specific item
 * @property {number} item_location_on_page - item location appear on page
 * @property {string} view_type - view_type
 * @property {number} num_of_items - num of NYA items appears to users
 * @property {string} platform - platform
 * @property {string} hosting - MA/editor/ADI
 * @property {GUID} msid - msid
 * @property {string} template_id - template id of the action
 * @return {LogObject<needsYourActionItemIsShownParams>} LogObject<needsYourActionItemIsShownParams>
 */
export function needsYourActionItemIsShown(params) {
    return { evid: 332, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'needsYourActionClickOnItem' event (evid: 333)
 *
 * Event description: Click on 'Needs Your Action' item
 *
 * @param {needsYourActionClickOnItemParams} params - The parameters for this event
 * @property {string} item_id - item id
 * @property {number} item_location_on_page - item location num onpage
 * @property {string} click_type - click/close/hide
 * @property {string} view_type - view_type
 * @property {string} item_name - item name appear
 * @property {string} platform - platform
 * @property {string} hosting - MA/editor/ADI
 * @property {GUID} msid - msid
 * @property {string} template_id - template id
 * @return {LogObject<needsYourActionClickOnItemParams>} LogObject<needsYourActionClickOnItemParams>
 */
export function needsYourActionClickOnItem(params) {
    return { evid: 333, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'needsYourActionClickOnUndoHidingAnItem' event (evid: 334)
 *
 * Event description: Click on hide after hiding an item
 *
 * @param {needsYourActionClickOnUndoHidingAnItemParams} params - The parameters for this event
 * @property {string} item_id - item id
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} hosting - MA/editor/ADI
 * @property {GUID} msid - msid
 * @property {string} template_id - template id of the action
 * @return {LogObject<needsYourActionClickOnUndoHidingAnItemParams>} LogObject<needsYourActionClickOnUndoHidingAnItemParams>
 */
export function needsYourActionClickOnUndoHidingAnItem(params) {
    return { evid: 334, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'needsYourActionResolvedNyaItem' event (evid: 335)
 *
 * Event description: when NYA item is resolved
 *
 * @param {needsYourActionResolvedNyaItemParams} params - The parameters for this event
 * @property {string} item_id - item id
 * @property {GUID} msid - msid
 * @property {string} template_id - template id of the action
 * @return {LogObject<needsYourActionResolvedNyaItemParams>} LogObject<needsYourActionResolvedNyaItemParams>
 */
export function needsYourActionResolvedNyaItem(params) {
    return { evid: 335, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'hooverNewReleasesIcon' event (evid: 336)
 *
 * Event description: The user hoovers the new releases icon in the top bar of the BM.
 * The event tracks the first time per load page.
 *
 * @param {hooverNewReleasesIconParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<hooverNewReleasesIconParams>} LogObject<hooverNewReleasesIconParams>
 */
export function hooverNewReleasesIcon(params) {
    return { evid: 336, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'tooltipNotificationPopsUp' event (evid: 337)
 *
 * Event description: Tooltip pops up. It happens only once when the site gets his first  "new release" notification.
 *
 * @param {tooltipNotificationPopsUpParams} params - The parameters for this event
 * @property {string} name - New released feature's name
 * @property {string} view_type - view_type
 * @property {string} origin - web/mobile
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<tooltipNotificationPopsUpParams>} LogObject<tooltipNotificationPopsUpParams>
 */
export function tooltipNotificationPopsUp(params) {
    return { evid: 337, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'newReleasesApiRequest' event (evid: 338)
 *
 * Event description: This event fires every time there is a new request from the API. It means that the dealer sent a new release update to a site.
 * The event is unique by announcement_id and metasite_id.
 *
 * @param {newReleasesApiRequestParams} params - The parameters for this event
 * @property {string} lng - language
 * @property {GUID} announcement_id - announcement_id
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<newReleasesApiRequestParams>} LogObject<newReleasesApiRequestParams>
 */
export function newReleasesApiRequest(params) {
    return { evid: 338, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'closeTooltipPopUp' event (evid: 339)
 *
 * Event description: Event fires when users closes the tooltip.
 *
 * @param {closeTooltipPopUpParams} params - The parameters for this event
 * @property {string} name - New released feature's name
 * @property {string} view_type - view_type
 * @property {string} origin - web, mobile
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<closeTooltipPopUpParams>} LogObject<closeTooltipPopUpParams>
 */
export function closeTooltipPopUp(params) {
    return { evid: 339, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'badgeNotification' event (evid: 340)
 *
 * Event description: a badge with new notifications is shown to the user
 *
 * @param {badgeNotificationParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {number} new_notifications - number in the badge
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<badgeNotificationParams>} LogObject<badgeNotificationParams>
 */
export function badgeNotification(params) {
    return { evid: 340, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'viewFeatureCard' event (evid: 341)
 *
 * Event description: View is more than 75% of the card and at least 3 seconds. In 3 second I managed to read the header of the announcement.
 * The event should be fired only once per announcement per sidebar opened (if sidebar is opened again, an announcement that was already viewed can have another view event).
 *
 * @param {viewFeatureCardParams} params - The parameters for this event
 * @property {GUID} announcement_id - announcement_id
 * @property {string} view_type - view_type
 * @property {number} card_position - position of the announcement
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<viewFeatureCardParams>} LogObject<viewFeatureCardParams>
 */
export function viewFeatureCard(params) {
    return { evid: 341, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cardCta' event (evid: 342)
 *
 * Event description: CTA button
 *
 * @param {cardCtaParams} params - The parameters for this event
 * @property {string} button_type - main/secondary
 * @property {GUID} announcement_id - announcement_id
 * @property {string} button_name - cta name
 * @property {string} view_type - view_type
 * @property {number} card_position - position of the announcement
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<cardCtaParams>} LogObject<cardCtaParams>
 */
export function cardCta(params) {
    return { evid: 342, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'viewedAllUpdates' event (evid: 343)
 *
 * Event description: Users gets to the bottom of the feed
 *
 * @param {viewedAllUpdatesParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<viewedAllUpdatesParams>} LogObject<viewedAllUpdatesParams>
 */
export function viewedAllUpdates(params) {
    return { evid: 343, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'settingsOverviewPageClickOnItem' event (evid: 345)
 *
 * Event description: when a user clicks on item in one of the OS Settings page
 *
 * @param {settingsOverviewPageClickOnItemParams} params - The parameters for this event
 * @property {string} click_name - deprecated
 * @property {string} hosting_platform - in case it's Wix studio Business info (account level business info page) then the value is 'my-account-2-dashboard' otherwise the value is null and it means it's BizMgr business info (site level business info)
 * @property {string} page_view - The page of the click (website settings/business info/language and region)
 * @property {string} view_type - view_type
 * @property {string} item_name - the name of the item
 * @property {string} status_text - deprecated
 * @property {string} fold_name - card name
 * @property {string} platform - platform
 * @property {string} hosting - MA/editor/ADI
 * @property {GUID} msid - --
 * @return {LogObject<settingsOverviewPageClickOnItemParams>} LogObject<settingsOverviewPageClickOnItemParams>
 */
export function settingsOverviewPageClickOnItem(params) {
    return { evid: 345, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'iconRender' event (evid: 347)
 *
 * Event description: server event which we'll send every time the "new releases" icon gets rendered
 *
 * @param {iconRenderParams} params - The parameters for this event
 * @property {GUID} uuid - uuid
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<iconRenderParams>} LogObject<iconRenderParams>
 */
export function iconRender(params) {
    return { evid: 347, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesBulkActionsPrint' event (evid: 348)
 *
 * Event description: Quotes - Create invoice - Toggle Recurring
 *
 * @param {quotesBulkActionsPrintParams} params - The parameters for this event
 * @property {string} number - number of invoices choose or all
 * @property {string} view_type - view_type
 * @property {string} filter - type of filter
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<quotesBulkActionsPrintParams>} LogObject<quotesBulkActionsPrintParams>
 */
export function quotesBulkActionsPrint(params) {
    return { evid: 348, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'setupWidgetItems' event (evid: 349)
 *
 * Event description: When a user has an open phase in the dashboard (since they did not complete all tasks in the phase (it is not collapsed), sent each time the user enters the dashboard - home. Following a bug fix, the data is accurate since 25.5.20
 *
 * @param {setupWidgetItemsParams} params - The parameters for this event
 * @property {string} skipped_items - a list of offering guids that were skipped in the phase
 * @property {string} resolved_items - a list of offering guids that were resolved in the phase
 * @property {string} asset_campaign_guid - dealer placement id
 * @property {string} location - dashboard/sidebar
 * @property {number} number_of_available_items - number_of_open_items
 * @property {string} available_items - a list of offering guids that are available in the phase
 * @property {number} number_of_resolved_items - number_of_resolved_items
 * @property {string} view_type - view_type
 * @property {number} number_of_skipped_items - number_of_skipped_items
 * @property {string} setup_location - dashboard/sidebar/popover
 * @property {string} platform - platform
 * @property {string} hosting - ADI/Editor/MA
 * @property {GUID} msid - msid
 * @property {string} trigger - normal/hover/click/step-completed
 * @return {LogObject<setupWidgetItemsParams>} LogObject<setupWidgetItemsParams>
 */
export function setupWidgetItems(params) {
    return { evid: 349, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardShowSideBar' event (evid: 35)
 *
 * Event description: send event each time the side bar is being shown ( repurposed for mobile web sidebar)
 *
 * @param {dashboardShowSideBarParams} params - The parameters for this event
 * @property {string} page_view - my sites/site home
 * @property {string} view_type - view_type
 * @property {boolean} alwaysOpen - if the side bar always open at application (not relevant anymore)
 * @property {string} selectedItem - name of application ('mobile sidebar' in case of mobile web)
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @property {string} action - open/close
 * @return {LogObject<dashboardShowSideBarParams>} LogObject<dashboardShowSideBarParams>
 */
export function dashboardShowSideBar(params) {
    return { evid: 35, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'rolesAddNewRoleClick' event (evid: 350)
 *
 * Event description: click on add new from authorization tab in site settings
 *
 * @param {rolesAddNewRoleClickParams} params - The parameters for this event
 * @property {boolean} is_blog_shown - true if shown (blog manager appears only for sites with blog)
 * @property {string} view_type - view_type
 * @property {string} roles_displayed - list of roles displayed to the user
 * @property {string} origin - name of tab dashboard/authorization/my sites
 * @property {string} platform - platform
 * @property {string} hosting - MA/Editor
 * @property {boolean} is_events_shown - true if shown (event manager appears only for sites with events )
 * @property {GUID} msid - msid
 * @return {LogObject<rolesAddNewRoleClickParams>} LogObject<rolesAddNewRoleClickParams>
 */
export function rolesAddNewRoleClick(params) {
    return { evid: 350, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'searchQuery' event (evid: 3500)
 *
 * Event description: Search Query.
 *
 * @param {searchQueryParams} params - The parameters for this event
 * @property {string} searchTerms - search terms
 * @property {string} lng - language
 * @property {string} requestURI - request URI
 * @property {number} responseCode - response code
 * @property {string} errorMessage - error message
 * @property {number} requestTime - request time spent
 * @property {number} scannedDocsCount - scanned docs count
 * @property {number} matchedDocsCount - matched docs count
 * @property {boolean} isSuccess - success response status
 * @property {string} filter - filter
 * @property {number} offset - offset
 * @property {string} queryProfileParams - query profile parameters (json formatted)
 * @property {string} responseMessage - response message
 * @property {string} queryProfile - query profile
 * @property {string} rankProfile - rank profile
 * @property {number} limit - limit
 * @property {string} customRankFeatures - custom rank features (json formatted)
 * @return {LogObject<searchQueryParams>} LogObject<searchQueryParams>
 */
export function searchQuery(params) {
    return { evid: 3500, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'rolesAddRoleCloseWindow' event (evid: 351)
 *
 * Event description: user closed add role window
 *
 * @param {rolesAddRoleCloseWindowParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} origin - name of tab dashboard/authorization/my sites
 * @property {string} platform - platform
 * @property {string} hosting - Editor / MA
 * @property {GUID} msid - msid
 * @return {LogObject<rolesAddRoleCloseWindowParams>} LogObject<rolesAddRoleCloseWindowParams>
 */
export function rolesAddRoleCloseWindow(params) {
    return { evid: 351, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'rolesAddRoleInviteClick' event (evid: 352)
 *
 * Event description: user clicked on 'invite' in the add role window
 *
 * @param {rolesAddRoleInviteClickParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} roles_displayed - list of roles displayed to the user
 * @property {string} origin - name of tab dashboard/authorization/my sites
 * @property {string} invite_role - invited role
 * @property {boolean} is_valid_email - email validation
 * @property {string} platform - platform
 * @property {string} hosting - MA / Editor
 * @property {string} invite_email - not reported (PII)
 * @property {GUID} msid - msid
 * @return {LogObject<rolesAddRoleInviteClickParams>} LogObject<rolesAddRoleInviteClickParams>
 */
export function rolesAddRoleInviteClick(params) {
    return { evid: 352, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'rolesAddRoleInviteClickSuccess' event (evid: 353)
 *
 * Event description: user clicked on 'invite' in the add role window - success response
 *
 * @param {rolesAddRoleInviteClickSuccessParams} params - The parameters for this event
 * @property {boolean} is_blog_shown - deprecated from 2/6/19 and replaced by roles_displayed field
 * @property {string} view_type - view_type
 * @property {string} roles_displayed - list of roles displayed to the user
 * @property {string} origin - name of tab dashboard/authorization/my sites
 * @property {string} invite_role - invited role
 * @property {string} platform - platform
 * @property {string} hosting - Editor / MA
 * @property {string} invite_email - invited email
 * @property {GUID} msid - msid
 * @return {LogObject<rolesAddRoleInviteClickSuccessParams>} LogObject<rolesAddRoleInviteClickSuccessParams>
 */
export function rolesAddRoleInviteClickSuccess(params) {
    return { evid: 353, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'crmHomeButtonClicked' event (evid: 354)
 *
 * Event description: CRM Home - Button Clicked
 *
 * @param {crmHomeButtonClickedParams} params - The parameters for this event
 * @property {GUID} uuid - uuid
 * @property {string} button_name - button name
 * @property {string} view_type - view_type
 * @property {string} section - i.e create automation , manage finance , all crm tabs
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<crmHomeButtonClickedParams>} LogObject<crmHomeButtonClickedParams>
 */
export function crmHomeButtonClicked(params) {
    return { evid: 354, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'rolesAddRoleInviteClickFail' event (evid: 355)
 *
 * Event description: user clicked on 'invite' in the add role window - fail response
 *
 * @param {rolesAddRoleInviteClickFailParams} params - The parameters for this event
 * @property {string} error_desc - error description
 * @property {string} view_type - view_type
 * @property {string} roles_displayed - list of roles displayed to the user
 * @property {string} origin - name of tab dashboard/authorization/my sites
 * @property {string} invite_role - invited role
 * @property {string} platform - platform
 * @property {string} hosting - MA / Editor
 * @property {string} invite_email - invited email, empty if email isn't valid
 * @property {GUID} msid - msid
 * @return {LogObject<rolesAddRoleInviteClickFailParams>} LogObject<rolesAddRoleInviteClickFailParams>
 */
export function rolesAddRoleInviteClickFail(params) {
    return { evid: 355, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'rolesLoginPageLoadStart' event (evid: 356)
 *
 * Event description: before login component is loaded - page load start
 *
 * @param {rolesLoginPageLoadStartParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} invite_id - invite_id
 * @property {string} platform - platform
 * @property {string} invite_email - invited email
 * @property {GUID} msid - msid
 * @return {LogObject<rolesLoginPageLoadStartParams>} LogObject<rolesLoginPageLoadStartParams>
 */
export function rolesLoginPageLoadStart(params) {
    return { evid: 356, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'rolesLoginPageLoadComplete' event (evid: 357)
 *
 * Event description: before login component is loaded - page load complete
 *
 * @param {rolesLoginPageLoadCompleteParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} invite_id - invite_id
 * @property {string} platform - platform
 * @property {string} invite_email - invited email
 * @property {GUID} msid - msid
 * @return {LogObject<rolesLoginPageLoadCompleteParams>} LogObject<rolesLoginPageLoadCompleteParams>
 */
export function rolesLoginPageLoadComplete(params) {
    return { evid: 357, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'rolesAcceptFail' event (evid: 358)
 *
 * Event description: post login signup accept response fail
 *
 * @param {rolesAcceptFailParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} invite_id - invite id
 * @property {string} platform - platform
 * @property {string} invite_email - invited email
 * @property {GUID} msid - msid
 * @return {LogObject<rolesAcceptFailParams>} LogObject<rolesAcceptFailParams>
 */
export function rolesAcceptFail(params) {
    return { evid: 358, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'rolesResendInviteClick' event (evid: 359)
 *
 * Event description: user clicked on resend invite
 *
 * @param {rolesResendInviteClickParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} origin - name of tab
 * @property {string} invite_role - invited role
 * @property {string} platform - platform
 * @property {string} hosting - MA /Editor
 * @property {string} invite_email - invited email
 * @property {GUID} msid - msid
 * @return {LogObject<rolesResendInviteClickParams>} LogObject<rolesResendInviteClickParams>
 */
export function rolesResendInviteClick(params) {
    return { evid: 359, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardCloseBanner' event (evid: 36)
 *
 * Event description: send each time user see banner
 *
 * @param {dashboardCloseBannerParams} params - The parameters for this event
 * @property {string} name - of banner
 * @property {string} view_type - view_type
 * @property {string} origin - where is the banner displayed
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<dashboardCloseBannerParams>} LogObject<dashboardCloseBannerParams>
 */
export function dashboardCloseBanner(params) {
    return { evid: 36, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'rolesDeleteRoleClick' event (evid: 360)
 *
 * Event description: user clicked on delete role
 *
 * @param {rolesDeleteRoleClickParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} accept_email - accepted email
 * @property {string} origin - name of tab
 * @property {string} platform - platform
 * @property {string} hosting - MA / Editor
 * @property {GUID} msid - msid
 * @return {LogObject<rolesDeleteRoleClickParams>} LogObject<rolesDeleteRoleClickParams>
 */
export function rolesDeleteRoleClick(params) {
    return { evid: 360, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'rolesDeleteRoleCloseWindow' event (evid: 361)
 *
 * Event description: user closed delete role window
 *
 * @param {rolesDeleteRoleCloseWindowParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} accept_email - accepted email
 * @property {string} origin - name of tab
 * @property {string} platform - platform
 * @property {string} hosting - MA /Editor
 * @property {GUID} msid - msid
 * @return {LogObject<rolesDeleteRoleCloseWindowParams>} LogObject<rolesDeleteRoleCloseWindowParams>
 */
export function rolesDeleteRoleCloseWindow(params) {
    return { evid: 361, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'rolesDeleteRoleDeleteClick' event (evid: 362)
 *
 * Event description: user clicked on 'delete' in the delete role window
 *
 * @param {rolesDeleteRoleDeleteClickParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} accept_email - accepted email
 * @property {string} origin - name of tab
 * @property {string} platform - platform
 * @property {string} hosting - MA / Editor
 * @property {GUID} msid - msid
 * @return {LogObject<rolesDeleteRoleDeleteClickParams>} LogObject<rolesDeleteRoleDeleteClickParams>
 */
export function rolesDeleteRoleDeleteClick(params) {
    return { evid: 362, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'rolesDeleteRoleDeleteClickSuccess' event (evid: 363)
 *
 * Event description: user clicked on 'delete' in the delete role window - success response
 *
 * @param {rolesDeleteRoleDeleteClickSuccessParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} accept_email - accepted email
 * @property {string} origin - name of tab
 * @property {string} platform - platform
 * @property {string} hosting - MA / Editor
 * @property {GUID} msid - msid
 * @return {LogObject<rolesDeleteRoleDeleteClickSuccessParams>} LogObject<rolesDeleteRoleDeleteClickSuccessParams>
 */
export function rolesDeleteRoleDeleteClickSuccess(params) {
    return { evid: 363, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'rolesDeleteRoleDeleteClickFail' event (evid: 364)
 *
 * Event description: user clicked on 'delete' in the delete role window - fail response
 *
 * @param {rolesDeleteRoleDeleteClickFailParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} accept_email - accepted email
 * @property {string} origin - name of tab
 * @property {string} platform - platform
 * @property {string} hosting - MA / Editor
 * @property {GUID} msid - msid
 * @return {LogObject<rolesDeleteRoleDeleteClickFailParams>} LogObject<rolesDeleteRoleDeleteClickFailParams>
 */
export function rolesDeleteRoleDeleteClickFail(params) {
    return { evid: 364, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'rolesAcceptInviteFromMobilePageView' event (evid: 365)
 *
 * Event description: user accepted invite from mobile page view
 *
 * @param {rolesAcceptInviteFromMobilePageViewParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} inviteToken - token
 * @property {string} invite_id - invite_id
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<rolesAcceptInviteFromMobilePageViewParams>} LogObject<rolesAcceptInviteFromMobilePageViewParams>
 */
export function rolesAcceptInviteFromMobilePageView(params) {
    return { evid: 365, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'rolesEditRoleClick' event (evid: 366)
 *
 * Event description: click on edit role
 *
 * @param {rolesEditRoleClickParams} params - The parameters for this event
 * @property {boolean} is_blog_shown - true if shown (blog manager appears only for sites with blog)
 * @property {boolean} is_accepted - true if invite was accepted
 * @property {string} view_type - view_type
 * @property {string} roles_displayed - list of roles displayed to the user
 * @property {string} origin - origin page
 * @property {string} platform - platform
 * @property {string} hosting - MA/Editor
 * @property {boolean} is_events_shown - is_events_shown
 * @property {GUID} msid - msid
 * @return {LogObject<rolesEditRoleClickParams>} LogObject<rolesEditRoleClickParams>
 */
export function rolesEditRoleClick(params) {
    return { evid: 366, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'rolesEditRoleUpdateClick' event (evid: 367)
 *
 * Event description: user clicked on 'update' in the edit role window - success response
 *
 * @param {rolesEditRoleUpdateClickParams} params - The parameters for this event
 * @property {boolean} is_blog_shown - true if shown (blog manager appears only for sites with blog)
 * @property {string} new_role - new role
 * @property {boolean} is_accepted - true if edit is after invite was accepted
 * @property {string} view_type - view_type
 * @property {string} roles_displayed - list of roles displayed to the user
 * @property {string} prev_role - previous role
 * @property {string} origin - origin page
 * @property {string} platform - platform
 * @property {string} hosting - Editor / MA
 * @property {GUID} msid - msid
 * @return {LogObject<rolesEditRoleUpdateClickParams>} LogObject<rolesEditRoleUpdateClickParams>
 */
export function rolesEditRoleUpdateClick(params) {
    return { evid: 367, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'rolesGetInviteLink' event (evid: 368)
 *
 * Event description: user clicked on get invite link
 *
 * @param {rolesGetInviteLinkParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} invite_role - invited role
 * @property {string} platform - platform
 * @property {string} hosting - MA /Editor
 * @property {GUID} msid - msid
 * @property {string} action - not in use
 * @return {LogObject<rolesGetInviteLinkParams>} LogObject<rolesGetInviteLinkParams>
 */
export function rolesGetInviteLink(params) {
    return { evid: 368, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'analyticsKpiIsShownInAnalyticsWidget' event (evid: 369)
 *
 * Event description: For each kpi shown in the analytics widget
 *
 * @param {analyticsKpiIsShownInAnalyticsWidgetParams} params - The parameters for this event
 * @property {string} kpi_period - the kpis period chosen for all seen kpis when the kpi is shown
 * @property {number} kpi_location - 0-left 1-middle 2-right
 * @property {string} view_type - view_type
 * @property {string} kpi_name - kpi's name
 * @property {string} app_id - app id of the vertical that displays the widget.
 * @property {string} platform - platform
 * @property {string} hosting - MA/editor/ADI
 * @property {GUID} msid - msid
 * @property {string} value - the value that WAS returns as the kpi value
 * @return {LogObject<analyticsKpiIsShownInAnalyticsWidgetParams>} LogObject<analyticsKpiIsShownInAnalyticsWidgetParams>
 */
export function analyticsKpiIsShownInAnalyticsWidget(params) {
    return { evid: 369, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardNewsUserClickReadMore' event (evid: 37)
 *
 * Event description: each time user clicks reed more send. in the Dashboard, the news link can lead only to the News Feed
 *
 * @param {dashboardNewsUserClickReadMoreParams} params - The parameters for this event
 * @property {string} source - the app that sent the feed
 * @property {GUID} feedId - unique identifier of the feed
 * @property {string} view_type - view_type
 * @property {string} origin - of read more
 * @property {string} title - of the feed
 * @property {string} type - of activity
 * @property {string} platform - platform
 * @property {GUID} msid - unique identifier of the site
 * @return {LogObject<dashboardNewsUserClickReadMoreParams>} LogObject<dashboardNewsUserClickReadMoreParams>
 */
export function dashboardNewsUserClickReadMore(params) {
    return { evid: 37, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'exposureForAnalyticsTests' event (evid: 3701)
 *
 * Event description: Exposure for analytics tests
 *
 * @param {exposureForAnalyticsTestsParams} params - The parameters for this event
 * @property {number} num_value - numeric value for filtering the events from WAS
 * @property {string} exposure_name - exposure name
 * @property {string} bi_profile_num_value - numeric value (string) for filtering the events from BI profile
 * @property {GUID} msid - msid
 * @return {LogObject<exposureForAnalyticsTestsParams>} LogObject<exposureForAnalyticsTestsParams>
 */
export function exposureForAnalyticsTests(params) {
    return { evid: 3701, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'analyticsTooltip' event (evid: 371)
 *
 * Event description: Tooltip for Analytics
 *
 * @param {analyticsTooltipParams} params - The parameters for this event
 * @property {string} name - The tooltip name. Till July 2020 was not populated  (only "info" was reported).
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} hosting - Dashboard/editor/ADI
 * @property {GUID} msid - msid
 * @return {LogObject<analyticsTooltipParams>} LogObject<analyticsTooltipParams>
 */
export function analyticsTooltip(params) {
    return { evid: 371, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'analyticsClickOnWidgetButtons' event (evid: 372)
 *
 * Event description: Click on Widget Buttons
 *
 * @param {analyticsClickOnWidgetButtonsParams} params - The parameters for this event
 * @property {string} click_name - collapse/expand/customize
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} hosting - MA/editor/ADI
 * @property {GUID} msid - msid
 * @return {LogObject<analyticsClickOnWidgetButtonsParams>} LogObject<analyticsClickOnWidgetButtonsParams>
 */
export function analyticsClickOnWidgetButtons(params) {
    return { evid: 372, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'analyticsClickOnKpi' event (evid: 373)
 *
 * Event description: click on KPI from Analytics Widget
 *
 * @param {analyticsClickOnKpiParams} params - The parameters for this event
 * @property {number} kpi_location - 0-left 1-middle 2-right
 * @property {string} view_type - view_type
 * @property {string} kpi_name - kpi's name
 * @property {string} platform - platform
 * @property {string} hosting - MA/editor/ADI
 * @property {GUID} msid - msid
 * @return {LogObject<analyticsClickOnKpiParams>} LogObject<analyticsClickOnKpiParams>
 */
export function analyticsClickOnKpi(params) {
    return { evid: 373, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'analyticsChooseKpiFromCustomizationList' event (evid: 374)
 *
 * Event description: When a user gets an error in the dialog (e.g. picks a 4th item)
 *
 * @param {analyticsChooseKpiFromCustomizationListParams} params - The parameters for this event
 * @property {string} selected_kpis - the chosen kpis in the following way -> kpi: location: (json)
 * @property {string} added_kpi_location - the location of the kpi the user tried to add when they got the error
 * @property {string} error_desc - the error the user received
 * @property {string} view_type - view_type
 * @property {string} added_kpi - the kpi the user tried to add when they got the error
 * @property {string} platform - platform
 * @property {string} hosting - MA/editor/ADI
 * @property {GUID} msid - msid
 * @return {LogObject<analyticsChooseKpiFromCustomizationListParams>} LogObject<analyticsChooseKpiFromCustomizationListParams>
 */
export function analyticsChooseKpiFromCustomizationList(params) {
    return { evid: 374, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'analyticsClickOnButtonFromCustomizationList' event (evid: 375)
 *
 * Event description: Click on apply button from customization list
 *
 * @param {analyticsClickOnButtonFromCustomizationListParams} params - The parameters for this event
 * @property {string} selected_kpis - the chosen kpis in the following way -> kpi: location: (json)
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} hosting - MA/editor/ADI
 * @property {GUID} msid - msid
 * @return {LogObject<analyticsClickOnButtonFromCustomizationListParams>} LogObject<analyticsClickOnButtonFromCustomizationListParams>
 */
export function analyticsClickOnButtonFromCustomizationList(params) {
    return { evid: 375, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'analyticsChangeKpisTimePeriod' event (evid: 376)
 *
 * Event description: When a user chooses to change the time period of the kpis shown to him in analytics widget (the click that actually changes the period - not the period selection menu)
 *
 * @param {analyticsChangeKpisTimePeriodParams} params - The parameters for this event
 * @property {string} kpi_period - the kpis period chosen for all seen kpis when the kpi is shown
 * @property {string} view_type - view_type
 * @property {string} app_id - app id of the vertical that displays the widget.
 * @property {string} platform - platform
 * @property {string} hosting - MA/Editor
 * @property {GUID} msid - msid
 * @return {LogObject<analyticsChangeKpisTimePeriodParams>} LogObject<analyticsChangeKpisTimePeriodParams>
 */
export function analyticsChangeKpisTimePeriod(params) {
    return { evid: 376, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'analyticsHoverAKpi' event (evid: 377)
 *
 * Event description: Hover a KPI from Analytics Widget
 *
 * @param {analyticsHoverAKpiParams} params - The parameters for this event
 * @property {number} kpi_location - 0-left 1-middle 2-right
 * @property {string} view_type - view_type
 * @property {string} kpi_name - kpi's name
 * @property {string} platform - platform
 * @property {string} hosting - MA/editor/ADI
 * @property {GUID} msid - msid
 * @return {LogObject<analyticsHoverAKpiParams>} LogObject<analyticsHoverAKpiParams>
 */
export function analyticsHoverAKpi(params) {
    return { evid: 377, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'notificationsClickOnAChannelSettings' event (evid: 379)
 *
 * Event description: On the Notification Setting page,  "Set Notifications by Channel" section, click on collapse/expand.
 *
 * @param {notificationsClickOnAChannelSettingsParams} params - The parameters for this event
 * @property {string} click_name - collapse/expand
 * @property {string} channel - channel section the user clicked on
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} hosting - MA/editor/ADI
 * @property {GUID} msid - msid
 * @return {LogObject<notificationsClickOnAChannelSettingsParams>} LogObject<notificationsClickOnAChannelSettingsParams>
 */
export function notificationsClickOnAChannelSettings(params) {
    return { evid: 379, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardNewsClickViewAll' event (evid: 38)
 *
 * Event description: clicking view all. leads to the News Feed
 *
 * @param {dashboardNewsClickViewAllParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<dashboardNewsClickViewAllParams>} LogObject<dashboardNewsClickViewAllParams>
 */
export function dashboardNewsClickViewAll(params) {
    return { evid: 38, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'notificationsClickOnChannelLink' event (evid: 380)
 *
 * Event description: Click on a Channel link via "Set Notifications by Channel" section
 *
 * @param {notificationsClickOnChannelLinkParams} params - The parameters for this event
 * @property {string} channel - channel section channel section the user clicked on
 * @property {string} url - the url the user is transferred to
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {boolean} has_settings - Indication if there are settings options for the channel
 * @property {string} hosting - MA/editor/ADI
 * @property {GUID} msid - msid
 * @return {LogObject<notificationsClickOnChannelLinkParams>} LogObject<notificationsClickOnChannelLinkParams>
 */
export function notificationsClickOnChannelLink(params) {
    return { evid: 380, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesClickDueDate' event (evid: 383)
 *
 * Event description: Quotes - click due date
 *
 * @param {quotesClickDueDateParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<quotesClickDueDateParams>} LogObject<quotesClickDueDateParams>
 */
export function quotesClickDueDate(params) {
    return { evid: 383, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesChooseDueDate' event (evid: 384)
 *
 * Event description: Quotes - choose due date
 *
 * @param {quotesChooseDueDateParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {DateTime} dueDate - Due date added
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<quotesChooseDueDateParams>} LogObject<quotesChooseDueDateParams>
 */
export function quotesChooseDueDate(params) {
    return { evid: 384, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesClickIssueDate' event (evid: 385)
 *
 * Event description: Quotes - click issue date
 *
 * @param {quotesClickIssueDateParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<quotesClickIssueDateParams>} LogObject<quotesClickIssueDateParams>
 */
export function quotesClickIssueDate(params) {
    return { evid: 385, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesChooseIssueDate' event (evid: 386)
 *
 * Event description: Quotes - choose issue date
 *
 * @param {quotesChooseIssueDateParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} invoiceType - invoice_type
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<quotesChooseIssueDateParams>} LogObject<quotesChooseIssueDateParams>
 */
export function quotesChooseIssueDate(params) {
    return { evid: 386, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'notificationGroupNotificationIsDisplayed' event (evid: 387)
 *
 * Event description: user opens the dialog and group notification is seen.
 *
 * @param {notificationGroupNotificationIsDisplayedParams} params - The parameters for this event
 * @property {string} feed_name - All sites/This site /float
 * @property {string} channel - channel
 * @property {string} view_type - view_type
 * @property {string} notification_id_shown - the shown notification id
 * @property {string} notification_ids - list of the notification ids
 * @property {string} origin - MSID of the site the user is on, my-sites if on Site List. Later on, also account-settings, and other account-level pages.
 * @property {string} contact_id - contact_id guid
 * @property {string} platform - --
 * @property {number} page_number - page number - each page is limited to 30 notifications
 * @return {LogObject<notificationGroupNotificationIsDisplayedParams>} LogObject<notificationGroupNotificationIsDisplayedParams>
 */
export function notificationGroupNotificationIsDisplayed(params) {
    return { evid: 387, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesViewPayments' event (evid: 388)
 *
 * Event description: Quotes - view payments
 *
 * @param {quotesViewPaymentsParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<quotesViewPaymentsParams>} LogObject<quotesViewPaymentsParams>
 */
export function quotesViewPayments(params) {
    return { evid: 388, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesSubscriptionViewPayments' event (evid: 389)
 *
 * Event description: Quotes - Subscription - view payments
 *
 * @param {quotesSubscriptionViewPaymentsParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<quotesSubscriptionViewPaymentsParams>} LogObject<quotesSubscriptionViewPaymentsParams>
 */
export function quotesSubscriptionViewPayments(params) {
    return { evid: 389, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardProsSiteActionsOpened' event (evid: 39)
 *
 * Event description: user opens site actions  dialog in pro-my-sites
 *
 * @param {dashboardProsSiteActionsOpenedParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {GUID} msid - -
 * @return {LogObject<dashboardProsSiteActionsOpenedParams>} LogObject<dashboardProsSiteActionsOpenedParams>
 */
export function dashboardProsSiteActionsOpened(params) {
    return { evid: 39, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesBulkActionsDownloadPdf' event (evid: 397)
 *
 * Event description: Quotes - Create invoice - Toggle Recurring
 *
 * @param {quotesBulkActionsDownloadPdfParams} params - The parameters for this event
 * @property {string} number - number of invoices choose or all
 * @property {string} view_type - view_type
 * @property {string} filter - type of filter
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<quotesBulkActionsDownloadPdfParams>} LogObject<quotesBulkActionsDownloadPdfParams>
 */
export function quotesBulkActionsDownloadPdf(params) {
    return { evid: 397, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesBulkActionsExportCsv' event (evid: 398)
 *
 * Event description: Quotes - Create invoice - Toggle Recurring
 *
 * @param {quotesBulkActionsExportCsvParams} params - The parameters for this event
 * @property {string} number - number of invoices choose or all
 * @property {string} view_type - view_type
 * @property {string} filter - type of filter
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<quotesBulkActionsExportCsvParams>} LogObject<quotesBulkActionsExportCsvParams>
 */
export function quotesBulkActionsExportCsv(params) {
    return { evid: 398, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesDuplicateInvoice' event (evid: 399)
 *
 * Event description: Quotes - Duplicate Invoice
 *
 * @param {quotesDuplicateInvoiceParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {GUID} invoice_id - invoice guid
 * @return {LogObject<quotesDuplicateInvoiceParams>} LogObject<quotesDuplicateInvoiceParams>
 */
export function quotesDuplicateInvoice(params) {
    return { evid: 399, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardClickOnMySites' event (evid: 40)
 *
 * Event description: dashboard > click on my sites.
 *
 * @param {dashboardClickOnMySitesParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} origin - origin
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<dashboardClickOnMySitesParams>} LogObject<dashboardClickOnMySitesParams>
 */
export function dashboardClickOnMySites(params) {
    return { evid: 40, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesTabPageView' event (evid: 400)
 *
 * Event description: wix invoices/ quotes tab page view
 *
 * @param {quotesTabPageViewParams} params - The parameters for this event
 * @property {string} name - tab name
 * @property {string} view_type - view_type
 * @property {string} experience - deprecated
 * @property {string} origin - web,native
 * @property {string} place - how the user arrived to the tab
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<quotesTabPageViewParams>} LogObject<quotesTabPageViewParams>
 */
export function quotesTabPageView(params) {
    return { evid: 400, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesInvoicesOnboardingPageView' event (evid: 401)
 *
 * Event description: wix invoices onboarding flow - page view
 *
 * @param {quotesInvoicesOnboardingPageViewParams} params - The parameters for this event
 * @property {string} name - phase name
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<quotesInvoicesOnboardingPageViewParams>} LogObject<quotesInvoicesOnboardingPageViewParams>
 */
export function quotesInvoicesOnboardingPageView(params) {
    return { evid: 401, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesGetPaymentClick' event (evid: 402)
 *
 * Event description: site owner payment funnel - get payment click
 *
 * @param {quotesGetPaymentClickParams} params - The parameters for this event
 * @property {string} name - name of payment
 * @property {string} view_type - view_type
 * @property {string} origin - how user arrived to the flow
 * @property {string} type - connect/disconnect
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<quotesGetPaymentClickParams>} LogObject<quotesGetPaymentClickParams>
 */
export function quotesGetPaymentClick(params) {
    return { evid: 402, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesNewInvoiceClick' event (evid: 403)
 *
 * Event description: Quotes - New invoice click
 *
 * @param {quotesNewInvoiceClickParams} params - The parameters for this event
 * @property {GUID} originalInvoiceId - in case of duplicate: original invoice guid
 * @property {string} view_type - view_type
 * @property {string} origin - origin page, my invoices ( on mobile, when creating from list), create invoice - on web, when creating for the first time, widget (mobile), quick actions (mobile)
 * @property {string} status - Creation form/Draft/Sent/Paid
 * @property {boolean} create_order - true / false -  indicates the type of the flow (in case of type= duplicate it will indicate the type of invoice)
 * @property {string} type - [invoice / invoice&order/ duplicate / get started / without menu]
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {GUID} invoice_id - invoice guid
 * @return {LogObject<quotesNewInvoiceClickParams>} LogObject<quotesNewInvoiceClickParams>
 */
export function quotesNewInvoiceClick(params) {
    return { evid: 403, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesEmailInvoicePage' event (evid: 404)
 *
 * Event description: email invoice pop up
 *
 * @param {quotesEmailInvoicePageParams} params - The parameters for this event
 * @property {string} paymentType - 'one time', 'recurring'
 * @property {string} view_type - view_type
 * @property {string} origin - origin page
 * @property {string} status - Creation form/Draft/Sent/Paid
 * @property {string} origin_device - web,native
 * @property {string} invoiceSource - by app_def_id
 * @property {boolean} resend - resend mode?
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {GUID} invoice_id - invoice guid
 * @return {LogObject<quotesEmailInvoicePageParams>} LogObject<quotesEmailInvoicePageParams>
 */
export function quotesEmailInvoicePage(params) {
    return { evid: 404, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesEmailInvoicePageCancelClick' event (evid: 405)
 *
 * Event description: email invoice - clicked on cancel
 *
 * @param {quotesEmailInvoicePageCancelClickParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} origin - origin page
 * @property {string} origin_device - web,native
 * @property {boolean} resend - resend mode?
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {GUID} invoice_id - invoice guid
 * @return {LogObject<quotesEmailInvoicePageCancelClickParams>} LogObject<quotesEmailInvoicePageCancelClickParams>
 */
export function quotesEmailInvoicePageCancelClick(params) {
    return { evid: 405, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesViewInvoicePageView' event (evid: 406)
 *
 * Event description: view invoice page view
 *
 * @param {quotesViewInvoicePageViewParams} params - The parameters for this event
 * @property {string} source - source
 * @property {string} no_of_payments - number of online payments available for this invoice
 * @property {string} paymentType - payment_type
 * @property {string} view_type - view_type
 * @property {boolean} is_visible - true if the pay invoice button is shown
 * @property {boolean} paid - true if invoice was paid
 * @property {string} origin - origin page
 * @property {string} invoiceSource - by app_def_id
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {GUID} invoice_id - invoice guid
 * @property {string} view - other/desktop/tablet/smartphone
 * @return {LogObject<quotesViewInvoicePageViewParams>} LogObject<quotesViewInvoicePageViewParams>
 */
export function quotesViewInvoicePageView(params) {
    return { evid: 406, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesChangeValue' event (evid: 407)
 *
 * Event description: change value
 *
 * @param {quotesChangeValueParams} params - The parameters for this event
 * @property {string} name - field name key (customer, email, subject, message, ..)
 * @property {string} view_type - view_type
 * @property {string} origin - name of page: create invoice, email invoice, settings
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {string} value - value of field
 * @property {GUID} invoice_id - invoice guid
 * @return {LogObject<quotesChangeValueParams>} LogObject<quotesChangeValueParams>
 */
export function quotesChangeValue(params) {
    return { evid: 407, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesCreateInvoiceSaveDraftClick' event (evid: 408)
 *
 * Event description: Create invoice - Save draft button click
 *
 * @param {quotesCreateInvoiceSaveDraftClickParams} params - The parameters for this event
 * @property {string} paymentType - 'one time','recurring'
 * @property {string} view_type - view_type
 * @property {string} invoiceType - ’recurringAutoCharge’/ 'recurring'/ 'one time'
 * @property {string} origin - create invoice, edit invoice,premium banner
 * @property {string} status - Creation form/Draft/Sent/Paid
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {GUID} invoice_id - invoice guid
 * @return {LogObject<quotesCreateInvoiceSaveDraftClickParams>} LogObject<quotesCreateInvoiceSaveDraftClickParams>
 */
export function quotesCreateInvoiceSaveDraftClick(params) {
    return { evid: 408, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesCreateInvoiceSaveDraftComplete' event (evid: 409)
 *
 * Event description: Create invoice - Save draft completed
 *
 * @param {quotesCreateInvoiceSaveDraftCompleteParams} params - The parameters for this event
 * @property {string} paymentType - 'one time','recurring'
 * @property {string} view_type - view_type
 * @property {string} origin - create invoice, edit invoice
 * @property {string} invoiceSource - by app_def_id
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {GUID} invoice_id - invoice guid
 * @return {LogObject<quotesCreateInvoiceSaveDraftCompleteParams>} LogObject<quotesCreateInvoiceSaveDraftCompleteParams>
 */
export function quotesCreateInvoiceSaveDraftComplete(params) {
    return { evid: 409, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardClickToggleSitesListInNavbar' event (evid: 41)
 *
 * Event description: dashboard > click toggle sites list in navbar.
 *
 * @param {dashboardClickToggleSitesListInNavbarParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @property {string} action - action
 * @return {LogObject<dashboardClickToggleSitesListInNavbarParams>} LogObject<dashboardClickToggleSitesListInNavbarParams>
 */
export function dashboardClickToggleSitesListInNavbar(params) {
    return { evid: 41, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesCreateInvoiceSaveDraftFailed' event (evid: 410)
 *
 * Event description: Create invoice - Save draft failed
 *
 * @param {quotesCreateInvoiceSaveDraftFailedParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} reason - failure reason
 * @property {string} origin - create invoice, edit invoice
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {GUID} invoice_id - invoice guid
 * @return {LogObject<quotesCreateInvoiceSaveDraftFailedParams>} LogObject<quotesCreateInvoiceSaveDraftFailedParams>
 */
export function quotesCreateInvoiceSaveDraftFailed(params) {
    return { evid: 410, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'submitGdprForm' event (evid: 4101)
 *
 * Event description: A user submits the GDPR form
 *
 * @param {submitGdprFormParams} params - The parameters for this event
 * @property {GUID} ticket_id - answers ticket id
 * @property {string} response_status - type of answers service request response (success/fail)
 * @property {string} request_type - type of a request (get/delete)
 * @property {number} response_time - time of answers service response (ms)
 * @property {DateTime} submission_date - submission date
 * @return {LogObject<submitGdprFormParams>} LogObject<submitGdprFormParams>
 */
export function submitGdprForm(params) {
    return { evid: 4101, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'submitGdprFormSrc5Evid4102' event (evid: 4102)
 *
 * Event description: A user submits the GDPR form
 *
 * @param {submitGdprFormSrc5Evid4102Params} params - The parameters for this event
 * @property {GUID} ticket_id - answers ticket id
 * @property {string} response_status - type of answers service request response (success/fail)
 * @property {string} request_type - type of a request (get/delete)
 * @property {number} response_time - time of answers service response (ms)
 * @property {DateTime} submission_date - submission date
 * @return {LogObject<submitGdprFormSrc5Evid4102Params>} LogObject<submitGdprFormSrc5Evid4102Params>
 */
export function submitGdprFormSrc5Evid4102(params) {
    return { evid: 4102, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesCreateInvoiceCancelClick' event (evid: 411)
 *
 * Event description: Create invoice - cancel click
 *
 * @param {quotesCreateInvoiceCancelClickParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} origin - button, navigation
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {GUID} invoice_id - invoice guid
 * @return {LogObject<quotesCreateInvoiceCancelClickParams>} LogObject<quotesCreateInvoiceCancelClickParams>
 */
export function quotesCreateInvoiceCancelClick(params) {
    return { evid: 411, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesCreateInvoiceAddLine' event (evid: 412)
 *
 * Event description: Create invoice - add line
 *
 * @param {quotesCreateInvoiceAddLineParams} params - The parameters for this event
 * @property {string} source - productSource
 * @property {string} view_type - view_type
 * @property {GUID} appDefId - appDefId
 * @property {string} invoiceType - ’recurringAutoCharge’/ 'recurring'/ 'one time'
 * @property {string} origin - create invoice, edit invoice
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {GUID} invoice_id - invoice guid
 * @return {LogObject<quotesCreateInvoiceAddLineParams>} LogObject<quotesCreateInvoiceAddLineParams>
 */
export function quotesCreateInvoiceAddLine(params) {
    return { evid: 412, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesCreateInvoiceDeleteLine' event (evid: 413)
 *
 * Event description: Create invoice - delete line
 *
 * @param {quotesCreateInvoiceDeleteLineParams} params - The parameters for this event
 * @property {string} source - source
 * @property {string} view_type - view_type
 * @property {string} invoiceType - ’recurringAutoCharge’/ 'recurring'/ 'one time'
 * @property {string} origin - create invoice, edit invoice
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {GUID} invoice_id - invoice guid
 * @return {LogObject<quotesCreateInvoiceDeleteLineParams>} LogObject<quotesCreateInvoiceDeleteLineParams>
 */
export function quotesCreateInvoiceDeleteLine(params) {
    return { evid: 413, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesNewProductClick' event (evid: 414)
 *
 * Event description: new product
 *
 * @param {quotesNewProductClickParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} invoiceType - ’recurringAutoCharge’/ 'recurring'/ 'one time'
 * @property {string} origin - product page, create invoice form
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<quotesNewProductClickParams>} LogObject<quotesNewProductClickParams>
 */
export function quotesNewProductClick(params) {
    return { evid: 414, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesNewProductSave' event (evid: 415)
 *
 * Event description: new product -save successful
 *
 * @param {quotesNewProductSaveParams} params - The parameters for this event
 * @property {number} price_long - product price
 * @property {string} description - description of the product
 * @property {string} view_type - view_type
 * @property {string} invoiceType - ’recurringAutoCharge’/ 'recurring'/ 'one time'
 * @property {string} product_name - name of the product
 * @property {string} origin - create,edit,select
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<quotesNewProductSaveParams>} LogObject<quotesNewProductSaveParams>
 */
export function quotesNewProductSave(params) {
    return { evid: 415, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesNewProductCancel' event (evid: 416)
 *
 * Event description: new product -cancel (for every close (cancel, x, background click))
 *
 * @param {quotesNewProductCancelParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} invoiceType - ’recurringAutoCharge’/ 'recurring'/ 'one time'
 * @property {string} origin - create,edit
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<quotesNewProductCancelParams>} LogObject<quotesNewProductCancelParams>
 */
export function quotesNewProductCancel(params) {
    return { evid: 416, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesEditProductClick' event (evid: 417)
 *
 * Event description: edit product
 *
 * @param {quotesEditProductClickParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<quotesEditProductClickParams>} LogObject<quotesEditProductClickParams>
 */
export function quotesEditProductClick(params) {
    return { evid: 417, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesDeleteProductClick' event (evid: 418)
 *
 * Event description: Delete product click
 *
 * @param {quotesDeleteProductClickParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<quotesDeleteProductClickParams>} LogObject<quotesDeleteProductClickParams>
 */
export function quotesDeleteProductClick(params) {
    return { evid: 418, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesDeleteProductPageOk' event (evid: 419)
 *
 * Event description: OK click in delete product page
 *
 * @param {quotesDeleteProductPageOkParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<quotesDeleteProductPageOkParams>} LogObject<quotesDeleteProductPageOkParams>
 */
export function quotesDeleteProductPageOk(params) {
    return { evid: 419, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardSiteQuickActionDialogApprove' event (evid: 42)
 *
 * Event description: user clicks approve in dialog of a quick action (e.g approve rename)
 *
 * @param {dashboardSiteQuickActionDialogApproveParams} params - The parameters for this event
 * @property {string} name - quick action name
 * @property {string} view_type - view_type
 * @property {string} origin - site-settings, my-sites
 * @property {string} platform - platform
 * @property {GUID} msid - -
 * @return {LogObject<dashboardSiteQuickActionDialogApproveParams>} LogObject<dashboardSiteQuickActionDialogApproveParams>
 */
export function dashboardSiteQuickActionDialogApprove(params) {
    return { evid: 42, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesDeleteProductPageCancel' event (evid: 420)
 *
 * Event description: cancel in delete product page (for every close (cancel, x, background click))
 *
 * @param {quotesDeleteProductPageCancelParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<quotesDeleteProductPageCancelParams>} LogObject<quotesDeleteProductPageCancelParams>
 */
export function quotesDeleteProductPageCancel(params) {
    return { evid: 420, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cookiesBannerBannerDisplayed' event (evid: 4200)
 *
 * Event description: cookies banner is displayed
 *
 * @param {cookiesBannerBannerDisplayedParams} params - The parameters for this event
 * @property {Url} url - url
 * @return {LogObject<cookiesBannerBannerDisplayedParams>} LogObject<cookiesBannerBannerDisplayedParams>
 */
export function cookiesBannerBannerDisplayed(params) {
    return { evid: 4200, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cookiesBannerPolicyApplied' event (evid: 4201)
 *
 * Event description: User's saved privacy policy settings
 *
 * @param {cookiesBannerPolicyAppliedParams} params - The parameters for this event
 * @property {Url} url - url
 * @property {boolean} third_party - on/off
 * @property {boolean} advertisement - on/off
 * @property {string} request_type - ccpa /cookies
 * @property {GUID} visitor_id - visitor id
 * @property {boolean} analytics - on/off
 * @property {boolean} functional - on/off
 * @return {LogObject<cookiesBannerPolicyAppliedParams>} LogObject<cookiesBannerPolicyAppliedParams>
 */
export function cookiesBannerPolicyApplied(params) {
    return { evid: 4201, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesEditInvoice' event (evid: 421)
 *
 * Event description: edit invoice
 *
 * @param {quotesEditInvoiceParams} params - The parameters for this event
 * @property {GUID} externalId - An external id of an entity, relevant to the invoiceSource application
 * @property {string} view_type - view_type
 * @property {GUID} appDefId - appDefId of the source
 * @property {string} origin - my invoices, preview, deposit paid
 * @property {string} status - Creation form/Draft/Sent/Paid
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {GUID} invoice_id - invoice guid
 * @return {LogObject<quotesEditInvoiceParams>} LogObject<quotesEditInvoiceParams>
 */
export function quotesEditInvoice(params) {
    return { evid: 421, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesPreviewInvoice' event (evid: 422)
 *
 * Event description: preview invoice
 *
 * @param {quotesPreviewInvoiceParams} params - The parameters for this event
 * @property {string} source - from where the invoice open {feed, more-->invoices}
 * @property {string} paymentType - one time, recurring
 * @property {string} view_type - view_type
 * @property {string} invoiceType - ’recurringAutoCharge’/ 'recurring'/ 'one time'
 * @property {string} origin - my invoices, edit invoice, widget
 * @property {string} status - Creation form/Draft/Sent/Paid
 * @property {string} origin_device - web,native
 * @property {string} invoiceSource - by app_def_id
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {GUID} invoice_id - invoice guid
 * @return {LogObject<quotesPreviewInvoiceParams>} LogObject<quotesPreviewInvoiceParams>
 */
export function quotesPreviewInvoice(params) {
    return { evid: 422, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesPrintInvoiceSrc5Evid423' event (evid: 423)
 *
 * Event description: print invoice
 *
 * @param {quotesPrintInvoiceSrc5Evid423Params} params - The parameters for this event
 * @property {GUID} externalId - An external id of an entity, relevant to the oridapplication
 * @property {string} paymentType - 'recurring','one time'
 * @property {string} view_type - view_type
 * @property {GUID} appDefId - appDefId (application ID)
 * @property {string} originPage - origin page - from which place this action was made (invoices, contacts full page, crm home...)
 * @property {string} origin - my invoices, preview
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {GUID} invoice_id - invoice guid
 * @return {LogObject<quotesPrintInvoiceSrc5Evid423Params>} LogObject<quotesPrintInvoiceSrc5Evid423Params>
 */
export function quotesPrintInvoiceSrc5Evid423(params) {
    return { evid: 423, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesAddPaymentClick' event (evid: 424)
 *
 * Event description: add payment for an invoice click
 *
 * @param {quotesAddPaymentClickParams} params - The parameters for this event
 * @property {GUID} externalId - An external id of an entity, relevant to the invoiceSource application
 * @property {string} view_type - view_type
 * @property {GUID} appDefId - appDefId of the source
 * @property {string} origin - my invoices,preview
 * @property {string} status - Creation form/Draft/Sent/Paid
 * @property {string} origin_device - web,native
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {GUID} invoice_id - invoice guid
 * @property {boolean} fully_paid - true for fully paid selected, false for partial payment selected
 * @return {LogObject<quotesAddPaymentClickParams>} LogObject<quotesAddPaymentClickParams>
 */
export function quotesAddPaymentClick(params) {
    return { evid: 424, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesAddPaymentPageOk' event (evid: 425)
 *
 * Event description: OK clicked in add payment page, fully_paid is true when the full amount is paid in one payment
 *
 * @param {quotesAddPaymentPageOkParams} params - The parameters for this event
 * @property {string} paymentMethod - payment method chosen
 * @property {string} view_type - view_type
 * @property {string} origin - my invoices,preview
 * @property {string} origin_device - web,native
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {GUID} invoice_id - invoice guid
 * @property {boolean} fully_paid - true for fully paid selected, false for partial payment selected
 * @return {LogObject<quotesAddPaymentPageOkParams>} LogObject<quotesAddPaymentPageOkParams>
 */
export function quotesAddPaymentPageOk(params) {
    return { evid: 425, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesAddPaymentPageCancel' event (evid: 426)
 *
 * Event description: cancel in add payment page (for every close (cancel, x, background click))
 *
 * @param {quotesAddPaymentPageCancelParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} origin - my invoices,preview
 * @property {string} origin_device - web,native
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {GUID} invoice_id - invoice guid
 * @return {LogObject<quotesAddPaymentPageCancelParams>} LogObject<quotesAddPaymentPageCancelParams>
 */
export function quotesAddPaymentPageCancel(params) {
    return { evid: 426, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesVoidPageOk' event (evid: 428)
 *
 * Event description: OK clicked in Void page
 *
 * @param {quotesVoidPageOkParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} origin_device - web,native
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {GUID} invoice_id - invoice guid
 * @return {LogObject<quotesVoidPageOkParams>} LogObject<quotesVoidPageOkParams>
 */
export function quotesVoidPageOk(params) {
    return { evid: 428, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesVoidPageCancel' event (evid: 429)
 *
 * Event description: cancel in Void page (for every close (cancel, x, background click))
 *
 * @param {quotesVoidPageCancelParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} origin_device - web,native
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {GUID} invoice_id - invoice guid
 * @return {LogObject<quotesVoidPageCancelParams>} LogObject<quotesVoidPageCancelParams>
 */
export function quotesVoidPageCancel(params) {
    return { evid: 429, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardSiteQuickActionDialogClose' event (evid: 43)
 *
 * Event description: user clicks cancel or X in dialog of a quick action (e.g cancel rename)
 *
 * @param {dashboardSiteQuickActionDialogCloseParams} params - The parameters for this event
 * @property {string} name - quick action name
 * @property {string} view_type - view_type
 * @property {string} origin - site-settings, my-sites
 * @property {string} platform - platform
 * @property {GUID} msid - -
 * @return {LogObject<dashboardSiteQuickActionDialogCloseParams>} LogObject<dashboardSiteQuickActionDialogCloseParams>
 */
export function dashboardSiteQuickActionDialogClose(params) {
    return { evid: 43, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesDeleteInvoiceClick' event (evid: 430)
 *
 * Event description: delete invoice click
 *
 * @param {quotesDeleteInvoiceClickParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} origin - Preview/my invoices
 * @property {string} status - Creation form/Draft/Sent/Paid
 * @property {string} origin_device - web,native
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {GUID} invoice_id - invoice guid
 * @return {LogObject<quotesDeleteInvoiceClickParams>} LogObject<quotesDeleteInvoiceClickParams>
 */
export function quotesDeleteInvoiceClick(params) {
    return { evid: 430, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesDeleteInvoicePageOk' event (evid: 431)
 *
 * Event description: OK clicked in delete page
 *
 * @param {quotesDeleteInvoicePageOkParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} origin_device - web,native
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {GUID} invoice_id - invoice guid
 * @return {LogObject<quotesDeleteInvoicePageOkParams>} LogObject<quotesDeleteInvoicePageOkParams>
 */
export function quotesDeleteInvoicePageOk(params) {
    return { evid: 431, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesDeleteInvoicePageCancel' event (evid: 432)
 *
 * Event description: cancel in delete page (for every close (cancel, x, background click))
 *
 * @param {quotesDeleteInvoicePageCancelParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} origin_device - web,native
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {GUID} invoice_id - invoice guid
 * @return {LogObject<quotesDeleteInvoicePageCancelParams>} LogObject<quotesDeleteInvoicePageCancelParams>
 */
export function quotesDeleteInvoicePageCancel(params) {
    return { evid: 432, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesSettingsNewTaxClick' event (evid: 433)
 *
 * Event description: Settings - New tax click
 *
 * @param {quotesSettingsNewTaxClickParams} params - The parameters for this event
 * @property {string} source - source
 * @property {string} view_type - view_type
 * @property {string} invoiceType - ’recurringAutoCharge’/ 'recurring'/ 'one time'
 * @property {string} origin - settings , create invoice, empty experience
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {GUID} invoice_id - invoice guid
 * @return {LogObject<quotesSettingsNewTaxClickParams>} LogObject<quotesSettingsNewTaxClickParams>
 */
export function quotesSettingsNewTaxClick(params) {
    return { evid: 433, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesSettingsNewTaxPageSave' event (evid: 434)
 *
 * Event description: Settings - New tax page - Save successful
 *
 * @param {quotesSettingsNewTaxPageSaveParams} params - The parameters for this event
 * @property {string} source - source
 * @property {string} view_type - view_type
 * @property {string} invoiceType - ’recurringAutoCharge’/ 'recurring'/ 'one time'
 * @property {string} origin - create,edit
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {GUID} invoice_id - invoice guid
 * @return {LogObject<quotesSettingsNewTaxPageSaveParams>} LogObject<quotesSettingsNewTaxPageSaveParams>
 */
export function quotesSettingsNewTaxPageSave(params) {
    return { evid: 434, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesSettingsNewTaxPageCancel' event (evid: 435)
 *
 * Event description: Settings - New tax page - Cancel (for every close (cancel, x, background click))
 *
 * @param {quotesSettingsNewTaxPageCancelParams} params - The parameters for this event
 * @property {string} source - source
 * @property {string} view_type - view_type
 * @property {string} invoiceType - ’recurringAutoCharge’/ 'recurring'/ 'one time'
 * @property {string} origin - create,edit
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {GUID} invoice_id - invoice guid
 * @return {LogObject<quotesSettingsNewTaxPageCancelParams>} LogObject<quotesSettingsNewTaxPageCancelParams>
 */
export function quotesSettingsNewTaxPageCancel(params) {
    return { evid: 435, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesEditTaxClick' event (evid: 436)
 *
 * Event description: edit tax click
 *
 * @param {quotesEditTaxClickParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<quotesEditTaxClickParams>} LogObject<quotesEditTaxClickParams>
 */
export function quotesEditTaxClick(params) {
    return { evid: 436, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesDeleteTaxClick' event (evid: 437)
 *
 * Event description: Delete tax click
 *
 * @param {quotesDeleteTaxClickParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<quotesDeleteTaxClickParams>} LogObject<quotesDeleteTaxClickParams>
 */
export function quotesDeleteTaxClick(params) {
    return { evid: 437, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesDeleteTaxPageOk' event (evid: 438)
 *
 * Event description: OK click in delete tax page
 *
 * @param {quotesDeleteTaxPageOkParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<quotesDeleteTaxPageOkParams>} LogObject<quotesDeleteTaxPageOkParams>
 */
export function quotesDeleteTaxPageOk(params) {
    return { evid: 438, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesDeleteTaxPageCancel' event (evid: 439)
 *
 * Event description: cancel in delete tax page (for every close (cancel, x, background click))
 *
 * @param {quotesDeleteTaxPageCancelParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<quotesDeleteTaxPageCancelParams>} LogObject<quotesDeleteTaxPageCancelParams>
 */
export function quotesDeleteTaxPageCancel(params) {
    return { evid: 439, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'myAccountClickOnHelp' event (evid: 44)
 *
 * Event description: User click on help center (Can be either from '?' button or account -->help center)
 *
 * @param {myAccountClickOnHelpParams} params - The parameters for this event
 * @property {string} page_view - my-sites /dashboard / account settings
 * @property {string} view_type - view_type
 * @property {string} origin_app - if dashboard then 'MAD'
 * @property {string} origin - origin
 * @property {string} app_id - app_id
 * @property {string} platform - platform
 * @return {LogObject<myAccountClickOnHelpParams>} LogObject<myAccountClickOnHelpParams>
 */
export function myAccountClickOnHelp(params) {
    return { evid: 44, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesShowPaymentPopupPage' event (evid: 440)
 *
 * Event description: Stripe popup is shown
 *
 * @param {quotesShowPaymentPopupPageParams} params - The parameters for this event
 * @property {string} name - name of payment
 * @property {string} view_type - view_type
 * @property {string} origin - how user arrived to the flow onboarding/payments
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<quotesShowPaymentPopupPageParams>} LogObject<quotesShowPaymentPopupPageParams>
 */
export function quotesShowPaymentPopupPage(params) {
    return { evid: 440, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesConnectPaymentClick' event (evid: 441)
 *
 * Event description: user clicks on 'connect' from the payment popup page
 *
 * @param {quotesConnectPaymentClickParams} params - The parameters for this event
 * @property {string} name - name of payment
 * @property {string} view_type - view_type
 * @property {string} origin - how user arrived to the flow onboarding/payments
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<quotesConnectPaymentClickParams>} LogObject<quotesConnectPaymentClickParams>
 */
export function quotesConnectPaymentClick(params) {
    return { evid: 441, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesCreateAnAccountOfPaymentProvider' event (evid: 442)
 *
 * Event description: user clicks on 'create an account' from the payment popup page
 *
 * @param {quotesCreateAnAccountOfPaymentProviderParams} params - The parameters for this event
 * @property {string} name - name of payment
 * @property {string} view_type - view_type
 * @property {string} origin - how user arrived to the flow onboarding/payments
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<quotesCreateAnAccountOfPaymentProviderParams>} LogObject<quotesCreateAnAccountOfPaymentProviderParams>
 */
export function quotesCreateAnAccountOfPaymentProvider(params) {
    return { evid: 442, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesNonValidPaypalAccountPopup' event (evid: 443)
 *
 * Event description: when a user has an old / non business paypal account and connection to paypal is not possible
 *
 * @param {quotesNonValidPaypalAccountPopupParams} params - The parameters for this event
 * @property {string} name - name of payment
 * @property {string} view_type - view_type
 * @property {string} origin - how user arrived to the flow
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<quotesNonValidPaypalAccountPopupParams>} LogObject<quotesNonValidPaypalAccountPopupParams>
 */
export function quotesNonValidPaypalAccountPopup(params) {
    return { evid: 443, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesNonValidPaypalAccountPopupClose' event (evid: 444)
 *
 * Event description: when a user closes the popup
 *
 * @param {quotesNonValidPaypalAccountPopupCloseParams} params - The parameters for this event
 * @property {string} name - name of payment
 * @property {string} view_type - view_type
 * @property {string} origin - how user arrived to the flow
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<quotesNonValidPaypalAccountPopupCloseParams>} LogObject<quotesNonValidPaypalAccountPopupCloseParams>
 */
export function quotesNonValidPaypalAccountPopupClose(params) {
    return { evid: 444, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesNonValidPaypalAccountPopupClickLink' event (evid: 445)
 *
 * Event description: when a user closes the popup
 *
 * @param {quotesNonValidPaypalAccountPopupClickLinkParams} params - The parameters for this event
 * @property {string} name - name of payment
 * @property {string} view_type - view_type
 * @property {string} origin - how user arrived to the flow
 * @property {string} link_type - create, upgrade, support
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<quotesNonValidPaypalAccountPopupClickLinkParams>} LogObject<quotesNonValidPaypalAccountPopupClickLinkParams>
 */
export function quotesNonValidPaypalAccountPopupClickLink(params) {
    return { evid: 445, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesSortInvoices' event (evid: 446)
 *
 * Event description: user clicks on a column to sort by it
 *
 * @param {quotesSortInvoicesParams} params - The parameters for this event
 * @property {string} name - name of field sorted by
 * @property {number} num_of_invoices - number of invoices the user has
 * @property {string} view_type - view_type
 * @property {string} order - desc/asc
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<quotesSortInvoicesParams>} LogObject<quotesSortInvoicesParams>
 */
export function quotesSortInvoices(params) {
    return { evid: 446, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesFilterInvoices' event (evid: 447)
 *
 * Event description: user filters the invoices view
 *
 * @param {quotesFilterInvoicesParams} params - The parameters for this event
 * @property {string} name - name of filter
 * @property {number} num_of_invoices - number of invoices the user has
 * @property {string} view_type - view_type
 * @property {string} origin_device - web,native
 * @property {string} platform - platform
 * @property {string} filter_type - period, currency, display
 * @property {string} msid - msid
 * @return {LogObject<quotesFilterInvoicesParams>} LogObject<quotesFilterInvoicesParams>
 */
export function quotesFilterInvoices(params) {
    return { evid: 447, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesSearchInvoices' event (evid: 448)
 *
 * Event description: user searches  in the invoices view
 *
 * @param {quotesSearchInvoicesParams} params - The parameters for this event
 * @property {number} num_of_invoices - number of invoices the user has
 * @property {string} view_type - view_type
 * @property {string} text - text searched
 * @property {number} num_of_results - number of returned results
 * @property {string} origin_device - web,native
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<quotesSearchInvoicesParams>} LogObject<quotesSearchInvoicesParams>
 */
export function quotesSearchInvoices(params) {
    return { evid: 448, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesDownloadPdf' event (evid: 449)
 *
 * Event description: click on save as PDF
 *
 * @param {quotesDownloadPdfParams} params - The parameters for this event
 * @property {string} paymentType - 'Recurring','One Time'
 * @property {string} view_type - view_type
 * @property {string} origin - customer for UoU, my invoices for users
 * @property {string} invoiceSource - by def_app_id
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {GUID} invoice_id - invoice guid
 * @return {LogObject<quotesDownloadPdfParams>} LogObject<quotesDownloadPdfParams>
 */
export function quotesDownloadPdf(params) {
    return { evid: 449, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardAccountSettingsImageAction' event (evid: 45)
 *
 * Event description: user changes profile image in account settings - can choose upload / remove image
 *
 * @param {dashboardAccountSettingsImageActionParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} action - {upload, remove}
 * @return {LogObject<dashboardAccountSettingsImageActionParams>} LogObject<dashboardAccountSettingsImageActionParams>
 */
export function dashboardAccountSettingsImageAction(params) {
    return { evid: 45, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesResendFromPreviewPage' event (evid: 450)
 *
 * Event description: Quotes - Resend from preview page
 *
 * @param {quotesResendFromPreviewPageParams} params - The parameters for this event
 * @property {GUID} externalId - An external id of an entity, relevant to the invoiceSource application
 * @property {string} view_type - view_type
 * @property {GUID} appDefId - appDefId (application ID)
 * @property {string} origin - origin page - from which place this action was made (invoices, contacts full page, crm home...)
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {GUID} invoice_id - invoice_guid
 * @return {LogObject<quotesResendFromPreviewPageParams>} LogObject<quotesResendFromPreviewPageParams>
 */
export function quotesResendFromPreviewPage(params) {
    return { evid: 450, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesRunReportClickGenerateReportClick' event (evid: 451)
 *
 * Event description: user clicks on run report in tax/revenue summary, this initiates the creation of a report. use 'name'  to choose tax or revenue.
 *
 * @param {quotesRunReportClickGenerateReportClickParams} params - The parameters for this event
 * @property {string} name - tax, revenue
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} basis - accural, cash
 * @property {string} msid - msid
 * @return {LogObject<quotesRunReportClickGenerateReportClickParams>} LogObject<quotesRunReportClickGenerateReportClickParams>
 */
export function quotesRunReportClickGenerateReportClick(params) {
    return { evid: 451, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesPrintReportClick' event (evid: 452)
 *
 * Event description: user clicks on print report in tax/revenue summary. use 'name'  to choose tax or revenue.
 *
 * @param {quotesPrintReportClickParams} params - The parameters for this event
 * @property {string} name - tax, revenue
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} basis - accural, cash
 * @property {string} msid - msid
 * @return {LogObject<quotesPrintReportClickParams>} LogObject<quotesPrintReportClickParams>
 */
export function quotesPrintReportClick(params) {
    return { evid: 452, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesExportReportClick' event (evid: 453)
 *
 * Event description: user clicks on export report in tax/revenue summary. use 'name'  to choose tax or revenue.
 *
 * @param {quotesExportReportClickParams} params - The parameters for this event
 * @property {string} name - tax, revenue
 * @property {string} view_type - view_type
 * @property {string} file_type - csv,pdf,excel
 * @property {string} platform - platform
 * @property {string} basis - accural, cash
 * @property {string} msid - msid
 * @return {LogObject<quotesExportReportClickParams>} LogObject<quotesExportReportClickParams>
 */
export function quotesExportReportClick(params) {
    return { evid: 453, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesPageView' event (evid: 454)
 *
 * Event description: viewing invoices page in Oneapp
 *
 * @param {quotesPageViewParams} params - The parameters for this event
 * @property {number} num_of_invoices - num_of_invoices
 * @property {string} view_type - view_type
 * @property {string} referral - the origin of navigation to this page {invoice card preview,direct}
 * @property {string} origin - deprecated
 * @property {number} num_of_contacts - num_of_contacts
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<quotesPageViewParams>} LogObject<quotesPageViewParams>
 */
export function quotesPageView(params) {
    return { evid: 454, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesManagePaymentsBannerDisplayed' event (evid: 455)
 *
 * Event description: manage payments banner is displayed in invoices app
 *
 * @param {quotesManagePaymentsBannerDisplayedParams} params - The parameters for this event
 * @property {string} name - banner name {manage payments}
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<quotesManagePaymentsBannerDisplayedParams>} LogObject<quotesManagePaymentsBannerDisplayedParams>
 */
export function quotesManagePaymentsBannerDisplayed(params) {
    return { evid: 455, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesDismissManagePaymentsBanner' event (evid: 456)
 *
 * Event description: dismiss manage payments banner
 *
 * @param {quotesDismissManagePaymentsBannerParams} params - The parameters for this event
 * @property {string} name - banner name {manage payments}
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<quotesDismissManagePaymentsBannerParams>} LogObject<quotesDismissManagePaymentsBannerParams>
 */
export function quotesDismissManagePaymentsBanner(params) {
    return { evid: 456, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesClickCtaInManagePaymentsBanner' event (evid: 457)
 *
 * Event description: User clicks on CTA (Payments) in manage payments banner
 *
 * @param {quotesClickCtaInManagePaymentsBannerParams} params - The parameters for this event
 * @property {string} name - banner name {manage payments}
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<quotesClickCtaInManagePaymentsBannerParams>} LogObject<quotesClickCtaInManagePaymentsBannerParams>
 */
export function quotesClickCtaInManagePaymentsBanner(params) {
    return { evid: 457, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesClickViewOrderBooking' event (evid: 458)
 *
 * Event description: click on view order/booking, when invoice was created from a stores order/booking
 *
 * @param {quotesClickViewOrderBookingParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} app_name - app name (stores/booking)
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {GUID} invoice_id - invoice guid
 * @return {LogObject<quotesClickViewOrderBookingParams>} LogObject<quotesClickViewOrderBookingParams>
 */
export function quotesClickViewOrderBooking(params) {
    return { evid: 458, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesInvoicesAutomaticallyCreateAndSendInvoices' event (evid: 459)
 *
 * Event description: User Clicked on 'Automatically create and send invoices for accepted price quotes' checkbox in Price Quotes/Invoices settings
 *
 * @param {quotesInvoicesAutomaticallyCreateAndSendInvoicesParams} params - The parameters for this event
 * @property {GUID} uuid - uuid
 * @property {string} view_type - view_type
 * @property {boolean} is_auto - {true/false}
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<quotesInvoicesAutomaticallyCreateAndSendInvoicesParams>} LogObject<quotesInvoicesAutomaticallyCreateAndSendInvoicesParams>
 */
export function quotesInvoicesAutomaticallyCreateAndSendInvoices(params) {
    return { evid: 459, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardAccountSettingsImageActionSuccess' event (evid: 46)
 *
 * Event description: image upload / remove success after user chooses action
 *
 * @param {dashboardAccountSettingsImageActionSuccessParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} action - {upload, remove}
 * @return {LogObject<dashboardAccountSettingsImageActionSuccessParams>} LogObject<dashboardAccountSettingsImageActionSuccessParams>
 */
export function dashboardAccountSettingsImageActionSuccess(params) {
    return { evid: 46, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesAddCustomerClick' event (evid: 460)
 *
 * Event description: Add Customer - Click
 *
 * @param {quotesAddCustomerClickParams} params - The parameters for this event
 * @property {GUID} uuid - uuid
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {GUID} invoice_id - invoice guid
 * @return {LogObject<quotesAddCustomerClickParams>} LogObject<quotesAddCustomerClickParams>
 */
export function quotesAddCustomerClick(params) {
    return { evid: 460, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesChooseACustomer' event (evid: 461)
 *
 * Event description: User Choose a Customer
 *
 * @param {quotesChooseACustomerParams} params - The parameters for this event
 * @property {GUID} uuid - uuid
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {boolean} is_new_contact - is_new_contact
 * @property {string} msid - msid
 * @property {GUID} invoice_id - invoice guid
 * @return {LogObject<quotesChooseACustomerParams>} LogObject<quotesChooseACustomerParams>
 */
export function quotesChooseACustomer(params) {
    return { evid: 461, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesRemoveCustomer' event (evid: 462)
 *
 * Event description: User remove customer from the invoice
 *
 * @param {quotesRemoveCustomerParams} params - The parameters for this event
 * @property {GUID} uuid - uuid
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {GUID} invoice_id - invoice guid
 * @return {LogObject<quotesRemoveCustomerParams>} LogObject<quotesRemoveCustomerParams>
 */
export function quotesRemoveCustomer(params) {
    return { evid: 462, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesDueDateUpdating' event (evid: 463)
 *
 * Event description: Invoice Due Date Updating
 *
 * @param {quotesDueDateUpdatingParams} params - The parameters for this event
 * @property {GUID} uuid - uuid
 * @property {string} view_type - view_type
 * @property {DateTime} due_date - due_date
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {GUID} invoice_id - invoice guid
 * @return {LogObject<quotesDueDateUpdatingParams>} LogObject<quotesDueDateUpdatingParams>
 */
export function quotesDueDateUpdating(params) {
    return { evid: 463, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesDateOfIssueUpdating' event (evid: 464)
 *
 * Event description: Invoice Date of Issue Updating
 *
 * @param {quotesDateOfIssueUpdatingParams} params - The parameters for this event
 * @property {GUID} uuid - uuid
 * @property {string} view_type - view_type
 * @property {DateTime} date_of_issue - date_of_issue
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {GUID} invoice_id - invoice guid
 * @return {LogObject<quotesDateOfIssueUpdatingParams>} LogObject<quotesDateOfIssueUpdatingParams>
 */
export function quotesDateOfIssueUpdating(params) {
    return { evid: 464, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesAddDiscount' event (evid: 465)
 *
 * Event description: user finish to add a discount
 *
 * @param {quotesAddDiscountParams} params - The parameters for this event
 * @property {GUID} uuid - uuid
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} discount - discount percentage
 * @property {string} msid - msid
 * @property {GUID} invoice_id - invoice guid
 * @return {LogObject<quotesAddDiscountParams>} LogObject<quotesAddDiscountParams>
 */
export function quotesAddDiscount(params) {
    return { evid: 465, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesChooseAProduct' event (evid: 466)
 *
 * Event description: Quotes - Choose a Product
 *
 * @param {quotesChooseAProductParams} params - The parameters for this event
 * @property {GUID} uuid - uuid
 * @property {string} view_type - view_type
 * @property {string} productSource - which vertical product was choosen ( Stores, Invoices, Bookings) App_def_id
 * @property {string} productName - product_name
 * @property {string} productId - product_id
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {GUID} invoice_id - invoice guid
 * @return {LogObject<quotesChooseAProductParams>} LogObject<quotesChooseAProductParams>
 */
export function quotesChooseAProduct(params) {
    return { evid: 466, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesRemoveProduct' event (evid: 467)
 *
 * Event description: Quotes - remove Product
 *
 * @param {quotesRemoveProductParams} params - The parameters for this event
 * @property {GUID} uuid - uuid
 * @property {string} view_type - view_type
 * @property {number} product_id - product_id
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {GUID} invoice_id - invoice guid
 * @return {LogObject<quotesRemoveProductParams>} LogObject<quotesRemoveProductParams>
 */
export function quotesRemoveProduct(params) {
    return { evid: 467, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesEditProductOrService' event (evid: 468)
 *
 * Event description: edit Product or service (line item)
 *
 * @param {quotesEditProductOrServiceParams} params - The parameters for this event
 * @property {GUID} uuid - uuid
 * @property {string} view_type - view_type
 * @property {number} product_id - product_id
 * @property {string} productName - product_name
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {GUID} invoice_id - invoice guid
 * @return {LogObject<quotesEditProductOrServiceParams>} LogObject<quotesEditProductOrServiceParams>
 */
export function quotesEditProductOrService(params) {
    return { evid: 468, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesSelectTax' event (evid: 469)
 *
 * Event description: Quotes - edit Product
 *
 * @param {quotesSelectTaxParams} params - The parameters for this event
 * @property {GUID} uuid - uuid
 * @property {number} taxRate - taxRate
 * @property {string} view_type - view_type
 * @property {string} tax_name - tax_name
 * @property {number} product_id - product_id
 * @property {string} contact_id - contact_id
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {GUID} invoice_id - invoice guid
 * @return {LogObject<quotesSelectTaxParams>} LogObject<quotesSelectTaxParams>
 */
export function quotesSelectTax(params) {
    return { evid: 469, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesAddingBusinessLogo' event (evid: 470)
 *
 * Event description: User added business logo (mobile)
 *
 * @param {quotesAddingBusinessLogoParams} params - The parameters for this event
 * @property {GUID} uuid - uuid
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<quotesAddingBusinessLogoParams>} LogObject<quotesAddingBusinessLogoParams>
 */
export function quotesAddingBusinessLogo(params) {
    return { evid: 470, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesAddingBusinessName' event (evid: 471)
 *
 * Event description: User added business logo (mobile)
 *
 * @param {quotesAddingBusinessNameParams} params - The parameters for this event
 * @property {GUID} uuid - uuid
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<quotesAddingBusinessNameParams>} LogObject<quotesAddingBusinessNameParams>
 */
export function quotesAddingBusinessName(params) {
    return { evid: 471, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesClickSaveOnAddBusinessDetailsPage' event (evid: 472)
 *
 * Event description: Click Save On Add Business Details Page (mobile)
 *
 * @param {quotesClickSaveOnAddBusinessDetailsPageParams} params - The parameters for this event
 * @property {GUID} uuid - uuid
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<quotesClickSaveOnAddBusinessDetailsPageParams>} LogObject<quotesClickSaveOnAddBusinessDetailsPageParams>
 */
export function quotesClickSaveOnAddBusinessDetailsPage(params) {
    return { evid: 472, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesBoardingPageClickClose' event (evid: 473)
 *
 * Event description: Quotes - Boarding Page - click close  (mobile)
 *
 * @param {quotesBoardingPageClickCloseParams} params - The parameters for this event
 * @property {GUID} uuid - uuid
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<quotesBoardingPageClickCloseParams>} LogObject<quotesBoardingPageClickCloseParams>
 */
export function quotesBoardingPageClickClose(params) {
    return { evid: 473, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesGetTheWixAppBannerDisplayed' event (evid: 474)
 *
 * Event description: Get the Wix app banner is displayed in invoices app
 *
 * @param {quotesGetTheWixAppBannerDisplayedParams} params - The parameters for this event
 * @property {string} name - banner name {get wix app}
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<quotesGetTheWixAppBannerDisplayedParams>} LogObject<quotesGetTheWixAppBannerDisplayedParams>
 */
export function quotesGetTheWixAppBannerDisplayed(params) {
    return { evid: 474, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesDismissGetWixAppBanner' event (evid: 475)
 *
 * Event description: dismiss get wix app banner
 *
 * @param {quotesDismissGetWixAppBannerParams} params - The parameters for this event
 * @property {string} name - banner name {get wix app}
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<quotesDismissGetWixAppBannerParams>} LogObject<quotesDismissGetWixAppBannerParams>
 */
export function quotesDismissGetWixAppBanner(params) {
    return { evid: 475, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesClickCtaInGetWixAppBanner' event (evid: 476)
 *
 * Event description: User clicks on CTA (get the wix app) in get wix app banner
 *
 * @param {quotesClickCtaInGetWixAppBannerParams} params - The parameters for this event
 * @property {string} name - banner name {get wix app}
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<quotesClickCtaInGetWixAppBannerParams>} LogObject<quotesClickCtaInGetWixAppBannerParams>
 */
export function quotesClickCtaInGetWixAppBanner(params) {
    return { evid: 476, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesPrintInvoiceSrc5Evid477' event (evid: 477)
 *
 * Event description: Quotes - Print Invoice
 *
 * @param {quotesPrintInvoiceSrc5Evid477Params} params - The parameters for this event
 * @property {string} paymentType - 'Recurring','One Time'
 * @property {string} view_type - view_type
 * @property {string} origin - customer for UoU, my invoices for users
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {GUID} invoice_id - invoice guid
 * @return {LogObject<quotesPrintInvoiceSrc5Evid477Params>} LogObject<quotesPrintInvoiceSrc5Evid477Params>
 */
export function quotesPrintInvoiceSrc5Evid477(params) {
    return { evid: 477, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesPayInvoiceClick' event (evid: 478)
 *
 * Event description: Quotes - Pay Invoice Click
 *
 * @param {quotesPayInvoiceClickParams} params - The parameters for this event
 * @property {number} totalAmountLong - total price multiplied by 100000
 * @property {GUID} externalId - An external id of an entity, relevant to the invoiceSource application
 * @property {string} paymentType - 'Recurring','One Time'
 * @property {string} view_type - view_type
 * @property {string} invoiceType - ’recurringAutoCharge’/ 'recurring'/ 'one time'
 * @property {string} origin - customer for UoU, my invoices for users
 * @property {GUID} invoiceSource - by app_def_id
 * @property {string} currency - currency
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {GUID} invoice_id - invoice guid
 * @return {LogObject<quotesPayInvoiceClickParams>} LogObject<quotesPayInvoiceClickParams>
 */
export function quotesPayInvoiceClick(params) {
    return { evid: 478, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesCloseManagePlanBillingTooltip' event (evid: 479)
 *
 * Event description: Quotes - Close manage plan billing tooltip
 *
 * @param {quotesCloseManagePlanBillingTooltipParams} params - The parameters for this event
 * @property {string} choose - 'Got it','Close'
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {GUID} invoice_id - invoice guid
 * @return {LogObject<quotesCloseManagePlanBillingTooltipParams>} LogObject<quotesCloseManagePlanBillingTooltipParams>
 */
export function quotesCloseManagePlanBillingTooltip(params) {
    return { evid: 479, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesCreateInvoiceToggleRecurring' event (evid: 480)
 *
 * Event description: Quotes - Create invoice - Toggle Recurring
 *
 * @param {quotesCreateInvoiceToggleRecurringParams} params - The parameters for this event
 * @property {boolean} toggle - true if it's Recurring on, false for oposite
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<quotesCreateInvoiceToggleRecurringParams>} LogObject<quotesCreateInvoiceToggleRecurringParams>
 */
export function quotesCreateInvoiceToggleRecurring(params) {
    return { evid: 480, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesPrintFromPreviewPage' event (evid: 481)
 *
 * Event description: Quotes - Resend from preview page
 *
 * @param {quotesPrintFromPreviewPageParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<quotesPrintFromPreviewPageParams>} LogObject<quotesPrintFromPreviewPageParams>
 */
export function quotesPrintFromPreviewPage(params) {
    return { evid: 481, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesPreviewFromInsideTheInvoiceCreation' event (evid: 482)
 *
 * Event description: Quotes - Preview from inside the invoice creation
 *
 * @param {quotesPreviewFromInsideTheInvoiceCreationParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<quotesPreviewFromInsideTheInvoiceCreationParams>} LogObject<quotesPreviewFromInsideTheInvoiceCreationParams>
 */
export function quotesPreviewFromInsideTheInvoiceCreation(params) {
    return { evid: 482, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesCancelFromInsideTheInvoiceCreation' event (evid: 483)
 *
 * Event description: Quotes - Cancel from inside the invoice creation.
 *
 * @param {quotesCancelFromInsideTheInvoiceCreationParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<quotesCancelFromInsideTheInvoiceCreationParams>} LogObject<quotesCancelFromInsideTheInvoiceCreationParams>
 */
export function quotesCancelFromInsideTheInvoiceCreation(params) {
    return { evid: 483, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesPreviewFromTable' event (evid: 484)
 *
 * Event description: Quotes - Preview from table
 *
 * @param {quotesPreviewFromTableParams} params - The parameters for this event
 * @property {GUID} externalId - An external id of an entity, relevant to the invoiceSource application
 * @property {string} view_type - view_type
 * @property {string} origin - origin page - from which place this action was made (invoices, contacts full page, crm home...)
 * @property {GUID} appdefid - appDefId (application ID)
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {GUID} invoice_id - invoice_guid
 * @return {LogObject<quotesPreviewFromTableParams>} LogObject<quotesPreviewFromTableParams>
 */
export function quotesPreviewFromTable(params) {
    return { evid: 484, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'mySitesEditSite' event (evid: 486)
 *
 * Event description: clicking on edit site in My Sites
 *
 * @param {mySitesEditSiteParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} ds_origin - destination - editor/ADI/editorX
 * @property {string} origin - {site_list_top, site_list_bottom, top_bar, account_templates,...}, site-list-partners-DIY
 * @property {string} view_level - view_level
 * @property {string} place - origin inside page
 * @property {boolean} is_premium - is_premium
 * @property {string} platform - platform
 * @property {string} hosting - hosting
 * @property {GUID} msid - msid
 * @property {boolean} is_published - is_published
 * @return {LogObject<mySitesEditSiteParams>} LogObject<mySitesEditSiteParams>
 */
export function mySitesEditSite(params) {
    return { evid: 486, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'sidebarCategoryItemsShown488' event (evid: 488)
 *
 * Event description: when a user hovers an item from the sidebar or when click on sidebar to expand and drop down is shown.
 *
 * @param {sidebarCategoryItemsShown488Params} params - The parameters for this event
 * @property {string} name - the active sidebar item the user hovers on (the unique name)/ click to expand on
 * @property {string} item_id - item_id
 * @property {string} hosting_platform - hosting_platform
 * @property {string} sidebar_name - the name appears in sidebar
 * @property {string} section_name - deprecated
 * @property {string} category_items_list - list of items viewed in the popup menu
 * @property {string} page_view - the page name of the page the user is in (the active page)
 * @property {string} view_type - view_type
 * @property {string} page_id - page_id
 * @property {string} sidebar_state - sidebar_state
 * @property {number} level_of_popover - level_of_popover
 * @property {string} origin - tooltip / sidebar
 * @property {string} disabled - disabled items
 * @property {string} platform - --
 * @property {string} hosting_platform_context_id - hosting_platform_context_id
 * @property {string} hosting - MA/editor/
 * @property {GUID} msid - site id
 * @return {LogObject<sidebarCategoryItemsShown488Params>} LogObject<sidebarCategoryItemsShown488Params>
 */
export function sidebarCategoryItemsShown488(params) {
    return { evid: 488, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'crmHomeCreateButtonClick' event (evid: 489)
 *
 * Event description: CRM Home - create button click
 *
 * @param {crmHomeCreateButtonClickParams} params - The parameters for this event
 * @property {GUID} uuid - uuid
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<crmHomeCreateButtonClickParams>} LogObject<crmHomeCreateButtonClickParams>
 */
export function crmHomeCreateButtonClick(params) {
    return { evid: 489, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'crmHomeCreateButtonChooseOption' event (evid: 490)
 *
 * Event description: CRM Home - create button choose option
 *
 * @param {crmHomeCreateButtonChooseOptionParams} params - The parameters for this event
 * @property {GUID} uuid - uuid
 * @property {string} option - which option the user choosed
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<crmHomeCreateButtonChooseOptionParams>} LogObject<crmHomeCreateButtonChooseOptionParams>
 */
export function crmHomeCreateButtonChooseOption(params) {
    return { evid: 490, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'crmHomeSecondaryCtaClick' event (evid: 491)
 *
 * Event description: CRM Home - secondary CTA click.
 *
 * @param {crmHomeSecondaryCtaClickParams} params - The parameters for this event
 * @property {GUID} uuid - uuid
 * @property {string} view_type - view_type
 * @property {string} tabName - which tab the user choosed
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<crmHomeSecondaryCtaClickParams>} LogObject<crmHomeSecondaryCtaClickParams>
 */
export function crmHomeSecondaryCtaClick(params) {
    return { evid: 491, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'crmHomeCarouselClick' event (evid: 492)
 *
 * Event description: CRM Home - carousel click
 *
 * @param {crmHomeCarouselClickParams} params - The parameters for this event
 * @property {GUID} uuid - uuid
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<crmHomeCarouselClickParams>} LogObject<crmHomeCarouselClickParams>
 */
export function crmHomeCarouselClick(params) {
    return { evid: 492, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'crmHomeManageYourFinancesChoose' event (evid: 493)
 *
 * Event description: CRM Home - manage your finances - choose.
 *
 * @param {crmHomeManageYourFinancesChooseParams} params - The parameters for this event
 * @property {GUID} uuid - uuid
 * @property {string} view_type - view_type
 * @property {string} tabName - which tab the user choose
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<crmHomeManageYourFinancesChooseParams>} LogObject<crmHomeManageYourFinancesChooseParams>
 */
export function crmHomeManageYourFinancesChoose(params) {
    return { evid: 493, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'crmHomeCustomerManagementToolsChoose' event (evid: 494)
 *
 * Event description: CRM Home - customer management tools - choose.
 *
 * @param {crmHomeCustomerManagementToolsChooseParams} params - The parameters for this event
 * @property {GUID} uuid - uuid
 * @property {string} view_type - view_type
 * @property {string} tabName - tab_name
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<crmHomeCustomerManagementToolsChooseParams>} LogObject<crmHomeCustomerManagementToolsChooseParams>
 */
export function crmHomeCustomerManagementToolsChoose(params) {
    return { evid: 494, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesSettingsChangeTabs' event (evid: 497)
 *
 * Event description: Quotes - Settings - change tabs
 *
 * @param {quotesSettingsChangeTabsParams} params - The parameters for this event
 * @property {string} tab - tab name
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<quotesSettingsChangeTabsParams>} LogObject<quotesSettingsChangeTabsParams>
 */
export function quotesSettingsChangeTabs(params) {
    return { evid: 497, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesSettingsSuccessToast' event (evid: 498)
 *
 * Event description: Quotes - Settings - success toast
 *
 * @param {quotesSettingsSuccessToastParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<quotesSettingsSuccessToastParams>} LogObject<quotesSettingsSuccessToastParams>
 */
export function quotesSettingsSuccessToast(params) {
    return { evid: 498, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'contactEnrichmentTemporaryEvent' event (evid: 499)
 *
 * Event description: contact enrichment requset
 *
 * @param {contactEnrichmentTemporaryEventParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {boolean} hasContacts - ignore this field
 * @property {string} origin - app that requested the enrichment
 * @property {string} pageView - ignore this field
 * @property {string} contact_id - contact id
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<contactEnrichmentTemporaryEventParams>} LogObject<contactEnrichmentTemporaryEventParams>
 */
export function contactEnrichmentTemporaryEvent(params) {
    return { evid: 499, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'helpWidgetClickOnSeeAllResults' event (evid: 5)
 *
 * Event description: when a user has clicked on a "see all result" at the bottom
 *
 * @param {helpWidgetClickOnSeeAllResultsParams} params - The parameters for this event
 * @property {string} query - query
 * @property {string} platform - --
 * @property {string} hosting - ADI/ MA/ editoe
 * @property {GUID} msid - msid
 * @return {LogObject<helpWidgetClickOnSeeAllResultsParams>} LogObject<helpWidgetClickOnSeeAllResultsParams>
 */
export function helpWidgetClickOnSeeAllResults(params) {
    return { evid: 5, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardClickOnConnectDomain' event (evid: 50)
 *
 * Event description: dashboard > click on connect domain.
 *
 * @param {dashboardClickOnConnectDomainParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} origin - origin
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<dashboardClickOnConnectDomainParams>} LogObject<dashboardClickOnConnectDomainParams>
 */
export function dashboardClickOnConnectDomain(params) {
    return { evid: 50, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardClickOnSelectPremiumPlan' event (evid: 51)
 *
 * Event description: dashboard > click on select premium plan.
 *
 * @param {dashboardClickOnSelectPremiumPlanParams} params - The parameters for this event
 * @property {string} referral_info - referral_info
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<dashboardClickOnSelectPremiumPlanParams>} LogObject<dashboardClickOnSelectPremiumPlanParams>
 */
export function dashboardClickOnSelectPremiumPlan(params) {
    return { evid: 51, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardClickBuyDomainFirst' event (evid: 52)
 *
 * Event description: dashboard > click buy domain first.
 *
 * @param {dashboardClickBuyDomainFirstParams} params - The parameters for this event
 * @property {string} referral_info - referral_info
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<dashboardClickBuyDomainFirstParams>} LogObject<dashboardClickBuyDomainFirstParams>
 */
export function dashboardClickBuyDomainFirst(params) {
    return { evid: 52, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardCloseConnectDomainPopUp' event (evid: 53)
 *
 * Event description: dashboard > close connect domain pop-up.
 *
 * @param {dashboardCloseConnectDomainPopUpParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} origin - origin
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<dashboardCloseConnectDomainPopUpParams>} LogObject<dashboardCloseConnectDomainPopUpParams>
 */
export function dashboardCloseConnectDomainPopUp(params) {
    return { evid: 53, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardBannerLoadingInit' event (evid: 54)
 *
 * Event description: Please add event for banners loading initiation (as we have for seeing, clicking and closing banners events src= 5 evid=14,34,36)
 *
 * @param {dashboardBannerLoadingInitParams} params - The parameters for this event
 * @property {string} name - banner name for identification
 * @property {string} view_type - view_type
 * @property {string} origin - origin
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<dashboardBannerLoadingInitParams>} LogObject<dashboardBannerLoadingInitParams>
 */
export function dashboardBannerLoadingInit(params) {
    return { evid: 54, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'engageEmailSettingsPageView' event (evid: 540)
 *
 * Event description: Quotes - Settings - error toast
 *
 * @param {engageEmailSettingsPageViewParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<engageEmailSettingsPageViewParams>} LogObject<engageEmailSettingsPageViewParams>
 */
export function engageEmailSettingsPageView(params) {
    return { evid: 540, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'engageEmailSettingsUpdateValue' event (evid: 541)
 *
 * Event description: Quotes - Settings - add new tax
 *
 * @param {engageEmailSettingsUpdateValueParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<engageEmailSettingsUpdateValueParams>} LogObject<engageEmailSettingsUpdateValueParams>
 */
export function engageEmailSettingsUpdateValue(params) {
    return { evid: 541, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'engageEmailSettingsSaveChangesClick' event (evid: 542)
 *
 * Event description: Quotes - Settings - edit tax
 *
 * @param {engageEmailSettingsSaveChangesClickParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<engageEmailSettingsSaveChangesClickParams>} LogObject<engageEmailSettingsSaveChangesClickParams>
 */
export function engageEmailSettingsSaveChangesClick(params) {
    return { evid: 542, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'engageEmailSettingsCancelBack' event (evid: 544)
 *
 * Event description: Quotes - Settings - delete tax
 *
 * @param {engageEmailSettingsCancelBackParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<engageEmailSettingsCancelBackParams>} LogObject<engageEmailSettingsCancelBackParams>
 */
export function engageEmailSettingsCancelBack(params) {
    return { evid: 544, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'engageEmailSettingsUnsavedChangesDialog' event (evid: 546)
 *
 * Event description: Quotes - click on share link
 *
 * @param {engageEmailSettingsUnsavedChangesDialogParams} params - The parameters for this event
 * @property {GUID} externalId - An external id of an entity, relevant to the invoiceSource application
 * @property {string} view_type - view_type
 * @property {GUID} invoiceId - invoiceId
 * @property {string} origin - more actions/invoice preview
 * @property {string} status - Creation form/Draft/Sent/Paid
 * @property {GUID} appdefid - appdefid of the source
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<engageEmailSettingsUnsavedChangesDialogParams>} LogObject<engageEmailSettingsUnsavedChangesDialogParams>
 */
export function engageEmailSettingsUnsavedChangesDialog(params) {
    return { evid: 546, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardBannerLoadingComplete' event (evid: 55)
 *
 * Event description: Please add event for banners loading completion (as we have for seeing, clicking and closing banners events src= 5 evid=14,34,36)
 *
 * @param {dashboardBannerLoadingCompleteParams} params - The parameters for this event
 * @property {string} name - banner name for identification
 * @property {string} view_type - view_type
 * @property {string} origin - origin
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<dashboardBannerLoadingCompleteParams>} LogObject<dashboardBannerLoadingCompleteParams>
 */
export function dashboardBannerLoadingComplete(params) {
    return { evid: 55, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'sideBarItemClick550' event (evid: 550)
 *
 * Event description: user clicks on an item from the sidebar in one of Giza's hosting platforms. currently in business manager it's not reported from Giza.
 *
 * @param {sideBarItemClick550Params} params - The parameters for this event
 * @property {string} name - unique item name that doesn't change when changing the name on the side bar
 * @property {GUID} prev_app_id - The app_id of the previous page/previous item (before clicking on item)
 * @property {string} item_id - item_id
 * @property {string} sub_section_name - when the sidebar is opened on a third level item- should represents the second level of the active name field, else=null
 * @property {string} hosting_platform - accountmanagr/bizmanagr/devcenter/etc.
 * @property {string} sidebar_name - deprecated
 * @property {string} section_name - the name of the source section (where the click occurred)
 * @property {string} previous_item_name - the previous unique item name that doesn't change when changing the name, this is the item which was highlighted before the click
 * @property {string} referral_info - referral parameter
 * @property {string} view_type - view_type
 * @property {boolean} is_from_main_sidebar - true if the click is from main sidebar and false if it's from sidebar dropdown tooltip
 * @property {string} sidebar_state - sidebar_state
 * @property {string} origin - tooltip / sidebar / add new
 * @property {string} sub_category_items_list - sub_category_items_list
 * @property {string} items_list - JSON of all the items the user saw in the sidebar when clicked on item- key:unique item name, value: number of notifications the user sees in this item. In case the type is navigated - please send the sidebar items list
 * @property {string} second_sub_category_items_list - when the sidebar is opened on a third level item- list of third level items in the expanded sidebar menu
 * @property {number} counter - The value inside the counter clicked (if counter exists)
 * @property {string} app_id - app_id of the item
 * @property {string} type - click/expand
 * @property {string} previous_sidebar_name - deprecated
 * @property {string} platform - platform
 * @property {string} hosting_platform_context_id - hosting_platform_context_id
 * @property {string} hosting - dashboard / editor / onboarding
 * @property {string} previous_item_id - previous_item_id
 * @property {GUID} msid - metasite id
 * @property {string} legacy_name - deprecated
 * @property {string} target_page_id - target_page_id
 * @return {LogObject<sideBarItemClick550Params>} LogObject<sideBarItemClick550Params>
 */
export function sideBarItemClick550(params) {
    return { evid: 550, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'bizManagerBizInfoFieldValueChangedNotSaved' event (evid: 551)
 *
 * Event description: user updates a field in the business info. reported only when field is out of focus
 *
 * @param {bizManagerBizInfoFieldValueChangedNotSavedParams} params - The parameters for this event
 * @property {string} name - name of field (key): business name, description, main category, sub category, etc
 * @property {string} sub_category - ADI business type of the selection in business info category
 * @property {string} hosting_platform - in case it's Wix studio Business info (account level business info page) then the value is 'my-account-2-dashboard' otherwise the value is null and it means it's BizMgr business info (site level business info)
 * @property {string} field_type - text, drop down, image, ..
 * @property {string} page_view - The page where the changes were made. before the new settings the page was only general info
 * @property {string} industry_id - industry_id of of the selected sub-category
 * @property {string} view_type - view_type
 * @property {string} structure_id - structure_id of the selected sub-category
 * @property {string} origin - app name
 * @property {string} category - category of of the selected sub-category
 * @property {string} fold_name - name of fold: basic info, contact info, location language and region,
 * @property {string} platform - platform
 * @property {string} location_details - 0- first location (create), 1-second location (add), 2- third location (add),...
 * @property {string} hosting - MA/editor
 * @property {GUID} msid - metasite id
 * @property {string} value - value of field: only for drop down fields
 * @return {LogObject<bizManagerBizInfoFieldValueChangedNotSavedParams>} LogObject<bizManagerBizInfoFieldValueChangedNotSavedParams>
 */
export function bizManagerBizInfoFieldValueChangedNotSaved(params) {
    return { evid: 551, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'bizManagerBizInfoClickOnSave' event (evid: 552)
 *
 * Event description: user saves changes in business info page
 *
 * @param {bizManagerBizInfoClickOnSaveParams} params - The parameters for this event
 * @property {string} name - list of fields, separated by commas
 * @property {string} hosting_platform - in case it's Wix studio Business info (account level business info page) then the value is 'my-account-2-dashboard' otherwise the value is null and it means it's BizMgr business info (site level business info)
 * @property {string} page_view - The page where the changes were made
 * @property {string} view_type - view_type
 * @property {string} origin - app
 * @property {string} place - place of save button: header, footer
 * @property {string} fold_name - list of fold names, separated by commas
 * @property {string} platform - platform
 * @property {string} location_details - 0- first location (create), 1-second location (add), 2- third location (add),...
 * @property {string} hosting - MA/editor
 * @property {GUID} msid - metasite id
 * @return {LogObject<bizManagerBizInfoClickOnSaveParams>} LogObject<bizManagerBizInfoClickOnSaveParams>
 */
export function bizManagerBizInfoClickOnSave(params) {
    return { evid: 552, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'bizManagerBizInfoSaveSuccess' event (evid: 553)
 *
 * Event description: changes were saved successfully
 *
 * @param {bizManagerBizInfoSaveSuccessParams} params - The parameters for this event
 * @property {string} name - list of fields, separated by commas
 * @property {string} sub_category - business type at the end
 * @property {string} hosting_platform - in case it's Wix studio Business info (account level business info page) then the value is 'my-account-2-dashboard' otherwise the value is null and it means it's BizMgr business info (site level business info)
 * @property {string} page_view - The page where the changes were made (website settings/business info/language and region)
 * @property {string} industry_id - industry_id of of the new sub-category
 * @property {string} view_type - view_type
 * @property {string} structure_id - structure_id of the new sub-category
 * @property {string} origin - app where modal was opened from
 * @property {string} category - category of of the new sub-category
 * @property {string} place - place of discard button: header, footer
 * @property {string} fold_name - list of fold names, separated by commas
 * @property {string} platform - platform
 * @property {string} location_details - 0- first location (create), 1-second location (add), 2- third location (add),...
 * @property {string} hosting - MA/editor
 * @property {GUID} msid - metasite id
 * @property {boolean} is_physical_address - true/false
 * @return {LogObject<bizManagerBizInfoSaveSuccessParams>} LogObject<bizManagerBizInfoSaveSuccessParams>
 */
export function bizManagerBizInfoSaveSuccess(params) {
    return { evid: 553, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'bizManagerBizInfoClickOnDiscardButton' event (evid: 554)
 *
 * Event description: user click on discard button
 *
 * @param {bizManagerBizInfoClickOnDiscardButtonParams} params - The parameters for this event
 * @property {string} hosting_platform - in case it's Wix studio Business info (account level business info page) then the value is 'my-account-2-dashboard' otherwise the value is null and it means it's BizMgr business info (site level business info)
 * @property {string} page_view - The page where the changes were made (website settings/business info/language and region)
 * @property {string} view_type - view_type
 * @property {string} origin - app
 * @property {string} place - place of discard button: header, footer
 * @property {string} platform - platform
 * @property {string} location_details - 0- first location (create), 1-second location (add), 2- third location (add),...
 * @property {string} hosting - MA/editor
 * @property {GUID} msid - metasite id
 * @return {LogObject<bizManagerBizInfoClickOnDiscardButtonParams>} LogObject<bizManagerBizInfoClickOnDiscardButtonParams>
 */
export function bizManagerBizInfoClickOnDiscardButton(params) {
    return { evid: 554, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'bizManagerBizInfoApproveDiscard' event (evid: 555)
 *
 * Event description: user approves to discard changes in the discard modal
 * or
 * user navigates away and doesn't want to keep changes
 *
 * @param {bizManagerBizInfoApproveDiscardParams} params - The parameters for this event
 * @property {string} hosting_platform - in case it's Wix studio Business info (account level business info page) then the value is 'my-account-2-dashboard' otherwise the value is null and it means it's BizMgr business info (site level business info)
 * @property {string} context - name of modal: discard modal, navigate away modal
 * @property {string} page_view - hosting: MA/editor/onboarding msid context: name of modal: discard modal, navigate away modal page_view: The page where the changes were made (website settings/business info/language and region)
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} hosting - MA/editor
 * @property {GUID} msid - metasite id
 * @return {LogObject<bizManagerBizInfoApproveDiscardParams>} LogObject<bizManagerBizInfoApproveDiscardParams>
 */
export function bizManagerBizInfoApproveDiscard(params) {
    return { evid: 555, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'bizManagerBizInfoCancelDiscard' event (evid: 556)
 *
 * Event description: user clicks on X or Cancel in the discard modal
 *
 * @param {bizManagerBizInfoCancelDiscardParams} params - The parameters for this event
 * @property {string} page_view - The page where the changes were made (website settings/business info/language and region)
 * @property {string} view_type - view_type
 * @property {string} origin - app
 * @property {string} platform - platform
 * @property {string} location_details - 0- first location (create), 1-second location (add), 2- third location (add),...
 * @property {string} hosting - MA/editor
 * @property {GUID} msid - metasite id
 * @return {LogObject<bizManagerBizInfoCancelDiscardParams>} LogObject<bizManagerBizInfoCancelDiscardParams>
 */
export function bizManagerBizInfoCancelDiscard(params) {
    return { evid: 556, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'bizManagerBizInfoNavigateAwayDialogIsShown' event (evid: 557)
 *
 * Event description: user navigates away and gets the navigate away modal
 *
 * @param {bizManagerBizInfoNavigateAwayDialogIsShownParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} hosting - MA/editor
 * @property {GUID} msid - metasite id
 * @return {LogObject<bizManagerBizInfoNavigateAwayDialogIsShownParams>} LogObject<bizManagerBizInfoNavigateAwayDialogIsShownParams>
 */
export function bizManagerBizInfoNavigateAwayDialogIsShown(params) {
    return { evid: 557, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'bizManagerBizInfoNavigateAwayStayInPage' event (evid: 558)
 *
 * Event description: user chooses to stay in page when the navigate away modal is shown
 *
 * @param {bizManagerBizInfoNavigateAwayStayInPageParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} hosting - MA/editor
 * @property {GUID} msid - metasite id
 * @return {LogObject<bizManagerBizInfoNavigateAwayStayInPageParams>} LogObject<bizManagerBizInfoNavigateAwayStayInPageParams>
 */
export function bizManagerBizInfoNavigateAwayStayInPage(params) {
    return { evid: 558, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'bizManagerBizInfoClickOnButton' event (evid: 559)
 *
 * Event description: user clicks a button, e.g "add logo", "add payment",  "edit shipping", etc.
 *
 * @param {bizManagerBizInfoClickOnButtonParams} params - The parameters for this event
 * @property {string} name - name of field (key): business name, description, main category, sub category, etc
 * @property {string} view_type - view_type
 * @property {string} fold_name - name of fold: basic info, contact info, location language and region,
 * @property {string} platform - platform
 * @property {string} hosting - MA/editor
 * @property {GUID} msid - metasite id
 * @return {LogObject<bizManagerBizInfoClickOnButtonParams>} LogObject<bizManagerBizInfoClickOnButtonParams>
 */
export function bizManagerBizInfoClickOnButton(params) {
    return { evid: 559, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'siteHistoryViewerNotLoaded' event (evid: 56)
 *
 * Event description: error on loading of the viewer iframe in site history
 *
 * @param {siteHistoryViewerNotLoadedParams} params - The parameters for this event
 * @property {string} referralInfo - editor / home
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @return {LogObject<siteHistoryViewerNotLoadedParams>} LogObject<siteHistoryViewerNotLoadedParams>
 */
export function siteHistoryViewerNotLoaded(params) {
    return { evid: 56, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'bizManagerBizInfoNavigateAwayLeaveThisPage' event (evid: 560)
 *
 * Event description: user chooses to leave the page when the navigate away modal is shown
 *
 * @param {bizManagerBizInfoNavigateAwayLeaveThisPageParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} hosting - MA/editor
 * @property {GUID} msid - metasite id
 * @return {LogObject<bizManagerBizInfoNavigateAwayLeaveThisPageParams>} LogObject<bizManagerBizInfoNavigateAwayLeaveThisPageParams>
 */
export function bizManagerBizInfoNavigateAwayLeaveThisPage(params) {
    return { evid: 560, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'bizManagerStartLoading' event (evid: 561)
 *
 * Event description: user click to open Biz manager
 *
 * @param {bizManagerStartLoadingParams} params - The parameters for this event
 * @property {GUID} context - when the context is site - send msid, when the context is app for example (like in devCenter) send appDefId, etc.
 * @property {string} view_type - view_type
 * @property {number} screen_width - screen width of the user screen
 * @property {boolean} initial_load - first load
 * @property {string} app_ids - all applications installed om Biz Mgr
 * @property {number} window_width - window width of the user screen
 * @property {number} loading_time_from_performance_now - loading_time_from_performance_now
 * @property {number} screen_height - screen height of the user screen
 * @property {string} app_id - --
 * @property {number} window_height - window height of the user screen
 * @property {string} platform - platform
 * @property {number} time_to_first_byte - time in ms until the first time the user sees any feedback rather than empty page
 * @property {string} hosting - from where the user opened Biz manager
 * @property {GUID} msid - metasite id
 * @return {LogObject<bizManagerStartLoadingParams>} LogObject<bizManagerStartLoadingParams>
 */
export function bizManagerStartLoading(params) {
    return { evid: 561, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'bizManagerFinishLoading' event (evid: 562)
 *
 * Event description: Biz Manager loaded successfully
 *
 * @param {bizManagerFinishLoadingParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {number} num_of_bundles - number of initials bundles from app template config
 * @property {boolean} initial_load - first load
 * @property {string} app_id - --
 * @property {string} platform - platform
 * @property {string} hosting - from where the user opened Biz manager
 * @property {GUID} msid - metasite id
 * @property {number} loading_time - loading time of page
 * @return {LogObject<bizManagerFinishLoadingParams>} LogObject<bizManagerFinishLoadingParams>
 */
export function bizManagerFinishLoading(params) {
    return { evid: 562, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'bizManagerModuleLoadingStart' event (evid: 564)
 *
 * Event description: module that is loaded in the biz manager (like Stores, Shoutout, etc.)
 *
 * @param {bizManagerModuleLoadingStartParams} params - The parameters for this event
 * @property {string} wixsession - authentication token. if the session exists, then the user is logged in.
 * @property {string} prev_module_id - last module loaded
 * @property {string} referral_info - specific button triggered the the view loading
 * @property {string} view_type - view_type
 * @property {boolean} initial_load - first load
 * @property {string} origin - specific button triggered the the view loading (== referral info from editor)
 * @property {GUID} app_id - application id
 * @property {string} platform - platform
 * @property {string} origin_app_id - origin_app_id (what app opened the bizmgr)
 * @property {string} hosting - MA/editor
 * @property {GUID} msid - metasite id
 * @property {string} module_id - requested module
 * @return {LogObject<bizManagerModuleLoadingStartParams>} LogObject<bizManagerModuleLoadingStartParams>
 */
export function bizManagerModuleLoadingStart(params) {
    return { evid: 564, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'bizManagerModuleLoadingFinish' event (evid: 565)
 *
 * Event description: module that is loaded in the biz manager (like Stores, Shoutout, etc.)
 *
 * @param {bizManagerModuleLoadingFinishParams} params - The parameters for this event
 * @property {string} wixsession - authentication token. if the session exists, then the user is logged in.
 * @property {string} referral_info - specific button triggered the the view loading
 * @property {string} view_type - view_type
 * @property {boolean} initial_load - first load
 * @property {string} origin - specific button triggered the the view loading (== referral info from editor)
 * @property {GUID} app_id - application id
 * @property {string} platform - platform
 * @property {string} origin_app_id - origin_app_id (what app opened the bizmgr)
 * @property {string} hosting - MA/editor
 * @property {GUID} msid - metasite id
 * @property {string} module_id - requested module
 * @property {number} loading_time - loading time from module loading start
 * @return {LogObject<bizManagerModuleLoadingFinishParams>} LogObject<bizManagerModuleLoadingFinishParams>
 */
export function bizManagerModuleLoadingFinish(params) {
    return { evid: 565, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'bizManagerNavigateToViewStart' event (evid: 566)
 *
 * Event description: user's click triggers the Router to start a navigation
 *
 * @param {bizManagerNavigateToViewStartParams} params - The parameters for this event
 * @property {string} wixsession - authentication token. if the session exists, then the user is logged in.
 * @property {string} prev_module_id - *not in use*
 * @property {string} referral_info - specific button that triggers the navigation
 * @property {string} view_type - view_type
 * @property {string} sub_view - page in app
 * @property {string} prev_view - last view loaded
 * @property {GUID} app_id - last  application loaded
 * @property {string} prev_sub_view - prev page in app
 * @property {string} platform - platform
 * @property {string} hosting - MA/editor
 * @property {GUID} msid - metasite id
 * @property {string} module_id - *not in use*
 * @property {string} view - requested view
 * @return {LogObject<bizManagerNavigateToViewStartParams>} LogObject<bizManagerNavigateToViewStartParams>
 */
export function bizManagerNavigateToViewStart(params) {
    return { evid: 566, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardClickOnCreatePriorityTicketExperts' event (evid: 57)
 *
 * Event description: User click on 'Create Priority Ticket' - available for Experts
 *
 * @param {dashboardClickOnCreatePriorityTicketExpertsParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} origin_app - if dashboard then 'MAD'
 * @property {string} origin - location of the click
 * @property {string} platform - platform
 * @return {LogObject<dashboardClickOnCreatePriorityTicketExpertsParams>} LogObject<dashboardClickOnCreatePriorityTicketExpertsParams>
 */
export function dashboardClickOnCreatePriorityTicketExperts(params) {
    return { evid: 57, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'bizManagerClickOnBackInSidebarItem' event (evid: 570)
 *
 * Event description: user clicks on back from the sidebar in the business manager
 *
 * @param {bizManagerClickOnBackInSidebarItemParams} params - The parameters for this event
 * @property {string} name - unique name that doesn't change when changing the name on the side bar
 * @property {string} sidebar_name - the name that appears in the sidebar - can be changed
 * @property {string} view_type - view_type
 * @property {string} app_id - app_id of the item
 * @property {string} platform - platform
 * @property {string} hosting - MA/editor
 * @property {GUID} msid - metasite id
 * @property {string} legacy_name - deprecated
 * @return {LogObject<bizManagerClickOnBackInSidebarItemParams>} LogObject<bizManagerClickOnBackInSidebarItemParams>
 */
export function bizManagerClickOnBackInSidebarItem(params) {
    return { evid: 570, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'bizManagerSetupWidgetIsDisplayed' event (evid: 573)
 *
 * Event description: TPA setup widget is displayed in biz mgr
 *
 * @param {bizManagerSetupWidgetIsDisplayedParams} params - The parameters for this event
 * @property {number} done_steps - number of done steps in setup
 * @property {string} asset_campaign_guid - asset_campaign_guid
 * @property {string} view_type - view_type
 * @property {number} skipped_steps - skipped_steps
 * @property {number} steps - number of steps in setup
 * @property {string} widget_state - minimized/expanded
 * @property {string} platform - platform
 * @property {string} hosting - MA/editor
 * @property {GUID} msid - metasite id
 * @property {string} module_id - module  name
 * @return {LogObject<bizManagerSetupWidgetIsDisplayedParams>} LogObject<bizManagerSetupWidgetIsDisplayedParams>
 */
export function bizManagerSetupWidgetIsDisplayed(params) {
    return { evid: 573, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'bizManagerMinimizeExpandSetupWidget' event (evid: 574)
 *
 * Event description: user minimizes/expands TPA setup widget in biz mgr
 *
 * @param {bizManagerMinimizeExpandSetupWidgetParams} params - The parameters for this event
 * @property {number} done_steps - number of done steps in setup
 * @property {string} view_type - view_type
 * @property {number} skipped_steps - skipped_steps
 * @property {string} app_id - app def id
 * @property {number} steps - number of steps in setup
 * @property {string} widget_state - minimized/expanded
 * @property {string} platform - platform
 * @property {string} hosting - MA/editor
 * @property {GUID} msid - metasite id
 * @property {string} module_id - module name
 * @return {LogObject<bizManagerMinimizeExpandSetupWidgetParams>} LogObject<bizManagerMinimizeExpandSetupWidgetParams>
 */
export function bizManagerMinimizeExpandSetupWidget(params) {
    return { evid: 574, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'bizManagerSetupWidgetShowMessageComplete' event (evid: 575)
 *
 * Event description: setup widget show message complete
 *
 * @param {bizManagerSetupWidgetShowMessageCompleteParams} params - The parameters for this event
 * @property {string} asset_campaign_guid - id for phase is setup- ids to be consistent with premium events
 * @property {string} view_type - view_type
 * @property {string} sub_view - page in app
 * @property {string} origin - light_box/progress_bar_popup
 * @property {string} platform - platform
 * @property {string} hosting - ADI/MA/editor
 * @property {GUID} msid - metasite id
 * @property {string} module_id - module name
 * @property {string} view - requested view
 * @return {LogObject<bizManagerSetupWidgetShowMessageCompleteParams>} LogObject<bizManagerSetupWidgetShowMessageCompleteParams>
 */
export function bizManagerSetupWidgetShowMessageComplete(params) {
    return { evid: 575, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'bizManagerSetupWidgetClickCtaAfterShowMessageComplete' event (evid: 576)
 *
 * Event description: Click CTA after show message complete
 *
 * @param {bizManagerSetupWidgetClickCtaAfterShowMessageCompleteParams} params - The parameters for this event
 * @property {string} asset_campaign_guid - asset_campaign_guid
 * @property {string} click_type - click/ close
 * @property {string} view_type - view_type
 * @property {string} origin - light_box/progress_bar_popup
 * @property {string} platform - platform
 * @property {string} hosting - ADI/MA/editor
 * @property {GUID} msid - metasite id
 * @property {string} module_id - module name
 * @return {LogObject<bizManagerSetupWidgetClickCtaAfterShowMessageCompleteParams>} LogObject<bizManagerSetupWidgetClickCtaAfterShowMessageCompleteParams>
 */
export function bizManagerSetupWidgetClickCtaAfterShowMessageComplete(params) {
    return { evid: 576, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'bizManagerDisplayAnalyticsWidget' event (evid: 577)
 *
 * Event description: Display the Widget only after Setup is complete or doesn't exist.
 *
 * @param {bizManagerDisplayAnalyticsWidgetParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} app_id - app id of the vertical that displays the widget.
 * @property {string} platform - platform
 * @property {string} hosting - ADI/MA/editor
 * @property {GUID} msid - metasite id
 * @property {string} module_id - module name
 * @return {LogObject<bizManagerDisplayAnalyticsWidgetParams>} LogObject<bizManagerDisplayAnalyticsWidgetParams>
 */
export function bizManagerDisplayAnalyticsWidget(params) {
    return { evid: 577, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'bizManagerClickOnHelpCenterInDashboardFooter' event (evid: 578)
 *
 * Event description: user click on help center in dashboard footer
 *
 * @param {bizManagerClickOnHelpCenterInDashboardFooterParams} params - The parameters for this event
 * @property {string} name - the item that was clicked {Help/Send feedback}
 * @property {string} view_type - view_type
 * @property {string} app_id - app_id installed on biz mgr [deprecated]
 * @property {string} platform - platform
 * @property {string} hosting - ADI/MA/editor
 * @return {LogObject<bizManagerClickOnHelpCenterInDashboardFooterParams>} LogObject<bizManagerClickOnHelpCenterInDashboardFooterParams>
 */
export function bizManagerClickOnHelpCenterInDashboardFooter(params) {
    return { evid: 578, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'bizManagerClickOnWidgetCta' event (evid: 579)
 *
 * Event description: user clicked on a CTA in TPA setup widget in biz mgr
 *
 * @param {bizManagerClickOnWidgetCtaParams} params - The parameters for this event
 * @property {number} done_steps - number of done steps in setup
 * @property {number} step_id - deprecated
 * @property {string} step - step id
 * @property {GUID} step_guid - deprecated
 * @property {string} view_type - view_type
 * @property {number} skipped_steps - skipped_steps
 * @property {string} app_id - app def id
 * @property {number} steps - number of steps in setup
 * @property {string} platform - platform
 * @property {string} hosting - MA/editor
 * @property {GUID} msid - metasite id
 * @property {string} module_id - module name
 * @return {LogObject<bizManagerClickOnWidgetCtaParams>} LogObject<bizManagerClickOnWidgetCtaParams>
 */
export function bizManagerClickOnWidgetCta(params) {
    return { evid: 579, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'transferSiteResendTransferEmailClick' event (evid: 58)
 *
 * Event description: user clicked on resend transfer email
 *
 * @param {transferSiteResendTransferEmailClickParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} hosting - MA /Editor
 * @property {GUID} msid - msid
 * @return {LogObject<transferSiteResendTransferEmailClickParams>} LogObject<transferSiteResendTransferEmailClickParams>
 */
export function transferSiteResendTransferEmailClick(params) {
    return { evid: 58, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'bizManagerHtmlLoaded' event (evid: 580)
 *
 * Event description: Biz Mgr Html loaded after user click to open an app
 *
 * @param {bizManagerHtmlLoadedParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {GUID} app_instance_id - --
 * @property {string} app_ids - app_ids
 * @property {string} platform - platform
 * @property {string} hosting - from where the user opened Biz manager {ADI/MA/Editor}
 * @property {GUID} msid - msid
 * @return {LogObject<bizManagerHtmlLoadedParams>} LogObject<bizManagerHtmlLoadedParams>
 */
export function bizManagerHtmlLoaded(params) {
    return { evid: 580, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'bizManagerViewStartLoading' event (evid: 581)
 *
 * Event description: View/Sub View Start loading
 *
 * @param {bizManagerViewStartLoadingParams} params - The parameters for this event
 * @property {string} referral_info - specific button triggered the the view loading
 * @property {string} view_type - view_type
 * @property {string} sub_view - page in app/module
 * @property {GUID} app_instance_id - --
 * @property {boolean} initial_load - True if first load
 * @property {string} app_ids - app_ids
 * @property {string} prev_view - origin view / module / app
 * @property {string} prev_sub_view - previous page in app/module
 * @property {string} platform - platform
 * @property {string} hosting - ADI/MA/editor
 * @property {GUID} msid - --
 * @property {string} view - requested view/ module/ app
 * @return {LogObject<bizManagerViewStartLoadingParams>} LogObject<bizManagerViewStartLoadingParams>
 */
export function bizManagerViewStartLoading(params) {
    return { evid: 581, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'bizManagerViewFinishLoading' event (evid: 582)
 *
 * Event description: View/Sub View Start loading
 *
 * @param {bizManagerViewFinishLoadingParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} sub_view - page in app
 * @property {GUID} app_instance_id - --
 * @property {boolean} initial_load - True if first load
 * @property {string} app_ids - app_ids
 * @property {string} prev_view - origin view
 * @property {string} prev_sub_view - prev page in app
 * @property {string} platform - platform
 * @property {string} hosting - ADI/MA/editor
 * @property {GUID} msid - --
 * @property {string} view - requested view
 * @property {number} loading_time - loading time of page , sent only if this is first load
 * @return {LogObject<bizManagerViewFinishLoadingParams>} LogObject<bizManagerViewFinishLoadingParams>
 */
export function bizManagerViewFinishLoading(params) {
    return { evid: 582, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'bizManagerClickLinkFromTooltip' event (evid: 584)
 *
 * Event description: user clicked on a link from the tooltip
 *
 * @param {bizManagerClickLinkFromTooltipParams} params - The parameters for this event
 * @property {string} name - link name
 * @property {string} click_type - click link / close
 * @property {string} view_type - view_type
 * @property {string} origin - The component that the tooltip appears on
 * @property {string} platform - platform
 * @property {string} hosting - Editor/MA
 * @property {GUID} msid - msid
 * @property {string} value - Link URL
 * @property {string} template_id - ping template id
 * @return {LogObject<bizManagerClickLinkFromTooltipParams>} LogObject<bizManagerClickLinkFromTooltipParams>
 */
export function bizManagerClickLinkFromTooltip(params) {
    return { evid: 584, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'bizManagerBusinessInfoMergeDialogShown' event (evid: 585)
 *
 * Event description: This dialog will alert the user about the change to his settings.
 * It will be displayed only in case of a conflict (my account and other verticals) in the merge process
 *
 * @param {bizManagerBusinessInfoMergeDialogShownParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} merged_apps - merged app def id, use delimiter "," between each app_id
 * @property {string} platform - platform
 * @property {string} hosting - MA/editor/ADI
 * @property {GUID} msid - metasite id
 * @return {LogObject<bizManagerBusinessInfoMergeDialogShownParams>} LogObject<bizManagerBusinessInfoMergeDialogShownParams>
 */
export function bizManagerBusinessInfoMergeDialogShown(params) {
    return { evid: 585, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'bizManagerBusinessInfoMergeDialogApprove' event (evid: 586)
 *
 * Event description: This dialog will alert the user about the change to his settings.
 * It will be displayed only in case of a conflict (my account and other verticals) in the merge process. This event represents approval of merging
 *
 * @param {bizManagerBusinessInfoMergeDialogApproveParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} merged_apps - merged app def id, use delimiter "," between each app_id
 * @property {string} platform - platform
 * @property {string} hosting - MA/editor/ADI
 * @property {GUID} msid - metasite id
 * @return {LogObject<bizManagerBusinessInfoMergeDialogApproveParams>} LogObject<bizManagerBusinessInfoMergeDialogApproveParams>
 */
export function bizManagerBusinessInfoMergeDialogApprove(params) {
    return { evid: 586, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'bizManagerBusinessInfoMergeDialogClose' event (evid: 587)
 *
 * Event description: This dialog will alert the user about the change to his settings.
 * It will be displayed only in case of a conflict (my account and other verticals) in the merge process. This event represents closing the dialog
 *
 * @param {bizManagerBusinessInfoMergeDialogCloseParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} merged_apps - merged app def id, use delimiter "," between each app_id
 * @property {string} platform - platform
 * @property {string} hosting - MA/editor/ADI
 * @property {GUID} msid - metasite id
 * @return {LogObject<bizManagerBusinessInfoMergeDialogCloseParams>} LogObject<bizManagerBusinessInfoMergeDialogCloseParams>
 */
export function bizManagerBusinessInfoMergeDialogClose(params) {
    return { evid: 587, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'managerFullStoryRecordingStarted' event (evid: 588)
 *
 * Event description: FullStory started recording session
 *
 * @param {managerFullStoryRecordingStartedParams} params - The parameters for this event
 * @property {Url} videoUrl - FullStory url
 * @property {string} view_type - view_type
 * @property {GUID} esi - esi
 * @property {string} platform - platform
 * @property {GUID} msid - metasite id
 * @return {LogObject<managerFullStoryRecordingStartedParams>} LogObject<managerFullStoryRecordingStartedParams>
 */
export function managerFullStoryRecordingStarted(params) {
    return { evid: 588, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'bizManagerDismissTooltip' event (evid: 589)
 *
 * Event description: tooltip is dismissed manually
 *
 * @param {bizManagerDismissTooltipParams} params - The parameters for this event
 * @property {string} name - tooltip name
 * @property {string} view_type - view_type
 * @property {string} place - where tooltip was shown (sidebar, rename dialog)
 * @property {string} platform - platform
 * @property {string} hosting - MA/editor
 * @property {GUID} msid - metasite id
 * @return {LogObject<bizManagerDismissTooltipParams>} LogObject<bizManagerDismissTooltipParams>
 */
export function bizManagerDismissTooltip(params) {
    return { evid: 589, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'transferSiteGetTransferLinkClick' event (evid: 59)
 *
 * Event description: user clicked on get transfer link
 *
 * @param {transferSiteGetTransferLinkClickParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} hosting - MA /Editor
 * @property {GUID} msid - msid
 * @return {LogObject<transferSiteGetTransferLinkClickParams>} LogObject<transferSiteGetTransferLinkClickParams>
 */
export function transferSiteGetTransferLinkClick(params) {
    return { evid: 59, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'bizManagerWhatSNextCloseVideoAsset' event (evid: 592)
 *
 * Event description: what's next video asset closed, with percentage watched
 *
 * @param {bizManagerWhatSNextCloseVideoAssetParams} params - The parameters for this event
 * @property {number} percentage - percentage watched 0-100
 * @property {GUID} group_id - the dealers group from which the asset is being chosen
 * @property {string} asset_campaign_guid - ids to be consistent with premium events
 * @property {GUID} item_id - assets guid
 * @property {string} view_type - view_type
 * @property {string} asset_location_on_page - (0,1,2,3)
 * @property {string} offering_guid - ids to be consistent with premium events
 * @property {number} asset_location_from_group_list - the priority of the asset (from 30)
 * @property {string} asset_campaign_id - ids to be consistent with premium events
 * @property {string} promotion_asset_type - video
 * @property {string} platform - platform
 * @property {string} hosting - ADI/MA/editor
 * @property {GUID} msid - meta site guid
 * @return {LogObject<bizManagerWhatSNextCloseVideoAssetParams>} LogObject<bizManagerWhatSNextCloseVideoAssetParams>
 */
export function bizManagerWhatSNextCloseVideoAsset(params) {
    return { evid: 592, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'bizManagerShowUrgentMessages' event (evid: 593)
 *
 * Event description: show urgent messages
 *
 * @param {bizManagerShowUrgentMessagesParams} params - The parameters for this event
 * @property {string} asset_campaign_guid - ids to be consistent with premium events
 * @property {string} view_type - view_type
 * @property {string} offering_guid - ids to be consistent with premium events
 * @property {string} asset_campaign_id - ids to be consistent with premium events
 * @property {string} platform - platform
 * @property {string} hosting - ADI/MA/editor
 * @property {GUID} msid - site guid
 * @return {LogObject<bizManagerShowUrgentMessagesParams>} LogObject<bizManagerShowUrgentMessagesParams>
 */
export function bizManagerShowUrgentMessages(params) {
    return { evid: 593, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'bizManagerUrgentMessagesClicked' event (evid: 594)
 *
 * Event description: urgent messages clicked
 *
 * @param {bizManagerUrgentMessagesClickedParams} params - The parameters for this event
 * @property {string} asset_campaign_guid - ids to be consistent with premium events
 * @property {string} click_type - click/ close
 * @property {string} view_type - view_type
 * @property {string} offering_guid - ids to be consistent with premium events
 * @property {string} asset_campaign_id - ids to be consistent with premium events
 * @property {string} platform - platform
 * @property {string} hosting - ADI/MA/editor
 * @property {GUID} msid - site guid
 * @return {LogObject<bizManagerUrgentMessagesClickedParams>} LogObject<bizManagerUrgentMessagesClickedParams>
 */
export function bizManagerUrgentMessagesClicked(params) {
    return { evid: 594, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'bizManagerDashboardAssetClickOnArrow' event (evid: 597)
 *
 * Event description: asset click on arrow
 *
 * @param {bizManagerDashboardAssetClickOnArrowParams} params - The parameters for this event
 * @property {string} asset_campaign_guid - ids to be consistent with premium events
 * @property {string} click_type - left / right/ link
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} hosting - ADI/MA/editor
 * @property {GUID} msid - site guid
 * @return {LogObject<bizManagerDashboardAssetClickOnArrowParams>} LogObject<bizManagerDashboardAssetClickOnArrowParams>
 */
export function bizManagerDashboardAssetClickOnArrow(params) {
    return { evid: 597, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'bizManagerOpenPanelStart' event (evid: 598)
 *
 * Event description: panel is starting to load
 *
 * @param {bizManagerOpenPanelStartParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} panel_name - the panel that was opened
 * @property {string} sub_view - page in app
 * @property {string} contact_id - contact_id
 * @property {string} platform - platform
 * @property {string} hosting - MA/editor
 * @property {GUID} msid - msid
 * @property {string} view - requested view
 * @return {LogObject<bizManagerOpenPanelStartParams>} LogObject<bizManagerOpenPanelStartParams>
 */
export function bizManagerOpenPanelStart(params) {
    return { evid: 598, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'bizManagerOpenPanelFinish' event (evid: 599)
 *
 * Event description: panel is starting to load
 *
 * @param {bizManagerOpenPanelFinishParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} panel_name - the panel that was opened
 * @property {string} sub_view - page in app
 * @property {string} contact_id - contact_id
 * @property {string} platform - platform
 * @property {string} hosting - MA/editor
 * @property {number} loading_time_from_interactive - loading_time_from_interactive (from 657)
 * @property {GUID} msid - msid
 * @property {string} initiator - click on contact name/ i button
 * @property {string} view - requested view
 * @property {number} loading_time - time from start opening the panel till end
 * @return {LogObject<bizManagerOpenPanelFinishParams>} LogObject<bizManagerOpenPanelFinishParams>
 */
export function bizManagerOpenPanelFinish(params) {
    return { evid: 599, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'helpWidgetErrorSearchingItems' event (evid: 6)
 *
 * Event description: When a user has searched a query and there was a search error send event
 *
 * @param {helpWidgetErrorSearchingItemsParams} params - The parameters for this event
 * @property {string} query - query
 * @property {string} platform - --
 * @property {string} hosting - ADI/ MA/ editoe
 * @property {GUID} msid - msid
 * @return {LogObject<helpWidgetErrorSearchingItemsParams>} LogObject<helpWidgetErrorSearchingItemsParams>
 */
export function helpWidgetErrorSearchingItems(params) {
    return { evid: 6, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'transferSiteCancelTransferClick' event (evid: 60)
 *
 * Event description: user clicked on cancel transfer and cancel dialog is opened
 *
 * @param {transferSiteCancelTransferClickParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} hosting - MA /Editor
 * @property {GUID} msid - msid
 * @return {LogObject<transferSiteCancelTransferClickParams>} LogObject<transferSiteCancelTransferClickParams>
 */
export function transferSiteCancelTransferClick(params) {
    return { evid: 60, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dummyEventForSiteMembers' event (evid: 600)
 *
 * Event description: user / app closed the panel
 *
 * @param {dummyEventForSiteMembersParams} params - The parameters for this event
 * @property {string} source - X button / app / navigation
 * @property {string} view_type - view_type
 * @property {string} panel_name - the panel that was opened
 * @property {string} sub_view - page in app
 * @property {string} platform - platform
 * @property {string} hosting - MA/editor
 * @property {GUID} msid - msid
 * @property {string} initiator - contact name/ i button
 * @property {string} view - requested view
 * @return {LogObject<dummyEventForSiteMembersParams>} LogObject<dummyEventForSiteMembersParams>
 */
export function dummyEventForSiteMembers(params) {
    return { evid: 600, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'transferSiteCancelTransferClickApprove' event (evid: 61)
 *
 * Event description: user clicks approve cancel transfer
 *
 * @param {transferSiteCancelTransferClickApproveParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} hosting - MA /Editor
 * @property {GUID} msid - msid
 * @return {LogObject<transferSiteCancelTransferClickApproveParams>} LogObject<transferSiteCancelTransferClickApproveParams>
 */
export function transferSiteCancelTransferClickApprove(params) {
    return { evid: 61, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'transferSiteCancelTransferAbort' event (evid: 62)
 *
 * Event description: user clicks on "don't cancel transfer" or closes dialog with x
 *
 * @param {transferSiteCancelTransferAbortParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} hosting - MA /Editor
 * @property {GUID} msid - msid
 * @return {LogObject<transferSiteCancelTransferAbortParams>} LogObject<transferSiteCancelTransferAbortParams>
 */
export function transferSiteCancelTransferAbort(params) {
    return { evid: 62, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'transferSiteReceiverOpenCompleteTransferDialog' event (evid: 64)
 *
 * Event description: receiver clicked on accept transfer from mail, the dashboard is open and an complete transfer dialog is open
 *
 * @param {transferSiteReceiverOpenCompleteTransferDialogParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} hosting - MA/Editor
 * @property {GUID} msid - msid
 * @return {LogObject<transferSiteReceiverOpenCompleteTransferDialogParams>} LogObject<transferSiteReceiverOpenCompleteTransferDialogParams>
 */
export function transferSiteReceiverOpenCompleteTransferDialog(params) {
    return { evid: 64, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesNewQuoteClick' event (evid: 65)
 *
 * Event description: Click on create new quote
 *
 * @param {quotesNewQuoteClickParams} params - The parameters for this event
 * @property {GUID} original_quoteId - in case of duplicate: original quote guid
 * @property {string} view_type - view_type
 * @property {string} origin - origin page
 * @property {string} platform - bm/mobile. null indicates bm
 * @property {string} msid - msid
 * @property {GUID} quoteId - quote_guid
 * @return {LogObject<quotesNewQuoteClickParams>} LogObject<quotesNewQuoteClickParams>
 */
export function quotesNewQuoteClick(params) {
    return { evid: 65, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'bizManagerClickOnSetupSkipUndo' event (evid: 656)
 *
 * Event description: user clicked on a CTA in TPA setup widget in biz mgr
 *
 * @param {bizManagerClickOnSetupSkipUndoParams} params - The parameters for this event
 * @property {number} done_steps - number of done steps in setup
 * @property {number} step_id - deprecated
 * @property {string} step - step id
 * @property {string} click_type - skip/undo
 * @property {GUID} step_guid - deprecated
 * @property {string} view_type - view_type
 * @property {number} skipped_steps - skipped_steps
 * @property {string} app_id - app_id
 * @property {number} steps - number of steps in setup
 * @property {string} platform - platform
 * @property {string} hosting - MA/editor
 * @property {GUID} msid - metasite id
 * @property {string} module_id - module name
 * @return {LogObject<bizManagerClickOnSetupSkipUndoParams>} LogObject<bizManagerClickOnSetupSkipUndoParams>
 */
export function bizManagerClickOnSetupSkipUndo(params) {
    return { evid: 656, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'bizManagerOpenPanelInteractive' event (evid: 657)
 *
 * Event description: panel is interactive
 *
 * @param {bizManagerOpenPanelInteractiveParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} panel_name - the panel that was opened
 * @property {string} sub_view - page in app
 * @property {string} platform - platform
 * @property {string} hosting - MA/editor
 * @property {GUID} msid - msid
 * @property {string} view - requested view
 * @property {number} loading_time - time from start opening the panel till interactive
 * @return {LogObject<bizManagerOpenPanelInteractiveParams>} LogObject<bizManagerOpenPanelInteractiveParams>
 */
export function bizManagerOpenPanelInteractive(params) {
    return { evid: 657, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardAccountSettingsHoverOverSendConfirmationI' event (evid: 66)
 *
 * Event description: user hovers the i of 'send confirmation email'
 *
 * @param {dashboardAccountSettingsHoverOverSendConfirmationIParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @return {LogObject<dashboardAccountSettingsHoverOverSendConfirmationIParams>} LogObject<dashboardAccountSettingsHoverOverSendConfirmationIParams>
 */
export function dashboardAccountSettingsHoverOverSendConfirmationI(params) {
    return { evid: 66, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'phoneVerificationHoverOnMotivation' event (evid: 660)
 *
 * Event description: hover on "why add a mobile number?"
 *
 * @param {phoneVerificationHoverOnMotivationParams} params - The parameters for this event
 * @property {GUID} uuid - uuid
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @return {LogObject<phoneVerificationHoverOnMotivationParams>} LogObject<phoneVerificationHoverOnMotivationParams>
 */
export function phoneVerificationHoverOnMotivation(params) {
    return { evid: 660, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'mobilePhoneNumberConfirmationPopUpClickOkForSendingSms' event (evid: 661)
 *
 * Event description: request for sms has sent
 *
 * @param {mobilePhoneNumberConfirmationPopUpClickOkForSendingSmsParams} params - The parameters for this event
 * @property {GUID} uuid - uuid
 * @property {string} hashed_phone - hashed_phone
 * @property {string} view_type - view_type
 * @property {string} origin - send / resend
 * @property {string} mode - add/edit
 * @property {string} platform - platform
 * @return {LogObject<mobilePhoneNumberConfirmationPopUpClickOkForSendingSmsParams>} LogObject<mobilePhoneNumberConfirmationPopUpClickOkForSendingSmsParams>
 */
export function mobilePhoneNumberConfirmationPopUpClickOkForSendingSms(params) {
    return { evid: 661, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'mobilePhoneNumberConfirmationPopUpClickConfirmForSmsCode' event (evid: 662)
 *
 * Event description: the final user confirmation before the server validates the number
 *
 * @param {mobilePhoneNumberConfirmationPopUpClickConfirmForSmsCodeParams} params - The parameters for this event
 * @property {GUID} uuid - uuid
 * @property {string} hashed_phone - hashed_phone
 * @property {string} view_type - view_type
 * @property {string} code - confirmation code
 * @property {string} mode - add/edit
 * @property {string} platform - platform
 * @return {LogObject<mobilePhoneNumberConfirmationPopUpClickConfirmForSmsCodeParams>} LogObject<mobilePhoneNumberConfirmationPopUpClickConfirmForSmsCodeParams>
 */
export function mobilePhoneNumberConfirmationPopUpClickConfirmForSmsCode(params) {
    return { evid: 662, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'phoneVerificationPhoneValidation' event (evid: 665)
 *
 * Event description: after inserting the password, the wizard opens.
 *
 * @param {phoneVerificationPhoneValidationParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @return {LogObject<phoneVerificationPhoneValidationParams>} LogObject<phoneVerificationPhoneValidationParams>
 */
export function phoneVerificationPhoneValidation(params) {
    return { evid: 665, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'phoneVerificationCodeValidation' event (evid: 666)
 *
 * Event description: validates the code entered
 *
 * @param {phoneVerificationCodeValidationParams} params - The parameters for this event
 * @property {GUID} uuid - uuid
 * @property {string} view_type - view_type
 * @property {string} validstatus - good, expired, wrong, error
 * @property {string} platform - platform
 * @return {LogObject<phoneVerificationCodeValidationParams>} LogObject<phoneVerificationCodeValidationParams>
 */
export function phoneVerificationCodeValidation(params) {
    return { evid: 666, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'mobilePhoneNumberConfirmationOpenPopUp' event (evid: 667)
 *
 * Event description: the first trigger to open the confirmation pop up. can come from "save changes" or by "confirm your phone"
 *
 * @param {mobilePhoneNumberConfirmationOpenPopUpParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @return {LogObject<mobilePhoneNumberConfirmationOpenPopUpParams>} LogObject<mobilePhoneNumberConfirmationOpenPopUpParams>
 */
export function mobilePhoneNumberConfirmationOpenPopUp(params) {
    return { evid: 667, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardAccountSettingsClickLearnMoreInI' event (evid: 67)
 *
 * Event description: user clicks 'learn more' in i
 *
 * @param {dashboardAccountSettingsClickLearnMoreInIParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @return {LogObject<dashboardAccountSettingsClickLearnMoreInIParams>} LogObject<dashboardAccountSettingsClickLearnMoreInIParams>
 */
export function dashboardAccountSettingsClickLearnMoreInI(params) {
    return { evid: 67, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'bizManagerNewBadgeShow' event (evid: 673)
 *
 * Event description: 'new' badge show on the sidebar
 *
 * @param {bizManagerNewBadgeShowParams} params - The parameters for this event
 * @property {string} name - unique name that doesn't change when changing the name on the side bar
 * @property {string} sidebar_name - the name that appears in the sidebar - can be changed
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} hosting - MA/editor
 * @property {GUID} msid - metasite id
 * @return {LogObject<bizManagerNewBadgeShowParams>} LogObject<bizManagerNewBadgeShowParams>
 */
export function bizManagerNewBadgeShow(params) {
    return { evid: 673, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'mobilePhoneNumberConfirmationClickOnEdit' event (evid: 678)
 *
 * Event description: Update recovery phone number (account settings redesign) - click on edit number
 *
 * @param {mobilePhoneNumberConfirmationClickOnEditParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @return {LogObject<mobilePhoneNumberConfirmationClickOnEditParams>} LogObject<mobilePhoneNumberConfirmationClickOnEditParams>
 */
export function mobilePhoneNumberConfirmationClickOnEdit(params) {
    return { evid: 678, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'accountSettingsClickOnManagePreferences' event (evid: 679)
 *
 * Event description: The user clicks on 'manage preferences' in account settings (redesign)
 *
 * @param {accountSettingsClickOnManagePreferencesParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @return {LogObject<accountSettingsClickOnManagePreferencesParams>} LogObject<accountSettingsClickOnManagePreferencesParams>
 */
export function accountSettingsClickOnManagePreferences(params) {
    return { evid: 679, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardAccountSettingsClickSendConfirmation' event (evid: 68)
 *
 * Event description: user click send confirmation in account settings
 *
 * @param {dashboardAccountSettingsClickSendConfirmationParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @return {LogObject<dashboardAccountSettingsClickSendConfirmationParams>} LogObject<dashboardAccountSettingsClickSendConfirmationParams>
 */
export function dashboardAccountSettingsClickSendConfirmation(params) {
    return { evid: 68, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'accountSettingsDeactivateAccountClickOnLearnMore' event (evid: 680)
 *
 * Event description: The user clicks on 'Learn more' after clicking the "i" icon, in account settings (redesign), in a few possible locations on the page
 *
 * @param {accountSettingsDeactivateAccountClickOnLearnMoreParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} section - deactivate account/recovery phone/two factor authentication/2FA disable/username/email address
 * @property {string} platform - platform
 * @return {LogObject<accountSettingsDeactivateAccountClickOnLearnMoreParams>} LogObject<accountSettingsDeactivateAccountClickOnLearnMoreParams>
 */
export function accountSettingsDeactivateAccountClickOnLearnMore(params) {
    return { evid: 680, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'twoFactorAuthenticationSetupEnableClick' event (evid: 681)
 *
 * Event description: The user click on 'enable' to enable phone 2fa
 *
 * @param {twoFactorAuthenticationSetupEnableClickParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} click_from - security box/main page
 * @property {string} origin - account settings page/app modal/email modal/second best
 * @property {string} platform - platform
 * @return {LogObject<twoFactorAuthenticationSetupEnableClickParams>} LogObject<twoFactorAuthenticationSetupEnableClickParams>
 */
export function twoFactorAuthenticationSetupEnableClick(params) {
    return { evid: 681, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'accountSettingsUpdatesConfirmEnterPassword' event (evid: 682)
 *
 * Event description: The user clicks on 'ok' after entering the password, in the 'enter password' modal that pops up when updating account settings.
 *
 * @param {accountSettingsUpdatesConfirmEnterPasswordParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {boolean} is_valid - true/false
 * @property {string} platform - platform
 * @property {string} action - 2FA enable/2FA disable/2FA edit/add recovery phone/remove recovery phone/edit recovery phone/username/email address
 * @return {LogObject<accountSettingsUpdatesConfirmEnterPasswordParams>} LogObject<accountSettingsUpdatesConfirmEnterPasswordParams>
 */
export function accountSettingsUpdatesConfirmEnterPassword(params) {
    return { evid: 682, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'twoFactorAuthenticationSetupSendCode' event (evid: 683)
 *
 * Event description: The user clicks on 'send code' or 'resend verification code' in the verify phone dialog box, after entering a phone number
 *
 * @param {twoFactorAuthenticationSetupSendCodeParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} phone_type - new phone/account phone
 * @property {string} mode - enable/edit
 * @property {string} platform - platform
 * @property {string} action - send/resend
 * @property {string} origin - The origin of the page (Account settings \ 2fa enforcement)
 * @return {LogObject<twoFactorAuthenticationSetupSendCodeParams>} LogObject<twoFactorAuthenticationSetupSendCodeParams>
 */
export function twoFactorAuthenticationSetupSendCode(params) {
    return { evid: 683, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'twoFactorAuthenticationSetupConfirmCodeClick' event (evid: 684)
 *
 * Event description: The user clicks on 'confirm' after entering the 6-digit code he received in an sms
 *
 * @param {twoFactorAuthenticationSetupConfirmCodeClickParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} mode - enable/edit
 * @property {boolean} is_valid - did the user enter the correct code sent to his mobile device
 * @property {string} platform - platform
 * @property {string} origin - The origin of the page (Account settings \ 2fa enforcement)
 * @return {LogObject<twoFactorAuthenticationSetupConfirmCodeClickParams>} LogObject<twoFactorAuthenticationSetupConfirmCodeClickParams>
 */
export function twoFactorAuthenticationSetupConfirmCodeClick(params) {
    return { evid: 684, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'twoFactorAuthenticationSetupEditNumber' event (evid: 685)
 *
 * Event description: The user clicks on 'edit number' to update the phone number chosen for 2-factor authentication
 *
 * @param {twoFactorAuthenticationSetupEditNumberParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} click_from - security box/main page
 * @property {string} platform - platform
 * @return {LogObject<twoFactorAuthenticationSetupEditNumberParams>} LogObject<twoFactorAuthenticationSetupEditNumberParams>
 */
export function twoFactorAuthenticationSetupEditNumber(params) {
    return { evid: 685, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'twoFactorAuthenticationSetupDisableAction' event (evid: 686)
 *
 * Event description: The user clicks on 'disable' to disable phone 2FA
 *
 * @param {twoFactorAuthenticationSetupDisableActionParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @return {LogObject<twoFactorAuthenticationSetupDisableActionParams>} LogObject<twoFactorAuthenticationSetupDisableActionParams>
 */
export function twoFactorAuthenticationSetupDisableAction(params) {
    return { evid: 686, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'twoFactorAuthenticationSetupDisableClick' event (evid: 687)
 *
 * Event description: The user clicks on "disable" in the disable modal for 2-factor authentication (confirms disable)
 *
 * @param {twoFactorAuthenticationSetupDisableClickParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @return {LogObject<twoFactorAuthenticationSetupDisableClickParams>} LogObject<twoFactorAuthenticationSetupDisableClickParams>
 */
export function twoFactorAuthenticationSetupDisableClick(params) {
    return { evid: 687, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'accountSettingsSetPasswordModalLoad' event (evid: 688)
 *
 * Event description: When a user tries to access account settings after social signup (which means he didn't choose a wix password when signing up), the set password modal pops up and asks him to choose an account password.
 *
 * @param {accountSettingsSetPasswordModalLoadParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @return {LogObject<accountSettingsSetPasswordModalLoadParams>} LogObject<accountSettingsSetPasswordModalLoadParams>
 */
export function accountSettingsSetPasswordModalLoad(params) {
    return { evid: 688, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'accountSettingsOnRequestToUnlockField' event (evid: 689)
 *
 * Event description: The user clicks in 'username' or 'email address' fields in account settings  (these fields are locked and the user must enter the account password). Once the user enters the correct password, these fields stay unlocked for the next 5 minutes and this event will not be sent again for those 5 minutes.
 *
 * @param {accountSettingsOnRequestToUnlockFieldParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} click_from - security box/main page
 * @property {string} platform - platform
 * @property {string} field_name - username/email address/2FA enable/2FA disable/2FA edit
 * @return {LogObject<accountSettingsOnRequestToUnlockFieldParams>} LogObject<accountSettingsOnRequestToUnlockFieldParams>
 */
export function accountSettingsOnRequestToUnlockField(params) {
    return { evid: 689, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesFilterQuotes' event (evid: 69)
 *
 * Event description: user filters the Quotes view
 *
 * @param {quotesFilterQuotesParams} params - The parameters for this event
 * @property {string} name - name of filter
 * @property {string} view_type - view_type
 * @property {string} origin_device - web,native
 * @property {string} platform - platform
 * @property {string} filter_type - period, currency, display
 * @property {string} msid - msid
 * @property {number} num_of_quotes - number of quotes the user has
 * @return {LogObject<quotesFilterQuotesParams>} LogObject<quotesFilterQuotesParams>
 */
export function quotesFilterQuotes(params) {
    return { evid: 69, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'accountSettingsUpdatesConfirmPasswordModalLoad' event (evid: 690)
 *
 * Event description: Confirm password modal loads successfully after the user tries to make changes in account settings
 *
 * @param {accountSettingsUpdatesConfirmPasswordModalLoadParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} action - 2FA enable/2FA disable/2FA edit/add recovery phone/remove recovery phone/edit recovery phone/username/email address
 * @return {LogObject<accountSettingsUpdatesConfirmPasswordModalLoadParams>} LogObject<accountSettingsUpdatesConfirmPasswordModalLoadParams>
 */
export function accountSettingsUpdatesConfirmPasswordModalLoad(params) {
    return { evid: 690, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'exposureEventGoogleConnectSeo' event (evid: 6900)
 *
 * Event description: Exposure Event Google Connect SEO
 *
 * @param {exposureEventGoogleConnectSeoParams} params - The parameters for this event
 * @property {string} dealer_asset_id - returns the dealer asset ID that includes the relevant rule
 * @property {GUID} msid - msid
 * @return {LogObject<exposureEventGoogleConnectSeoParams>} LogObject<exposureEventGoogleConnectSeoParams>
 */
export function exposureEventGoogleConnectSeo(params) {
    return { evid: 6900, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'accountSettingsForgotPasswordClick' event (evid: 691)
 *
 * Event description: When a user clicks on "forgot password" in account settings
 *
 * @param {accountSettingsForgotPasswordClickParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @return {LogObject<accountSettingsForgotPasswordClickParams>} LogObject<accountSettingsForgotPasswordClickParams>
 */
export function accountSettingsForgotPasswordClick(params) {
    return { evid: 691, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'accountSettingsManagePrivacyPreferences' event (evid: 695)
 *
 * Event description: The user clicks on 'manage preferences' in the 'privacy preferences' section
 *
 * @param {accountSettingsManagePrivacyPreferencesParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @return {LogObject<accountSettingsManagePrivacyPreferencesParams>} LogObject<accountSettingsManagePrivacyPreferencesParams>
 */
export function accountSettingsManagePrivacyPreferences(params) {
    return { evid: 695, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'accountSettingsTwoFactorAuthenticationSetupSendCodeSuccess' event (evid: 696)
 *
 * Event description: The code was successfully sent to the user's phone after he clicked on send code
 *
 * @param {accountSettingsTwoFactorAuthenticationSetupSendCodeSuccessParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} mode - enable/edit
 * @property {string} platform - platform
 * @property {string} action - send/resend
 * @property {string} origin - The page origin
 * @return {LogObject<accountSettingsTwoFactorAuthenticationSetupSendCodeSuccessParams>} LogObject<accountSettingsTwoFactorAuthenticationSetupSendCodeSuccessParams>
 */
export function accountSettingsTwoFactorAuthenticationSetupSendCodeSuccess(params) {
    return { evid: 696, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'accountSettingsTwoFactorAuthenticationSetupSendCodeFailed' event (evid: 697)
 *
 * Event description: The code was not sent to the user's phone after he clicked on send code
 *
 * @param {accountSettingsTwoFactorAuthenticationSetupSendCodeFailedParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} mode - enable/edit
 * @property {string} platform - platform
 * @property {string} action - send/resend
 * @property {string} origin - the page origin
 * @return {LogObject<accountSettingsTwoFactorAuthenticationSetupSendCodeFailedParams>} LogObject<accountSettingsTwoFactorAuthenticationSetupSendCodeFailedParams>
 */
export function accountSettingsTwoFactorAuthenticationSetupSendCodeFailed(params) {
    return { evid: 697, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dummyNameSrc5Evid7100' event (evid: 7100)
 *
 * Event description: dummy-name.
 *
 * @param {dummyNameSrc5Evid7100Params} params - The parameters for this event
 * @return {LogObject<dummyNameSrc5Evid7100Params>} LogObject<dummyNameSrc5Evid7100Params>
 */
export function dummyNameSrc5Evid7100(params) {
    return { evid: 7100, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'mySitesClickOnSelectSite' event (evid: 715)
 *
 * Event description: UoU sfirst click in contact form
 *
 * @param {mySitesClickOnSelectSiteParams} params - The parameters for this event
 * @property {string} viewMode - list / grid
 * @property {string} referral_additional_info - referral_additional_info
 * @property {boolean} isPublished - True if the site is published, False if not
 * @property {string} siteTypeName - ADI/Editor
 * @property {number} position - The position of the selected site in the page. 1 is the highest site from the left.
 * @property {boolean} isPremium - True if the selected site is premium site, False if not
 * @property {string} platform - web / mobile-web
 * @property {GUID} msid - site guid
 * @property {string} siteUrl - the URL of the chosen site
 * @property {string} view - my-sites
 * @return {LogObject<mySitesClickOnSelectSiteParams>} LogObject<mySitesClickOnSelectSiteParams>
 */
export function mySitesClickOnSelectSite(params) {
    return { evid: 715, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardViewSite' event (evid: 72)
 *
 * Event description: dashboard > view site.
 *
 * @param {dashboardViewSiteParams} params - The parameters for this event
 * @property {GUID} site_id - site_id
 * @property {string} view_type - view_type
 * @property {string} origin - origin
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<dashboardViewSiteParams>} LogObject<dashboardViewSiteParams>
 */
export function dashboardViewSite(params) {
    return { evid: 72, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesClickOnCopyLinkFromMoreActions' event (evid: 727)
 *
 * Event description: Quotes - click on copy-link from more actions
 *
 * @param {quotesClickOnCopyLinkFromMoreActionsParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {GUID} invoiceId - invoiceId
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<quotesClickOnCopyLinkFromMoreActionsParams>} LogObject<quotesClickOnCopyLinkFromMoreActionsParams>
 */
export function quotesClickOnCopyLinkFromMoreActions(params) {
    return { evid: 727, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesErrorGenerateLinkFromMoreActions' event (evid: 728)
 *
 * Event description: Quotes - error generate link from more actions
 *
 * @param {quotesErrorGenerateLinkFromMoreActionsParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {GUID} invoiceId - invoiceId
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<quotesErrorGenerateLinkFromMoreActionsParams>} LogObject<quotesErrorGenerateLinkFromMoreActionsParams>
 */
export function quotesErrorGenerateLinkFromMoreActions(params) {
    return { evid: 728, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesClickOnCreateLinkFromMoreActions' event (evid: 729)
 *
 * Event description: Quotes - click on create link from more actions
 *
 * @param {quotesClickOnCreateLinkFromMoreActionsParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {GUID} invoiceId - invoiceId
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<quotesClickOnCreateLinkFromMoreActionsParams>} LogObject<quotesClickOnCreateLinkFromMoreActionsParams>
 */
export function quotesClickOnCreateLinkFromMoreActions(params) {
    return { evid: 729, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardClickOnUpgrade' event (evid: 73)
 *
 * Event description: click on upgrade button in biz mgr
 *
 * @param {dashboardClickOnUpgradeParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} origin - where it was clicked from
 * @property {string} platform - platform
 * @property {string} hosting - (Editor/MA/...)
 * @property {GUID} msid - msid
 * @return {LogObject<dashboardClickOnUpgradeParams>} LogObject<dashboardClickOnUpgradeParams>
 */
export function dashboardClickOnUpgrade(params) {
    return { evid: 73, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesSettingsChangeNumbering' event (evid: 730)
 *
 * Event description: Quotes - settings - change numbering
 *
 * @param {quotesSettingsChangeNumberingParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<quotesSettingsChangeNumberingParams>} LogObject<quotesSettingsChangeNumberingParams>
 */
export function quotesSettingsChangeNumbering(params) {
    return { evid: 730, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesHeaderPreview' event (evid: 732)
 *
 * Event description: Quotes - Header Preview.
 *
 * @param {quotesHeaderPreviewParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<quotesHeaderPreviewParams>} LogObject<quotesHeaderPreviewParams>
 */
export function quotesHeaderPreview(params) {
    return { evid: 732, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesOpenFirstCard' event (evid: 733)
 *
 * Event description: Quotes - Header Preview
 *
 * @param {quotesOpenFirstCardParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<quotesOpenFirstCardParams>} LogObject<quotesOpenFirstCardParams>
 */
export function quotesOpenFirstCard(params) {
    return { evid: 733, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesDropdownOption' event (evid: 734)
 *
 * Event description: Quotes - dropdown option
 *
 * @param {quotesDropdownOptionParams} params - The parameters for this event
 * @property {string} option - which option was choosen
 * @property {string} view_type - view_type
 * @property {string} text - if custom was picked which test added, in other options put null
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<quotesDropdownOptionParams>} LogObject<quotesDropdownOptionParams>
 */
export function quotesDropdownOption(params) {
    return { evid: 734, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'sidebarModalOfFteToTheNewSidebarIsLoaded' event (evid: 735)
 *
 * Event description: Sidebar > Modal of FTE to the new sidebar is loaded
 *
 * @param {sidebarModalOfFteToTheNewSidebarIsLoadedParams} params - The parameters for this event
 * @property {string} category_items_list - the list of items which new and presented
 * @return {LogObject<sidebarModalOfFteToTheNewSidebarIsLoadedParams>} LogObject<sidebarModalOfFteToTheNewSidebarIsLoadedParams>
 */
export function sidebarModalOfFteToTheNewSidebarIsLoaded(params) {
    return { evid: 735, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesLimit5KCsvDownload' event (evid: 738)
 *
 * Event description: Quotes - limit 5K csv download
 *
 * @param {quotesLimit5KCsvDownloadParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<quotesLimit5KCsvDownloadParams>} LogObject<quotesLimit5KCsvDownloadParams>
 */
export function quotesLimit5KCsvDownload(params) {
    return { evid: 738, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'accountSettingsStep1ToDisablePartnerDashboard' event (evid: 739)
 *
 * Event description: In account setting, the user clicked to disable Partner Dashboard and will need to confirm again to disable it
 *
 * @param {accountSettingsStep1ToDisablePartnerDashboardParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @return {LogObject<accountSettingsStep1ToDisablePartnerDashboardParams>} LogObject<accountSettingsStep1ToDisablePartnerDashboardParams>
 */
export function accountSettingsStep1ToDisablePartnerDashboard(params) {
    return { evid: 739, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesSearchQuotes' event (evid: 74)
 *
 * Event description: user searches  in the Quotes view
 *
 * @param {quotesSearchQuotesParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} text - text searched
 * @property {number} num_of_results - number of returned results
 * @property {string} origin_device - web,native
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {number} num_of_quotes - number of quotes the user has
 * @return {LogObject<quotesSearchQuotesParams>} LogObject<quotesSearchQuotesParams>
 */
export function quotesSearchQuotes(params) {
    return { evid: 74, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'accountSettingsErrorWhenClickToDisablePartnerDashboard' event (evid: 740)
 *
 * Event description: In account setting, the user clicked to disable Partner Dashboard and receive an error because its a teams/custom branding account
 *
 * @param {accountSettingsErrorWhenClickToDisablePartnerDashboardParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} errorReason - Teams/Custom branding
 * @property {string} platform - platform
 * @return {LogObject<accountSettingsErrorWhenClickToDisablePartnerDashboardParams>} LogObject<accountSettingsErrorWhenClickToDisablePartnerDashboardParams>
 */
export function accountSettingsErrorWhenClickToDisablePartnerDashboard(params) {
    return { evid: 740, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'accountSettingsDisabledEnabledPartnerDashboard' event (evid: 741)
 *
 * Event description: enable or disable successfully the Partners Dashboard from account settings
 *
 * @param {accountSettingsDisabledEnabledPartnerDashboardParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} action - ENABLE/DISABLE
 * @return {LogObject<accountSettingsDisabledEnabledPartnerDashboardParams>} LogObject<accountSettingsDisabledEnabledPartnerDashboardParams>
 */
export function accountSettingsDisabledEnabledPartnerDashboard(params) {
    return { evid: 741, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'crmHomeSendMessageToInbox' event (evid: 745)
 *
 * Event description: CRM Home - send message to inbox
 *
 * @param {crmHomeSendMessageToInboxParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<crmHomeSendMessageToInboxParams>} LogObject<crmHomeSendMessageToInboxParams>
 */
export function crmHomeSendMessageToInbox(params) {
    return { evid: 745, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'crmHomeAddNewContactWidget' event (evid: 746)
 *
 * Event description: CRM Home - add new contact widget
 *
 * @param {crmHomeAddNewContactWidgetParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<crmHomeAddNewContactWidgetParams>} LogObject<crmHomeAddNewContactWidgetParams>
 */
export function crmHomeAddNewContactWidget(params) {
    return { evid: 746, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'crmHomeChooseContactFromWidget' event (evid: 747)
 *
 * Event description: CRM Home - choose contact from widget
 *
 * @param {crmHomeChooseContactFromWidgetParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {GUID} contactId - contactId
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<crmHomeChooseContactFromWidgetParams>} LogObject<crmHomeChooseContactFromWidgetParams>
 */
export function crmHomeChooseContactFromWidget(params) {
    return { evid: 747, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'crmHomeSendMessageViaContactsWidget' event (evid: 748)
 *
 * Event description: CRM Home - send message via contacts widget
 *
 * @param {crmHomeSendMessageViaContactsWidgetParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {GUID} contactId - contactId
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<crmHomeSendMessageViaContactsWidgetParams>} LogObject<crmHomeSendMessageViaContactsWidgetParams>
 */
export function crmHomeSendMessageViaContactsWidget(params) {
    return { evid: 748, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesEditQuote' event (evid: 75)
 *
 * Event description: edit quote
 *
 * @param {quotesEditQuoteParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} origin - my quotes, preview
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {GUID} quoteId - quote guid
 * @return {LogObject<quotesEditQuoteParams>} LogObject<quotesEditQuoteParams>
 */
export function quotesEditQuote(params) {
    return { evid: 75, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dummyNameSrc5Evid7500' event (evid: 7500)
 *
 * Event description: dummy-name.
 *
 * @param {dummyNameSrc5Evid7500Params} params - The parameters for this event
 * @return {LogObject<dummyNameSrc5Evid7500Params>} LogObject<dummyNameSrc5Evid7500Params>
 */
export function dummyNameSrc5Evid7500(params) {
    return { evid: 7500, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesPreviewQuote' event (evid: 76)
 *
 * Event description: preview quote
 *
 * @param {quotesPreviewQuoteParams} params - The parameters for this event
 * @property {string} source - from where the quote open {feed, more-->quotes}
 * @property {string} view_type - view_type
 * @property {string} origin - my quotes, edit quotes
 * @property {string} origin_device - web,native
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {GUID} quoteId - quote guid
 * @return {LogObject<quotesPreviewQuoteParams>} LogObject<quotesPreviewQuoteParams>
 */
export function quotesPreviewQuote(params) {
    return { evid: 76, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'enableDisablePartnersDhasboard' event (evid: 7600)
 *
 * Event description: enable or disable successfully the Partners Dashboard from account settings
 *
 * @param {enableDisablePartnersDhasboardParams} params - The parameters for this event
 * @property {string} action - enable/disable
 * @return {LogObject<enableDisablePartnersDhasboardParams>} LogObject<enableDisablePartnersDhasboardParams>
 */
export function enableDisablePartnersDhasboard(params) {
    return { evid: 7600, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesCreateQuoteSaveDraftClick' event (evid: 77)
 *
 * Event description: Create quote - Save draft button click
 *
 * @param {quotesCreateQuoteSaveDraftClickParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} origin - create quote, edit quote
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {GUID} quoteId - quote guid
 * @return {LogObject<quotesCreateQuoteSaveDraftClickParams>} LogObject<quotesCreateQuoteSaveDraftClickParams>
 */
export function quotesCreateQuoteSaveDraftClick(params) {
    return { evid: 77, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'deprecatedUpdateOrCreateLocation' event (evid: 7700)
 *
 * Event description: When a user successfully creates/updates a location send event with the location properties (id,name, description, address, etc...)
 *
 * @param {deprecatedUpdateOrCreateLocationParams} params - The parameters for this event
 * @property {boolean} phoneFilled - phone_filled
 * @property {string} desc - location description
 * @property {string} timezone - timezone
 * @property {string} data - business_schedule (string)
 * @property {boolean} address_filled - address_filled
 * @property {string} activity_type - Update/Create
 * @property {GUID} location_guid - location guid
 * @property {string} loaction - location name
 * @property {boolean} status - true if active location, false if not active
 * @property {string} currency - payment currency (GBP/USD/EUR...)
 * @property {string} type - Unknown/Branch/Offices/Reception/Headquarters
 * @property {GUID} msid - msid
 * @property {boolean} checked_by_default - true if the location is default, else false
 * @property {boolean} email_filled - email_filled
 * @return {LogObject<deprecatedUpdateOrCreateLocationParams>} LogObject<deprecatedUpdateOrCreateLocationParams>
 */
export function deprecatedUpdateOrCreateLocation(params) {
    return { evid: 7700, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'deleteLocation' event (evid: 7701)
 *
 * Event description: When a user successfully deletes a location send event with the location id
 *
 * @param {deleteLocationParams} params - The parameters for this event
 * @property {GUID} location_guid - location guid of the deleted item
 * @property {GUID} locationGuid - location guid of the deleted item
 * @property {GUID} msid - metasite id
 * @return {LogObject<deleteLocationParams>} LogObject<deleteLocationParams>
 */
export function deleteLocation(params) {
    return { evid: 7701, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'setADefaultLocation' event (evid: 7702)
 *
 * Event description: When a user successfully sets a default location send event with the location id that had been replaced by the default location and the new default location
 *
 * @param {setADefaultLocationParams} params - The parameters for this event
 * @property {GUID} locationGuid - location_id of the new default location
 * @property {GUID} oldLocationGuid - location_id of the old default location
 * @property {GUID} msid - metasite id
 * @return {LogObject<setADefaultLocationParams>} LogObject<setADefaultLocationParams>
 */
export function setADefaultLocation(params) {
    return { evid: 7702, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'updateOrCreateMultilocationSrc5Evid7703' event (evid: 7703)
 *
 * Event description: When a user successfully creates/updates a location send event with the location properties (id,name, description, address, etc...)
 *
 * @param {updateOrCreateMultilocationSrc5Evid7703Params} params - The parameters for this event
 * @property {string} businessSchedule - business_schedule (string)
 * @property {boolean} phoneFilled - in creation: true if filled, false if not;  in update: true if changed, false if deleted, null if not updated
 * @property {string} desc - location description
 * @property {boolean} emailFilled - in creation: true if filled, false if not;  in update: true if changed, false if deleted, null if not updated
 * @property {string} timezone - timezone
 * @property {string} data - deprecated
 * @property {string} statusText - status_text
 * @property {string} loaction - location name
 * @property {string} activityType - Update/Create
 * @property {GUID} locationGuid - location guid
 * @property {boolean} status - deprecated
 * @property {string} currency - deprecated
 * @property {boolean} addressFilled - in creation: true if filled, false if not;  in update: true if changed, false if deleted, null if not updated
 * @property {string} type - Unknown/Branch/Offices/Reception/Headquarters
 * @property {GUID} msid - metasite id
 * @property {boolean} isDefault - true if the location is default, else false
 * @return {LogObject<updateOrCreateMultilocationSrc5Evid7703Params>} LogObject<updateOrCreateMultilocationSrc5Evid7703Params>
 */
export function updateOrCreateMultilocationSrc5Evid7703(params) {
    return { evid: 7703, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'updateOrCreateMultilocationSrc5Evid7704' event (evid: 7704)
 *
 * Event description: When a user successfully creates/updates a location send event with the location properties (id,name, description, address, etc...)
 *
 * @param {updateOrCreateMultilocationSrc5Evid7704Params} params - The parameters for this event
 * @property {string} businessSchedule - BusinessSchedule {     TimePeriod[] periods,     SpecialHourPeriod[] special_hour_period } TimePeriod {     String open_day,     String open_time,     String close_day,     String close_time } SpecialHourPeriod {     String start_date,     String end_date,     boolean is_closed     String comment }
 * @property {string} number - component of StreetAddress
 * @property {string} city - component of Address
 * @property {string} desc - location description
 * @property {string} name - component of StreetAddress
 * @property {string} latitude - component of AddressLocation  (geocode)
 * @property {string} email - email
 * @property {string} timezone - timezone
 * @property {string} statusText - active/not active
 * @property {string} formatted_address - component of Address
 * @property {string} country - component of Address
 * @property {string} longitude - component of AddressLocation (geocode)
 * @property {string} loaction - location name
 * @property {number} revision - revison
 * @property {string} activityType - Update/Create
 * @property {GUID} locationGuid - location guid
 * @property {string} apt - component of StreetAddress
 * @property {string} fax - fax
 * @property {string} subdivision - component of Address
 * @property {string} hint - component of Address
 * @property {string} postal_code - component of Address
 * @property {string} type - Unknown/Branch/Offices/Reception/Headquarters
 * @property {GUID} msid - metasite id
 * @property {boolean} isDefault - true if the location is default, else false
 * @property {string} phone - phone
 * @return {LogObject<updateOrCreateMultilocationSrc5Evid7704Params>} LogObject<updateOrCreateMultilocationSrc5Evid7704Params>
 */
export function updateOrCreateMultilocationSrc5Evid7704(params) {
    return { evid: 7704, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'updateOrCreateMultilocation' event (evid: 7705)
 *
 * Event description: When a user successfully creates/updates a location send event with the location properties (id,name, description, address, etc...)
 *
 * @param {updateOrCreateMultilocationParams} params - The parameters for this event
 * @property {string} businessSchedule - BusinessSchedule {     TimePeriod[] periods,     SpecialHourPeriod[] special_hour_period } TimePeriod {     String open_day,     String open_time,     String close_day,     String close_time } SpecialHourPeriod {     String start_date,     String end_date,     boolean is_closed     String comment }
 * @property {string} city - component of Address
 * @property {string} desc - location description
 * @property {string} name - location name
 * @property {string} latitude - component of AddressLocation  (geocode)
 * @property {string} email - email
 * @property {string} timezone - timezone
 * @property {string} formattedAddress - component of Address
 * @property {string} statusText - active/not active
 * @property {string} country - component of Address
 * @property {string} streetName - component of StreetAddress
 * @property {string} longitude - component of AddressLocation (geocode)
 * @property {string} postalCode - component of Address
 * @property {string} streetApt - component of StreetAddress
 * @property {number} revision - revison
 * @property {string} activityType - Update/Create
 * @property {GUID} locationGuid - location guid
 * @property {string} fax - fax
 * @property {string} subdivision - component of Address
 * @property {string} streetNumber - component of StreetAddress
 * @property {string} hint - component of Address
 * @property {string} locationType - Unknown/Branch/Offices/Reception/Headquarters
 * @property {GUID} msid - metasite id
 * @property {boolean} isDefault - true if the location is default, else false
 * @property {string} phone - phone
 * @return {LogObject<updateOrCreateMultilocationParams>} LogObject<updateOrCreateMultilocationParams>
 */
export function updateOrCreateMultilocation(params) {
    return { evid: 7705, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesCreateQuoteSaveDraftComplete' event (evid: 78)
 *
 * Event description: Create quote - Save draft completed
 *
 * @param {quotesCreateQuoteSaveDraftCompleteParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} origin - create quote, edit quote
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {GUID} quoteId - quote guid
 * @return {LogObject<quotesCreateQuoteSaveDraftCompleteParams>} LogObject<quotesCreateQuoteSaveDraftCompleteParams>
 */
export function quotesCreateQuoteSaveDraftComplete(params) {
    return { evid: 78, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesCreateQuoteSaveDraftFailed' event (evid: 79)
 *
 * Event description: Create quote - Save draft failed
 *
 * @param {quotesCreateQuoteSaveDraftFailedParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} reason - failure reason
 * @property {string} origin - create quote, edit quote
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {GUID} quoteId - quote guid
 * @return {LogObject<quotesCreateQuoteSaveDraftFailedParams>} LogObject<quotesCreateQuoteSaveDraftFailedParams>
 */
export function quotesCreateQuoteSaveDraftFailed(params) {
    return { evid: 79, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'automationsSecurityCheckForAmountOfEmailInGetNotifiedAction' event (evid: 7901)
 *
 * Event description: automations - security check when a rule with get notified action for amount of email recipients is triggered.
 *
 * @param {automationsSecurityCheckForAmountOfEmailInGetNotifiedActionParams} params - The parameters for this event
 * @property {GUID} msid - msid
 * @property {number} emailCount - email count (how many email were inserted)
 * @return {LogObject<automationsSecurityCheckForAmountOfEmailInGetNotifiedActionParams>} LogObject<automationsSecurityCheckForAmountOfEmailInGetNotifiedActionParams>
 */
export function automationsSecurityCheckForAmountOfEmailInGetNotifiedAction(params) {
    return { evid: 7901, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'uouUnsubscribePageView' event (evid: 798)
 *
 * Event description: the page view UOU sees when they click unsubscribe from sms notification
 *
 * @param {uouUnsubscribePageViewParams} params - The parameters for this event
 * @property {GUID} visitor_id - visitor_id of uou
 * @property {string} view_type - view_type
 * @property {GUID} notification_Id - notification id of unsubscribe sms
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @property {string} device - mobile
 * @return {LogObject<uouUnsubscribePageViewParams>} LogObject<uouUnsubscribePageViewParams>
 */
export function uouUnsubscribePageView(params) {
    return { evid: 798, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'uouUnsubscribeClick' event (evid: 799)
 *
 * Event description: when UOU click unsubscribe/cancel from unsubscribe page view
 *
 * @param {uouUnsubscribeClickParams} params - The parameters for this event
 * @property {string} click_type - click/cancel
 * @property {GUID} visitor_id - visitor_id of uou
 * @property {string} view_type - view_type
 * @property {GUID} notification_Id - notification id of unsubscribe sms
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @property {string} device - mobile
 * @return {LogObject<uouUnsubscribeClickParams>} LogObject<uouUnsubscribeClickParams>
 */
export function uouUnsubscribeClick(params) {
    return { evid: 799, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardCreateNewSite' event (evid: 80)
 *
 * Event description: user adds a new site from different origins (site_list_top, site_list_bottom, top_bar, account_templates), where account_templates = account -> temlpates
 *
 * @param {dashboardCreateNewSiteParams} params - The parameters for this event
 * @property {string} source - source
 * @property {string} view_type - view_type
 * @property {string} sub_view - sub_view
 * @property {string} creation_type - in case the click is on item in the creation menu of wix studio report: create from blank/use wix templates/ use your custom templates/build on wix classic editor. Otherwise null.
 * @property {string} origin - sites-list-enterprise
 * @property {string} view_level - view_level
 * @property {string} platform - deprecated
 * @return {LogObject<dashboardCreateNewSiteParams>} LogObject<dashboardCreateNewSiteParams>
 */
export function dashboardCreateNewSite(params) {
    return { evid: 80, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'sampleEventTest' event (evid: 800)
 *
 * Event description: sample event test.
 *
 * @param {sampleEventTestParams} params - The parameters for this event
 * @return {LogObject<sampleEventTestParams>} LogObject<sampleEventTestParams>
 */
export function sampleEventTest(params) {
    return { evid: 800, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'gdprUouSiteOwnerOpenPrivacyGdprTab' event (evid: 801)
 *
 * Event description: The user/site owner clicked on the  left menu bar 'Privacy & GDPR' Tab
 *
 * @param {gdprUouSiteOwnerOpenPrivacyGdprTabParams} params - The parameters for this event
 * @property {GUID} msid - the site where the request asked
 * @return {LogObject<gdprUouSiteOwnerOpenPrivacyGdprTabParams>} LogObject<gdprUouSiteOwnerOpenPrivacyGdprTabParams>
 */
export function gdprUouSiteOwnerOpenPrivacyGdprTab(params) {
    return { evid: 801, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'gdprUouSiteOwnerInitiateGdprRequest' event (evid: 802)
 *
 * Event description: The user / site owner click on the '+New Request' top left button or '+New Request' link on the text
 *
 * @param {gdprUouSiteOwnerInitiateGdprRequestParams} params - The parameters for this event
 * @property {GUID} msid - the site where the request asked
 * @property {string} origin - the clicked page component
 * @return {LogObject<gdprUouSiteOwnerInitiateGdprRequestParams>} LogObject<gdprUouSiteOwnerInitiateGdprRequestParams>
 */
export function gdprUouSiteOwnerInitiateGdprRequest(params) {
    return { evid: 802, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'gdprUouSiteOwnerSelectRequestType' event (evid: 803)
 *
 * Event description: The user/site owner select between 'get' or 'delete' request type and click continue the complete the rest of the form
 *
 * @param {gdprUouSiteOwnerSelectRequestTypeParams} params - The parameters for this event
 * @property {string} request_type - Delete / Get
 * @property {string} origin - the clicked page component
 * @property {GUID} msid - the site of the request
 * @return {LogObject<gdprUouSiteOwnerSelectRequestTypeParams>} LogObject<gdprUouSiteOwnerSelectRequestTypeParams>
 */
export function gdprUouSiteOwnerSelectRequestType(params) {
    return { evid: 803, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'gdprUouSiteOwnerInsertUouInformation' event (evid: 804)
 *
 * Event description: The user/site owner insert at least one of the required recognition details (phone/email) and submit the request to continue the form
 *
 * @param {gdprUouSiteOwnerInsertUouInformationParams} params - The parameters for this event
 * @property {string} hashed_phone - hashed uou phone
 * @property {string} request_type - Delete / Get request
 * @property {string} hashed_mail - hashed uou email
 * @property {GUID} msid - the site of the request
 * @return {LogObject<gdprUouSiteOwnerInsertUouInformationParams>} LogObject<gdprUouSiteOwnerInsertUouInformationParams>
 */
export function gdprUouSiteOwnerInsertUouInformation(params) {
    return { evid: 804, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'gdprUouSiteOwnerReConfirmUouInformation' event (evid: 805)
 *
 * Event description: The user/site owner click on the 'submit ' button after validate his user  recognition details (phone/email)
 *
 * @param {gdprUouSiteOwnerReConfirmUouInformationParams} params - The parameters for this event
 * @property {string} hashed_phone - hashed uou phone
 * @property {string} request_type - Delete / Get request
 * @property {string} hashed_mail - hashed uou email
 * @property {GUID} msid - the site of the request
 * @return {LogObject<gdprUouSiteOwnerReConfirmUouInformationParams>} LogObject<gdprUouSiteOwnerReConfirmUouInformationParams>
 */
export function gdprUouSiteOwnerReConfirmUouInformation(params) {
    return { evid: 805, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'gdprUouSiteOwnerUouRequestSubmissionSuccess' event (evid: 806)
 *
 * Event description: The user/site owner request was successfully delivered to the server
 *
 * @param {gdprUouSiteOwnerUouRequestSubmissionSuccessParams} params - The parameters for this event
 * @property {string} hashed_phone - hashed uou phone
 * @property {string} request_type - Delete / Get request
 * @property {string} hashed_mail - hashed uou email
 * @property {GUID} request_id - Deprecated
 * @property {GUID} gdpr_request_id - generated server request id
 * @property {GUID} msid - the site of the request
 * @return {LogObject<gdprUouSiteOwnerUouRequestSubmissionSuccessParams>} LogObject<gdprUouSiteOwnerUouRequestSubmissionSuccessParams>
 */
export function gdprUouSiteOwnerUouRequestSubmissionSuccess(params) {
    return { evid: 806, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'gdprUouSiteOwnerUouRequestSubmissionFailed' event (evid: 807)
 *
 * Event description: The user/site owner request failed to deliver to the server (also after a retry )
 *
 * @param {gdprUouSiteOwnerUouRequestSubmissionFailedParams} params - The parameters for this event
 * @property {string} hashed_phone - hashed uou phone
 * @property {string} request_type - Delete / Get request
 * @property {string} hashed_mail - hashed uou email
 * @property {string} origin - the clicked page component
 * @property {string} error_reason - failure reason
 * @property {GUID} msid - the site of the request
 * @return {LogObject<gdprUouSiteOwnerUouRequestSubmissionFailedParams>} LogObject<gdprUouSiteOwnerUouRequestSubmissionFailedParams>
 */
export function gdprUouSiteOwnerUouRequestSubmissionFailed(params) {
    return { evid: 807, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'gdprUouSiteOwnerReturnedToPreviousFormStep' event (evid: 808)
 *
 * Event description: The user click on 'back' /'cancel' button and returned to the previous from step.
 * 1st step-  choose request type
 * 2nd step - inserts uou information
 * 3rd step - re-confirm uou information
 *
 * @param {gdprUouSiteOwnerReturnedToPreviousFormStepParams} params - The parameters for this event
 * @property {string} hashed_phone - hashed uou phone
 * @property {string} from_step - where the user asked to return
 * @property {string} request_type - Delete / Get request
 * @property {string} hashed_mail - hashed uou email
 * @property {string} origin - the clicked page component
 * @property {GUID} msid - the site of the request
 * @return {LogObject<gdprUouSiteOwnerReturnedToPreviousFormStepParams>} LogObject<gdprUouSiteOwnerReturnedToPreviousFormStepParams>
 */
export function gdprUouSiteOwnerReturnedToPreviousFormStep(params) {
    return { evid: 808, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'gdprUouSiteOwnerWishToLearnMore' event (evid: 809)
 *
 * Event description: The user clicks on 'learn more' link on the request information text on the GDPR tab.
 *
 * @param {gdprUouSiteOwnerWishToLearnMoreParams} params - The parameters for this event
 * @property {string} learn_more_type - Third-party apps/Wix code/GDPR
 * @property {string} request_type - Delete / Get request
 * @property {string} origin - the clicked page component
 * @property {GUID} msid - the site of the request
 * @return {LogObject<gdprUouSiteOwnerWishToLearnMoreParams>} LogObject<gdprUouSiteOwnerWishToLearnMoreParams>
 */
export function gdprUouSiteOwnerWishToLearnMore(params) {
    return { evid: 809, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardSiteSelectorPopupShown' event (evid: 81)
 *
 * Event description: when a user selected an ADI site when his previous action is not suitable for ADI (add app etc... )
 *
 * @param {dashboardSiteSelectorPopupShownParams} params - The parameters for this event
 * @property {string} name - popup name
 * @property {string} view_type - view_type
 * @property {string} siteTypeName - ADI/Editor
 * @property {string} platform - platform
 * @property {GUID} msid - site guid
 * @return {LogObject<dashboardSiteSelectorPopupShownParams>} LogObject<dashboardSiteSelectorPopupShownParams>
 */
export function dashboardSiteSelectorPopupShown(params) {
    return { evid: 81, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'gdprUsersUserOpenedTheGdprForm' event (evid: 810)
 *
 * Event description: GDPR form page URL is available and loaded successfully to Wix user.
 *
 * @param {gdprUsersUserOpenedTheGdprFormParams} params - The parameters for this event
 * @property {string} request_type - Get / Delete
 * @property {string} hashed_mail - email account that is visible to the user
 * @return {LogObject<gdprUsersUserOpenedTheGdprFormParams>} LogObject<gdprUsersUserOpenedTheGdprFormParams>
 */
export function gdprUsersUserOpenedTheGdprForm(params) {
    return { evid: 810, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dummyNameSrc5Evid8100' event (evid: 8100)
 *
 * Event description: dummy-name.
 *
 * @param {dummyNameSrc5Evid8100Params} params - The parameters for this event
 * @return {LogObject<dummyNameSrc5Evid8100Params>} LogObject<dummyNameSrc5Evid8100Params>
 */
export function dummyNameSrc5Evid8100(params) {
    return { evid: 8100, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'gdprUsersUserSubmitTheGdprForm' event (evid: 811)
 *
 * Event description: user GDPR form
 *
 * @param {gdprUsersUserSubmitTheGdprFormParams} params - The parameters for this event
 * @property {boolean} is_file_loaded - user information
 * @property {string} site_contact_hashed_mail - user information
 * @property {string} hashed_phone - user information
 * @property {string} request_type - Get / Delete
 * @property {string} hashed_last_name - user information
 * @property {string} hashed_mail - email account that is visible to the user
 * @property {boolean} is_site_has_contact_form - user information
 * @property {DateTime} last_site_edit_date - user information
 * @property {string} hashed_first_name - user information
 * @property {Url} site_url - user information
 * @property {DateTime} account_creation_date - user information
 * @property {boolean} is_premium - user information
 * @return {LogObject<gdprUsersUserSubmitTheGdprFormParams>} LogObject<gdprUsersUserSubmitTheGdprFormParams>
 */
export function gdprUsersUserSubmitTheGdprForm(params) {
    return { evid: 811, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'gdprUsersUserGdprFormSubmissionSuccess' event (evid: 812)
 *
 * Event description: GDPR form submits successfully to the server and open support ticket
 *
 * @param {gdprUsersUserGdprFormSubmissionSuccessParams} params - The parameters for this event
 * @property {GUID} ticket_id - answers ticket id
 * @property {boolean} is_file_loaded - user information
 * @property {string} site_contact_hashed_mail - user information
 * @property {string} hashed_phone - user information
 * @property {string} request_type - Get / Delete
 * @property {string} hashed_last_name - user information
 * @property {string} hashed_mail - email account that is visible to the user
 * @property {boolean} is_site_has_contact_form - user information
 * @property {DateTime} last_site_edit_date - user information
 * @property {string} hashed_first_name - user information
 * @property {Url} site_url - user information
 * @property {GUID} request_id - server produce request id
 * @property {DateTime} account_creation_date - user information
 * @property {boolean} is_premium - user information
 * @return {LogObject<gdprUsersUserGdprFormSubmissionSuccessParams>} LogObject<gdprUsersUserGdprFormSubmissionSuccessParams>
 */
export function gdprUsersUserGdprFormSubmissionSuccess(params) {
    return { evid: 812, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'gdprUsersUserGdprFormSubmissionFailed' event (evid: 813)
 *
 * Event description: GDPR form failed to submit .
 *
 * @param {gdprUsersUserGdprFormSubmissionFailedParams} params - The parameters for this event
 * @property {boolean} is_file_loaded - user information
 * @property {string} site_contact_hashed_mail - user information
 * @property {string} hashed_phone - user information
 * @property {string} request_type - Get / Delete
 * @property {string} hashed_last_name - user information
 * @property {string} hashed_mail - email account that is visible to the user
 * @property {boolean} is_site_has_contact_form - user information
 * @property {DateTime} last_site_edit_date - user information
 * @property {string} error_reason - failure reason
 * @property {string} hashed_first_name - user information
 * @property {Url} site_url - user information
 * @property {DateTime} account_creation_date - user information
 * @property {boolean} is_premium - user information
 * @return {LogObject<gdprUsersUserGdprFormSubmissionFailedParams>} LogObject<gdprUsersUserGdprFormSubmissionFailedParams>
 */
export function gdprUsersUserGdprFormSubmissionFailed(params) {
    return { evid: 813, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cookiesBannerCta' event (evid: 814)
 *
 * Event description: User interaction with the banner
 *
 * @param {cookiesBannerCtaParams} params - The parameters for this event
 * @property {Url} url - url
 * @property {string} origin - origin
 * @property {string} action - accept/settings/dismiss/read_policy/render/decline_all/save/hide
 * @return {LogObject<cookiesBannerCtaParams>} LogObject<cookiesBannerCtaParams>
 */
export function cookiesBannerCta(params) {
    return { evid: 814, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cookiesBannerSettingsWindowCta' event (evid: 815)
 *
 * Event description: User interaction with the cookie settings window
 *
 * @param {cookiesBannerSettingsWindowCtaParams} params - The parameters for this event
 * @property {Url} url - url
 * @property {boolean} toggle - (optional) on/off
 * @property {string} action - save/dismiss/toggle/read_policy
 * @return {LogObject<cookiesBannerSettingsWindowCtaParams>} LogObject<cookiesBannerSettingsWindowCtaParams>
 */
export function cookiesBannerSettingsWindowCta(params) {
    return { evid: 815, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cookiesBannerPrivacyPolicyClicked' event (evid: 816)
 *
 * Event description: The user clicked on one of the policies descriptions in the privacy policy
 *
 * @param {cookiesBannerPrivacyPolicyClickedParams} params - The parameters for this event
 * @property {Url} url - url
 * @property {string} policy - cookie/ccpa
 * @return {LogObject<cookiesBannerPrivacyPolicyClickedParams>} LogObject<cookiesBannerPrivacyPolicyClickedParams>
 */
export function cookiesBannerPrivacyPolicyClicked(params) {
    return { evid: 816, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cookiesBannerSettingPageCta' event (evid: 817)
 *
 * Event description: User interaction with the settings page
 *
 * @param {cookiesBannerSettingPageCtaParams} params - The parameters for this event
 * @property {Url} url - url
 * @property {boolean} toggle - (optional) on/off
 * @property {string} policy - cookie/ccpa
 * @property {string} action - toggle/save
 * @return {LogObject<cookiesBannerSettingPageCtaParams>} LogObject<cookiesBannerSettingPageCtaParams>
 */
export function cookiesBannerSettingPageCta(params) {
    return { evid: 817, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cookiesBannerSettingPageOptOutConfirmation' event (evid: 818)
 *
 * Event description: User interaction with opt-out confirmation in the setting page
 *
 * @param {cookiesBannerSettingPageOptOutConfirmationParams} params - The parameters for this event
 * @property {Url} url - url
 * @property {string} policy - cookie/ccpa
 * @property {string} action - cancel/ok/dismiss
 * @return {LogObject<cookiesBannerSettingPageOptOutConfirmationParams>} LogObject<cookiesBannerSettingPageOptOutConfirmationParams>
 */
export function cookiesBannerSettingPageOptOutConfirmation(params) {
    return { evid: 818, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'crmHomeViewContactViaContactsWidget' event (evid: 819)
 *
 * Event description: CRM Home - view contact via contacts widget
 *
 * @param {crmHomeViewContactViaContactsWidgetParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {GUID} contactId - contactId
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<crmHomeViewContactViaContactsWidgetParams>} LogObject<crmHomeViewContactViaContactsWidgetParams>
 */
export function crmHomeViewContactViaContactsWidget(params) {
    return { evid: 819, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardSiteSelectorPopupClose' event (evid: 82)
 *
 * Event description: when a user closed ADI popup
 *
 * @param {dashboardSiteSelectorPopupCloseParams} params - The parameters for this event
 * @property {string} name - popup name
 * @property {string} view_type - view_type
 * @property {string} siteTypeName - ADI/Editor
 * @property {string} platform - platform
 * @property {GUID} msid - site guid
 * @return {LogObject<dashboardSiteSelectorPopupCloseParams>} LogObject<dashboardSiteSelectorPopupCloseParams>
 */
export function dashboardSiteSelectorPopupClose(params) {
    return { evid: 82, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'crmHomeSeeAllContactsViaContactsWidget' event (evid: 820)
 *
 * Event description: CRM Home - see all contacts via contacts widget
 *
 * @param {crmHomeSeeAllContactsViaContactsWidgetParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<crmHomeSeeAllContactsViaContactsWidgetParams>} LogObject<crmHomeSeeAllContactsViaContactsWidgetParams>
 */
export function crmHomeSeeAllContactsViaContactsWidget(params) {
    return { evid: 820, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'crmHomeImportContactsViaContactsBanner' event (evid: 821)
 *
 * Event description: CRM Home - import contacts via contacts banner
 *
 * @param {crmHomeImportContactsViaContactsBannerParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<crmHomeImportContactsViaContactsBannerParams>} LogObject<crmHomeImportContactsViaContactsBannerParams>
 */
export function crmHomeImportContactsViaContactsBanner(params) {
    return { evid: 821, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'crmHomeTasksWidgetAddNewTask' event (evid: 822)
 *
 * Event description: CRM Home - Tasks widget - add new task
 *
 * @param {crmHomeTasksWidgetAddNewTaskParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<crmHomeTasksWidgetAddNewTaskParams>} LogObject<crmHomeTasksWidgetAddNewTaskParams>
 */
export function crmHomeTasksWidgetAddNewTask(params) {
    return { evid: 822, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'crmHomeTasksWidgetSeeAllTasks' event (evid: 823)
 *
 * Event description: CRM Home - Tasks widget - see all tasks
 *
 * @param {crmHomeTasksWidgetSeeAllTasksParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<crmHomeTasksWidgetSeeAllTasksParams>} LogObject<crmHomeTasksWidgetSeeAllTasksParams>
 */
export function crmHomeTasksWidgetSeeAllTasks(params) {
    return { evid: 823, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dashboardSiteSelectorPopupSelectAction' event (evid: 83)
 *
 * Event description: users selection in the popup- go to editor/ stay in ADI
 *
 * @param {dashboardSiteSelectorPopupSelectActionParams} params - The parameters for this event
 * @property {string} name - popup name
 * @property {string} view_type - view_type
 * @property {string} siteTypeName - ADI/Editor
 * @property {string} platform - platform
 * @property {GUID} msid - site guid
 * @property {string} action - go to editor/ stay in ADI
 * @return {LogObject<dashboardSiteSelectorPopupSelectActionParams>} LogObject<dashboardSiteSelectorPopupSelectActionParams>
 */
export function dashboardSiteSelectorPopupSelectAction(params) {
    return { evid: 83, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesEmailQuotesPage' event (evid: 84)
 *
 * Event description: email invoice pop up
 *
 * @param {quotesEmailQuotesPageParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} origin - origin page
 * @property {string} origin_device - web,native
 * @property {boolean} resend - resend mode?
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {GUID} quoteId - quote guid
 * @return {LogObject<quotesEmailQuotesPageParams>} LogObject<quotesEmailQuotesPageParams>
 */
export function quotesEmailQuotesPage(params) {
    return { evid: 84, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'sendFaqMessage' event (evid: 8400)
 *
 * Event description: send faq message
 *
 * @param {sendFaqMessageParams} params - The parameters for this event
 * @property {GUID} visitorId - visitor id
 * @property {boolean} answer - answer_faq
 * @property {GUID} msid - msid
 * @return {LogObject<sendFaqMessageParams>} LogObject<sendFaqMessageParams>
 */
export function sendFaqMessage(params) {
    return { evid: 8400, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'crmHomeWorkflowsWidgetGoToWorkflows' event (evid: 844)
 *
 * Event description: CRM Home - workflows widget - go to workflows
 *
 * @param {crmHomeWorkflowsWidgetGoToWorkflowsParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<crmHomeWorkflowsWidgetGoToWorkflowsParams>} LogObject<crmHomeWorkflowsWidgetGoToWorkflowsParams>
 */
export function crmHomeWorkflowsWidgetGoToWorkflows(params) {
    return { evid: 844, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'toastShown85' event (evid: 85)
 *
 * Event description: a toast is shown in one of Giza's hosting platform. currently, in case of business manager - the reporting is from business manager itself and not from Giza. in the meantime to get business manager toasts filter hosting is not null
 *
 * @param {toastShown85Params} params - The parameters for this event
 * @property {string} name - toast name, supplied by toast initiator
 * @property {string} hosting_platform - hosting_platform
 * @property {string} active_page_id - active_page_id
 * @property {string} scope - toast scope {app/ dashboard/my-sites}
 * @property {string} trigger_entity_type - trigger_entity_type
 * @property {string} view_type - view_type
 * @property {string} severity - high, normal, low
 * @property {string} type - standard, error, warning, success, premium
 * @property {string} platform - platform
 * @property {string} hosting_platform_context_id - hosting_platform_context_id
 * @property {string} hosting - MA/editor/dashboard
 * @property {number} timeout - miliseconds to auto hide toast, 0 is sticky toast
 * @property {GUID} msid - metasite id
 * @property {string} trigger_entity_id - trigger_entity_id
 * @property {string} toast_timeout - toast_timeout
 * @property {string} message - message
 * @property {string} app_id - app_id
 * @return {LogObject<toastShown85Params>} LogObject<toastShown85Params>
 */
export function toastShown85(params) {
    return { evid: 85, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'crmHomeWorkflowsWidgetUseTemplate' event (evid: 852)
 *
 * Event description: CRM Home - workflows widget - use template
 *
 * @param {crmHomeWorkflowsWidgetUseTemplateParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} template - which template the user chosen
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<crmHomeWorkflowsWidgetUseTemplateParams>} LogObject<crmHomeWorkflowsWidgetUseTemplateParams>
 */
export function crmHomeWorkflowsWidgetUseTemplate(params) {
    return { evid: 852, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'crmHomeWorkflowsWidgetStartFromScratch' event (evid: 853)
 *
 * Event description: CRM Home - workflows widget - start from scratch
 *
 * @param {crmHomeWorkflowsWidgetStartFromScratchParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<crmHomeWorkflowsWidgetStartFromScratchParams>} LogObject<crmHomeWorkflowsWidgetStartFromScratchParams>
 */
export function crmHomeWorkflowsWidgetStartFromScratch(params) {
    return { evid: 853, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'crmHomeIntegrationsCommunicationsViewAll' event (evid: 854)
 *
 * Event description: CRM Home - integrations - communications view all
 *
 * @param {crmHomeIntegrationsCommunicationsViewAllParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<crmHomeIntegrationsCommunicationsViewAllParams>} LogObject<crmHomeIntegrationsCommunicationsViewAllParams>
 */
export function crmHomeIntegrationsCommunicationsViewAll(params) {
    return { evid: 854, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'crmHomeIntegrationsCommunicationsConnect' event (evid: 855)
 *
 * Event description: CRM Home - integrations - communications connect
 *
 * @param {crmHomeIntegrationsCommunicationsConnectParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} connectTab - which connection the user choose
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<crmHomeIntegrationsCommunicationsConnectParams>} LogObject<crmHomeIntegrationsCommunicationsConnectParams>
 */
export function crmHomeIntegrationsCommunicationsConnect(params) {
    return { evid: 855, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'toastClicked86' event (evid: 86)
 *
 * Event description: user clicks on toast CTA or dismisses toast in one of Giza's hosting platform. currently, in case of business manager - the reporting is from business manager itself and not from Giza. in the meantime to get business manager toasts filter hosting is not null
 *
 * @param {toastClicked86Params} params - The parameters for this event
 * @property {string} name - toast name, supplied by toast initiator
 * @property {string} hosting_platform - hosting_platform
 * @property {string} active_page_id - active_page_id
 * @property {string} scope - toast scope {app/ dashboard}
 * @property {string} trigger_entity_type - trigger_entity_type
 * @property {string} click_type - CTA/dismiss
 * @property {string} view_type - view_type
 * @property {string} severity - high, normal, low
 * @property {string} type - info, error, warning, success, premium
 * @property {string} platform - platform
 * @property {string} hosting_platform_context_id - hosting_platform_context_id
 * @property {string} hosting - MA/editor/dashboard
 * @property {number} timeout - seconds to auto hide toast, 0 is sticky toast
 * @property {GUID} msid - metasite id
 * @property {string} trigger_entity_id - trigger_entity_id
 * @property {string} toast_timeout - toast_timeout
 * @return {LogObject<toastClicked86Params>} LogObject<toastClicked86Params>
 */
export function toastClicked86(params) {
    return { evid: 86, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'crmHomeIntegrationsMarketingViewAll' event (evid: 860)
 *
 * Event description: CRM Home - integrations - marketing view all
 *
 * @param {crmHomeIntegrationsMarketingViewAllParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<crmHomeIntegrationsMarketingViewAllParams>} LogObject<crmHomeIntegrationsMarketingViewAllParams>
 */
export function crmHomeIntegrationsMarketingViewAll(params) {
    return { evid: 860, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dummyNameSrc5Evid8600' event (evid: 8600)
 *
 * Event description: dummy-name.
 *
 * @param {dummyNameSrc5Evid8600Params} params - The parameters for this event
 * @return {LogObject<dummyNameSrc5Evid8600Params>} LogObject<dummyNameSrc5Evid8600Params>
 */
export function dummyNameSrc5Evid8600(params) {
    return { evid: 8600, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'siteMembersSignupSettingsEditFieldTextSettings' event (evid: 864)
 *
 * Event description: user updating field text settings
 *
 * @param {siteMembersSignupSettingsEditFieldTextSettingsParams} params - The parameters for this event
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} setting_value - {}
 * @property {GUID} msid - msid
 * @property {string} field_name - field name
 * @return {LogObject<siteMembersSignupSettingsEditFieldTextSettingsParams>} LogObject<siteMembersSignupSettingsEditFieldTextSettingsParams>
 */
export function siteMembersSignupSettingsEditFieldTextSettings(params) {
    return { evid: 864, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderGetSubscribersFormManageSubscribersClick' event (evid: 867)
 *
 * Event description: user click Manage Subscribers in GetSubscribers Form
 *
 * @param {formBuilderGetSubscribersFormManageSubscribersClickParams} params - The parameters for this event
 * @property {GUID} visitor_id - visitor_id
 * @property {GUID} vsi - vsi
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @property {string} action - Manage Subscribers
 * @return {LogObject<formBuilderGetSubscribersFormManageSubscribersClickParams>} LogObject<formBuilderGetSubscribersFormManageSubscribersClickParams>
 */
export function formBuilderGetSubscribersFormManageSubscribersClick(params) {
    return { evid: 867, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderGetSubscribersFormManageSubscribersActionsClick' event (evid: 868)
 *
 * Event description: user click actions in Manage Subscribers pop-up in GetSubscribers Form
 *
 * @param {formBuilderGetSubscribersFormManageSubscribersActionsClickParams} params - The parameters for this event
 * @property {GUID} visitor_id - visitor_id
 * @property {GUID} vsi - vsi
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @property {string} action - 'Create Email'/'Get Started'/'Manage Your Contacts'
 * @return {LogObject<formBuilderGetSubscribersFormManageSubscribersActionsClickParams>} LogObject<formBuilderGetSubscribersFormManageSubscribersActionsClickParams>
 */
export function formBuilderGetSubscribersFormManageSubscribersActionsClick(params) {
    return { evid: 868, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderCaptachaStatus' event (evid: 869)
 *
 * Event description: Form submission - captcha status
 *
 * @param {formBuilderCaptachaStatusParams} params - The parameters for this event
 * @property {GUID} visitor_id - visitor_id
 * @property {string} authentication_status - { 'verified' / 'expire' / 'reset'}
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} viewerName - viewerName
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderCaptachaStatusParams>} LogObject<formBuilderCaptachaStatusParams>
 */
export function formBuilderCaptachaStatus(params) {
    return { evid: 869, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesEmailQuotePageCancelClick' event (evid: 87)
 *
 * Event description: email quote - clicked on cancel
 *
 * @param {quotesEmailQuotePageCancelClickParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} origin - origin page
 * @property {string} origin_device - web,native
 * @property {boolean} resend - resend mode?
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {GUID} quoteId - quote guid
 * @return {LogObject<quotesEmailQuotePageCancelClickParams>} LogObject<quotesEmailQuotePageCancelClickParams>
 */
export function quotesEmailQuotePageCancelClick(params) {
    return { evid: 87, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderTooltipForAddFieldForbiddenWords' event (evid: 870)
 *
 * Event description: a tooltip with message is presented due to  forbidden field name
 *
 * @param {formBuilderTooltipForAddFieldForbiddenWordsParams} params - The parameters for this event
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @property {string} field_name - field_name
 * @property {string} entered_text - entered_text
 * @return {LogObject<formBuilderTooltipForAddFieldForbiddenWordsParams>} LogObject<formBuilderTooltipForAddFieldForbiddenWordsParams>
 */
export function formBuilderTooltipForAddFieldForbiddenWords(params) {
    return { evid: 870, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'startLoading8702' event (evid: 8702)
 *
 * Event description: when Giza start loading
 *
 * @param {startLoading8702Params} params - The parameters for this event
 * @property {string} hosting_platform - accountmanager/bizmanager/devcenter/etc.
 * @property {GUID} hosting_platform_context_id - context id: when the context is site - msid, when the context is app_id (like in devCenter f.e) - appDefId. In account manager is null
 * @return {LogObject<startLoading8702Params>} LogObject<startLoading8702Params>
 */
export function startLoading8702(params) {
    return { evid: 8702, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderManageChoicesUpdateDisplayName' event (evid: 871)
 *
 * Event description: When user is updating the field name (displayed question) in 'Manage Choices' Settings Pop up
 *
 * @param {formBuilderManageChoicesUpdateDisplayNameParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {string} field_type - field_type
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderManageChoicesUpdateDisplayNameParams>} LogObject<formBuilderManageChoicesUpdateDisplayNameParams>
 */
export function formBuilderManageChoicesUpdateDisplayName(params) {
    return { evid: 871, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderManageChoicesAddAChoiceClick' event (evid: 872)
 *
 * Event description: user click on Add A Choice in Manage Choices page
 *
 * @param {formBuilderManageChoicesAddAChoiceClickParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {string} field_type - field_type
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderManageChoicesAddAChoiceClickParams>} LogObject<formBuilderManageChoicesAddAChoiceClickParams>
 */
export function formBuilderManageChoicesAddAChoiceClick(params) {
    return { evid: 872, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderManageChoicesEditChoice' event (evid: 873)
 *
 * Event description: Manage Choices -Edit Choice
 *
 * @param {formBuilderManageChoicesEditChoiceParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {string} field_type - field_type
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderManageChoicesEditChoiceParams>} LogObject<formBuilderManageChoicesEditChoiceParams>
 */
export function formBuilderManageChoicesEditChoice(params) {
    return { evid: 873, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderManageChoicesDeleteChoice' event (evid: 874)
 *
 * Event description: Manage Choices- Delete Choice
 *
 * @param {formBuilderManageChoicesDeleteChoiceParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {string} field_type - field_type
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderManageChoicesDeleteChoiceParams>} LogObject<formBuilderManageChoicesDeleteChoiceParams>
 */
export function formBuilderManageChoicesDeleteChoice(params) {
    return { evid: 874, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderManageChoicesUpdateChoiceName' event (evid: 875)
 *
 * Event description: user updating choice name
 *
 * @param {formBuilderManageChoicesUpdateChoiceNameParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {string} field_type - field_type
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderManageChoicesUpdateChoiceNameParams>} LogObject<formBuilderManageChoicesUpdateChoiceNameParams>
 */
export function formBuilderManageChoicesUpdateChoiceName(params) {
    return { evid: 875, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderManageChoicesSetAsDefaultChoice' event (evid: 876)
 *
 * Event description: user click on remove default/set as default choice
 *
 * @param {formBuilderManageChoicesSetAsDefaultChoiceParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {string} field_type - field_type
 * @property {GUID} visitor_id - visitor_id
 * @property {string} choice_name - choice_name
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderManageChoicesSetAsDefaultChoiceParams>} LogObject<formBuilderManageChoicesSetAsDefaultChoiceParams>
 */
export function formBuilderManageChoicesSetAsDefaultChoice(params) {
    return { evid: 876, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderManageChoicesDuplicateChoiceClick' event (evid: 877)
 *
 * Event description: user click on duplicate choice
 *
 * @param {formBuilderManageChoicesDuplicateChoiceClickParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {string} field_type - field_type
 * @property {GUID} visitor_id - visitor_id
 * @property {string} choice_name - choice_name
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderManageChoicesDuplicateChoiceClickParams>} LogObject<formBuilderManageChoicesDuplicateChoiceClickParams>
 */
export function formBuilderManageChoicesDuplicateChoiceClick(params) {
    return { evid: 877, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderManageChoicesDuplicateChoiceComplete' event (evid: 878)
 *
 * Event description: Manage Choices - Duplicate Choice - complete
 *
 * @param {formBuilderManageChoicesDuplicateChoiceCompleteParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {string} field_type - field_type
 * @property {GUID} visitor_id - visitor_id
 * @property {string} choice_name - choice_name
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderManageChoicesDuplicateChoiceCompleteParams>} LogObject<formBuilderManageChoicesDuplicateChoiceCompleteParams>
 */
export function formBuilderManageChoicesDuplicateChoiceComplete(params) {
    return { evid: 878, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderManageChoicesReorderChoiceComplete' event (evid: 879)
 *
 * Event description: choice reorder is successfully completed
 *
 * @param {formBuilderManageChoicesReorderChoiceCompleteParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {string} field_type - field_type
 * @property {GUID} visitor_id - visitor_id
 * @property {string} choice_name - choice_name
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderManageChoicesReorderChoiceCompleteParams>} LogObject<formBuilderManageChoicesReorderChoiceCompleteParams>
 */
export function formBuilderManageChoicesReorderChoiceComplete(params) {
    return { evid: 879, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesPrintQuote' event (evid: 88)
 *
 * Event description: print quote
 *
 * @param {quotesPrintQuoteParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} origin - my invoices, preview
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {GUID} quoteId - quote guid
 * @return {LogObject<quotesPrintQuoteParams>} LogObject<quotesPrintQuoteParams>
 */
export function quotesPrintQuote(params) {
    return { evid: 88, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderMultiStepDragStep' event (evid: 882)
 *
 * Event description: Form Builder - Multi Step - drag step
 *
 * @param {formBuilderMultiStepDragStepParams} params - The parameters for this event
 * @property {string} step_name - step_name
 * @property {string} builderOrigin - ADI / Editor
 * @property {number} from_step - from_step location
 * @property {GUID} visitor_id - visitor_id
 * @property {number} total_number_of_steps - total_number_of_steps
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {number} to_step - to_step location
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderMultiStepDragStepParams>} LogObject<formBuilderMultiStepDragStepParams>
 */
export function formBuilderMultiStepDragStep(params) {
    return { evid: 882, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderMultiStepClickOnManageSteps' event (evid: 883)
 *
 * Event description: Form Builder - Multi Step - click on Manage Steps
 *
 * @param {formBuilderMultiStepClickOnManageStepsParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {string} click_type - 'manage steps button', 'form settings', 'steps dropdown'
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderMultiStepClickOnManageStepsParams>} LogObject<formBuilderMultiStepClickOnManageStepsParams>
 */
export function formBuilderMultiStepClickOnManageSteps(params) {
    return { evid: 883, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderMultiStepEditStepActions' event (evid: 885)
 *
 * Event description: Form Builder - Multi Step - edit step actions
 *
 * @param {formBuilderMultiStepEditStepActionsParams} params - The parameters for this event
 * @property {string} step_name - step_name
 * @property {number} step_no - step_no
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {GUID} msid - msid
 * @property {string} action - ‘rename’/’duplicate’/’delete’/’Submit Message’
 * @return {LogObject<formBuilderMultiStepEditStepActionsParams>} LogObject<formBuilderMultiStepEditStepActionsParams>
 */
export function formBuilderMultiStepEditStepActions(params) {
    return { evid: 885, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderMultiStepAddNewStep' event (evid: 886)
 *
 * Event description: Form Builder - Multi Step - add new step
 *
 * @param {formBuilderMultiStepAddNewStepParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderMultiStepAddNewStepParams>} LogObject<formBuilderMultiStepAddNewStepParams>
 */
export function formBuilderMultiStepAddNewStep(params) {
    return { evid: 886, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderMultiStepAddNewField' event (evid: 887)
 *
 * Event description: Form Builder - Multi Step - add new field
 *
 * @param {formBuilderMultiStepAddNewFieldParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderMultiStepAddNewFieldParams>} LogObject<formBuilderMultiStepAddNewFieldParams>
 */
export function formBuilderMultiStepAddNewField(params) {
    return { evid: 887, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderBackofficeFormSubscriberUserActions' event (evid: 888)
 *
 * Event description: user actions in the 'subscribe' section in standalone form
 *
 * @param {formBuilderBackofficeFormSubscriberUserActionsParams} params - The parameters for this event
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form_comp_id
 * @property {GUID} vsi - vsi
 * @property {GUID} msid - msid
 * @property {string} value - checked / unchecked / single / double
 * @property {string} action - checkbox_text / opt_in /learn_more
 * @return {LogObject<formBuilderBackofficeFormSubscriberUserActionsParams>} LogObject<formBuilderBackofficeFormSubscriberUserActionsParams>
 */
export function formBuilderBackofficeFormSubscriberUserActions(params) {
    return { evid: 888, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderMultiStepClickOnAscendPlan' event (evid: 889)
 *
 * Event description: Form Builder - Multi Step - Click on Ascend Plan
 *
 * @param {formBuilderMultiStepClickOnAscendPlanParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderMultiStepClickOnAscendPlanParams>} LogObject<formBuilderMultiStepClickOnAscendPlanParams>
 */
export function formBuilderMultiStepClickOnAscendPlan(params) {
    return { evid: 889, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesDownloadPdfQuote' event (evid: 89)
 *
 * Event description: click on save as PDF on quote
 *
 * @param {quotesDownloadPdfQuoteParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} origin - customer for UoU, my quote for users
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {GUID} quoteId - quote guid
 * @return {LogObject<quotesDownloadPdfQuoteParams>} LogObject<quotesDownloadPdfQuoteParams>
 */
export function quotesDownloadPdfQuote(params) {
    return { evid: 89, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderMultiStepBackNextButtonChangeText' event (evid: 890)
 *
 * Event description: Form Builder - Multi Step - back/next button - change text
 *
 * @param {formBuilderMultiStepBackNextButtonChangeTextParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} button - next/back
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderMultiStepBackNextButtonChangeTextParams>} LogObject<formBuilderMultiStepBackNextButtonChangeTextParams>
 */
export function formBuilderMultiStepBackNextButtonChangeText(params) {
    return { evid: 890, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'finishLoading8900' event (evid: 8900)
 *
 * Event description: when Giza finish loading
 *
 * @param {finishLoading8900Params} params - The parameters for this event
 * @property {string} hosting_platform - accountmanagr/bizmanagr/devcenter/etc.
 * @property {string} view_type - view_type
 * @property {number} screen_width - the screen width
 * @property {number} window_width - the window width
 * @property {number} screen_height - the screen hight
 * @property {number} window_height - the window height
 * @property {string} platform - platform
 * @property {string} hosting_platform_context_id - context id: when the context is site - msid, when the context is app_id (like in devCenter f.e) - appDefId. In account manager is null
 * @property {number} loading_time - loading time of the platform in ms (time from Giza start loading event)
 * @return {LogObject<finishLoading8900Params>} LogObject<finishLoading8900Params>
 */
export function finishLoading8900(params) {
    return { evid: 8900, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'exposureEventForPaginationTest' event (evid: 8906)
 *
 * Event description: will be sent when users enter to my sites page, providing data about folders number
 *
 * @param {exposureEventForPaginationTestParams} params - The parameters for this event
 * @property {number} folders_number - the number of folders in the root (1st level)
 * @property {boolean} is_pagination_user - True if the user has more than 50 folders in the root, false if less
 * @property {string} view_type - view_type
 * @property {string} platform - deprecated
 * @return {LogObject<exposureEventForPaginationTestParams>} LogObject<exposureEventForPaginationTestParams>
 */
export function exposureEventForPaginationTest(params) {
    return { evid: 8906, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderMultiStepBackNextButtonFinishUpdateText' event (evid: 891)
 *
 * Event description: Form Builder - Multi Step - back/next button - finish update text
 *
 * @param {formBuilderMultiStepBackNextButtonFinishUpdateTextParams} params - The parameters for this event
 * @property {string} name - name
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} button - next/back
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderMultiStepBackNextButtonFinishUpdateTextParams>} LogObject<formBuilderMultiStepBackNextButtonFinishUpdateTextParams>
 */
export function formBuilderMultiStepBackNextButtonFinishUpdateText(params) {
    return { evid: 891, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'invoiceSettingsSelectTaxDetailsCustomFieldCheckbox' event (evid: 8917)
 *
 * Event description: How user select to show taxes in Invoice
 *
 * @param {invoiceSettingsSelectTaxDetailsCustomFieldCheckboxParams} params - The parameters for this event
 * @property {boolean} showTaxAmount - whether net taxes is shown in invoice (tax breakdown)
 * @property {boolean} showItemsSubtotalPerTax - is payments received section is shown in invoice
 * @property {string} view_type - view_type
 * @property {boolean} showTaxColumn - is tax is shown per line item
 * @property {boolean} checkbox - checked or un-checked
 * @property {string} value2 - ‘other setting same modal value (enambled/disabled)
 * @property {string} platform - Web/ Mobile
 * @property {GUID} msid - msid
 * @property {string} value - ‘tax per line item’/ ‘net tax amount’
 * @return {LogObject<invoiceSettingsSelectTaxDetailsCustomFieldCheckboxParams>} LogObject<invoiceSettingsSelectTaxDetailsCustomFieldCheckboxParams>
 */
export function invoiceSettingsSelectTaxDetailsCustomFieldCheckbox(params) {
    return { evid: 8917, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'invoiceSettingsClickOnLink' event (evid: 8918)
 *
 * Event description: When a user click on some strings/values which takes to another page
 *
 * @param {invoiceSettingsClickOnLinkParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} modal_name - modal name ( example: ‘Tax setting’s)
 * @property {string} origin - tab name (example: ‘Invoice’)
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {string} value - value clicked ( example: ’General’)
 * @return {LogObject<invoiceSettingsClickOnLinkParams>} LogObject<invoiceSettingsClickOnLinkParams>
 */
export function invoiceSettingsClickOnLink(params) {
    return { evid: 8918, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderMultiStepUouClickOnBackNextSubmit' event (evid: 892)
 *
 * Event description: Form Builder - Multi Step - uou click on back/next
 *
 * @param {formBuilderMultiStepUouClickOnBackNextSubmitParams} params - The parameters for this event
 * @property {string} step_name - step_name
 * @property {number} step_no - step_no
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {number} total_number_of_steps - total_number_of_steps
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} viewerName - viewerName
 * @property {GUID} msid - msid
 * @property {string} action - next/back/submit
 * @return {LogObject<formBuilderMultiStepUouClickOnBackNextSubmitParams>} LogObject<formBuilderMultiStepUouClickOnBackNextSubmitParams>
 */
export function formBuilderMultiStepUouClickOnBackNextSubmit(params) {
    return { evid: 892, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'bookingAnywhereNoPermission' event (evid: 8920)
 *
 * Event description: when the user dont have the permissio and he hover
 *
 * @param {bookingAnywhereNoPermissionParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} buttonName - share services or manage calendar
 * @property {string} platform - depercated
 * @property {GUID} msid - --
 * @return {LogObject<bookingAnywhereNoPermissionParams>} LogObject<bookingAnywhereNoPermissionParams>
 */
export function bookingAnywhereNoPermission(params) {
    return { evid: 8920, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'mySitesMainPageFinishLoading' event (evid: 8921)
 *
 * Event description: When users enter the main page of my sites and he has at least one site or folder, the event is sent
 *
 * @param {mySitesMainPageFinishLoadingParams} params - The parameters for this event
 * @property {boolean} success - True if the page loaded successfully, else false
 * @property {number} total_folders_count - Total number of folders the user has in his account, including the trash.
 * @property {string} view_mode - grid / list
 * @property {number} total_sites_count - Total number of sites the user has in his account
 * @property {number} num_displayed_folders - The number of folders in the My sites page, Including the trash.
 * @property {string} referral_info - the url of the last page the users have seen
 * @property {string} origin - my-site
 * @property {number} num_displayed_sites - Num sites displayed on the page (all of the sites out of the folders - on the root)
 * @property {boolean} is_pro - True if the user have partners dash
 * @property {string} platform - deprecated
 * @property {Url} page_url - the url of the page that the user see
 * @property {number} loading_time - The time it took to finish loading the page in ms
 * @return {LogObject<mySitesMainPageFinishLoadingParams>} LogObject<mySitesMainPageFinishLoadingParams>
 */
export function mySitesMainPageFinishLoading(params) {
    return { evid: 8921, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'addNoteTermClick' event (evid: 8923)
 *
 * Event description: Clicking on ‘Add’ note or term in PayME request
 *
 * @param {addNoteTermClickParams} params - The parameters for this event
 * @property {string} source - productSource
 * @property {string} view_type - view_type
 * @property {GUID} appDefId - appDefId
 * @property {string} invoiceType - ’recurringAutoCharge’/ 'recurring'/ 'one time'
 * @property {string} origin - create invoice, edit invoice
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {GUID} invoice_id - invoice guid
 * @return {LogObject<addNoteTermClickParams>} LogObject<addNoteTermClickParams>
 */
export function addNoteTermClick(params) {
    return { evid: 8923, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'mySitesSiteLessLoaded' event (evid: 8926)
 *
 * Event description: When users enter the main page of my sites and the page is site-less experience, the event is sent
 *
 * @param {mySitesSiteLessLoadedParams} params - The parameters for this event
 * @property {boolean} success - True if the page loaded successfully, else false
 * @property {string} referral_info - The url of the last page the users have seen
 * @property {string} origin - my sites for studio/my sites for DIY
 * @property {string} platform - Deprecated
 * @property {string} page_url - The url of the page that the user sees
 * @property {number} loading_time - The time it took to finish loading the page in ms
 * @return {LogObject<mySitesSiteLessLoadedParams>} LogObject<mySitesSiteLessLoadedParams>
 */
export function mySitesSiteLessLoaded(params) {
    return { evid: 8926, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'wixInvoicesClickingOnGroupsDropDownInSettings' event (evid: 8929)
 *
 * Event description: Clicking on Particular drop down ( Header details, Business Info, Tax settings, Footer Notes)
 *
 * @param {wixInvoicesClickingOnGroupsDropDownInSettingsParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - mobile/web
 * @property {string} card - Header details, Business Info, Tax settings, Footer Notes)
 * @property {GUID} msid - msid
 * @property {string} value - open/close
 * @return {LogObject<wixInvoicesClickingOnGroupsDropDownInSettingsParams>} LogObject<wixInvoicesClickingOnGroupsDropDownInSettingsParams>
 */
export function wixInvoicesClickingOnGroupsDropDownInSettings(params) {
    return { evid: 8929, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderBackofficeFormDeleteKeepSubscribeItem' event (evid: 893)
 *
 * Event description: user delete/keep 'subscribe' item in standalone form
 *
 * @param {formBuilderBackofficeFormDeleteKeepSubscribeItemParams} params - The parameters for this event
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form_comp_id
 * @property {GUID} vsi - vsi
 * @property {GUID} msid - msid
 * @property {string} value - value
 * @return {LogObject<formBuilderBackofficeFormDeleteKeepSubscribeItemParams>} LogObject<formBuilderBackofficeFormDeleteKeepSubscribeItemParams>
 */
export function formBuilderBackofficeFormDeleteKeepSubscribeItem(params) {
    return { evid: 893, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'invoicesSettingsSaveButton' event (evid: 8930)
 *
 * Event description: When Invoices settings is Saved by clicking on button
 *
 * @param {invoicesSettingsSaveButtonParams} params - The parameters for this event
 * @property {string} invoiceNumber - invoiceNumber
 * @property {boolean} showTaxAmount - whether net taxes is shown in invoice
 * @property {boolean} hasLogo - weather logo is uploaded
 * @property {string} documentName - documentName
 * @property {boolean} showItemsSubtotalPerTax - is items subtotal per tax group is shown in invoice
 * @property {string} customFields - what custom fields is added (header fields, business custom fields, footer notes)
 * @property {string} invoiceEmail - what is written in email that is sending to cutomer
 * @property {string} view_type - view_type
 * @property {boolean} showTaxColumn - is tax is shown per line item
 * @property {string} card_name - Header details, Business Info, Tax settings, Footer Notes)
 * @property {string} origin - From which place it was saved: ‘Discard Modal’ , ‘Save button’
 * @property {boolean} showTransactionDetails - is payments received section is shown in invoice
 * @property {string} platform - mobile/web
 * @property {GUID} msid - msid
 * @return {LogObject<invoicesSettingsSaveButtonParams>} LogObject<invoicesSettingsSaveButtonParams>
 */
export function invoicesSettingsSaveButton(params) {
    return { evid: 8930, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'manageFolderDropDownListShown' event (evid: 8933)
 *
 * Event description: When Manage Folder drop-down list/menu is shown, after the user clicked on Mange Folder button
 *
 * @param {manageFolderDropDownListShownParams} params - The parameters for this event
 * @property {string} sub_view - list/grid
 * @property {string} origin - my-sites/dashboard/sites-list-enterprise
 * @property {string} cta - manage folder top button / folder 3 dot button
 * @property {string} platform - deprecated
 * @property {string} permitted_items - list of all the items the user can click on (unblocked items)
 * @property {string} itemsList - list of all the shown items when drop down menu is shown
 * @return {LogObject<manageFolderDropDownListShownParams>} LogObject<manageFolderDropDownListShownParams>
 */
export function manageFolderDropDownListShown(params) {
    return { evid: 8933, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'wixInvoicesLeavingSettingsWithoutSavingPopUp' event (evid: 8934)
 *
 * Event description: Wix Invoices: Leaving Settings without saving pop up. Discard Changes Modal
 *
 * @param {wixInvoicesLeavingSettingsWithoutSavingPopUpParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} modal_name - weather its ‘Discard modal’, clicking on discard or clicking anywhere else, getting ‘Save changes’ modal
 * @property {string} fieldName - where user clicked to go
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<wixInvoicesLeavingSettingsWithoutSavingPopUpParams>} LogObject<wixInvoicesLeavingSettingsWithoutSavingPopUpParams>
 */
export function wixInvoicesLeavingSettingsWithoutSavingPopUp(params) {
    return { evid: 8934, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'discardModalClick' event (evid: 8935)
 *
 * Event description: In Invoices settings Discard modal chosen action
 *
 * @param {discardModalClickParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} modal_name - weather its ‘Discard modal’, clicking on discard or clicking anywhere else, getting ‘Save changes’ modal
 * @property {string} platform - mobile/web
 * @property {GUID} msid - msid
 * @property {string} value - ‘Discard’, ‘x’, ‘Close’
 * @return {LogObject<discardModalClickParams>} LogObject<discardModalClickParams>
 */
export function discardModalClick(params) {
    return { evid: 8935, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'wixInvoicesClickOnTabsToChoseProductFrom' event (evid: 8936)
 *
 * Event description: Wix Invoices - click on tabs to chose product from
 *
 * @param {wixInvoicesClickOnTabsToChoseProductFromParams} params - The parameters for this event
 * @property {string} button_name - Invoice, Store, Bookings
 * @property {string} view_type - view_type
 * @property {string} productSource - app_deff_id
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<wixInvoicesClickOnTabsToChoseProductFromParams>} LogObject<wixInvoicesClickOnTabsToChoseProductFromParams>
 */
export function wixInvoicesClickOnTabsToChoseProductFrom(params) {
    return { evid: 8936, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'invoiceSettingsSaveButtonClick' event (evid: 8937)
 *
 * Event description: In Invoices settings Save button click
 *
 * @param {invoiceSettingsSaveButtonClickParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} origin - From which place it was saved: ‘Discard Modal’ , ‘Save button’
 * @property {string} platform - mobile/web
 * @property {GUID} msid - msid
 * @return {LogObject<invoiceSettingsSaveButtonClickParams>} LogObject<invoiceSettingsSaveButtonClickParams>
 */
export function invoiceSettingsSaveButtonClick(params) {
    return { evid: 8937, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'wixInvoicesSavingItemDescription' event (evid: 8938)
 *
 * Event description: Wix Invoices: Saving Item Description
 *
 * @param {wixInvoicesSavingItemDescriptionParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} productSource - product source
 * @property {string} origin - create product, edit product
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<wixInvoicesSavingItemDescriptionParams>} LogObject<wixInvoicesSavingItemDescriptionParams>
 */
export function wixInvoicesSavingItemDescription(params) {
    return { evid: 8938, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'gizaApiCallReceived' event (evid: 8939)
 *
 * Event description: When API call is received in one of Giza's hosting platforms. the API could be generated by Wix App, Third Party App, or by the Hosting Platform itself.
 *
 * @param {gizaApiCallReceivedParams} params - The parameters for this event
 * @property {string} hosting_platform - the Giza's hosting platform that the API call received in. expected values: dev center/ BizMgr/ account manager/ etc.
 * @property {string} app_id - the app that generated an API call, it can be Wix app or TPA. if the API call was generated by the hosting platform itself and not by an app the app_id will be null
 * @property {string} method_name - The method name
 * @property {string} component_id - the component id of the component that triggered the API call. the component id it's the id of the component in dev center.
 * @property {string} hosting_platform_context_id - f.e.: metasite id  will be reported when there is context of site like in BizMgr
 * @return {LogObject<gizaApiCallReceivedParams>} LogObject<gizaApiCallReceivedParams>
 */
export function gizaApiCallReceived(params) {
    return { evid: 8939, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderMultiStepClickOnRestoreButtons' event (evid: 894)
 *
 * Event description: Form Builder - click on restore next/back/submit buttons
 *
 * @param {formBuilderMultiStepClickOnRestoreButtonsParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {GUID} msid - msid
 * @property {string} action - ‘restore back button’/ ‘restore next button’/‘restore submit button’
 * @return {LogObject<formBuilderMultiStepClickOnRestoreButtonsParams>} LogObject<formBuilderMultiStepClickOnRestoreButtonsParams>
 */
export function formBuilderMultiStepClickOnRestoreButtons(params) {
    return { evid: 894, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'clickDoneToEditFilterView' event (evid: 8940)
 *
 * Event description: The event is sent when the user clicks on the 'select' / 'select&edit' button from a site in grid view
 *
 * @param {clickDoneToEditFilterViewParams} params - The parameters for this event
 * @property {string} click_type - select / select & edit
 * @property {string} ds_origin - editor / ADI / editorX
 * @property {number} nesting_level - 0 (sites-list-enterprise page=ROOT)/ 1 (folder) / 2 / 3...
 * @property {string} origin - sites-list-partners-DIY
 * @property {string} view_level - folder/root
 * @property {boolean} is_premium - .
 * @property {string} platform - deprecated
 * @property {string} msid - msid
 * @property {boolean} is_published - .
 * @return {LogObject<clickDoneToEditFilterViewParams>} LogObject<clickDoneToEditFilterViewParams>
 */
export function clickDoneToEditFilterView(params) {
    return { evid: 8940, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'clickOnSaveView' event (evid: 8941)
 *
 * Event description: The event will be sent when this banner is display on a users screen or when a users clicks on it.
 *
 * @param {clickOnSaveViewParams} params - The parameters for this event
 * @property {string} action_type - view/click
 * @property {string} platform - deprecated
 * @return {LogObject<clickOnSaveViewParams>} LogObject<clickOnSaveViewParams>
 */
export function clickOnSaveView(params) {
    return { evid: 8941, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'mySitesEditCustomizeColumnView' event (evid: 8942)
 *
 * Event description: The event is sent when the user clicks on select \ unselect a customize column
 *
 * @param {mySitesEditCustomizeColumnViewParams} params - The parameters for this event
 * @property {string} origin - sites-list-enterprise
 * @property {string} platform - deprecated
 * @return {LogObject<mySitesEditCustomizeColumnViewParams>} LogObject<mySitesEditCustomizeColumnViewParams>
 */
export function mySitesEditCustomizeColumnView(params) {
    return { evid: 8942, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'mySitesClickOnGoToDashboardLink' event (evid: 8943)
 *
 * Event description: The event is sent when the user clicks on a 'Go To dashboard' button from the site-list main page when hovering over a site or from the side-panel
 *
 * @param {mySitesClickOnGoToDashboardLinkParams} params - The parameters for this event
 * @property {string} site_class - client/organization
 * @property {GUID} site_owner_id - The guid of the site owner id (the client)
 * @property {string} sub_view - list/grid
 * @property {number} nesting_level - 0 (sites-list-enterprise page=ROOT)/ 1 (folder) / 2 / 3...
 * @property {string} origin - sites-list-enterprise
 * @property {string} cta - The cta of the link site-list \ side-panel
 * @property {boolean} is_premium - If the site is premium: true/false
 * @property {string} platform - deprecated
 * @property {GUID} msid - The site guid the user clicked
 * @property {boolean} is_published - If the site is published: true/false
 * @return {LogObject<mySitesClickOnGoToDashboardLinkParams>} LogObject<mySitesClickOnGoToDashboardLinkParams>
 */
export function mySitesClickOnGoToDashboardLink(params) {
    return { evid: 8943, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'mySitesClickOnBackToMySitesFromAnEmptyFolder' event (evid: 8944)
 *
 * Event description: The event is sent when the user clicks on back to my sites link when he open an empty folder
 *
 * @param {mySitesClickOnBackToMySitesFromAnEmptyFolderParams} params - The parameters for this event
 * @property {string} sub_view - list/grid
 * @property {string} origin - sites-list-enterprise
 * @property {string} platform - platform
 * @property {string} folder_name - The current folder name
 * @return {LogObject<mySitesClickOnBackToMySitesFromAnEmptyFolderParams>} LogObject<mySitesClickOnBackToMySitesFromAnEmptyFolderParams>
 */
export function mySitesClickOnBackToMySitesFromAnEmptyFolder(params) {
    return { evid: 8944, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'mySitesSiteListPageStartLoading' event (evid: 8945)
 *
 * Event description: The event is sent when the page is start loading, when the user first open the page or when he clicks on navigation options inside the page
 *
 * @param {mySitesSiteListPageStartLoadingParams} params - The parameters for this event
 * @property {string} referral_url - The url of the previous page, can be null
 * @property {string} url - The url of the current page
 * @property {number} num_displayed_folders - the number of folders in the page. Including the trash.
 * @property {string} sub_view - list/grid
 * @property {string} page_experience - site-list / site-less. site less will be reported only in case of no folders and no sites at all. otherwise, site list.
 * @property {string} origin - sites-list-enterprise
 * @property {number} num_displayed_sites - num sites that are displayed on page (all of the sites out of the folders - on the root)
 * @property {string} view_level - root/folder
 * @property {string} platform - deprecated
 * @return {LogObject<mySitesSiteListPageStartLoadingParams>} LogObject<mySitesSiteListPageStartLoadingParams>
 */
export function mySitesSiteListPageStartLoading(params) {
    return { evid: 8945, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'mySitesSiteListFolderNavigation' event (evid: 8946)
 *
 * Event description: The event is sent when the user clicks on folder or back navigation click in Sites-List for enterprise.
 *
 * @param {mySitesSiteListFolderNavigationParams} params - The parameters for this event
 * @property {string} prev_folder_id - The previous folder id
 * @property {string} referral_url - The url of the previous page, can be null
 * @property {string} current_folder_name - the name of the folder (or ‘root’) that the user clicked to
 * @property {string} url - The url of the current page
 * @property {number} num_displayed_folders - total number of folders the user has in this page, includes trash
 * @property {string} sub_view - list/grid
 * @property {string} origin - sites-list-enterprise
 * @property {string} cta - /
 * @property {number} num_displayed_sites - num sites that are displayed on page (all of the sites out of the folders - on the root)
 * @property {string} platform - deprecated
 * @property {string} prev_folder_name - the name of the folder (or ‘root’) that the user clicked from
 * @property {string} current_folder_id - current_folder_id
 * @return {LogObject<mySitesSiteListFolderNavigationParams>} LogObject<mySitesSiteListFolderNavigationParams>
 */
export function mySitesSiteListFolderNavigation(params) {
    return { evid: 8946, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'mySitesClickSiteItem' event (evid: 8947)
 *
 * Event description: The event is sent when the user Clicked on a site to open the side panel
 *
 * @param {mySitesClickSiteItemParams} params - The parameters for this event
 * @property {string} view_mode - list/grid
 * @property {string} sections_list - List of all sections appear in the side panel, f.e: site name, premium features, site address, site analytics, etc.
 * @property {string} site_class - client/organization
 * @property {GUID} site_owner_id - The guid of the site owner id (the client)
 * @property {string} sub_view - list/grid
 * @property {string} origin - sites-list-enterprise
 * @property {boolean} is_premium - If the site is premium: true/false
 * @property {string} platform - deprecated
 * @property {GUID} msid - The site guid the user opened the menu for
 * @property {boolean} is_published - If the site is published: true/false
 * @property {string} action_description - open-side-panel / close-side-panel
 * @return {LogObject<mySitesClickSiteItemParams>} LogObject<mySitesClickSiteItemParams>
 */
export function mySitesClickSiteItem(params) {
    return { evid: 8947, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'mySitesClicksActionsInSidePanel' event (evid: 8948)
 *
 * Event description: The event is sent when the user clicked on an action in the side panel
 *
 * @param {mySitesClicksActionsInSidePanelParams} params - The parameters for this event
 * @property {string} site_class - client/organization
 * @property {GUID} site_owner_id - The guid of the site owner id (the client)
 * @property {string} sub_view - list/grid
 * @property {string} origin - sites-list-enterprise
 * @property {string} cta - The cta of the button/link (please report the cta key, I need it to be in english only)
 * @property {string} view_level - root / folder
 * @property {boolean} is_premium - If the site is premium: true/false
 * @property {string} platform - platform
 * @property {GUID} msid - The site guid the user opened the menu for
 * @property {Url} deep_link - The deep link of the cta the user clicked on
 * @property {boolean} is_published - If the site is published: true/false
 * @return {LogObject<mySitesClicksActionsInSidePanelParams>} LogObject<mySitesClicksActionsInSidePanelParams>
 */
export function mySitesClicksActionsInSidePanel(params) {
    return { evid: 8948, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'clickStartGuideOrCloseDoItWithMeTool' event (evid: 8949)
 *
 * Event description: Start to use ‘Do it with me’ Tool
 *
 * @param {clickStartGuideOrCloseDoItWithMeToolParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} origin - origin page - from which place this action was made (Invoice Dashboard/ Invoice Form/Watch Tutorial)
 * @property {string} type - Start Guide/cancel
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<clickStartGuideOrCloseDoItWithMeToolParams>} LogObject<clickStartGuideOrCloseDoItWithMeToolParams>
 */
export function clickStartGuideOrCloseDoItWithMeTool(params) {
    return { evid: 8949, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'wixInvoicesChargeWithCreditCardClick' event (evid: 8954)
 *
 * Event description: Charge with credit card on invoice click (MOTO)
 *
 * @param {wixInvoicesChargeWithCreditCardClickParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} origin - my invoices,preview,create invoice
 * @property {string} status - Creation form/Draft/Sent/Paid
 * @property {string} origin_device - web,native
 * @property {GUID} invoiceSource - invoice_source_id
 * @property {string} type - MOTO/ POS
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {GUID} invoice_id - invoice guid
 * @property {boolean} fully_paid - true for fully paid selected, false for partial payment selected
 * @return {LogObject<wixInvoicesChargeWithCreditCardClickParams>} LogObject<wixInvoicesChargeWithCreditCardClickParams>
 */
export function wixInvoicesChargeWithCreditCardClick(params) {
    return { evid: 8954, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'wixInvoicesPaymentMethodClick' event (evid: 8956)
 *
 * Event description: Wix Invoices Payment method click in modal
 *
 * @param {wixInvoicesPaymentMethodClickParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {GUID} appDefId - appDefId of the source
 * @property {string} origin - my invoices,preview
 * @property {string} origin_device - web,native
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {GUID} invoice_id - invoice guid
 * @property {boolean} fully_paid - true for fully paid selected, false for partial payment selected
 * @return {LogObject<wixInvoicesPaymentMethodClickParams>} LogObject<wixInvoicesPaymentMethodClickParams>
 */
export function wixInvoicesPaymentMethodClick(params) {
    return { evid: 8956, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'wixInvoicesToastIsShown' event (evid: 8957)
 *
 * Event description: When a payment is made by user ( Recorded, Moto) and Toast is shown.
 *
 * @param {wixInvoicesToastIsShownParams} params - The parameters for this event
 * @property {string} name - toast name, supplied by toast initiator
 * @property {string} view_type - view_type
 * @property {string} origin - "my invoices", "preview"
 * @property {string} type - standard, error, warning, success, premium
 * @property {string} platform - platform
 * @property {number} timeout - miliseconds to auto hide toast, 0 is sticky toast
 * @property {GUID} msid - metasite id
 * @return {LogObject<wixInvoicesToastIsShownParams>} LogObject<wixInvoicesToastIsShownParams>
 */
export function wixInvoicesToastIsShown(params) {
    return { evid: 8957, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'wixInvoicesRequestPaymentClickInAutomation' event (evid: 8958)
 *
 * Event description: Wix Invoices Request Payment click in Automation
 *
 * @param {wixInvoicesRequestPaymentClickInAutomationParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} origin - Chosen app in which this automation was clicked (Now only Bookings)
 * @property {string} origin_device - web,native
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<wixInvoicesRequestPaymentClickInAutomationParams>} LogObject<wixInvoicesRequestPaymentClickInAutomationParams>
 */
export function wixInvoicesRequestPaymentClickInAutomation(params) {
    return { evid: 8958, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'wixInvoicesChargeWithCreditCardClickInTheModalMoto' event (evid: 8959)
 *
 * Event description: Charge with credit card in modal click (MOTO)
 *
 * @param {wixInvoicesChargeWithCreditCardClickInTheModalMotoParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {boolean} is_new - New or Edited Invoice (True Or False)
 * @property {string} origin - my invoices,preview,create invoice
 * @property {string} origin_device - web,native
 * @property {GUID} invoiceSource - invoice_source_id
 * @property {string} type - MOTO/POS
 * @property {string} platform - plstform
 * @property {string} msid - msid
 * @property {GUID} invoice_id - invoice guid
 * @property {boolean} fully_paid - true for fully paid selected, false for partial payment selected
 * @return {LogObject<wixInvoicesChargeWithCreditCardClickInTheModalMotoParams>} LogObject<wixInvoicesChargeWithCreditCardClickInTheModalMotoParams>
 */
export function wixInvoicesChargeWithCreditCardClickInTheModalMoto(params) {
    return { evid: 8959, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderSubmitButtonSettingsClickOnSetupPaymentForm' event (evid: 896)
 *
 * Event description: Form Builder - Submit Button Settings - Click on Setup payment Form
 *
 * @param {formBuilderSubmitButtonSettingsClickOnSetupPaymentFormParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} form_type - multistep form/ ...
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderSubmitButtonSettingsClickOnSetupPaymentFormParams>} LogObject<formBuilderSubmitButtonSettingsClickOnSetupPaymentFormParams>
 */
export function formBuilderSubmitButtonSettingsClickOnSetupPaymentForm(params) {
    return { evid: 896, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'wixInvoicesMotoCashierWidgetIsShown' event (evid: 8960)
 *
 * Event description: When a user is choosing MOTO, cashier widget is shown
 *
 * @param {wixInvoicesMotoCashierWidgetIsShownParams} params - The parameters for this event
 * @property {number} totalAmountLong - Invoice total amount
 * @property {string} name - Opened/Clicked Charge/Processed ( Three stages defines the flow, when modal is opened and a user put details in cashiers modal, then user is clicking charge and final stage if the data is good it is processing). Exact values: 'opened' | 'clicked charge' | 'paid'
 * @property {boolean} is_deposit - invoice has deposit
 * @property {string} view_type - view_type
 * @property {boolean} is_new - New or Edited Invoice
 * @property {string} origin - origin
 * @property {string} currency - currency of the amount paid
 * @property {number} paidAmountLong - Total amount that is paid, comes only when name=paid or name-clickedcharge
 * @property {string} type - MOTO/POS
 * @property {string} platform - platform
 * @property {GUID} msid - metasite id
 * @property {GUID} invoice_id - invoice_id
 * @property {boolean} fully_paid - Is the full invoice amount is going to be paid or part of the total amount
 * @return {LogObject<wixInvoicesMotoCashierWidgetIsShownParams>} LogObject<wixInvoicesMotoCashierWidgetIsShownParams>
 */
export function wixInvoicesMotoCashierWidgetIsShown(params) {
    return { evid: 8960, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'wixInvoicesMotoPaidModal' event (evid: 8961)
 *
 * Event description: When a user paid invoice with MOTO and modal (Deposit or full amount is shown)
 *
 * @param {wixInvoicesMotoPaidModalParams} params - The parameters for this event
 * @property {boolean} is_deposit - true/false
 * @property {string} view_type - view_type
 * @property {string} origin - origin
 * @property {string} origin_device - web,native
 * @property {string} platform - platform
 * @property {GUID} msid - metasite id
 * @property {GUID} invoice_id - invoice_guid
 * @return {LogObject<wixInvoicesMotoPaidModalParams>} LogObject<wixInvoicesMotoPaidModalParams>
 */
export function wixInvoicesMotoPaidModal(params) {
    return { evid: 8961, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'mySitesRefreshAfterMoveToFolder' event (evid: 8962)
 *
 * Event description: The event is sent when the move to folder action is done (the site moved to the new folder)
 *
 * @param {mySitesRefreshAfterMoveToFolderParams} params - The parameters for this event
 * @property {number} time_to_refresh - time_to_refresh
 * @property {DateTime} start_time - The time when the user press move to folder
 * @property {DateTime} end_time - The time when the site actually moved to the new folder
 * @property {string} experiment_from_site_list - /
 * @property {string} platform - platform
 * @property {string} msid - The msid of the site that moved
 * @property {string} experiment_from_modal - /
 * @return {LogObject<mySitesRefreshAfterMoveToFolderParams>} LogObject<mySitesRefreshAfterMoveToFolderParams>
 */
export function mySitesRefreshAfterMoveToFolder(params) {
    return { evid: 8962, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'wixInvoicesAutomationDynamicValueClick' event (evid: 8963)
 *
 * Event description: When a user is clicking on dynamic value
 *
 * @param {wixInvoicesAutomationDynamicValueClickParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} origin - Chosen app in which this automation was clicked (Now only Bookings)
 * @property {string} origin_device - web,native
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {string} action - click/add
 * @return {LogObject<wixInvoicesAutomationDynamicValueClickParams>} LogObject<wixInvoicesAutomationDynamicValueClickParams>
 */
export function wixInvoicesAutomationDynamicValueClick(params) {
    return { evid: 8963, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'mySitesErrorPage' event (evid: 8964)
 *
 * Event description: The event is sent when there is an error in loading my sites page
 *
 * @param {mySitesErrorPageParams} params - The parameters for this event
 * @property {string} experiment_from_site_list - .
 * @property {string} platform - deprecated
 * @return {LogObject<mySitesErrorPageParams>} LogObject<mySitesErrorPageParams>
 */
export function mySitesErrorPage(params) {
    return { evid: 8964, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'wixInvoicesClickingOnNextMobile' event (evid: 8965)
 *
 * Event description: When a user is clicking on ‘Next’ while creating or Previewing existing
 *
 * @param {wixInvoicesClickingOnNextMobileParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} status - Creation Form/Draft
 * @property {string} invoiceSource - app def id
 * @property {string} platform - web/mobile
 * @property {GUID} msid - --
 * @property {GUID} invoice_id - invoice_id
 * @return {LogObject<wixInvoicesClickingOnNextMobileParams>} LogObject<wixInvoicesClickingOnNextMobileParams>
 */
export function wixInvoicesClickingOnNextMobile(params) {
    return { evid: 8965, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'wixInvoicesBannerToUpgradeToPremiumShown' event (evid: 8966)
 *
 * Event description: Banner to upgrade to Premium shown
 *
 * @param {wixInvoicesBannerToUpgradeToPremiumShownParams} params - The parameters for this event
 * @property {string} name - banner name (upgrade to business premium)
 * @property {string} view_type - view_type
 * @property {string} origin - origin page, my invoices ( on mobile, when creating from list), create invoice - on web, when creating for the first time
 * @property {string} origin_device - web,native
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<wixInvoicesBannerToUpgradeToPremiumShownParams>} LogObject<wixInvoicesBannerToUpgradeToPremiumShownParams>
 */
export function wixInvoicesBannerToUpgradeToPremiumShown(params) {
    return { evid: 8966, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'wixInvoicesBannerToUpgradeToPremiumClick' event (evid: 8967)
 *
 * Event description: Banner to upgrade to Premium click
 *
 * @param {wixInvoicesBannerToUpgradeToPremiumClickParams} params - The parameters for this event
 * @property {string} name - upgrade to business premium
 * @property {string} view_type - view_type
 * @property {string} origin - banner, modal which shows when clicking on ( Send via email, Send in Invoice Form, Share link, Charge with Credit card)
 * @property {string} origin_device - web,native
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<wixInvoicesBannerToUpgradeToPremiumClickParams>} LogObject<wixInvoicesBannerToUpgradeToPremiumClickParams>
 */
export function wixInvoicesBannerToUpgradeToPremiumClick(params) {
    return { evid: 8967, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'wixInvoicesOpenShareLinkModal' event (evid: 8968)
 *
 * Event description: When share link modal is opened
 *
 * @param {wixInvoicesOpenShareLinkModalParams} params - The parameters for this event
 * @property {GUID} externalId - An external id of an entity, relevant to the invoiceSource application
 * @property {string} view_type - view_type
 * @property {GUID} invoiceId - invoiceId
 * @property {string} origin - more actions/invoice preview
 * @property {string} status - Creation form/Draft/Sent/Paid
 * @property {GUID} appdefid - appdefid of the source
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<wixInvoicesOpenShareLinkModalParams>} LogObject<wixInvoicesOpenShareLinkModalParams>
 */
export function wixInvoicesOpenShareLinkModal(params) {
    return { evid: 8968, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'wixInvoicesBannerToConnectPaymentMethods' event (evid: 8969)
 *
 * Event description: Wix Invoices- Banner to connect Payment Methods
 *
 * @param {wixInvoicesBannerToConnectPaymentMethodsParams} params - The parameters for this event
 * @property {string} name - banner name
 * @property {string} view_type - view_type
 * @property {string} origin - origin page, my invoices ( on mobile, when creating from list), create invoice - on web, when creating for the first time
 * @property {string} origin_device - web,native
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<wixInvoicesBannerToConnectPaymentMethodsParams>} LogObject<wixInvoicesBannerToConnectPaymentMethodsParams>
 */
export function wixInvoicesBannerToConnectPaymentMethods(params) {
    return { evid: 8969, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'wixInvoicesBannerToConnectPaymentMethodClick' event (evid: 8970)
 *
 * Event description: Wix Invoices - Banner to connect Payment Method click
 *
 * @param {wixInvoicesBannerToConnectPaymentMethodClickParams} params - The parameters for this event
 * @property {string} name - banner name
 * @property {string} view_type - view_type
 * @property {string} origin - origin page, my invoices ( on mobile, when creating from list), create invoice - on web, when creating for the first time
 * @property {string} origin_device - web,native
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<wixInvoicesBannerToConnectPaymentMethodClickParams>} LogObject<wixInvoicesBannerToConnectPaymentMethodClickParams>
 */
export function wixInvoicesBannerToConnectPaymentMethodClick(params) {
    return { evid: 8970, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'gizaFirstBiteIsShown' event (evid: 8971)
 *
 * Event description: When First Byte in session is shown in one of Giza's hosting platforms.
 * This is actually a 'feedback' event, the time to first feedback is the 'ms' in the implicit fields.
 *
 * @param {gizaFirstBiteIsShownParams} params - The parameters for this event
 * @property {string} hosting_platform - accountmanagr/bizmanagr/devcenter/etc.
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {number} time_to_first_byte - time_to_first_byte
 * @property {string} hosting_platform_context_id - context id: when the context is site - msid, when the context is app_id (like in devCenter f.e) - appDefId. In account manager is null
 * @return {LogObject<gizaFirstBiteIsShownParams>} LogObject<gizaFirstBiteIsShownParams>
 */
export function gizaFirstBiteIsShown(params) {
    return { evid: 8971, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'gizaFirstInteractionInTheSessionIsAvailable' event (evid: 8972)
 *
 * Event description: When the First interaction in the session is available in one of Giza's hosting platforms (header/sidebar is shown and is interactable).
 * This is actually a 'first interactive' event, the time to first interactive is the 'ms' in the implicit fields.
 * bsi is the session id.
 *
 * @param {gizaFirstInteractionInTheSessionIsAvailableParams} params - The parameters for this event
 * @property {string} hosting_platform - accountmanagr/bizmanagr/devcenter/etc.
 * @property {string} interactive_component - sidebar/header
 * @property {string} hosting_platform_context_id - context id: when the context is site - msid, when the context is app_id (like in devCenter f.e) - appDefId. In account manager is null
 * @return {LogObject<gizaFirstInteractionInTheSessionIsAvailableParams>} LogObject<gizaFirstInteractionInTheSessionIsAvailableParams>
 */
export function gizaFirstInteractionInTheSessionIsAvailable(params) {
    return { evid: 8972, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'wixInvoicesClickOnDynamicValueInAutomation' event (evid: 8973)
 *
 * Event description: Clicking on Dynamic Value
 *
 * @param {wixInvoicesClickOnDynamicValueInAutomationParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} origin - Chosen app in which this automation was clicked (Now only Bookings)
 * @property {string} origin_device - web,native
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<wixInvoicesClickOnDynamicValueInAutomationParams>} LogObject<wixInvoicesClickOnDynamicValueInAutomationParams>
 */
export function wixInvoicesClickOnDynamicValueInAutomation(params) {
    return { evid: 8973, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'priorityASuggestionCarouselInteraction' event (evid: 8974)
 *
 * Event description: when the user click on carousel
 *
 * @param {priorityASuggestionCarouselInteractionParams} params - The parameters for this event
 * @property {number} totalPriortySeen - if click next if it was 1,2,3 and 4 for previous
 * @property {string} view_type - view_type
 * @property {string} type - type of navigation (next, previous)
 * @property {string} platform - deprecated
 * @property {GUID} msid - msid
 * @return {LogObject<priorityASuggestionCarouselInteractionParams>} LogObject<priorityASuggestionCarouselInteractionParams>
 */
export function priorityASuggestionCarouselInteraction(params) {
    return { evid: 8974, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'priorityAEssentialShown' event (evid: 8975)
 *
 * Event description: when the users see the section
 *
 * @param {priorityAEssentialShownParams} params - The parameters for this event
 * @property {number} numOffer - how many offers he have in the section
 * @property {string} view_type - view_type
 * @property {boolean} isCarousel - true if he have carousel (more than 4 offers)
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<priorityAEssentialShownParams>} LogObject<priorityAEssentialShownParams>
 */
export function priorityAEssentialShown(params) {
    return { evid: 8975, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'clickOnCreateNewFolder' event (evid: 8978)
 *
 * Event description: when a user clicks on the 'Create New Folder' button from site list for enterprise
 *
 * @param {clickOnCreateNewFolderParams} params - The parameters for this event
 * @property {string} source - top-bar/dialog/topbar-folder-dropdown
 * @property {string} sub_view - grid / list-view
 * @property {string} origin - sites-list-enterprise
 * @property {string} view_level - search/filter/folder/root
 * @property {string} platform - platform
 * @return {LogObject<clickOnCreateNewFolderParams>} LogObject<clickOnCreateNewFolderParams>
 */
export function clickOnCreateNewFolder(params) {
    return { evid: 8978, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'createNewSiteCreationMenuIsShown' event (evid: 8989)
 *
 * Event description: when the menu with the several creation options is shown (after user clicked on create new site). currently existing only in WIx Studio.
 *
 * @param {createNewSiteCreationMenuIsShownParams} params - The parameters for this event
 * @property {string} origin - my sites wix studio (currently only this origin)
 * @property {string} items_list - list of the items shown in the sub menu, separated by delimiter - create from blank, use wix templates, use your custom templates, build on wix classic editor
 * @property {string} platform - deprecated
 * @return {LogObject<createNewSiteCreationMenuIsShownParams>} LogObject<createNewSiteCreationMenuIsShownParams>
 */
export function createNewSiteCreationMenuIsShown(params) {
    return { evid: 8989, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'clickOnAddAtTheDynamicFieldModal' event (evid: 8993)
 *
 * Event description: The event will be sent when the user clicks 'add' at the dynamic value modal.
 *
 * @param {clickOnAddAtTheDynamicFieldModalParams} params - The parameters for this event
 * @property {string} format - will be sent only for a date value
 * @property {string} actionKey - action English key
 * @property {string} view_type - view_type
 * @property {GUID} actionAppId - action provider app id
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @property {string} inputType - input_type
 * @property {string} value - input value
 * @return {LogObject<clickOnAddAtTheDynamicFieldModalParams>} LogObject<clickOnAddAtTheDynamicFieldModalParams>
 */
export function clickOnAddAtTheDynamicFieldModal(params) {
    return { evid: 8993, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'getBrandedAppAlertIsShownAutomationSendAPushNotification' event (evid: 8995)
 *
 * Event description: The event will be sent when the Get Branded app alert is shown at the Automation send a push notification
 *
 * @param {getBrandedAppAlertIsShownAutomationSendAPushNotificationParams} params - The parameters for this event
 * @property {GUID} actionId - id uniqe to action
 * @property {string} view_type - view_type
 * @property {GUID} rule_id - rule_id
 * @property {string} triggerKey - The trigger key
 * @property {GUID} actionAppId - the app id of the vertical/company id of the action provider
 * @property {string} platform - platform
 * @property {GUID} msid - msid
 * @return {LogObject<getBrandedAppAlertIsShownAutomationSendAPushNotificationParams>} LogObject<getBrandedAppAlertIsShownAutomationSendAPushNotificationParams>
 */
export function getBrandedAppAlertIsShownAutomationSendAPushNotification(params) {
    return { evid: 8995, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesDeleteQuoteClick' event (evid: 90)
 *
 * Event description: delete quote click
 *
 * @param {quotesDeleteQuoteClickParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} origin_device - web,native
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {GUID} quoteId - quote guid
 * @return {LogObject<quotesDeleteQuoteClickParams>} LogObject<quotesDeleteQuoteClickParams>
 */
export function quotesDeleteQuoteClick(params) {
    return { evid: 90, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuildrUouSubmitFormClick' event (evid: 900)
 *
 * Event description: UoU clicked on submit in a form created with the form builder
 *
 * @param {formBuildrUouSubmitFormClickParams} params - The parameters for this event
 * @property {string} form_name - the form name, given by user
 * @property {string} appVersion - appVersion
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_url - form specific url
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} viewerName - viewerName
 * @property {string} template - template
 * @property {number} num_of_attachments - number of attachments, "0" if none
 * @property {GUID} msid - msid
 * @return {LogObject<formBuildrUouSubmitFormClickParams>} LogObject<formBuildrUouSubmitFormClickParams>
 */
export function formBuildrUouSubmitFormClick(params) {
    return { evid: 900, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'sdkLoaded9000' event (evid: 9000)
 *
 * Event description: When an App Iframe is loaded in one of Giza's hosting platforms (handshake phase). this BI event allow us to know which apps use BM SDK (and also the SDK version)
 *
 * @param {sdkLoaded9000Params} params - The parameters for this event
 * @property {string} hosting_platform - the Giza's hosting platform. expected values: dev center/ BizMgr/ account manager/ etc.
 * @property {string} sdk_version - the SDK version
 * @property {string} app_id - the app id of the app that it's Iframe loaded
 * @property {string} component_id - the component id of the component that hosts the Iframe. the component id it's the id of the component in dev center.
 * @property {string} hosting_platform_context_id - f.e.: metasite id  will be reported when there is context of site like in BizMgr
 * @return {LogObject<sdkLoaded9000Params>} LogObject<sdkLoaded9000Params>
 */
export function sdkLoaded9000(params) {
    return { evid: 9000, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'gizaPageStartLoading9001' event (evid: 9001)
 *
 * Event description: When a page in one of Giza's hosting platform start to load
 *
 * @param {gizaPageStartLoading9001Params} params - The parameters for this event
 * @property {string} hosting_platform - accountmanagr/bizmanagr/devcenter/etc.
 * @property {string} referral_info - specific button triggered the the view loading (the referral info as in event 302)
 * @property {string} prev_page_id - the previous page's id
 * @property {number} screen_width - screen width
 * @property {string} page_id - the page id (actually the component id of the page)
 * @property {string} page_name - the component name of the page
 * @property {boolean} is_first - true if it’s the first page in session (true until navigation), otherwise false
 * @property {number} window_width - window width
 * @property {number} screen_height - screen height
 * @property {string} app_id - the app id of the app the page belongs to
 * @property {string} route - the page's route
 * @property {number} window_height - window height
 * @property {number} visits_counter - how many visits were in this page per full reload
 * @property {boolean} is_internal_page - true if it's an internal page
 * @property {string} hosting_platform_context_id - context id: when the context is site - msid, when the context is app_id (like in devCenter f.e) - appDefId. In account manager is null
 * @property {string} internal_route - in case of internal page- in this field we will get the additional part of the route
 * @property {string} prevRoute - the previous route
 * @return {LogObject<gizaPageStartLoading9001Params>} LogObject<gizaPageStartLoading9001Params>
 */
export function gizaPageStartLoading9001(params) {
    return { evid: 9001, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'gizaPageFinishLoading9002' event (evid: 9002)
 *
 * Event description: When a page in one of Giza's hosting platform finish to load
 *
 * @param {gizaPageFinishLoading9002Params} params - The parameters for this event
 * @property {string} hosting_platform - accountmanagr/bizmanagr/devcenter/etc.
 * @property {string} referral_info - specific button triggered the the view loading (the referral info as in event 302)
 * @property {string} prev_page_id - the previous fully loaded page id
 * @property {number} screen_width - screen width
 * @property {string} page_id - the page id (the component id of the page)
 * @property {string} page_name - the component name of the page
 * @property {boolean} is_first - true if it’s the first page that started to load in the session
 * @property {number} window_width - window width
 * @property {number} screen_height - screen height
 * @property {string} app_id - the app id of the app the page belongs to
 * @property {string} route - the page's route
 * @property {boolean} is_first_9002 - True if it's the first 9002 event in the session
 * @property {number} window_height - window height
 * @property {number} visits_counter - how many visits were in this page per full reload
 * @property {boolean} is_internal_page - true if it's an internal page
 * @property {string} hosting_platform_context_id - context id: when the context is site - msid, when the context is app_id (like in devCenter f.e) - appDefId. In account manager is null
 * @property {string} internal_route - in case of internal page- in this field we will get the additional part of the route
 * @property {number} loading_time_from_first_feedback - loading time from first feedback event (in milliseconds)
 * @property {number} loading_time - loading time from the moment the loader of the page is shown  (in milliseconds)
 * @property {string} prevRoute - the previous route
 * @return {LogObject<gizaPageFinishLoading9002Params>} LogObject<gizaPageFinishLoading9002Params>
 */
export function gizaPageFinishLoading9002(params) {
    return { evid: 9002, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuildrUouSubmitFormSuccess' event (evid: 901)
 *
 * Event description: UoU clicked on submit in a form created with the form builder - success message  displayed
 *
 * @param {formBuildrUouSubmitFormSuccessParams} params - The parameters for this event
 * @property {boolean} isfp - used as honeypot indicator true=suspected bot, null or false=not suspected
 * @property {string} form_name - the form name, given by user
 * @property {string} appVersion - appVersion
 * @property {GUID} visitor_id - visitor_id
 * @property {GUID} submissionId - submission Id
 * @property {string} form_url - form specific url
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} viewerName - viewerName
 * @property {string} template - template
 * @property {number} num_of_attachments - number of attachments, 0 if none
 * @property {string} btype - bot detection reason
 * @property {GUID} msid - msid
 * @property {boolean} isjp - used as bot indicator true=bot, null or false=not a bot
 * @return {LogObject<formBuildrUouSubmitFormSuccessParams>} LogObject<formBuildrUouSubmitFormSuccessParams>
 */
export function formBuildrUouSubmitFormSuccess(params) {
    return { evid: 901, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'mySitesEditTemplateButtonClick' event (evid: 9012)
 *
 * Event description: The event is sent when the user clicks on the edit button from a template in My-Sites. currently is being sent from
 *
 * @param {mySitesEditTemplateButtonClickParams} params - The parameters for this event
 * @property {string} origin - sites list wix studio
 * @property {string} platform - deprecated
 * @property {string} template_id - the template id guid
 * @return {LogObject<mySitesEditTemplateButtonClickParams>} LogObject<mySitesEditTemplateButtonClickParams>
 */
export function mySitesEditTemplateButtonClick(params) {
    return { evid: 9012, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'mySitesClickOnSeeAllTemplates' event (evid: 9013)
 *
 * Event description: The event is sent when the user clicks on "see all templates" in My-Sites.
 * Currently existing in Wix Studio only
 *
 * @param {mySitesClickOnSeeAllTemplatesParams} params - The parameters for this event
 * @property {string} origin - sites list wix studio
 * @property {string} platform - deprecated
 * @return {LogObject<mySitesClickOnSeeAllTemplatesParams>} LogObject<mySitesClickOnSeeAllTemplatesParams>
 */
export function mySitesClickOnSeeAllTemplates(params) {
    return { evid: 9013, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'createNewWorkspace' event (evid: 9014)
 *
 * Event description: user clicks on  create a new workspace
 *
 * @param {createNewWorkspaceParams} params - The parameters for this event
 * @property {number} num_workspaces - number of workspaces (=accounts) the logged user is connected to
 * @property {string} page_view - Dashboard / my sites
 * @property {string} view_type - view_type
 * @property {string} account_type - the current logged account id's type (workspace type), DIY/Partners/Studio/enterprise
 * @property {string} origin - workspace selector
 * @property {string} platform - platform
 * @return {LogObject<createNewWorkspaceParams>} LogObject<createNewWorkspaceParams>
 */
export function createNewWorkspace(params) {
    return { evid: 9014, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'workspaceSelectorSelectWorkspace' event (evid: 9015)
 *
 * Event description: when the user clicks on a workspace in the workspace selector
 *
 * @param {workspaceSelectorSelectWorkspaceParams} params - The parameters for this event
 * @property {number} num_workspaces - number of workspaces (=accounts) the logged user is connected to
 * @property {string} page_view - Dashboard / my sites
 * @property {number} clicked_workspace_index - the location of the workspace in the workspace selector list  (0 is first, 1 is second…)
 * @property {string} view_type - view_type
 * @property {string} account_type - the current logged account id's type (workspace type), DIY/Partners/Studio/enterprise
 * @property {GUID} clicked_workspace_id - the selected workspace's id
 * @property {string} clicked_workspace_role - the logged user's role in the selected workspace
 * @property {string} platform - platform
 * @return {LogObject<workspaceSelectorSelectWorkspaceParams>} LogObject<workspaceSelectorSelectWorkspaceParams>
 */
export function workspaceSelectorSelectWorkspace(params) {
    return { evid: 9015, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'workspaceActionMenuDropDownListShown' event (evid: 9016)
 *
 * Event description: user clicks on Workspace Setting of a specific workspace in the workspace selector
 *
 * @param {workspaceActionMenuDropDownListShownParams} params - The parameters for this event
 * @property {number} num_workspaces - number of workspaces (=accounts) the logged user is connected to
 * @property {string} page_view - Dashboard / my sites
 * @property {string} view_type - view_type
 * @property {string} account_type - the current logged account id's type (workspace type), DIY/Partners/Studio/enterprise
 * @property {string} platform - platform
 * @return {LogObject<workspaceActionMenuDropDownListShownParams>} LogObject<workspaceActionMenuDropDownListShownParams>
 */
export function workspaceActionMenuDropDownListShown(params) {
    return { evid: 9016, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'workspaceActionMenuItemClick' event (evid: 9017)
 *
 * Event description: when the user clicks on 'Learn more' in one of the workspace selector tooltips
 *
 * @param {workspaceActionMenuItemClickParams} params - The parameters for this event
 * @property {string} location - the tooltip's location (workspace selector info/ Workspace Action Menu)
 * @property {number} num_workspaces - number of workspaces (=accounts) the logged user is connected to
 * @property {string} page_view - Dashboard / my sites
 * @property {string} view_type - view_type
 * @property {string} account_type - the current logged account id's type (workspace type), DIY/Partners/Studio/enterprise
 * @property {Url} link - link to the KB the 'Learn more' referrer to
 * @property {string} platform - platform
 * @return {LogObject<workspaceActionMenuItemClickParams>} LogObject<workspaceActionMenuItemClickParams>
 */
export function workspaceActionMenuItemClick(params) {
    return { evid: 9017, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'workspaceSelectorClickOnLearnMoreInTooltips' event (evid: 9018)
 *
 * Event description: user clicks on one of the entry points to WixStudio
 *
 * @param {workspaceSelectorClickOnLearnMoreInTooltipsParams} params - The parameters for this event
 * @property {string} page_view - Dashboard / my sites
 * @property {string} view_type - view_type
 * @property {string} origin - the entry point location (account menu/header)
 * @property {string} platform - platform
 * @return {LogObject<workspaceSelectorClickOnLearnMoreInTooltipsParams>} LogObject<workspaceSelectorClickOnLearnMoreInTooltipsParams>
 */
export function workspaceSelectorClickOnLearnMoreInTooltips(params) {
    return { evid: 9018, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'workspaceSelectorWorkspaceSettingClick' event (evid: 9019)
 *
 * Event description: event send when a WixStudio entry point is shown
 *
 * @param {workspaceSelectorWorkspaceSettingClickParams} params - The parameters for this event
 * @property {string} page_view - Dashboard / my sites
 * @property {string} view_type - view_type
 * @property {string} origin - the entry point location
 * @property {string} platform - platform
 * @return {LogObject<workspaceSelectorWorkspaceSettingClickParams>} LogObject<workspaceSelectorWorkspaceSettingClickParams>
 */
export function workspaceSelectorWorkspaceSettingClick(params) {
    return { evid: 9019, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuildrUouSubmitFormError' event (evid: 902)
 *
 * Event description: UoU clicked on submit in a form created with the form builder - error message displayed
 *
 * @param {formBuildrUouSubmitFormErrorParams} params - The parameters for this event
 * @property {string} form_name - the form name, given by user
 * @property {string} appVersion - appVersion
 * @property {GUID} visitor_id - visitor_id
 * @property {string} reason - error reason
 * @property {string} reason_body - error reason body
 * @property {string} form_url - form specific url
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} viewerName - viewerName
 * @property {string} template - template
 * @property {number} num_of_attachments - number of attachments, 0 if none
 * @property {GUID} msid - msid
 * @return {LogObject<formBuildrUouSubmitFormErrorParams>} LogObject<formBuildrUouSubmitFormErrorParams>
 */
export function formBuildrUouSubmitFormError(params) {
    return { evid: 902, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'accountSettingsCloseYourWorkspacePageLoad' event (evid: 9021)
 *
 * Event description: user enter the "close workspace" page
 *
 * @param {accountSettingsCloseYourWorkspacePageLoadParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @return {LogObject<accountSettingsCloseYourWorkspacePageLoadParams>} LogObject<accountSettingsCloseYourWorkspacePageLoadParams>
 */
export function accountSettingsCloseYourWorkspacePageLoad(params) {
    return { evid: 9021, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'accountSettingsCloseYourWorkspaceCloseWorkspaceRequestSummited' event (evid: 9022)
 *
 * Event description: the user clicks on the "close workspace" button
 *
 * @param {accountSettingsCloseYourWorkspaceCloseWorkspaceRequestSummitedParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} reason - why are you closing the workspace
 * @property {string} platform - platform
 * @property {string} free_text - users feedback
 * @return {LogObject<accountSettingsCloseYourWorkspaceCloseWorkspaceRequestSummitedParams>} LogObject<accountSettingsCloseYourWorkspaceCloseWorkspaceRequestSummitedParams>
 */
export function accountSettingsCloseYourWorkspaceCloseWorkspaceRequestSummited(params) {
    return { evid: 9022, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'workspaceSettingsDeleteAccountWorkspace' event (evid: 9023)
 *
 * Event description: the user clicks on the "delete workspace"/"delete workspace and close account" button
 *
 * @param {workspaceSettingsDeleteAccountWorkspaceParams} params - The parameters for this event
 * @property {string} context - what button the user clicked - "delete workspace"/"delete workspace and close account"
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {GUID} workspace_id - what workspace the user closes
 * @return {LogObject<workspaceSettingsDeleteAccountWorkspaceParams>} LogObject<workspaceSettingsDeleteAccountWorkspaceParams>
 */
export function workspaceSettingsDeleteAccountWorkspace(params) {
    return { evid: 9023, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'workspaceSettingsChangesSaved' event (evid: 9024)
 *
 * Event description: user clicks "save" on the workspace setting page after he did a change in the workspace name, prefix or both.
 *
 * @param {workspaceSettingsChangesSavedParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} changes - what the user changed when he clicked save ("name"/"prefix"/"name and prefix")
 * @property {string} platform - platform
 * @property {GUID} workspace_id - what workspace the user closes
 * @return {LogObject<workspaceSettingsChangesSavedParams>} LogObject<workspaceSettingsChangesSavedParams>
 */
export function workspaceSettingsChangesSaved(params) {
    return { evid: 9024, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'wixInvoicesBannerWhenCreatingInvoiceOrder' event (evid: 9025)
 *
 * Event description: When an Invoice is creating thru Invoice & Order F-nality, but customer information is needed
 *
 * @param {wixInvoicesBannerWhenCreatingInvoiceOrderParams} params - The parameters for this event
 * @property {string} name - Opened, Closed, Edit
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {GUID} msid - metasite id
 * @return {LogObject<wixInvoicesBannerWhenCreatingInvoiceOrderParams>} LogObject<wixInvoicesBannerWhenCreatingInvoiceOrderParams>
 */
export function wixInvoicesBannerWhenCreatingInvoiceOrder(params) {
    return { evid: 9025, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'allPageLoadersAreDown9029' event (evid: 9029)
 *
 * Event description: When all the loaders are down in a Giza-hosting-platform's page
 *
 * @param {allPageLoadersAreDown9029Params} params - The parameters for this event
 * @property {string} hosting_platform - accountmanagr/bizmanagr/devcenter/etc.
 * @property {string} referral_info - specific button triggered the the view loading (the referral info as in event 302)
 * @property {string} prev_page_id - the previous fully loaded page id
 * @property {number} screen_width - screen width
 * @property {string} page_id - the page id (the component id of the page)
 * @property {string} page_name - the component name of the page
 * @property {boolean} is_first - true if it’s the first page that started to load in the session
 * @property {number} window_width - window width
 * @property {number} screen_height - screen height
 * @property {string} app_id - the app id of the app the page belongs to
 * @property {string} route - the page's route
 * @property {number} window_height - window height
 * @property {number} visits_counter - how many visits were in this page per full reload
 * @property {boolean} is_internal_page - true if it's an internal page
 * @property {string} hosting_platform_context_id - context id: when the context is site - msid, when the context is app_id (like in devCenter f.e) - appDefId. In account manager is null
 * @property {string} internal_route - in case of internal page- in this field we will get the additional part of the route
 * @property {number} loading_time - loading time from event 9001 (page start load) until all the loaders are down (in milliseconds)
 * @property {string} prevRoute - the previous route
 * @return {LogObject<allPageLoadersAreDown9029Params>} LogObject<allPageLoadersAreDown9029Params>
 */
export function allPageLoadersAreDown9029(params) {
    return { evid: 9029, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderManageFieldsAddNewFieldCompleted' event (evid: 903)
 *
 * Event description: new field has been added to the form
 *
 * @param {formBuilderManageFieldsAddNewFieldCompletedParams} params - The parameters for this event
 * @property {string} plugin - form type = {'form-builder'/'get-subscribers'/'registration-form'}
 * @property {string} builderOrigin - ADI / Editor
 * @property {string} field_type - field type
 * @property {string} appVersion - appVersion
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} template - template name
 * @property {string} field_group - field group (e.g recommended, my custom, custom)
 * @property {GUID} msid - msid
 * @property {string} field_name - field name
 * @return {LogObject<formBuilderManageFieldsAddNewFieldCompletedParams>} LogObject<formBuilderManageFieldsAddNewFieldCompletedParams>
 */
export function formBuilderManageFieldsAddNewFieldCompleted(params) {
    return { evid: 903, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'invoicesSettingsSelectPaymentsReceivedOption' event (evid: 9032)
 *
 * Event description: When the user changes the 'Payments received' section options in Invoices Settings
 *
 * @param {invoicesSettingsSelectPaymentsReceivedOptionParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {boolean} showTransactionDetails - whether to show payments received section in invoice
 * @property {string} platform - web/mobile
 * @property {GUID} msid - msid
 * @return {LogObject<invoicesSettingsSelectPaymentsReceivedOptionParams>} LogObject<invoicesSettingsSelectPaymentsReceivedOptionParams>
 */
export function invoicesSettingsSelectPaymentsReceivedOption(params) {
    return { evid: 9032, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'mySitesDebuggingEvent' event (evid: 9034)
 *
 * Event description: This event is being trigger from several places and time points in My-Sites page. the event is for debugging purposes.
 *
 * @param {mySitesDebuggingEventParams} params - The parameters for this event
 * @property {string} trigger_point - what is the time point/action triggers the event. f.e: page loaded.
 * @property {string} referral_info - The url of the last page the users have seen
 * @property {boolean} experiment_status - True if the user is experiencing version B, False if experiencing version A
 * @property {string} platform - platform
 * @property {string} page_url - The url of the page that the user sees
 * @return {LogObject<mySitesDebuggingEventParams>} LogObject<mySitesDebuggingEventParams>
 */
export function mySitesDebuggingEvent(params) {
    return { evid: 9034, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'searchInSitesDropdown' event (evid: 9039)
 *
 * Event description: The user searched for a site in the sites dropdown (in the header). will be sent when the users already see results
 *
 * @param {searchInSitesDropdownParams} params - The parameters for this event
 * @property {string} page_view - my-sites /dashboard / account settings
 * @property {string} view_type - view_type
 * @property {string} search_term - what did the user search?
 * @property {number} num_sites - how many sites connected to the current user?
 * @property {string} platform - platform
 * @property {GUID} msid - -
 * @property {number} num_results - how many search results are there?
 * @return {LogObject<searchInSitesDropdownParams>} LogObject<searchInSitesDropdownParams>
 */
export function searchInSitesDropdown(params) {
    return { evid: 9039, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuildrUouSubmitFormSuccessSendingDataToFormBuilderServer' event (evid: 904)
 *
 * Event description: UoU clicked on submit in a form created with the form builder - success sending data to wix code server
 *
 * @param {formBuildrUouSubmitFormSuccessSendingDataToFormBuilderServerParams} params - The parameters for this event
 * @property {string} form_name - the form name, given by user
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_url - form specific url
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} viewerName - viewerName
 * @property {string} template - template
 * @property {number} num_of_attachments - number of attachments, 0 if none
 * @property {GUID} msid - msid
 * @return {LogObject<formBuildrUouSubmitFormSuccessSendingDataToFormBuilderServerParams>} LogObject<formBuildrUouSubmitFormSuccessSendingDataToFormBuilderServerParams>
 */
export function formBuildrUouSubmitFormSuccessSendingDataToFormBuilderServer(params) {
    return { evid: 904, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'searchInSitesDropdownEndProcess' event (evid: 9040)
 *
 * Event description: How did the search for a site in the sites dropdown (in the header) end?
 *
 * @param {searchInSitesDropdownEndProcessParams} params - The parameters for this event
 * @property {string} page_view - my-sites /dashboard / account settings
 * @property {string} view_type - view_type
 * @property {string} search_term - what did the user search?
 * @property {string} end_type - how did the search end? Site selected / Search dismissed (even when closing site selector) / Show more results / Go to all sites
 * @property {number} num_sites - how many sites connected to the current user?
 * @property {string} platform - platform
 * @property {GUID} msid - -
 * @property {number} num_results - how many search results are there?
 * @return {LogObject<searchInSitesDropdownEndProcessParams>} LogObject<searchInSitesDropdownEndProcessParams>
 */
export function searchInSitesDropdownEndProcess(params) {
    return { evid: 9040, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'devModeOnEntryPoint' event (evid: 9041)
 *
 * Event description: when a user clicks on a dev mode on entry point
 *
 * @param {devModeOnEntryPointParams} params - The parameters for this event
 * @property {string} entryPoint - automations
 * @property {string} view_type - view_type
 * @property {boolean} status - true/false
 * @property {string} platform - platform
 * @property {string} action - dev_mode
 * @return {LogObject<devModeOnEntryPointParams>} LogObject<devModeOnEntryPointParams>
 */
export function devModeOnEntryPoint(params) {
    return { evid: 9041, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'gizaClickOnCollapseExpandSidebar' event (evid: 9042)
 *
 * Event description: Giza - click on collapse/expand sidebar.
 *
 * @param {gizaClickOnCollapseExpandSidebarParams} params - The parameters for this event
 * @property {string} click_type - collapse/expand
 * @property {string} page_id - the page id (actually the component id of the page)
 * @property {string} page_name - which page the user was when he clicked on the sidebar
 * @property {string} sidebar_state - sidebar state (expand/collapse)
 * @property {string} items_list - JSON of all the items the user saw in the sidebar when clicked on item- key:unique item name, value: number of notifications the user sees in this item. In case the type is navigated - please send the sidebar items list
 * @property {string} app_id - app_id of the item
 * @property {string} hosting_platform_context_id - context id: when the context is site - msid, when the context is app_id (like in devCenter f.e) - appDefId. In account manager is null
 * @property {string} hosting - dashboard / editor / onboarding
 * @property {GUID} msid - metasite id
 * @property {string} TriggeredBy - triggered automatically or by users
 * @return {LogObject<gizaClickOnCollapseExpandSidebarParams>} LogObject<gizaClickOnCollapseExpandSidebarParams>
 */
export function gizaClickOnCollapseExpandSidebar(params) {
    return { evid: 9042, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderDesignPanel' event (evid: 906)
 *
 * Event description: user changes the design of the form
 *
 * @param {formBuilderDesignPanelParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} panel_name - main panel name
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} control_name - sub panel name
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @property {string} value - value
 * @return {LogObject<formBuilderDesignPanelParams>} LogObject<formBuilderDesignPanelParams>
 */
export function formBuilderDesignPanel(params) {
    return { evid: 906, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuildrComponentLoadTime' event (evid: 907)
 *
 * Event description: Loading time for uou
 *
 * @param {formBuildrComponentLoadTimeParams} params - The parameters for this event
 * @property {string} appVersion - appVersion
 * @property {GUID} visitor_id - visitor_id
 * @property {string} panel_name - panel name
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {number} loadingTime - loading time (milliseconds)
 * @property {string} origin - panel opening origin
 * @property {string} template - form template
 * @property {GUID} msid - msid
 * @return {LogObject<formBuildrComponentLoadTimeParams>} LogObject<formBuildrComponentLoadTimeParams>
 */
export function formBuildrComponentLoadTime(params) {
    return { evid: 907, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderDeleteForm' event (evid: 908)
 *
 * Event description: user remove a form
 *
 * @param {formBuilderDeleteFormParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {string} appVersion - appVersion
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} template - template name
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderDeleteFormParams>} LogObject<formBuilderDeleteFormParams>
 */
export function formBuilderDeleteForm(params) {
    return { evid: 908, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderFormCopyAttempt' event (evid: 909)
 *
 * Event description: user trying to copy a form
 *
 * @param {formBuilderFormCopyAttemptParams} params - The parameters for this event
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - id of original form
 * @property {GUID} vsi - vsi
 * @property {string} template - template name
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderFormCopyAttemptParams>} LogObject<formBuilderFormCopyAttemptParams>
 */
export function formBuilderFormCopyAttempt(params) {
    return { evid: 909, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesDeleteQuotePageOk' event (evid: 91)
 *
 * Event description: OK clicked in delete page
 *
 * @param {quotesDeleteQuotePageOkParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} origin_device - web,native
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {GUID} quoteId - quote guid
 * @return {LogObject<quotesDeleteQuotePageOkParams>} LogObject<quotesDeleteQuotePageOkParams>
 */
export function quotesDeleteQuotePageOk(params) {
    return { evid: 91, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderTemplatePickerOpened' event (evid: 910)
 *
 * Event description: form template picker is opened
 *
 * @param {formBuilderTemplatePickerOpenedParams} params - The parameters for this event
 * @property {GUID} visitor_id - visitor_id
 * @property {GUID} vsi - vsi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderTemplatePickerOpenedParams>} LogObject<formBuilderTemplatePickerOpenedParams>
 */
export function formBuilderTemplatePickerOpened(params) {
    return { evid: 910, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dummyNameSrc5Evid9100' event (evid: 9100)
 *
 * Event description: dummy-name.
 *
 * @param {dummyNameSrc5Evid9100Params} params - The parameters for this event
 * @return {LogObject<dummyNameSrc5Evid9100Params>} LogObject<dummyNameSrc5Evid9100Params>
 */
export function dummyNameSrc5Evid9100(params) {
    return { evid: 9100, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderTemplatePickerClickOnTemplate' event (evid: 911)
 *
 * Event description: user clicks on a template in the form template picker
 *
 * @param {formBuilderTemplatePickerClickOnTemplateParams} params - The parameters for this event
 * @property {GUID} visitor_id - visitor_id
 * @property {GUID} vsi - vsi
 * @property {string} template - template selected
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderTemplatePickerClickOnTemplateParams>} LogObject<formBuilderTemplatePickerClickOnTemplateParams>
 */
export function formBuilderTemplatePickerClickOnTemplate(params) {
    return { evid: 911, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderTemplatePickerChooseTemplate' event (evid: 912)
 *
 * Event description: user clicks on choose/start after selecting a template in the form template picker OR install from add panel
 *
 * @param {formBuilderTemplatePickerChooseTemplateParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI/Editor
 * @property {string} appVersion - appVersion
 * @property {GUID} visitor_id - deprecated
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} source_name - app market / add panel
 * @property {string} template - template selected
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderTemplatePickerChooseTemplateParams>} LogObject<formBuilderTemplatePickerChooseTemplateParams>
 */
export function formBuilderTemplatePickerChooseTemplate(params) {
    return { evid: 912, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderManageFieldsPanelOpened' event (evid: 913)
 *
 * Event description: manage form fields panel is opened
 *
 * @param {formBuilderManageFieldsPanelOpenedParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI/Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} template - template name
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderManageFieldsPanelOpenedParams>} LogObject<formBuilderManageFieldsPanelOpenedParams>
 */
export function formBuilderManageFieldsPanelOpened(params) {
    return { evid: 913, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderManageFieldsDeleteField' event (evid: 914)
 *
 * Event description: users clicks on delete field in field manager
 *
 * @param {formBuilderManageFieldsDeleteFieldParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {string} field_type - field type
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} template - template name
 * @property {GUID} msid - msid
 * @property {string} field_name - field name
 * @return {LogObject<formBuilderManageFieldsDeleteFieldParams>} LogObject<formBuilderManageFieldsDeleteFieldParams>
 */
export function formBuilderManageFieldsDeleteField(params) {
    return { evid: 914, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderManageFieldsAddNewFieldDropDownOpened' event (evid: 915)
 *
 * Event description: user clicks on add new field and fields drop-down is opened
 *
 * @param {formBuilderManageFieldsAddNewFieldDropDownOpenedParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI/Editor
 * @property {GUID} visitor_id - deprecated
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} template - template name
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderManageFieldsAddNewFieldDropDownOpenedParams>} LogObject<formBuilderManageFieldsAddNewFieldDropDownOpenedParams>
 */
export function formBuilderManageFieldsAddNewFieldDropDownOpened(params) {
    return { evid: 915, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderManageFieldsAddNewField' event (evid: 916)
 *
 * Event description: users selects a new field to be added to the form
 *
 * @param {formBuilderManageFieldsAddNewFieldParams} params - The parameters for this event
 * @property {string} plugin - form type = {'form-builder'/'get-subscribers'/'registration-form'}
 * @property {string} builderOrigin - ADI / Editor
 * @property {string} field_type - field type
 * @property {string} appVersion - appVersion
 * @property {GUID} visitor_id - deprecated
 * @property {string} tabName - tab name
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} template - template name
 * @property {string} field_group - field group (e.g recommended, my custom, custom)
 * @property {GUID} msid - msid
 * @property {string} field_name - field name
 * @return {LogObject<formBuilderManageFieldsAddNewFieldParams>} LogObject<formBuilderManageFieldsAddNewFieldParams>
 */
export function formBuilderManageFieldsAddNewField(params) {
    return { evid: 916, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderEditFieldPanelOpened' event (evid: 917)
 *
 * Event description: edit field panel is opened
 *
 * @param {formBuilderEditFieldPanelOpenedParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {string} field_type - field type
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} origin - panel opened from (gfpp,manage fields...)
 * @property {GUID} msid - msid
 * @property {string} field_name - field name
 * @return {LogObject<formBuilderEditFieldPanelOpenedParams>} LogObject<formBuilderEditFieldPanelOpenedParams>
 */
export function formBuilderEditFieldPanelOpened(params) {
    return { evid: 917, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderEditFieldUpdateValue' event (evid: 918)
 *
 * Event description: user updated a value (e.g placeholder text, field name)
 *
 * @param {formBuilderEditFieldUpdateValueParams} params - The parameters for this event
 * @property {string} plugin - plugin
 * @property {string} name - placeholder, field name
 * @property {boolean} toggle_state - toggle state
 * @property {string} builderOrigin - ADI / Editor
 * @property {string} field_type - field type
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} origin - 'field settings','gfpp'
 * @property {GUID} msid - msid
 * @property {string} field_name - field name
 * @return {LogObject<formBuilderEditFieldUpdateValueParams>} LogObject<formBuilderEditFieldUpdateValueParams>
 */
export function formBuilderEditFieldUpdateValue(params) {
    return { evid: 918, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderEditFieldUpdateMandatoryValue' event (evid: 919)
 *
 * Event description: user selects/deselects if field is required or not
 *
 * @param {formBuilderEditFieldUpdateMandatoryValueParams} params - The parameters for this event
 * @property {string} plugin - form type = {'form-builder'/'get-subscribers'/'registration-form'}
 * @property {string} builderOrigin - ADI / Editor
 * @property {string} field_type - field type
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {boolean} is_required - true if set to required
 * @property {GUID} vsi - vsi
 * @property {string} origin - type of checkbox required / checked by default
 * @property {GUID} msid - msid
 * @property {string} field_name - field name
 * @return {LogObject<formBuilderEditFieldUpdateMandatoryValueParams>} LogObject<formBuilderEditFieldUpdateMandatoryValueParams>
 */
export function formBuilderEditFieldUpdateMandatoryValue(params) {
    return { evid: 919, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesDeleteQuotePageCancel' event (evid: 92)
 *
 * Event description: cancel in delete page (for every close (cancel, x, background click))
 *
 * @param {quotesDeleteQuotePageCancelParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} origin_device - web,native
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {GUID} quoteId - quote guid
 * @return {LogObject<quotesDeleteQuotePageCancelParams>} LogObject<quotesDeleteQuotePageCancelParams>
 */
export function quotesDeleteQuotePageCancel(params) {
    return { evid: 92, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderEditFieldConnectFieldDropDownOpened' event (evid: 920)
 *
 * Event description: user click on connect field and drop-down opened
 *
 * @param {formBuilderEditFieldConnectFieldDropDownOpenedParams} params - The parameters for this event
 * @property {string} field_type - field type
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {number} num_of_fields - number of available fields to connect (0 if none)
 * @property {GUID} msid - msid
 * @property {string} field_name - field name
 * @return {LogObject<formBuilderEditFieldConnectFieldDropDownOpenedParams>} LogObject<formBuilderEditFieldConnectFieldDropDownOpenedParams>
 */
export function formBuilderEditFieldConnectFieldDropDownOpened(params) {
    return { evid: 920, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'appInstallationInitiate' event (evid: 9201)
 *
 * Event description: When a user initiates an app installation in order to add an app to his site
 *
 * @param {appInstallationInitiateParams} params - The parameters for this event
 * @property {string} appVersion - App Version
 * @property {string} tenantType - ACCOUNT/SITE
 * @property {string} appdefid - app def id (of the app) to install
 * @property {string} tenantId - account id/meta site id
 * @return {LogObject<appInstallationInitiateParams>} LogObject<appInstallationInitiateParams>
 */
export function appInstallationInitiate(params) {
    return { evid: 9201, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'appInstallationCompleted' event (evid: 9202)
 *
 * Event description: When the app installation in the Dev Center is done by the server
 *
 * @param {appInstallationCompletedParams} params - The parameters for this event
 * @property {DateTime} installationDate - the date the app was installed on the site/account
 * @property {GUID} appInstanceId - app instance id - (app+tenant) instance guid
 * @property {string} newStatus - status (waiting for authentication/installed...)
 * @property {string} appVersion - App Version
 * @property {string} tenantType - ACCOUNT/SITE
 * @property {string} appdefid - app def id to install
 * @property {boolean} isEnabled - is enabled (not revoked)
 * @property {string} tenantId - account id/meta site id
 * @return {LogObject<appInstallationCompletedParams>} LogObject<appInstallationCompletedParams>
 */
export function appInstallationCompleted(params) {
    return { evid: 9202, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'appsBulkInstallationInitiate' event (evid: 9203)
 *
 * Event description: When a user initiates more then one app installation in a bulk in order to add apps to his site/account (when a few apps installations initiated on a tenant by the same API call)
 *
 * @param {appsBulkInstallationInitiateParams} params - The parameters for this event
 * @property {string} appInstances - List of JSONs, each JSON containing info of an app initiated installation on the tenant. f.e: [{“app_id”:””,”app_version”:””},{}]
 * @property {string} tenantType - ACCOUNT/SITE
 * @property {string} tenantId - account id/meta site id
 * @return {LogObject<appsBulkInstallationInitiateParams>} LogObject<appsBulkInstallationInitiateParams>
 */
export function appsBulkInstallationInitiate(params) {
    return { evid: 9203, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'appsBulkInstallationsCompleted' event (evid: 9204)
 *
 * Event description: When the apps bulk installation in the Dev Center is done by the server.
 *
 * @param {appsBulkInstallationsCompletedParams} params - The parameters for this event
 * @property {string} appInstances - List of JSONs, each JSON containing info of an app installed on the tenant. f.e: [{“app_id”:””,”app_instance_id”:””,”app_version”:””,”is_enabled”:”” , “new_status”:””},{}]
 * @property {string} tenantType - ACCOUNT/SITE
 * @property {string} tenantId - account id/meta site id
 * @return {LogObject<appsBulkInstallationsCompletedParams>} LogObject<appsBulkInstallationsCompletedParams>
 */
export function appsBulkInstallationsCompleted(params) {
    return { evid: 9204, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderEditFieldConnectField' event (evid: 921)
 *
 * Event description: user selects a field to connect to
 *
 * @param {formBuilderEditFieldConnectFieldParams} params - The parameters for this event
 * @property {string} plugin - plugin
 * @property {string} builderOrigin - ADI/Editor
 * @property {string} connected_field - name of CRM field connected to
 * @property {string} field_type - field type
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {GUID} msid - msid
 * @property {string} field_name - field name
 * @return {LogObject<formBuilderEditFieldConnectFieldParams>} LogObject<formBuilderEditFieldConnectFieldParams>
 */
export function formBuilderEditFieldConnectField(params) {
    return { evid: 921, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderFormSettingsPanelOpened' event (evid: 922)
 *
 * Event description: form settings panel is opened
 *
 * @param {formBuilderFormSettingsPanelOpenedParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI/ Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} origin - origin
 * @property {string} template - template name
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderFormSettingsPanelOpenedParams>} LogObject<formBuilderFormSettingsPanelOpenedParams>
 */
export function formBuilderFormSettingsPanelOpened(params) {
    return { evid: 922, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderFormSettingsUpdateValue' event (evid: 923)
 *
 * Event description: user updates a value in form settings
 *
 * @param {formBuilderFormSettingsUpdateValueParams} params - The parameters for this event
 * @property {string} name - form name, email,second email, success message, error message,label
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} origin - 'submissions','notifications'
 * @property {string} template - template name
 * @property {GUID} msid - msid
 * @property {string} action_type - 'save','cancel'
 * @return {LogObject<formBuilderFormSettingsUpdateValueParams>} LogObject<formBuilderFormSettingsUpdateValueParams>
 */
export function formBuilderFormSettingsUpdateValue(params) {
    return { evid: 923, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderFormLayoutOpenAndChange' event (evid: 924)
 *
 * Event description: form layout panel is opened (action=open)
 * user clicks on a new layout (action=select)
 *
 * @param {formBuilderFormLayoutOpenAndChangeParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI/Editor
 * @property {string} field_type - form layout panel / complex phone / complex address
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} template - template name
 * @property {string} layout - new layout: single, 2 column, 3 column
 * @property {GUID} msid - msid
 * @property {string} action - open,select
 * @return {LogObject<formBuilderFormLayoutOpenAndChangeParams>} LogObject<formBuilderFormLayoutOpenAndChangeParams>
 */
export function formBuilderFormLayoutOpenAndChange(params) {
    return { evid: 924, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderFormSettingsChangeDuration' event (evid: 925)
 *
 * Event description: user change duration of submit message
 *
 * @param {formBuilderFormSettingsChangeDurationParams} params - The parameters for this event
 * @property {number} duration - duration in seconds
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} template - template name
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderFormSettingsChangeDurationParams>} LogObject<formBuilderFormSettingsChangeDurationParams>
 */
export function formBuilderFormSettingsChangeDuration(params) {
    return { evid: 925, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderFormSettingsMsgLink' event (evid: 926)
 *
 * Event description: user select message or open link
 *
 * @param {formBuilderFormSettingsMsgLinkParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} selection - open link/message
 * @property {string} origin - panel opening origin
 * @property {string} template - template name
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderFormSettingsMsgLinkParams>} LogObject<formBuilderFormSettingsMsgLinkParams>
 */
export function formBuilderFormSettingsMsgLink(params) {
    return { evid: 926, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderFormSettingsLinkSelection' event (evid: 927)
 *
 * Event description: user click done on link selection
 *
 * @param {formBuilderFormSettingsLinkSelectionParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {string} sub_type - page url/lightbox_id
 * @property {GUID} visitor_id - deprecated
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} origin - panel opening origin
 * @property {string} template - template name
 * @property {string} type - none/page/lightbox
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderFormSettingsLinkSelectionParams>} LogObject<formBuilderFormSettingsLinkSelectionParams>
 */
export function formBuilderFormSettingsLinkSelection(params) {
    return { evid: 927, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderFormSettingsCreateSubmissionsTableRequest' event (evid: 928)
 *
 * Event description: request to create a submissions table was sent either by user clicking on create submissions table inside forms settings panel
 * or choose a template with a submission table
 *
 * @param {formBuilderFormSettingsCreateSubmissionsTableRequestParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {string} appVersion - appVersion
 * @property {string} request_type - {manual (user click), auto (from template}
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} origin - 'main tab' , 'settings tab'
 * @property {string} template - template name
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderFormSettingsCreateSubmissionsTableRequestParams>} LogObject<formBuilderFormSettingsCreateSubmissionsTableRequestParams>
 */
export function formBuilderFormSettingsCreateSubmissionsTableRequest(params) {
    return { evid: 928, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderFormSettingsCreateSubmissionsTableSuccess' event (evid: 929)
 *
 * Event description: submissions table was created successfully
 *
 * @param {formBuilderFormSettingsCreateSubmissionsTableSuccessParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI/Editor
 * @property {string} appVersion - appVersion
 * @property {string} request_type - {manual (user click), auto (from template}
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} template - template name
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderFormSettingsCreateSubmissionsTableSuccessParams>} LogObject<formBuilderFormSettingsCreateSubmissionsTableSuccessParams>
 */
export function formBuilderFormSettingsCreateSubmissionsTableSuccess(params) {
    return { evid: 929, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesMarkAsAccepted' event (evid: 93)
 *
 * Event description: Click on the 'send invoice' button (before the actual sending)
 *
 * @param {quotesMarkAsAcceptedParams} params - The parameters for this event
 * @property {GUID} instanceId - instance_id
 * @property {number} totalAmountLong - Total amount of the invoice, INTEGER multiplied by 100000
 * @property {boolean} createOrder - create_order
 * @property {GUID} uuid - uuid
 * @property {string} paymentType - 'one time','recurring'
 * @property {string} view_type - view_type
 * @property {GUID} invoiceId - invoice_guid
 * @property {string} origin - create invoice, edit invoice
 * @property {string} currency - currency
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @return {LogObject<quotesMarkAsAcceptedParams>} LogObject<quotesMarkAsAcceptedParams>
 */
export function quotesMarkAsAccepted(params) {
    return { evid: 93, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderBizMgrAddNewFormClick' event (evid: 930)
 *
 * Event description: user clicks on add new form inside forms BO
 *
 * @param {formBuilderBizMgrAddNewFormClickParams} params - The parameters for this event
 * @property {GUID} visitor_id - visitor_id
 * @property {GUID} vsi - vsi
 * @property {string} place - {top button,empty}
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderBizMgrAddNewFormClickParams>} LogObject<formBuilderBizMgrAddNewFormClickParams>
 */
export function formBuilderBizMgrAddNewFormClick(params) {
    return { evid: 930, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderBizMgrViewFormSubmissionsClick' event (evid: 931)
 *
 * Event description: user clicks on view form submissions inside forms BO
 *
 * @param {formBuilderBizMgrViewFormSubmissionsClickParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} origin - 'main tab' , 'settings tab'
 * @property {string} template - template name
 * @property {string} place - place = 'availble forms' / 'deleted forms'
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderBizMgrViewFormSubmissionsClickParams>} LogObject<formBuilderBizMgrViewFormSubmissionsClickParams>
 */
export function formBuilderBizMgrViewFormSubmissionsClick(params) {
    return { evid: 931, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderManageFieldsDuplicateField' event (evid: 932)
 *
 * Event description: users selects duplicate from manage fields
 *
 * @param {formBuilderManageFieldsDuplicateFieldParams} params - The parameters for this event
 * @property {string} field_type - field type
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} field_group - field group (e.g recommended, my custom, custom)
 * @property {GUID} msid - msid
 * @property {string} field_name - field name
 * @return {LogObject<formBuilderManageFieldsDuplicateFieldParams>} LogObject<formBuilderManageFieldsDuplicateFieldParams>
 */
export function formBuilderManageFieldsDuplicateField(params) {
    return { evid: 932, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderRemoveSubmitButton' event (evid: 933)
 *
 * Event description: users delete submit button
 *
 * @param {formBuilderRemoveSubmitButtonParams} params - The parameters for this event
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} template - template name
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderRemoveSubmitButtonParams>} LogObject<formBuilderRemoveSubmitButtonParams>
 */
export function formBuilderRemoveSubmitButton(params) {
    return { evid: 933, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderPremiumPanelOpened' event (evid: 934)
 *
 * Event description: user see upgrade panel
 *
 * @param {formBuilderPremiumPanelOpenedParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor / Responsive
 * @property {GUID} visitor_id - visitor_id
 * @property {string} current_ascend_plan - plan name (Basic/Pro/..)  or ‘free’
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} origin - origin
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderPremiumPanelOpenedParams>} LogObject<formBuilderPremiumPanelOpenedParams>
 */
export function formBuilderPremiumPanelOpened(params) {
    return { evid: 934, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderPremiumPanelClick' event (evid: 935)
 *
 * Event description: user click in premium panel
 *
 * @param {formBuilderPremiumPanelClickParams} params - The parameters for this event
 * @property {GUID} visitor_id - visitor_id
 * @property {string} current_ascend_plan - plan name (Basic/Pro/..)  or ‘free’
 * @property {GUID} vsi - vsi
 * @property {string} selection - later/upgrade
 * @property {string} origin - origin
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderPremiumPanelClickParams>} LogObject<formBuilderPremiumPanelClickParams>
 */
export function formBuilderPremiumPanelClick(params) {
    return { evid: 935, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderUserSaveAnEditorTemplateWithForm' event (evid: 936)
 *
 * Event description: user saving an editor template with embedded wix form
 *
 * @param {formBuilderUserSaveAnEditorTemplateWithFormParams} params - The parameters for this event
 * @property {GUID} visitor_id - visitor_id
 * @property {GUID} templateId - editor template guid
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} template - Form template selected
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderUserSaveAnEditorTemplateWithFormParams>} LogObject<formBuilderUserSaveAnEditorTemplateWithFormParams>
 */
export function formBuilderUserSaveAnEditorTemplateWithForm(params) {
    return { evid: 936, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderFormCopyAttemptFailed' event (evid: 937)
 *
 * Event description: copy of a form failed
 *
 * @param {formBuilderFormCopyAttemptFailedParams} params - The parameters for this event
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - id of original form
 * @property {GUID} vsi - vsi
 * @property {string} failReason - fail reason
 * @property {string} template - template name
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderFormCopyAttemptFailedParams>} LogObject<formBuilderFormCopyAttemptFailedParams>
 */
export function formBuilderFormCopyAttemptFailed(params) {
    return { evid: 937, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderSubmitButtonUploadFileClick' event (evid: 938)
 *
 * Event description: user clicks on upload file in form settings
 *
 * @param {formBuilderSubmitButtonUploadFileClickParams} params - The parameters for this event
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} template - template name
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderSubmitButtonUploadFileClickParams>} LogObject<formBuilderSubmitButtonUploadFileClickParams>
 */
export function formBuilderSubmitButtonUploadFileClick(params) {
    return { evid: 938, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderPresetGlobalDesignFailed' event (evid: 939)
 *
 * Event description: user couldn't install a preset or change global design
 *
 * @param {formBuilderPresetGlobalDesignFailedParams} params - The parameters for this event
 * @property {string} name - preset or global design
 * @property {GUID} visitor_id - visitor_id
 * @property {string} reason - fail reason
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderPresetGlobalDesignFailedParams>} LogObject<formBuilderPresetGlobalDesignFailedParams>
 */
export function formBuilderPresetGlobalDesignFailed(params) {
    return { evid: 939, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesCreateInvoiceFromQuotes' event (evid: 94)
 *
 * Event description: user send invoice
 *
 * @param {quotesCreateInvoiceFromQuotesParams} params - The parameters for this event
 * @property {GUID} instanceId - instance_id
 * @property {number} totalAmountLong - Total amount of the invoice, INTEGER multiplied by 100000
 * @property {boolean} createOrder - create order?
 * @property {GUID} uuid - uuid
 * @property {string} depositType - The optional type of the invoice deposit. Possible values: "FLAT"/"PERCENTAGE".
 * @property {string} paymentType - 'one time','recurring'
 * @property {string} view_type - view_type
 * @property {GUID} invoiceId - invoice_guid
 * @property {string} origin - origin
 * @property {string} invoiceTitle - invoiceTitle
 * @property {string} invoiceSource - by app_def_id
 * @property {string} currency - currency
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {number} discountPercentage - discountPercentage
 * @return {LogObject<quotesCreateInvoiceFromQuotesParams>} LogObject<quotesCreateInvoiceFromQuotesParams>
 */
export function quotesCreateInvoiceFromQuotes(params) {
    return { evid: 94, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderManageFieldsClickOnFieldButtonLearnAllAboutThis' event (evid: 940)
 *
 * Event description: users click on field button 'Learn All About This'
 *
 * @param {formBuilderManageFieldsClickOnFieldButtonLearnAllAboutThisParams} params - The parameters for this event
 * @property {string} field_type - field type
 * @property {GUID} visitor_id - visitor_id
 * @property {string} tabName - tab name
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} template - template name
 * @property {string} field_group - field group (e.g recommended, my custom, custom)
 * @property {GUID} msid - msid
 * @property {string} field_name - field name
 * @return {LogObject<formBuilderManageFieldsClickOnFieldButtonLearnAllAboutThisParams>} LogObject<formBuilderManageFieldsClickOnFieldButtonLearnAllAboutThisParams>
 */
export function formBuilderManageFieldsClickOnFieldButtonLearnAllAboutThis(params) {
    return { evid: 940, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'biProfileDataForSiteDetailsActionsWidget' event (evid: 9400)
 *
 * Event description: This event will be reported when Home page is loaded. the purpose of this event is to debug cases when BI profile doesn't send the needed data to show in the site-details-actions widget
 *
 * @param {biProfileDataForSiteDetailsActionsWidgetParams} params - The parameters for this event
 * @property {string} installedApps - installed apps - data from bi profile use for the site-details-actions widget . in case the BI Profile doesn't send the data report null.
 * @property {GUID} msid - the site guid
 * @return {LogObject<biProfileDataForSiteDetailsActionsWidgetParams>} LogObject<biProfileDataForSiteDetailsActionsWidgetParams>
 */
export function biProfileDataForSiteDetailsActionsWidget(params) {
    return { evid: 9400, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderAdiEditFormClick' event (evid: 941)
 *
 * Event description: User click on edit form in ADI
 *
 * @param {formBuilderAdiEditFormClickParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} origin - {'dropdown', 'edit button'}
 * @property {string} template - template name
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderAdiEditFormClickParams>} LogObject<formBuilderAdiEditFormClickParams>
 */
export function formBuilderAdiEditFormClick(params) {
    return { evid: 941, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderAdiEditFormCompleted' event (evid: 942)
 *
 * Event description: Edit form - completed
 *
 * @param {formBuilderAdiEditFormCompletedParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} origin - {'dropdown', 'edit button'}
 * @property {string} template - template name
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderAdiEditFormCompletedParams>} LogObject<formBuilderAdiEditFormCompletedParams>
 */
export function formBuilderAdiEditFormCompleted(params) {
    return { evid: 942, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderAdiReorderFieldClick' event (evid: 943)
 *
 * Event description: Reorder Field - click
 *
 * @param {formBuilderAdiReorderFieldClickParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {string} field_type - field_type
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} origin - {'dropdown', 'edit button'}
 * @property {string} template - template name
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @property {string} field_name - field_name
 * @return {LogObject<formBuilderAdiReorderFieldClickParams>} LogObject<formBuilderAdiReorderFieldClickParams>
 */
export function formBuilderAdiReorderFieldClick(params) {
    return { evid: 943, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderAdiReorderFieldComplete' event (evid: 944)
 *
 * Event description: Reorder Field - complete
 *
 * @param {formBuilderAdiReorderFieldCompleteParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {string} field_type - field_type
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} origin - {'dropdown', 'edit button'}
 * @property {string} template - template name
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @property {string} field_name - field_name
 * @return {LogObject<formBuilderAdiReorderFieldCompleteParams>} LogObject<formBuilderAdiReorderFieldCompleteParams>
 */
export function formBuilderAdiReorderFieldComplete(params) {
    return { evid: 944, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderClickOnGfppOfConnectPanel' event (evid: 945)
 *
 * Event description: users click on gfpp of connect panel (after clicking on a single field)
 *
 * @param {formBuilderClickOnGfppOfConnectPanelParams} params - The parameters for this event
 * @property {string} field_type - field type
 * @property {GUID} visitor_id - visitor_id
 * @property {string} button_name - name of button
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} origin - origin aof the gfpp
 * @property {string} template - template name
 * @property {string} field_group - field group (e.g recommended, my custom, custom)
 * @property {GUID} msid - msid
 * @property {string} field_name - field name
 * @return {LogObject<formBuilderClickOnGfppOfConnectPanelParams>} LogObject<formBuilderClickOnGfppOfConnectPanelParams>
 */
export function formBuilderClickOnGfppOfConnectPanel(params) {
    return { evid: 945, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderFormLayoutSpaceBetweenRows' event (evid: 946)
 *
 * Event description: user updated space between rows
 *
 * @param {formBuilderFormLayoutSpaceBetweenRowsParams} params - The parameters for this event
 * @property {string} field_type - form layout panel / complex phone / complex address
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} template - template name
 * @property {GUID} msid - msid
 * @property {string} value - space between rows value
 * @return {LogObject<formBuilderFormLayoutSpaceBetweenRowsParams>} LogObject<formBuilderFormLayoutSpaceBetweenRowsParams>
 */
export function formBuilderFormLayoutSpaceBetweenRows(params) {
    return { evid: 946, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderFormLayoutSpaceBetweenColumns' event (evid: 947)
 *
 * Event description: user updated space between columns
 *
 * @param {formBuilderFormLayoutSpaceBetweenColumnsParams} params - The parameters for this event
 * @property {string} field_type - form layout panel / complex phone / complex address
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} template - template name
 * @property {GUID} msid - msid
 * @property {string} value - space between columns value
 * @return {LogObject<formBuilderFormLayoutSpaceBetweenColumnsParams>} LogObject<formBuilderFormLayoutSpaceBetweenColumnsParams>
 */
export function formBuilderFormLayoutSpaceBetweenColumns(params) {
    return { evid: 947, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderFormLayoutTextAlignment' event (evid: 948)
 *
 * Event description: user updated Text Alignment
 *
 * @param {formBuilderFormLayoutTextAlignmentParams} params - The parameters for this event
 * @property {string} field_type - form layout panel / complex phone / complex address
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} template - template name
 * @property {GUID} msid - msid
 * @property {string} value - {right / center / left}
 * @return {LogObject<formBuilderFormLayoutTextAlignmentParams>} LogObject<formBuilderFormLayoutTextAlignmentParams>
 */
export function formBuilderFormLayoutTextAlignment(params) {
    return { evid: 948, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderFormLayoutTitleAndPlaceholderPadding' event (evid: 949)
 *
 * Event description: user updated value of Input Text Padding
 *
 * @param {formBuilderFormLayoutTitleAndPlaceholderPaddingParams} params - The parameters for this event
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} template - template name
 * @property {GUID} msid - msid
 * @property {string} value - value of Input Text Padding
 * @return {LogObject<formBuilderFormLayoutTitleAndPlaceholderPaddingParams>} LogObject<formBuilderFormLayoutTitleAndPlaceholderPaddingParams>
 */
export function formBuilderFormLayoutTitleAndPlaceholderPadding(params) {
    return { evid: 949, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesMarkAsAcceptedSrc5Evid95' event (evid: 95)
 *
 * Event description: User click on Mark as accepted
 *
 * @param {quotesMarkAsAcceptedSrc5Evid95Params} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {GUID} quoteId - quote guid
 * @return {LogObject<quotesMarkAsAcceptedSrc5Evid95Params>} LogObject<quotesMarkAsAcceptedSrc5Evid95Params>
 */
export function quotesMarkAsAcceptedSrc5Evid95(params) {
    return { evid: 95, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderFormLayoutSpaceBetweenFieldTitleAndInput' event (evid: 950)
 *
 * Event description: user updated value of  Space between field title and input
 *
 * @param {formBuilderFormLayoutSpaceBetweenFieldTitleAndInputParams} params - The parameters for this event
 * @property {string} field_type - form layout panel / complex phone / complex address
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} template - template name
 * @property {GUID} msid - msid
 * @property {string} value - value of  Space between field title and input
 * @return {LogObject<formBuilderFormLayoutSpaceBetweenFieldTitleAndInputParams>} LogObject<formBuilderFormLayoutSpaceBetweenFieldTitleAndInputParams>
 */
export function formBuilderFormLayoutSpaceBetweenFieldTitleAndInput(params) {
    return { evid: 950, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderFormLayoutFieldTitlePadding' event (evid: 951)
 *
 * Event description: user updated value of Field Title Padding
 *
 * @param {formBuilderFormLayoutFieldTitlePaddingParams} params - The parameters for this event
 * @property {string} field_type - form layout panel / complex phone / complex address
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} template - template name
 * @property {GUID} msid - msid
 * @property {string} value - value of Field Title Padding
 * @return {LogObject<formBuilderFormLayoutFieldTitlePaddingParams>} LogObject<formBuilderFormLayoutFieldTitlePaddingParams>
 */
export function formBuilderFormLayoutFieldTitlePadding(params) {
    return { evid: 951, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderGlobalLayoutShowFieldTitleToggle' event (evid: 952)
 *
 * Event description: user updated  'Show Field Title' Toggle
 *
 * @param {formBuilderGlobalLayoutShowFieldTitleToggleParams} params - The parameters for this event
 * @property {boolean} toggle_state - toggle state
 * @property {string} builderOrigin - ADI / Editor
 * @property {string} field_type - form layout panel / complex phone / complex address
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderGlobalLayoutShowFieldTitleToggleParams>} LogObject<formBuilderGlobalLayoutShowFieldTitleToggleParams>
 */
export function formBuilderGlobalLayoutShowFieldTitleToggle(params) {
    return { evid: 952, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderFormSettingsInnerTabsClick' event (evid: 953)
 *
 * Event description: Form Builder - Form settings - inner tabs - click
 *
 * @param {formBuilderFormSettingsInnerTabsClickParams} params - The parameters for this event
 * @property {string} source - source
 * @property {string} builderOrigin - ADI, Editor
 * @property {string} tab_name - main/settings/ submit message / automations / support / upgrade / contact list
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} origin - panel opening origin
 * @property {string} template - template name
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderFormSettingsInnerTabsClickParams>} LogObject<formBuilderFormSettingsInnerTabsClickParams>
 */
export function formBuilderFormSettingsInnerTabsClick(params) {
    return { evid: 953, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderFormSettingsSettingsTabsClick' event (evid: 954)
 *
 * Event description: Form Builder - Form settings - settings tabs - click
 *
 * @param {formBuilderFormSettingsSettingsTabsClickParams} params - The parameters for this event
 * @property {string} name - 'Email Notifications', 'Submission Table', 'Contact Labels'
 * @property {string} source - source
 * @property {string} builderOrigin - ADI/ Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} origin - panel opening origin
 * @property {string} template - template name
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderFormSettingsSettingsTabsClickParams>} LogObject<formBuilderFormSettingsSettingsTabsClickParams>
 */
export function formBuilderFormSettingsSettingsTabsClick(params) {
    return { evid: 954, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderFormSettingsGoToAutomationsClick' event (evid: 955)
 *
 * Event description: Form Builder - Form settings - Go to application - click
 *
 * @param {formBuilderFormSettingsGoToAutomationsClickParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} origin - 'main tab' , 'automations tab'
 * @property {string} application_name - workflows. automations...
 * @property {string} template - template name
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderFormSettingsGoToAutomationsClickParams>} LogObject<formBuilderFormSettingsGoToAutomationsClickParams>
 */
export function formBuilderFormSettingsGoToAutomationsClick(params) {
    return { evid: 955, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderFormSettingsContactListClick' event (evid: 956)
 *
 * Event description: Form Builder - Form settings - Contact List - click
 *
 * @param {formBuilderFormSettingsContactListClickParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} referral - referral page
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} template - template name
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderFormSettingsContactListClickParams>} LogObject<formBuilderFormSettingsContactListClickParams>
 */
export function formBuilderFormSettingsContactListClick(params) {
    return { evid: 956, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderFormSettingsSupportAboutWixFormsClick' event (evid: 957)
 *
 * Event description: Form Builder - Form settings - Support - About Wix Forms - click
 *
 * @param {formBuilderFormSettingsSupportAboutWixFormsClickParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI/ Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} template - template name
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderFormSettingsSupportAboutWixFormsClickParams>} LogObject<formBuilderFormSettingsSupportAboutWixFormsClickParams>
 */
export function formBuilderFormSettingsSupportAboutWixFormsClick(params) {
    return { evid: 957, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderFormSettingsSupportWixSupportClick' event (evid: 958)
 *
 * Event description: Form Builder - Form settings - Support - Wix Support - click
 *
 * @param {formBuilderFormSettingsSupportWixSupportClickParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} origin - panel opening origin
 * @property {string} template - template name
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderFormSettingsSupportWixSupportClickParams>} LogObject<formBuilderFormSettingsSupportWixSupportClickParams>
 */
export function formBuilderFormSettingsSupportWixSupportClick(params) {
    return { evid: 958, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderFormSettingsSupportSendYourFeedbackClick' event (evid: 959)
 *
 * Event description: Form Builder - Form settings - Support - Send Your Feedback - click
 *
 * @param {formBuilderFormSettingsSupportSendYourFeedbackClickParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} template - template name
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderFormSettingsSupportSendYourFeedbackClickParams>} LogObject<formBuilderFormSettingsSupportSendYourFeedbackClickParams>
 */
export function formBuilderFormSettingsSupportSendYourFeedbackClick(params) {
    return { evid: 959, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'quotesCreateInvoiceFromQuotesSrc5Evid96' event (evid: 96)
 *
 * Event description: User click on Create Invoice (from Price Quotes)
 *
 * @param {quotesCreateInvoiceFromQuotesSrc5Evid96Params} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @property {string} msid - msid
 * @property {GUID} quoteId - quote guid
 * @return {LogObject<quotesCreateInvoiceFromQuotesSrc5Evid96Params>} LogObject<quotesCreateInvoiceFromQuotesSrc5Evid96Params>
 */
export function quotesCreateInvoiceFromQuotesSrc5Evid96(params) {
    return { evid: 96, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderFormSettingsSupportAddAReviewClick' event (evid: 960)
 *
 * Event description: Form Builder - Form settings - Support - Add a Review - click
 *
 * @param {formBuilderFormSettingsSupportAddAReviewClickParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} template - template name
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderFormSettingsSupportAddAReviewClickParams>} LogObject<formBuilderFormSettingsSupportAddAReviewClickParams>
 */
export function formBuilderFormSettingsSupportAddAReviewClick(params) {
    return { evid: 960, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderFormSettingsCreateAutomation' event (evid: 961)
 *
 * Event description: Form Builder - Form settings - Create Automation
 *
 * @param {formBuilderFormSettingsCreateAutomationParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} origin - panel opening origin
 * @property {string} template - template name
 * @property {string} automation_type - 'send a thank you email' , 'create a new task', 'send a chat message'
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderFormSettingsCreateAutomationParams>} LogObject<formBuilderFormSettingsCreateAutomationParams>
 */
export function formBuilderFormSettingsCreateAutomation(params) {
    return { evid: 961, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderFormSettingsInformationIconHoverClick' event (evid: 962)
 *
 * Event description: Form Builder - Form settings - information icon - hover/click
 *
 * @param {formBuilderFormSettingsInformationIconHoverClickParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI/ Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} information_icon - 'contact labels' , 'submit message'
 * @property {string} template - template name
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderFormSettingsInformationIconHoverClickParams>} LogObject<formBuilderFormSettingsInformationIconHoverClickParams>
 */
export function formBuilderFormSettingsInformationIconHoverClick(params) {
    return { evid: 962, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderFormSettingsPublishYourSitePopupPresented' event (evid: 963)
 *
 * Event description: Publish Your Site Popup - presented
 * (after user creates submission table)
 *
 * @param {formBuilderFormSettingsPublishYourSitePopupPresentedParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI/ Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} template - template name
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderFormSettingsPublishYourSitePopupPresentedParams>} LogObject<formBuilderFormSettingsPublishYourSitePopupPresentedParams>
 */
export function formBuilderFormSettingsPublishYourSitePopupPresented(params) {
    return { evid: 963, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderFormSettingsPublishYourSitePopupSelection' event (evid: 964)
 *
 * Event description: user click on one of the buttons in 'Publish Your Site' pop-up
 *
 * @param {formBuilderFormSettingsPublishYourSitePopupSelectionParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} selection - 'got it'/ 'dismiss'/ 'question'
 * @property {string} template - template name
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderFormSettingsPublishYourSitePopupSelectionParams>} LogObject<formBuilderFormSettingsPublishYourSitePopupSelectionParams>
 */
export function formBuilderFormSettingsPublishYourSitePopupSelection(params) {
    return { evid: 964, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderFormSettingsSubmitMessageChooseLinkClick' event (evid: 965)
 *
 * Event description: Submit Message - Choose Link - click
 *
 * @param {formBuilderFormSettingsSubmitMessageChooseLinkClickParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI/ Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} origin - panel opening origin
 * @property {string} template - template name
 * @property {string} link_type - 'link to page or lightbox' / 'link to external URL'
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderFormSettingsSubmitMessageChooseLinkClickParams>} LogObject<formBuilderFormSettingsSubmitMessageChooseLinkClickParams>
 */
export function formBuilderFormSettingsSubmitMessageChooseLinkClick(params) {
    return { evid: 965, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderFormSettingsSubmitMessageRestoreSuccessMessage' event (evid: 966)
 *
 * Event description: Submit Message - Restore field
 *
 * @param {formBuilderFormSettingsSubmitMessageRestoreSuccessMessageParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} template - template name
 * @property {GUID} msid - msid
 * @property {string} field_name - field_name
 * @return {LogObject<formBuilderFormSettingsSubmitMessageRestoreSuccessMessageParams>} LogObject<formBuilderFormSettingsSubmitMessageRestoreSuccessMessageParams>
 */
export function formBuilderFormSettingsSubmitMessageRestoreSuccessMessage(params) {
    return { evid: 966, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderFormSettingsSubmitMessageRestoreSubmitButton' event (evid: 967)
 *
 * Event description: Submit Message - Restore Submit Button - not in use!
 *
 * @param {formBuilderFormSettingsSubmitMessageRestoreSubmitButtonParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} template - template name
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderFormSettingsSubmitMessageRestoreSubmitButtonParams>} LogObject<formBuilderFormSettingsSubmitMessageRestoreSubmitButtonParams>
 */
export function formBuilderFormSettingsSubmitMessageRestoreSubmitButton(params) {
    return { evid: 967, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderPaymentFormSettingGetStarted' event (evid: 968)
 *
 * Event description: user click on  Get Started in Payment Form settings
 *
 * @param {formBuilderPaymentFormSettingGetStartedParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderPaymentFormSettingGetStartedParams>} LogObject<formBuilderPaymentFormSettingGetStartedParams>
 */
export function formBuilderPaymentFormSettingGetStarted(params) {
    return { evid: 968, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderPaymentFormSettingLearnMore' event (evid: 969)
 *
 * Event description: user click on Learn More in Payment Form settings
 *
 * @param {formBuilderPaymentFormSettingLearnMoreParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderPaymentFormSettingLearnMoreParams>} LogObject<formBuilderPaymentFormSettingLearnMoreParams>
 */
export function formBuilderPaymentFormSettingLearnMore(params) {
    return { evid: 969, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'removePhoneNumberRemoveClicked' event (evid: 97)
 *
 * Event description: verification pop up before deleting the phone
 *
 * @param {removePhoneNumberRemoveClickedParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @return {LogObject<removePhoneNumberRemoveClickedParams>} LogObject<removePhoneNumberRemoveClickedParams>
 */
export function removePhoneNumberRemoveClicked(params) {
    return { evid: 97, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderPaymentFormSetupIsDisplayed' event (evid: 970)
 *
 * Event description: Payment Form Setup is displayed
 *
 * @param {formBuilderPaymentFormSetupIsDisplayedParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderPaymentFormSetupIsDisplayedParams>} LogObject<formBuilderPaymentFormSetupIsDisplayedParams>
 */
export function formBuilderPaymentFormSetupIsDisplayed(params) {
    return { evid: 970, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'unsubscriptionPageIsShown' event (evid: 9700)
 *
 * Event description: Unsubscription page is shown
 *
 * @param {unsubscriptionPageIsShownParams} params - The parameters for this event
 * @property {string} channel - sms/email
 * @property {string} hashed_phone - hashed_phone
 * @property {string} hashed_email - in case the channel is email hashed email will be reported, otherwise null
 * @property {string} app_id - app_id - the app id of the app that owned the flow the user did unsubscribe from
 * @property {string} flow_id - in case the contact reached the unsubscribe page through clicking on a notification report the flow_id as it sent in event 19:1130, otherwise report generic flow_id to be able to connect between the server and client events.
 * @property {GUID} msid - the site’s guid the unsubscription page will potentially affect
 * @return {LogObject<unsubscriptionPageIsShownParams>} LogObject<unsubscriptionPageIsShownParams>
 */
export function unsubscriptionPageIsShown(params) {
    return { evid: 9700, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'unsubscriptionPageClickOnUnsubscribeButton' event (evid: 9701)
 *
 * Event description: Unsubscription page - click on unsubscribe button
 *
 * @param {unsubscriptionPageClickOnUnsubscribeButtonParams} params - The parameters for this event
 * @property {string} channel - sms/email
 * @property {string} hashed_phone - in case the channel is sms hashed phone will be reported, otherwise null
 * @property {string} hashed_email - in case the channel is email hashed email will be reported, otherwise null
 * @property {GUID} app_id - app_id - the app id of the app that owned the flow the user did unsubscribe from
 * @property {string} flow_id - in case the contact reached the unsubscribe page through clicking on a notification report the flow_id as it sent in event 19:1130, otherwise report generic flow_id to be able to connect between the server and client events.
 * @property {GUID} msid - the site’s guid the unsubscription page will potentially affect
 * @return {LogObject<unsubscriptionPageClickOnUnsubscribeButtonParams>} LogObject<unsubscriptionPageClickOnUnsubscribeButtonParams>
 */
export function unsubscriptionPageClickOnUnsubscribeButton(params) {
    return { evid: 9701, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderPaymentFormSetupGetStartedClickOnDemoSite' event (evid: 971)
 *
 * Event description: Payment Form Setup - Get Started - click on demo site
 *
 * @param {formBuilderPaymentFormSetupGetStartedClickOnDemoSiteParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderPaymentFormSetupGetStartedClickOnDemoSiteParams>} LogObject<formBuilderPaymentFormSetupGetStartedClickOnDemoSiteParams>
 */
export function formBuilderPaymentFormSetupGetStartedClickOnDemoSite(params) {
    return { evid: 971, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderPaymentFormSetupAddUpdateItem' event (evid: 972)
 *
 * Event description: Payment Form Setup - add/update item
 *
 * @param {formBuilderPaymentFormSetupAddUpdateItemParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {number} itemPrice - itemPrice
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} itemName - itemName
 * @property {string} type - 'add' / 'update'
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderPaymentFormSetupAddUpdateItemParams>} LogObject<formBuilderPaymentFormSetupAddUpdateItemParams>
 */
export function formBuilderPaymentFormSetupAddUpdateItem(params) {
    return { evid: 972, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderPaymentFormSetupItemPriceChangeCurrency' event (evid: 973)
 *
 * Event description: Payment Form Setup -  item price - Change currency - click
 *
 * @param {formBuilderPaymentFormSetupItemPriceChangeCurrencyParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderPaymentFormSetupItemPriceChangeCurrencyParams>} LogObject<formBuilderPaymentFormSetupItemPriceChangeCurrencyParams>
 */
export function formBuilderPaymentFormSetupItemPriceChangeCurrency(params) {
    return { evid: 973, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderPaymentFormSetupConnectPaymentMethod' event (evid: 974)
 *
 * Event description: Payment Form Setup -  Connect Payment Method
 *
 * @param {formBuilderPaymentFormSetupConnectPaymentMethodParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderPaymentFormSetupConnectPaymentMethodParams>} LogObject<formBuilderPaymentFormSetupConnectPaymentMethodParams>
 */
export function formBuilderPaymentFormSetupConnectPaymentMethod(params) {
    return { evid: 974, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderPaymentFormSetupContinueToSetupFromBizmg' event (evid: 975)
 *
 * Event description: Payment Form Setup - Continue to setup from BizMG
 *
 * @param {formBuilderPaymentFormSetupContinueToSetupFromBizmgParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderPaymentFormSetupContinueToSetupFromBizmgParams>} LogObject<formBuilderPaymentFormSetupContinueToSetupFromBizmgParams>
 */
export function formBuilderPaymentFormSetupContinueToSetupFromBizmg(params) {
    return { evid: 975, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderPaymentFormSetupChangePaymentMethod' event (evid: 976)
 *
 * Event description: Payment Form Setup - Change Payment Method
 *
 * @param {formBuilderPaymentFormSetupChangePaymentMethodParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderPaymentFormSetupChangePaymentMethodParams>} LogObject<formBuilderPaymentFormSetupChangePaymentMethodParams>
 */
export function formBuilderPaymentFormSetupChangePaymentMethod(params) {
    return { evid: 976, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderPaymentFormSaveAndRefreshPopUpDisplayed' event (evid: 977)
 *
 * Event description: Payment Form - 'save and refresh' pop up displayed
 *
 * @param {formBuilderPaymentFormSaveAndRefreshPopUpDisplayedParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderPaymentFormSaveAndRefreshPopUpDisplayedParams>} LogObject<formBuilderPaymentFormSaveAndRefreshPopUpDisplayedParams>
 */
export function formBuilderPaymentFormSaveAndRefreshPopUpDisplayed(params) {
    return { evid: 977, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderPaymentFormSaveAndRefreshPopUpUserSelection' event (evid: 978)
 *
 * Event description: Payment Form - 'save and refresh' pop up - user selection
 *
 * @param {formBuilderPaymentFormSaveAndRefreshPopUpUserSelectionParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} selection - = 'dismiss' / 'question sign'/'cancel'/'save & refresh'
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderPaymentFormSaveAndRefreshPopUpUserSelectionParams>} LogObject<formBuilderPaymentFormSaveAndRefreshPopUpUserSelectionParams>
 */
export function formBuilderPaymentFormSaveAndRefreshPopUpUserSelection(params) {
    return { evid: 978, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderPaymentFormViewPublishSitePopUpDisplayed' event (evid: 979)
 *
 * Event description: - Payment Form -‘View Publish Site’ pop up - displayed
 *
 * @param {formBuilderPaymentFormViewPublishSitePopUpDisplayedParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} viewerName - viewerName
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderPaymentFormViewPublishSitePopUpDisplayedParams>} LogObject<formBuilderPaymentFormViewPublishSitePopUpDisplayedParams>
 */
export function formBuilderPaymentFormViewPublishSitePopUpDisplayed(params) {
    return { evid: 979, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'removePhoneNumberRemoveNumberClicked' event (evid: 98)
 *
 * Event description: First button for remove phone number (in account settings page)
 *
 * @param {removePhoneNumberRemoveNumberClickedParams} params - The parameters for this event
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @return {LogObject<removePhoneNumberRemoveNumberClickedParams>} LogObject<removePhoneNumberRemoveNumberClickedParams>
 */
export function removePhoneNumberRemoveNumberClicked(params) {
    return { evid: 98, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderPaymentFormViewPublishSitePopUpUserSelection' event (evid: 980)
 *
 * Event description: - Payment Form -‘View Publish Site’ pop up - user selection
 *
 * @param {formBuilderPaymentFormViewPublishSitePopUpUserSelectionParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} selection - = 'dismiss' / 'question sign'/‘got it’
 * @property {string} viewerName - viewer_name
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderPaymentFormViewPublishSitePopUpUserSelectionParams>} LogObject<formBuilderPaymentFormViewPublishSitePopUpUserSelectionParams>
 */
export function formBuilderPaymentFormViewPublishSitePopUpUserSelection(params) {
    return { evid: 980, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderPaymentFormRemovePaymentPopUpDisplayed' event (evid: 981)
 *
 * Event description: - Payment Form -'Remove Payment’ pop up - displayed
 *
 * @param {formBuilderPaymentFormRemovePaymentPopUpDisplayedParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderPaymentFormRemovePaymentPopUpDisplayedParams>} LogObject<formBuilderPaymentFormRemovePaymentPopUpDisplayedParams>
 */
export function formBuilderPaymentFormRemovePaymentPopUpDisplayed(params) {
    return { evid: 981, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderPaymentFormRemovePaymentPopUpUserSelection' event (evid: 982)
 *
 * Event description: - Payment Form -‘Remove Payment’ pop up - user selection
 *
 * @param {formBuilderPaymentFormRemovePaymentPopUpUserSelectionParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} selection - ='dismiss' / 'question sign'/ ‘remove'/ 'cancel'
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderPaymentFormRemovePaymentPopUpUserSelectionParams>} LogObject<formBuilderPaymentFormRemovePaymentPopUpUserSelectionParams>
 */
export function formBuilderPaymentFormRemovePaymentPopUpUserSelection(params) {
    return { evid: 982, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderPaymentFormOpenChangeRemoveDisconnectPayment' event (evid: 983)
 *
 * Event description: Payment Form - open/change/remove/disconnect payment
 *
 * @param {formBuilderPaymentFormOpenChangeRemoveDisconnectPaymentParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} selection - 'Open Payment Overview' , 'Change Payment Method', 'Remove Payment from this site', 'Disconnect Payment from this site'
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderPaymentFormOpenChangeRemoveDisconnectPaymentParams>} LogObject<formBuilderPaymentFormOpenChangeRemoveDisconnectPaymentParams>
 */
export function formBuilderPaymentFormOpenChangeRemoveDisconnectPayment(params) {
    return { evid: 983, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderPaymentFormClickOnNextInPaymentFormSetup' event (evid: 984)
 *
 * Event description: user click on ‘next’ in Payment Form Setup
 *
 * @param {formBuilderPaymentFormClickOnNextInPaymentFormSetupParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} direction - 'back' / 'next'
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} move_to_step - = 'add item' , 'connect payment' , 'upgrade', 'continue without accepting payment', 'done'
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderPaymentFormClickOnNextInPaymentFormSetupParams>} LogObject<formBuilderPaymentFormClickOnNextInPaymentFormSetupParams>
 */
export function formBuilderPaymentFormClickOnNextInPaymentFormSetup(params) {
    return { evid: 984, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderPaymentFormTooltipHover' event (evid: 985)
 *
 * Event description: user hover on an information icon
 *
 * @param {formBuilderPaymentFormTooltipHoverParams} params - The parameters for this event
 * @property {string} tooltip_name - 'item price'
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} origin - ='payment page in form settings' / 'add item step in payment form setup'
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderPaymentFormTooltipHoverParams>} LogObject<formBuilderPaymentFormTooltipHoverParams>
 */
export function formBuilderPaymentFormTooltipHover(params) {
    return { evid: 985, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderSubmissionSettingsPanelOpened' event (evid: 986)
 *
 * Event description: Submission settings - panel opened
 *
 * @param {formBuilderSubmissionSettingsPanelOpenedParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI/ Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} template - template name
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderSubmissionSettingsPanelOpenedParams>} LogObject<formBuilderSubmissionSettingsPanelOpenedParams>
 */
export function formBuilderSubmissionSettingsPanelOpened(params) {
    return { evid: 986, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderCategoryPickerInAddPanel' event (evid: 987)
 *
 * Event description: user click on one of Wix forms category in contact tab in add panel.
 *
 * @param {formBuilderCategoryPickerInAddPanelParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI  /  Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {GUID} vsi - vsi
 * @property {string} category - 'Contact' / 'Payment Form' / 'Job Application' / etc...
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderCategoryPickerInAddPanelParams>} LogObject<formBuilderCategoryPickerInAddPanelParams>
 */
export function formBuilderCategoryPickerInAddPanel(params) {
    return { evid: 987, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderPaymentFormClickOnGoToSetup' event (evid: 988)
 *
 * Event description: when user clicks on "Go to Setup" from notification that appears when adding a payment form preset
 *
 * @param {formBuilderPaymentFormClickOnGoToSetupParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI  /  Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form_comp_id
 * @property {GUID} vsi - vsi
 * @property {string} category - 'Contact' / 'Payment Form' / 'Job Application' / etc...
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderPaymentFormClickOnGoToSetupParams>} LogObject<formBuilderPaymentFormClickOnGoToSetupParams>
 */
export function formBuilderPaymentFormClickOnGoToSetup(params) {
    return { evid: 988, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderTemplatePickerChooseTemplateStartToInstall' event (evid: 989)
 *
 * Event description: start to install Wixfrom
 *
 * @param {formBuilderTemplatePickerChooseTemplateStartToInstallParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI/Editor
 * @property {string} appVersion - appVersion
 * @property {GUID} visitor_id - deprecated
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} source_name - app market / add panel /ADI/ copy form/..
 * @property {string} template - template selected
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderTemplatePickerChooseTemplateStartToInstallParams>} LogObject<formBuilderTemplatePickerChooseTemplateStartToInstallParams>
 */
export function formBuilderTemplatePickerChooseTemplateStartToInstall(params) {
    return { evid: 989, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'removePhoneNumberPhoneRemovalAsked' event (evid: 99)
 *
 * Event description: After entering a verified password, removing phone process starts
 *
 * @param {removePhoneNumberPhoneRemovalAskedParams} params - The parameters for this event
 * @property {string} hashed_phone - hashed phone
 * @property {string} view_type - view_type
 * @property {string} platform - platform
 * @return {LogObject<removePhoneNumberPhoneRemovalAskedParams>} LogObject<removePhoneNumberPhoneRemovalAskedParams>
 */
export function removePhoneNumberPhoneRemovalAsked(params) {
    return { evid: 99, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderFormSettingsNotificationsHelpClick' event (evid: 990)
 *
 * Event description: user click on the "?" in the bottom of notifications tab (under the form settings)
 *
 * @param {formBuilderFormSettingsNotificationsHelpClickParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} template - template name
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderFormSettingsNotificationsHelpClickParams>} LogObject<formBuilderFormSettingsNotificationsHelpClickParams>
 */
export function formBuilderFormSettingsNotificationsHelpClick(params) {
    return { evid: 990, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderFormSettingsUpdateValueClick' event (evid: 991)
 *
 * Event description: user click to updates a value in form settings after popup of updating name appears and choose 'save' or 'cancel'
 *
 * @param {formBuilderFormSettingsUpdateValueClickParams} params - The parameters for this event
 * @property {string} name - deprecated
 * @property {string} builderOrigin - ADI / Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} selection - 'save','cancel'
 * @property {string} origin - 'notifications', 'submissions'
 * @property {string} template - template name
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderFormSettingsUpdateValueClickParams>} LogObject<formBuilderFormSettingsUpdateValueClickParams>
 */
export function formBuilderFormSettingsUpdateValueClick(params) {
    return { evid: 991, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderFormSettingsContactListContactLabelsClick' event (evid: 992)
 *
 * Event description: Form Builder - Form settings - contact list - contact labels - click
 *
 * @param {formBuilderFormSettingsContactListContactLabelsClickParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI/ Editor
 * @property {GUID} visitor_id - visitor id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} template - template name
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderFormSettingsContactListContactLabelsClickParams>} LogObject<formBuilderFormSettingsContactListContactLabelsClickParams>
 */
export function formBuilderFormSettingsContactListContactLabelsClick(params) {
    return { evid: 992, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderFormSettingsContactListContactLabelsUpdateValue' event (evid: 993)
 *
 * Event description: Copy of Form Builder - Form settings - contact list - contact labels - update value
 *
 * @param {formBuilderFormSettingsContactListContactLabelsUpdateValueParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI/ Editor
 * @property {GUID} visitor_id - visitor id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} template - template name
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderFormSettingsContactListContactLabelsUpdateValueParams>} LogObject<formBuilderFormSettingsContactListContactLabelsUpdateValueParams>
 */
export function formBuilderFormSettingsContactListContactLabelsUpdateValue(params) {
    return { evid: 993, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderFormSettingsContactListChooseSavedFieldsClick' event (evid: 994)
 *
 * Event description: Form Builder - Form settings - contact list - choose saved fields - click
 *
 * @param {formBuilderFormSettingsContactListChooseSavedFieldsClickParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI/ Editor
 * @property {GUID} visitor_id - visitor id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} origin - panel opening origin
 * @property {string} template - template name
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderFormSettingsContactListChooseSavedFieldsClickParams>} LogObject<formBuilderFormSettingsContactListChooseSavedFieldsClickParams>
 */
export function formBuilderFormSettingsContactListChooseSavedFieldsClick(params) {
    return { evid: 994, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderFormSettingsContactListChooseSavedFieldsUpdateValue' event (evid: 995)
 *
 * Event description: Form Builder - Form settings - contact list - choose saved fields - update value
 *
 * @param {formBuilderFormSettingsContactListChooseSavedFieldsUpdateValueParams} params - The parameters for this event
 * @property {string} field - field name
 * @property {string} builderOrigin - ADI/ Editor
 * @property {GUID} visitor_id - visitor id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} origin - the place where it was clicked
 * @property {string} template - template name
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderFormSettingsContactListChooseSavedFieldsUpdateValueParams>} LogObject<formBuilderFormSettingsContactListChooseSavedFieldsUpdateValueParams>
 */
export function formBuilderFormSettingsContactListChooseSavedFieldsUpdateValue(params) {
    return { evid: 995, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderFormSettingsContactListChooseSavedFieldsSave' event (evid: 996)
 *
 * Event description: Form Builder - Form settings - contact list - choose saved fields - update value
 *
 * @param {formBuilderFormSettingsContactListChooseSavedFieldsSaveParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI/ Editor
 * @property {GUID} visitor_id - visitor id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} template - template name
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderFormSettingsContactListChooseSavedFieldsSaveParams>} LogObject<formBuilderFormSettingsContactListChooseSavedFieldsSaveParams>
 */
export function formBuilderFormSettingsContactListChooseSavedFieldsSave(params) {
    return { evid: 996, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderHoverOnUpgradeAscend' event (evid: 997)
 *
 * Event description: Form Builder - Hover on Upgrade Ascend
 *
 * @param {formBuilderHoverOnUpgradeAscendParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI  /  Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} button_name - upgrade button / ascend title
 * @property {string} tabName - BM tab name
 * @property {string} current_ascend_plan - plan name or ‘free’
 * @property {GUID} vsi - vsi
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderHoverOnUpgradeAscendParams>} LogObject<formBuilderHoverOnUpgradeAscendParams>
 */
export function formBuilderHoverOnUpgradeAscend(params) {
    return { evid: 997, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderFormSettingsContactListChooseSavedFieldsCancel' event (evid: 998)
 *
 * Event description: Form Builder - Form settings - contact list - choose saved fields - Cancel
 *
 * @param {formBuilderFormSettingsContactListChooseSavedFieldsCancelParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI/ Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} template - template name
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderFormSettingsContactListChooseSavedFieldsCancelParams>} LogObject<formBuilderFormSettingsContactListChooseSavedFieldsCancelParams>
 */
export function formBuilderFormSettingsContactListChooseSavedFieldsCancel(params) {
    return { evid: 998, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'formBuilderFormSettingsContactListChooseSavedFieldsLearnMore' event (evid: 999)
 *
 * Event description: Form Builder - Form settings - contact list - choose saved fields - learn more
 *
 * @param {formBuilderFormSettingsContactListChooseSavedFieldsLearnMoreParams} params - The parameters for this event
 * @property {string} builderOrigin - ADI/ Editor
 * @property {GUID} visitor_id - visitor_id
 * @property {string} form_comp_id - form unique id (per msid)
 * @property {GUID} vsi - vsi
 * @property {string} template - template name
 * @property {GUID} msid - msid
 * @return {LogObject<formBuilderFormSettingsContactListChooseSavedFieldsLearnMoreParams>} LogObject<formBuilderFormSettingsContactListChooseSavedFieldsLearnMoreParams>
 */
export function formBuilderFormSettingsContactListChooseSavedFieldsLearnMore(params) {
    return { evid: 999, src: 5, endpoint: '', params };
}
/**
 * A function to create a log object for the 'devCenterWebhookSubscribed' event (evid: 1030)
 *
 * Event description: Webhook Subscribed
 *
 * @param {devCenterWebhookSubscribedParams} params - The parameters for this event
 * @property {string} webhookSlug - webhook slug
 * @property {GUID} appId - app id
 * @return {LogObject<devCenterWebhookSubscribedParams>} LogObject<devCenterWebhookSubscribedParams>
 */
export function devCenterWebhookSubscribed(params) {
    return { evid: 1030, src: 96, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dcWebhookUpdated' event (evid: 1031)
 *
 * Event description: Webhook Updated
 *
 * @param {dcWebhookUpdatedParams} params - The parameters for this event
 * @property {string} webhookSlug - webhook slug
 * @property {string} action_name - Type of update: Edit callback
 * @property {GUID} appId - app id
 * @return {LogObject<dcWebhookUpdatedParams>} LogObject<dcWebhookUpdatedParams>
 */
export function dcWebhookUpdated(params) {
    return { evid: 1031, src: 96, endpoint: '', params };
}
/**
 * A function to create a log object for the 'devCenterComponentTranslationAddingTranslatableComponent' event (evid: 11401)
 *
 * Event description: Sent when user adds a new component / updates a component that has translatable keys.
 *
 * @param {devCenterComponentTranslationAddingTranslatableComponentParams} params - The parameters for this event
 * @property {number} num_potential_keys_before - How many translatable keys this component had before the current update? (when adding a new component- will get null)
 * @property {number} num_potential_keys_after - How many translatable keys this component has after the current update?
 * @property {number} num_of_translated_keys_before - How many translated keys this component had before the current update? (when adding a new component- will get null)
 * @property {number} num_of_translated_keys_after - How many translated keys this component has after the current update?
 * @property {number} component_version - component version
 * @property {string} app_id - app id
 * @property {string} component_id - component id (new or existing component)
 * @property {string} component_type - component type
 * @return {LogObject<devCenterComponentTranslationAddingTranslatableComponentParams>} LogObject<devCenterComponentTranslationAddingTranslatableComponentParams>
 */
export function devCenterComponentTranslationAddingTranslatableComponent(params) {
    return { evid: 11401, src: 96, endpoint: '', params };
}
/**
 * A function to create a log object for the 'devCenterComponentTranslationAddLanguageToAnApp' event (evid: 11402)
 *
 * Event description: Sent when user adds a new language to an app (on app market side)
 *
 * @param {devCenterComponentTranslationAddLanguageToAnAppParams} params - The parameters for this event
 * @property {string} components_types - the app's components types (array with comma as a separator)
 * @property {string} language - the language the user added
 * @property {string} components_id - the app's components id (array with comma as a separator)
 * @property {string} app_id - app id
 * @property {number} num_components - How many components this app has?
 * @return {LogObject<devCenterComponentTranslationAddLanguageToAnAppParams>} LogObject<devCenterComponentTranslationAddLanguageToAnAppParams>
 */
export function devCenterComponentTranslationAddLanguageToAnApp(params) {
    return { evid: 11402, src: 96, endpoint: '', params };
}
/**
 * A function to create a log object for the 'devCenterComponentTranslationAddTranslationToAComponent' event (evid: 11403)
 *
 * Event description: Sent when user adds a new translation to a key in the component.
 *
 * @param {devCenterComponentTranslationAddTranslationToAComponentParams} params - The parameters for this event
 * @property {number} num_translated_keys_after - How many translated keys this component have after the current update?
 * @property {number} num_potential_keys - How many translatable keys this component has?
 * @property {string} language - the language the user adds
 * @property {number} component_version - component version
 * @property {number} num_translations_added - How many translations keys the users try to add to this component in the current action?
 * @property {string} app_id - app id
 * @property {string} component_id - component id (new or existing component)
 * @property {number} num_translated_keys_before - How many translated keys this component had before the current update? (when adding a new component- will get null)
 * @return {LogObject<devCenterComponentTranslationAddTranslationToAComponentParams>} LogObject<devCenterComponentTranslationAddTranslationToAComponentParams>
 */
export function devCenterComponentTranslationAddTranslationToAComponent(params) {
    return { evid: 11403, src: 96, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dummyName' event (evid: 11700)
 *
 * Event description: dummy-name.
 *
 * @param {dummyNameParams} params - The parameters for this event
 * @return {LogObject<dummyNameParams>} LogObject<dummyNameParams>
 */
export function dummyName(params) {
    return { evid: 11700, src: 96, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dcAppVersionsVersionAdded' event (evid: 11701)
 *
 * Event description: Sent when a developer lock his configuration of his app by clicking on "submit" or by lock (lock when it's private app).
 *
 * @param {dcAppVersionsVersionAddedParams} params - The parameters for this event
 * @property {number} num_permission - Number of permission in this app version
 * @property {string} permission_data - Json field {Name of permission 1, Name of permission 2}
 * @property {string} components_data - Json field {component_id: Version}
 * @property {string} version - version number
 * @property {boolean} is_private_app - true is the app is private (blocks/enterprise), false if not
 * @property {number} num_dependencies - Number of dependencies in this app version
 * @property {string} app_id - app id
 * @property {string} dependencies_data - Json field {Name of dependency, dependency type}
 * @property {number} num_components - Number of components in this app version
 * @return {LogObject<dcAppVersionsVersionAddedParams>} LogObject<dcAppVersionsVersionAddedParams>
 */
export function dcAppVersionsVersionAdded(params) {
    return { evid: 11701, src: 96, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dcAppVersionsStatusUpdated' event (evid: 11702)
 *
 * Event description: Sent when app market change the version status
 *
 * @param {dcAppVersionsStatusUpdatedParams} params - The parameters for this event
 * @property {string} previous_version - version number before status was changed
 * @property {string} version_new_status - New status
 * @property {string} version - version number after the status was changed
 * @property {string} version_prev_status - prev status
 * @property {string} app_id - app id
 * @return {LogObject<dcAppVersionsStatusUpdatedParams>} LogObject<dcAppVersionsStatusUpdatedParams>
 */
export function dcAppVersionsStatusUpdated(params) {
    return { evid: 11702, src: 96, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dummyNameSrc96Evid11900' event (evid: 11900)
 *
 * Event description: dummy-name.
 *
 * @param {dummyNameSrc96Evid11900Params} params - The parameters for this event
 * @return {LogObject<dummyNameSrc96Evid11900Params>} LogObject<dummyNameSrc96Evid11900Params>
 */
export function dummyNameSrc96Evid11900(params) {
    return { evid: 11900, src: 96, endpoint: '', params };
}
/**
 * A function to create a log object for the 'dummyNameSrc96Evid12200' event (evid: 12200)
 *
 * Event description: dummy-name.
 *
 * @param {dummyNameSrc96Evid12200Params} params - The parameters for this event
 * @return {LogObject<dummyNameSrc96Evid12200Params>} LogObject<dummyNameSrc96Evid12200Params>
 */
export function dummyNameSrc96Evid12200(params) {
    return { evid: 12200, src: 96, endpoint: '', params };
}
//# sourceMappingURL=index.js.map