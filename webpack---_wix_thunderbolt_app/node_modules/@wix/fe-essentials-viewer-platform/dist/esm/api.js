import Experiments, { ReadOnlyExperiments, } from './exports/experiments';
import { factory as biLoggerFactory } from './exports/bi';
import { create as createFedopsLogger } from './exports/fedops';
import { PanoramaPlatform, createGlobalConfig, panoramaClientFactory, } from '@wix/fe-essentials/panorama-client';
import { initI18n } from '@wix/fe-essentials/i18n';
import Raven from './exports/raven-js';
import { createRavenClient, } from './exports/error-monitor';
import { createHttpClient } from './exports/http-client';
import { createCurrencyFormatterWithDefaults, formatAddress, } from './exports/l10n';
import { createPanoramaReporter } from './panorama';
import { ErrorHandler } from '@wix/fe-essentials/error-handler';
export * from './types';
/**
 * Essentials for the Viewer platform
 */
export class ViewerPlatformEssentials {
    constructor(env) {
        this.env = env;
        /**
         * A Fedops Logger factory
         */
        this.createFedopsLogger = createFedopsLogger;
        /**
         * A bi Logger and Factory for more loggers
         */
        this.biLoggerFactory = biLoggerFactory;
        /**
         * A currency formatter factory
         */
        this.createCurrencyFormatterWithDefaults = createCurrencyFormatterWithDefaults;
        /**
         * Address formatter
         */
        this.formatAddress = formatAddress;
        this.createPanoramaClient = (options) => {
            const { fullArtifactId, artifactVersion, componentId, sentryDsn, sentryMain, } = options;
            const { basePanoramaClientFactory } = this;
            return basePanoramaClientFactory.client({
                baseParams: {
                    fullArtifactId,
                    artifactVersion,
                    componentId,
                },
                pluginParams: {
                    sentryDsn,
                    sentryMain,
                },
            });
        };
        this.env = env;
        this.state = {
            panoramaGlobalConfig: env.panoramaGlobalConfig ?? createGlobalConfig(),
        };
        this.experiments = new ReadOnlyExperiments({
            experiments: env.conductedExperiments,
        });
        this.basePanoramaClientFactory = this.createBasePanoramaClientFactory();
    }
    createBasePanoramaClientFactory() {
        const { env, experiments } = this;
        const { isSSR, metaSiteId, pageData, fetch, Sentry, sentryTransport } = env;
        const factory = panoramaClientFactory({
            baseParams: {
                msid: metaSiteId,
                platform: PanoramaPlatform.Viewer,
            },
            pluginParams: {
                sentry: experiments.get('specs.thunderbolt.Panorama') === true && !isSSR
                    ? Sentry
                    : undefined,
                sentryTransport,
            },
            pageParams: pageData,
            data: {
                isSsr: isSSR,
            },
        }).withGlobalConfig(this.state.panoramaGlobalConfig);
        if (experiments.get('specs.thunderbolt.Panorama') !== true) {
            factory.setMuted(true);
        }
        else if (fetch) {
            factory.withReporter(createPanoramaReporter(fetch));
        }
        return factory;
    }
    /**
     * Method for creating Essentials for an App
     * @param env
     */
    createAppEssentials(env) {
        return new _AppEssentials({
            env: {
                ...env,
                platformEnv: this.env,
            },
            essentials: this,
        });
    }
    /**
     * Method for creating Essentials for a Controller
     * @param env
     */
    createControllerEssentials(env, appEssentials) {
        return new _ControllerEssentials({
            // @ts-expect-error accessing TS-private field ðŸ˜¢
            env: { ...env, appEnv: appEssentials.env },
            essentials: this,
            appEssentials,
        });
    }
}
const METASITE_APP_DEF_ID = '22bef345-3c5b-4c18-b782-74d4085112ff';
/**
 * Essentials for Apps within the Viewer platform
 */
export class _AppEssentials {
    constructor({ env, essentials }) {
        /**
         * A bi Logger and Factory for more loggers
         */
        this.biLoggerFactory = (options) => this.env.biLoggerFactory(options);
        /**
         * An ErrorMonitor factory (@wix/error-monitor)
         */
        this.createErrorMonitor = (options) => {
            const { appDefId, instanceId, platformEnv } = this.env;
            const { isSSR } = platformEnv;
            if (this.essentials.experiments.get('specs.thunderbolt.Panorama') === true &&
                this.essentials.experiments.get('specs.thunderbolt.SentryViaPanorama') ===
                    true &&
                !isSSR) {
                const { fullArtifactId, componentId, dsn, version, environment } = options;
                const panoramaClient = this.createPanoramaClient({
                    fullArtifactId: fullArtifactId,
                    artifactVersion: version,
                    componentId: componentId,
                    sentryDsn: dsn,
                    sentryEnvironment: environment,
                    data: {
                        tags: {
                            appDefinitionId: appDefId,
                            instanceId,
                            ...options.tags,
                        },
                    },
                });
                const errorMonitor = panoramaClient.errorMonitor({
                    pluginParams: {
                        sentryLookupDsn: dsn,
                    },
                });
                return {
                    captureException(e, opts) {
                        errorMonitor.reportError(e, {
                            tags: opts?.tags,
                            context: opts?.contexts,
                        });
                        return '';
                    },
                    captureMessage(message, opts) {
                        errorMonitor.reportError(new Error(message), {
                            tags: opts?.tags,
                            context: opts?.contexts,
                        });
                        return '';
                    },
                    addBreadcrumb(breadcrumb) {
                        panoramaClient
                            .errorMonitor()
                            .addBreadcrumb(breadcrumb);
                    },
                };
            }
            else {
                return createRavenClient({
                    Raven,
                    ...options,
                });
            }
        };
        /**
         * A PanoramaClient factory
         */
        this.createPanoramaClient = (options) => {
            const { fullArtifactId, artifactVersion, componentId, sentryDsn, sentryEnvironment, data, } = options;
            const { env } = this;
            const { appDefId } = env;
            return this.essentials.basePanoramaClientFactory.client({
                baseParams: {
                    fullArtifactId,
                    artifactVersion,
                    componentId,
                    appDefId,
                },
                pluginParams: {
                    sentryDsn,
                    sentryEnvironment,
                },
                data,
            });
        };
        this.env = env;
        this.essentials = essentials;
        const { platformEnv, appDefId, shouldElevateBlocksAppPermissions } = env;
        const { isSSR, baseUrl, multilingualOptions, getAppToken, appsConductedExperiments, } = platformEnv;
        this.experiments = new ReadOnlyExperiments({
            experiments: appsConductedExperiments?.[appDefId] ?? {},
        });
        this.httpClient = createHttpClient({
            isSSR,
            baseURL: isSSR ? baseUrl : undefined,
            multilingualOptions,
            getAppToken: () => getAppToken(shouldElevateBlocksAppPermissions ? METASITE_APP_DEF_ID : appDefId),
            errorHandler: essentials.experiments.get('specs.os.EnableErrorHandlerInViewer') ===
                true ||
                essentials.experiments.enabled('specs.os.EnableErrorHandlerInViewer')
                ? new ErrorHandler({
                    biLoggerOrFactory: this.biLoggerFactory,
                    environment: {
                        artifactId: '',
                    },
                    createErrorMonitor: (options) => this.createErrorMonitor(options),
                    createI18n: (options) => initI18n({
                        ...options,
                        locale: multilingualOptions?.lang || 'en'
                    }),
                    biDefaultsOverrides: {
                        hostingEnvironment: 'viewer',
                        app_id: appDefId,
                    },
                })
                : undefined,
        });
        this.createCurrencyFormatterWithDefaults =
            createCurrencyFormatterWithDefaults;
        this.formatAddress = formatAddress;
    }
    /**
     * An Experiments object factory
     */
    createExperiments({ scopes, useNewApi = true, baseUrl, requestContext, }) {
        return new Experiments({ scopes, useNewApi, requestContext, baseUrl });
    }
}
/**
 * Essentials for Controllers within the Viewer platform
 */
export class _ControllerEssentials {
    constructor({ env, appEssentials }) {
        /**
         * A bi Logger and Factory for more loggers
         */
        this.biLoggerFactory = (options) => this.appEssentials.biLoggerFactory(options);
        /**
         * An ErrorMonitor factory (@wix/error-monitor)
         */
        this.createErrorMonitor = (options) => {
            return this.appEssentials.createErrorMonitor(options);
        };
        /**
         * A PanoramaClient factory
         */
        this.createPanoramaClient = (options) => {
            return this.appEssentials.createPanoramaClient(options);
        };
        /**
         * An Experiments object factory
         */
        this.createExperiments = (options) => this.appEssentials.createExperiments(options);
        this.env = env;
        this.appEssentials = appEssentials;
        this.fedopsLogger = this.env.appEnv.getLoggerForWidget({
            appId: this.env.appEnv.appDefId,
            widgetId: this.env.widgetId,
            paramsOverrides: this.env.compId ? { corrId: this.env.compId } : {},
        });
        this.experiments = this.appEssentials.experiments;
        this.httpClient = this.appEssentials.httpClient;
        this.createCurrencyFormatterWithDefaults =
            appEssentials.createCurrencyFormatterWithDefaults;
    }
}
//# sourceMappingURL=api.js.map