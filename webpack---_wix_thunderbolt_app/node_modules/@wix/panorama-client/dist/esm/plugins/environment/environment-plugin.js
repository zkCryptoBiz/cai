import { LogLevel } from '@wix/panorama-common-shared/types';
import { Hook } from '../hooks-manager';
import { calculateEnvironment, checkIsLocalMode, hasEnablePanoramaLogsQueryParam, hasForcePanoramaReportQueryParam, RuntimeEnvironment } from '../../utils/environment-utils';
import { logToConsole } from '../../utils/console-utils';
const EXCLUDED_ENVIRONMENTS = [RuntimeEnvironment.DEVELOPMENT, RuntimeEnvironment.SLED];
export const environmentPlugin = () => _ref => {
  let {
    hooksManager,
    baseParams: {
      fullArtifactId,
      componentId
    }
  } = _ref;
  const environment = calculateEnvironment();
  const isLocalMode = checkIsLocalMode(fullArtifactId);
  const enablePanoramaLogs = hasEnablePanoramaLogsQueryParam();
  const shouldSkipReporting = (EXCLUDED_ENVIRONMENTS.includes(environment) || isLocalMode) && !hasForcePanoramaReportQueryParam();
  const shouldLogToConsole = shouldSkipReporting && enablePanoramaLogs;
  if (shouldLogToConsole) {
    logToConsole(LogLevel.Info, fullArtifactId, componentId, `Local mode detected${fullArtifactId ? ` for ${fullArtifactId}` : ''}. Panorama will log reports in the console.`);
  }
  hooksManager.tap(Hook.beforeReport, eventPayload => {
    const {
      data,
      message,
      fullArtifactId: messageFullArtifactId,
      componentId: messageComponentId,
      logLevel
    } = eventPayload;
    if (shouldLogToConsole) {
      logToConsole(logLevel, messageFullArtifactId, messageComponentId, message || '', data);
    }
    if (shouldSkipReporting) {
      return false;
    }
    return;
  });
};
//# sourceMappingURL=environment-plugin.js.map