import { InternalTransactions, LogLevel } from '@wix/panorama-common-shared/types';
import { extractWixHttpErrorDetails } from '../utils/error-utils';
const getSessionParams = globalConfig => {
  const sessionId = globalConfig.getSessionId();
  const sessionTime = Math.round(globalConfig.getSessionTime());
  return {
    sessionId,
    sessionTime
  };
};
export const buildTransactionPayload = (globalConfig, baseParams, transactionParams, data) => {
  const {
    transactionName,
    transactionAction
  } = transactionParams;
  const {
    sessionId,
    sessionTime
  } = getSessionParams(globalConfig);
  const logLevel = LogLevel.Info;
  const message = `Panorama ${transactionName} ${transactionAction}`;
  const requestId = '';
  return {
    ...baseParams,
    ...transactionParams,
    sessionId,
    sessionTime,
    logLevel,
    requestId,
    message,
    data
  };
};
export const buildPhasePayload = (globalConfig, baseParams, phaseParams, data) => {
  const transactionName = InternalTransactions.ComponentPhase;
  const {
    phaseName,
    transactionAction
  } = phaseParams;
  const {
    sessionId,
    sessionTime
  } = getSessionParams(globalConfig);
  const logLevel = LogLevel.Info;
  const message = `Panorama ${phaseName} phase ${transactionAction}`;
  const requestId = '';
  return {
    ...baseParams,
    ...phaseParams,
    transactionName,
    sessionId,
    sessionTime,
    logLevel,
    requestId,
    message,
    data
  };
};
export const buildErrorPayload = (globalConfig, baseParams, error, data) => {
  const {
    sessionId,
    sessionTime
  } = getSessionParams(globalConfig);
  const {
    constructor,
    message,
    stack = ''
  } = error;
  const logLevel = LogLevel.Error;
  const {
    requestId
  } = extractWixHttpErrorDetails(error);
  return {
    ...baseParams,
    sessionId,
    sessionTime,
    logLevel,
    requestId,
    data,
    errorName: (data == null ? void 0 : data.errorName) ?? constructor.name,
    errorStack: stack,
    message
  };
};
export const buildLoggerPayload = (globalConfig, baseParams, loggerParams) => {
  const {
    sessionId,
    sessionTime
  } = getSessionParams(globalConfig);
  const requestId = '';
  return {
    ...baseParams,
    ...loggerParams,
    sessionId,
    sessionTime,
    requestId
  };
};
//# sourceMappingURL=payload-builder.js.map