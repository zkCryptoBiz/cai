const extractLanguageCode = (language) => {
    return language.split('-')[0];
};
const _currencyFormatterFactory = ({ language, country, ...options }) => {
    if (typeof Intl?.NumberFormat === 'undefined') {
        throw new Error('Intl.NumberFormat is not available.');
    }
    const languageCode = extractLanguageCode(language);
    const locale = country ? `${languageCode}-${country}` : language;
    return Intl.NumberFormat(locale, {
        style: 'currency',
        ...options,
    });
};
const cache = new Map();
const resolver = (options) => Object.keys(options)
    .filter((key) => options[key] !== undefined)
    .sort()
    .map((key) => `${key}=${options[key]}`)
    .join('&');
export const currencyFormatterFactory = (params) => {
    const key = resolver(params);
    if (cache.has(key)) {
        return cache.get(key);
    }
    const result = _currencyFormatterFactory(params);
    cache.set(key, result);
    return result;
};
currencyFormatterFactory.cache = cache;
//# sourceMappingURL=factory.js.map