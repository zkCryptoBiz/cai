import { isCursorDefined } from './paging/cursors';
import { PagingMetadata } from './paging/pagingmetadata';
import { calcSkipNumber } from './utils/skip-calculator';
import { messages, validationError } from '@wix/wix-data-errors';
export class WixDataQueryReferencedResult {
    constructor(obj) {
        if (!obj) {
            return;
        }
        this._provider = obj.provider;
        this._collectionName = obj.collectionName;
        this._referenceAttribute = obj.referenceAttribute;
        this._holdingItemId = obj.holdingItemId;
        this._items = obj.items;
        this._totalCount = obj.totalCount;
        this._options = obj.options;
        const { skip = 0, limit } = obj.options || {};
        this._skip = skip;
        this._limit = limit;
        this._cursors = obj.cursors;
        this._createdByCursor = obj.createdByCursor;
        this._hasNext = obj.hasNext;
    }
    get items() {
        return this._items;
    }
    get totalCount() {
        return this._totalCount;
    }
    get nextCursor() {
        return this._cursors && this._cursors.next;
    }
    get prevCursor() {
        return this._cursors && this._cursors.prev;
    }
    hasNext() {
        return this._hasNext;
    }
    hasPrev() {
        if (isCursorDefined(this._createdByCursor) || this._cursors) {
            return isCursorDefined(this.prevCursor);
        }
        else {
            return this._skip > 0;
        }
    }
    next() {
        if (!this.hasNext()) {
            return this._rejectNoNextPage();
        }
        if (isCursorDefined(this.nextCursor)) {
            return this._getNewCursorQuery(this.nextCursor)
                ._fetch()
                .then((newResp) => newResp._withTotalCount(this._totalCount));
        }
        else {
            return this._withChangedSkip(true)._fetch();
        }
    }
    prev() {
        if (!this.hasPrev()) {
            return this._rejectNoPrevPage();
        }
        if (isCursorDefined(this.prevCursor)) {
            return this._getNewCursorQuery(this.prevCursor)
                ._fetch()
                .then((newResp) => newResp._withTotalCount(this._totalCount));
        }
        else {
            return this._withChangedSkip(false)._fetch();
        }
    }
    _rejectNoPrevPage() {
        return Promise.reject(validationError(messages.queryValidations.noPrevPage(this._collectionName)));
    }
    _rejectNoNextPage() {
        return Promise.reject(validationError(messages.queryValidations.noNextPage(this._collectionName)));
    }
    _withChangedSkip(isNext) {
        const newSkip = calcSkipNumber({ skipNumber: this._skip, limitNumber: this._limit }, this._items.length, isNext);
        return referenceResultFactory({
            items: this._items,
            totalCount: this._totalCount,
            pagingMetadata: new PagingMetadata({
                total: this._totalCount,
            }),
        }, this._provider, this._collectionName, this._holdingItemId, this._referenceAttribute, {
            ...this._options,
            skip: newSkip,
            limit: this._limit,
        });
    }
    _getNewCursorQuery(cursor) {
        return referenceResultFactory({}, this._provider, this._collectionName, '', // itemId must not be passed in cursored queries, value will be taken from cursor
        this._referenceAttribute, // attribute temporarily passed in cursored queries while EnableCursorPlugin is not fully enabled
        {
            cursor,
            limit: this._limit,
            omitTotalCount: true,
        });
    }
    _fetch() {
        return this._provider
            .queryReferenced(this._collectionName, this._holdingItemId, this._referenceAttribute, this._options)
            .then((result) => referenceResultFactory(result, this._provider, this._collectionName, this._holdingItemId, this._referenceAttribute, this._options));
    }
    _withTotalCount(oldTotalCount) {
        this._totalCount = oldTotalCount;
        return this;
    }
}
export function referenceResultFactory(result, provider, collectionName, itemId, relationshipAttribute, options) {
    const { items, totalCount, pagingMetadata } = result;
    const { total, cursors, hasNext = false, } = pagingMetadata || new PagingMetadata();
    return new WixDataQueryReferencedResult({
        provider,
        collectionName,
        referenceAttribute: relationshipAttribute,
        holdingItemId: itemId,
        items,
        totalCount: total || totalCount,
        options,
        cursors,
        createdByCursor: options?.cursor,
        hasNext,
    });
}
//# sourceMappingURL=multiref.js.map