import { clone, isString } from '@wix/wix-data-utils';
import { AggregatingValidator, messages, validationError, } from '@wix/wix-data-errors';
export const groupMixin = (Base = class {
}) => class extends Base {
    constructor(obj = {}) {
        super(obj);
        this.groupByTree = obj.groupByTree;
        this.invalidArguments = obj.invalidArguments || [];
    }
    sum(fieldName, projectedField) {
        const [newInvalidArguments] = this._groupValidator('.sum')
            .arityIsAtLeastOne(arguments)
            .typeIsString(fieldName)
            .validateAndAggregate();
        return this._addAccumulator('sum', fieldName, projectedField, newInvalidArguments);
    }
    avg(fieldName, projectedField) {
        const [newInvalidArguments] = this._groupValidator('.avg')
            .arityIsAtLeastOne(arguments)
            .typeIsString(fieldName)
            .validateAndAggregate();
        return this._addAccumulator('avg', fieldName, projectedField, newInvalidArguments);
    }
    min(fieldName, projectedField) {
        const [newInvalidArguments] = this._groupValidator('.min')
            .arityIsAtLeastOne(arguments)
            .typeIsString(fieldName)
            .validateAndAggregate();
        return this._addAccumulator('min', fieldName, projectedField, newInvalidArguments);
    }
    max(fieldName, projectedField) {
        const [newInvalidArguments] = this._groupValidator('.max')
            .arityIsAtLeastOne(arguments)
            .typeIsString(fieldName)
            .validateAndAggregate();
        return this._addAccumulator('max', fieldName, projectedField, newInvalidArguments);
    }
    count() {
        const [newInvalidArguments] = this._groupValidator('.count')
            .arityIsZero(arguments)
            .validateAndAggregate();
        const groupByTree = clone(this.groupByTree) || { _id: formId() };
        const accFieldName = 'count';
        const accumulator = { $sum: 1 };
        groupByTree[accFieldName] = accumulator;
        return this._copy(groupByTree, newInvalidArguments);
    }
    _addAccumulator(acc, fieldName, projectedField, newInvalidArguments) {
        const groupByTree = clone(this.groupByTree) || { _id: formId() };
        const accFieldName = projectedField || fieldName + capitalize(acc);
        const accumulator = {};
        accumulator[`$${acc}`] = `$${fieldName}`;
        groupByTree[accFieldName] = accumulator;
        return this._copy(groupByTree, newInvalidArguments);
    }
    _copy(groupByTree, invalidArguments) {
        return new this.constructor({
            ...this,
            groupByTree,
            invalidArguments,
        });
    }
    _groupValidator(operatorName) {
        return new GroupValidator(operatorName, this.invalidArguments);
    }
};
export class WixDataGroupBuilder extends groupMixin() {
    _build() {
        throwErrorIfInvalid(this.invalidArguments);
        return this.groupByTree;
    }
}
function throwErrorIfInvalid(invalidArguments) {
    if (invalidArguments.length > 0) {
        throw validationError(messages.groupBuilderInvalid(invalidArguments));
    }
}
class GroupValidator extends AggregatingValidator {
    constructor(operatorName, previousInvalidArguments) {
        super(previousInvalidArguments);
        this.operatorName = operatorName;
    }
    typeIsString(value) {
        return this.addValidation(() => isString(value), () => messages.filterValidations.typeIsString(this.operatorName, value));
    }
}
function capitalize(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
}
export function groupFactory(...fieldName) {
    const idField = formId(...fieldName);
    return groupWithId(idField);
}
export function formId(...fieldName) {
    if (fieldName.length === 1) {
        return `$${fieldName}`;
    }
    else if (fieldName.length > 1) {
        const _id = {};
        fieldName.forEach((field) => (_id[field] = `$${field}`));
        return _id;
    }
    else {
        return '0';
    }
}
function groupWithId(_id) {
    return new WixDataGroupBuilder({ groupByTree: { _id } });
}
//# sourceMappingURL=group.js.map