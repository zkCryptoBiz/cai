import { isString, clone } from '@wix/wix-data-utils';
import { apiValidator, messages, validationError } from '@wix/wix-data-errors';
import { sortMixin, QueryValidator, filterMixin, optimiseQuery, } from '@wix/wix-data-items-common';
import { isCursorDefined } from './paging/cursors';
export class WixDataQuery extends filterMixin(sortMixin()) {
    constructor(obj) {
        super(obj);
        this.provider = obj.provider;
        this.collectionName = obj.collectionName;
        this.limitNumber = obj.limitNumber;
        this.invalidArguments = obj.invalidArguments;
        this.orderBy = obj.orderBy;
        this.skipNumber = obj.skipNumber;
        this.included = obj.included;
        this.projectedFields = obj.projectedFields;
        this.cursor = obj.cursor;
    }
    get constructorName() {
        return 'WixDataQuery';
    }
    count(options) {
        return rejectIfInvalid(this.invalidArguments, this.collectionName)
            .then(() => apiValidator().options(options).validateAndReject())
            .then(() => this.provider.count(this.collectionName, this.getOptimizedFilter(), options))
            .then((result) => result.totalCount);
    }
    distinct(fieldName, options) {
        const loadPage = (query) => {
            const skipNumber = query.cursor ? undefined : query.skipNumber;
            const fieldNameUpdated = query.cursor ? '' : fieldName;
            const omitTotalCount = query.cursor ? true : (options || {}).omitTotalCount;
            return query.provider.distinct(query.collectionName, query.getOptimizedFilter(), query.orderBy, fieldNameUpdated, skipNumber, query.limitNumber, options, query.cursor, undefined, omitTotalCount);
        };
        return rejectIfInvalid(this.invalidArguments, this.collectionName)
            .then(() => apiValidator().options(options).validateAndReject())
            .then(() => apiValidator().fieldName(fieldName).validateAndReject())
            .then(() => loadPage(this))
            .then((result) => new WixDataQueryResult({
            result,
            query: this,
            pagingFunction: loadPage,
        }));
    }
    _transformOrderingForAggregates(orderBy = [], fieldName) {
        if (orderBy.length > 0) {
            return orderBy
                .filter((order) => order.hasOwnProperty(fieldName))
                .map((order) => {
                return { _id: order[fieldName] };
            });
        }
        else {
            return null;
        }
    }
    _distinctValuesPipeline(fieldName) {
        return [
            this.filterTree && Object.keys(this.filterTree).length > 0
                ? { $match: this.filterTree }
                : null,
            { $distinct: `$${fieldName}` },
        ].filter(this._stageFilter);
    }
    _stageFilter(stage) {
        return stage !== null;
    }
    fields(...fields) {
        const newProjectedFields = clone(this.projectedFields);
        for (let i = 0; i < fields.length; i++) {
            newProjectedFields.push(fields[i]);
        }
        return new WixDataQuery({
            provider: this.provider,
            collectionName: this.collectionName,
            filterTree: this.filterTree,
            orderBy: this.orderBy,
            skipNumber: this.skipNumber,
            limitNumber: this.limitNumber,
            invalidArguments: this.invalidArguments,
            included: this.included,
            cursor: this.cursor,
            projectedFields: newProjectedFields,
        });
    }
    find(options) {
        const loadPage = (query) => {
            const skipNumber = query.cursor ? undefined : query.skipNumber;
            const omitTotalCount = query.cursor ? true : options?.omitTotalCount;
            return query.provider.find(query.collectionName, query.getOptimizedFilter(), query.orderBy, skipNumber, query.limitNumber, options, query.included, omitTotalCount, query.cursor, query.projectedFields);
        };
        return rejectIfInvalid(this.invalidArguments, this.collectionName)
            .then(() => apiValidator().options(options).validateAndReject())
            .then(() => loadPage(this))
            .then((result) => new WixDataQueryResult({
            result,
            query: this,
            pagingFunction: loadPage,
        }));
    }
    limit(limitNumber) {
        const [newInvalidArguments] = this._queryValidator('.limit')
            .arityIsOne(arguments)
            .isPositiveNumber(limitNumber)
            .isInteger(limitNumber)
            .validateAndAggregate();
        return new WixDataQuery({
            provider: this.provider,
            collectionName: this.collectionName,
            filterTree: this.filterTree,
            orderBy: this.orderBy,
            skipNumber: this.skipNumber,
            limitNumber,
            included: this.included,
            cursor: this.cursor,
            invalidArguments: newInvalidArguments,
            projectedFields: this.projectedFields,
        });
    }
    skip(skipNumber) {
        const [newInvalidArguments] = this._queryValidator('.skip')
            .arityIsOne(arguments)
            .isNonNegativeNumber(skipNumber)
            .isInteger(skipNumber)
            .validateAndAggregate();
        return new WixDataQuery({
            provider: this.provider,
            collectionName: this.collectionName,
            filterTree: this.filterTree,
            orderBy: this.orderBy,
            skipNumber,
            limitNumber: this.limitNumber,
            included: this.included,
            cursor: this.cursor,
            invalidArguments: newInvalidArguments,
            projectedFields: this.projectedFields,
        });
    }
    include(...propertyName) {
        const newIncludedFields = clone(this.included);
        for (let i = 0; i < propertyName.length; i++) {
            newIncludedFields.push(propertyName[i]);
        }
        return new WixDataQuery({
            provider: this.provider,
            collectionName: this.collectionName,
            filterTree: this.filterTree,
            orderBy: this.orderBy,
            skipNumber: this.skipNumber,
            limitNumber: this.limitNumber,
            invalidArguments: this.invalidArguments,
            included: newIncludedFields,
            cursor: this.cursor,
            projectedFields: this.projectedFields,
        });
    }
    setFilterModel(filterModel) {
        const newQuery = super.setFilterModel(filterModel);
        return this._setQuerySpecificInvalidArguments(newQuery);
    }
    getOptimizedFilter() {
        try {
            return optimiseQuery(this.filterTree);
        }
        catch (e) {
            // there's no filter schema validation in `setFilterModel`
            // so filter should be passed as-is and detailed validation errors received from backend
            return this.filterTree;
        }
    }
    setSortModel(sortModel) {
        const newQuery = super.setSortModel(sortModel);
        return this._setQuerySpecificInvalidArguments(newQuery);
    }
    _setQuerySpecificInvalidArguments(newQuery) {
        const validateIfDefined = (value, validator) => value !== undefined ? validator.validateAndAggregate()[0] : [];
        const limitValidator = this._queryValidator('.limit', [])
            .isPositiveNumber(this.limitNumber)
            .isInteger(this.limitNumber);
        const skipValidator = this._queryValidator('.skip', [])
            .isNonNegativeNumber(this.skipNumber)
            .isInteger(this.skipNumber);
        const invalidArguments = [
            ...validateIfDefined(this.limitNumber, limitValidator),
            ...validateIfDefined(this.skipNumber, skipValidator),
        ];
        return Object.assign(newQuery, { invalidArguments });
    }
    _queryValidator(operatorName, invalidArguments = this.invalidArguments) {
        return new QueryValidator(operatorName, invalidArguments);
    }
    copy(overrides = {}) {
        return new WixDataQuery({
            provider: this.provider,
            collectionName: this.collectionName,
            filterTree: this.filterTree,
            orderBy: this.orderBy,
            skipNumber: this.skipNumber,
            limitNumber: this.limitNumber,
            invalidArguments: this.invalidArguments,
            included: this.included,
            cursor: this.cursor,
            projectedFields: this.projectedFields,
            ...overrides,
        });
    }
}
function rejectIfInvalid(invalidArguments, collectionName) {
    const collectionNameInvalid = isString(collectionName)
        ? []
        : [messages.collectionNameMustBeAString()];
    const allInvalids = collectionNameInvalid.concat(invalidArguments);
    if (allInvalids.length > 0) {
        return Promise.reject(validationError(messages.queryValidations.queryInvalid(collectionName, allInvalids)));
    }
    else {
        return Promise.resolve();
    }
}
export function queryFactory(provider, collectionName) {
    return new WixDataQuery({
        provider,
        collectionName,
        filterTree: {},
        orderBy: undefined,
        skipNumber: 0,
        invalidArguments: [],
        included: [],
        projectedFields: [],
    });
}
export class WixDataQueryResult {
    constructor(obj) {
        this._isCreatedByCursor = false;
        this._offset = 0;
        this._executeQuery = (cursor, isNext) => {
            const query = isCursorDefined(cursor)
                ? this._getNewCursorQuery(cursor, isNext)
                : this._getNewQuery(isNext);
            return this._pagingFunction(query).then((result) => {
                return new WixDataQueryResult({
                    result,
                    lastResult: this,
                    isNext,
                    query,
                    pagingFunction: this._pagingFunction,
                });
            });
        };
        if (!obj) {
            return;
        }
        const result = obj.result;
        const paging = obj.result.pagingMetadata ?? {};
        const lastResult = obj.lastResult;
        this._items = result.items;
        this._cursors = paging.cursors;
        this._isCreatedByCursor = isCursorDefined(obj.query.cursor);
        this._query = obj.query;
        this._partialIncludes = result.partialIncludes;
        this._pagingFunction = obj.pagingFunction;
        this._hasNext = result.pagingMetadata?.hasNext || false;
        this._totalCount = this._isCreatedByCursor
            ? lastResult?.totalCount
            : result.totalCount;
        if (obj.query.limitNumber) {
            this._effectivePageSize = obj.query.limitNumber;
        }
        else if (lastResult?._effectivePageSize) {
            this._effectivePageSize = lastResult._effectivePageSize;
        }
        else if (this._hasNext || !paging.cursors) {
            this._effectivePageSize = result.items.length;
        }
        if (obj.query.skipNumber !== undefined) {
            this._offset = obj.query.skipNumber;
        }
        else if (this._isCreatedByCursor &&
            this._effectivePageSize > 0 &&
            lastResult) {
            this._offset = obj.isNext
                ? lastResult._offset + this._effectivePageSize
                : Math.max(0, lastResult._offset - this._effectivePageSize);
        }
    }
    get items() {
        return this._items;
    }
    get length() {
        return this.items.length;
    }
    get totalCount() {
        return this._totalCount;
    }
    get query() {
        return this._query;
    }
    get pageSize() {
        return this._query.limitNumber;
    }
    get totalPages() {
        if (this.totalCount === 0) {
            return 0;
        }
        if (this._effectivePageSize > 0 && this.totalCount > 0) {
            return Math.ceil(this.totalCount / this._effectivePageSize);
        }
        if (this._offset === 0 && !this.hasNext() && this.totalCount > 0) {
            return 1;
        }
        return undefined;
    }
    get currentPage() {
        if (this.length === 0) {
            return undefined;
        }
        if (this._effectivePageSize > 0 && this._offset !== undefined) {
            return Math.ceil(this._offset / this._effectivePageSize);
        }
        if (this._offset === 0 && !this.hasNext() && this.totalCount > 0) {
            return 0;
        }
        return undefined;
    }
    get partialIncludes() {
        return this._partialIncludes;
    }
    next() {
        if (!this.hasNext()) {
            return this._rejectNoNextPage();
        }
        return this._executeQuery(this.nextCursor, true);
    }
    prev() {
        if (!this.hasPrev()) {
            return this._rejectNoPrevPage();
        }
        return this._executeQuery(this.prevCursor, false);
    }
    get nextCursor() {
        return this._cursors && this._cursors.next;
    }
    get prevCursor() {
        return this._cursors && this._cursors.prev;
    }
    hasNext() {
        return this._hasNext;
    }
    hasPrev() {
        if (this._isCreatedByCursor || this._cursors) {
            return isCursorDefined(this.prevCursor);
        }
        return this.currentPage > 0;
    }
    toJSON() {
        return {
            currentPage: this.currentPage,
            items: this.items,
            length: this.length,
            pageSize: this.pageSize,
            partialIncludes: this.partialIncludes,
            query: this.query,
            totalCount: this.totalCount,
            totalPages: this.totalPages,
        };
    }
    _getNewQuery(isNext) {
        return this.query.copy({
            skipNumber: isNext ? this._nextOffset() : this._prevOffset(),
            limitNumber: this._effectivePageSize,
            invalidArguments: [],
        });
    }
    _getNewCursorQuery(cursor, isNext) {
        return this.query.copy({
            skipNumber: isNext ? this._nextOffset() : this._prevOffset(),
            filterTree: {},
            orderBy: undefined,
            cursor,
            invalidArguments: [],
        });
    }
    _nextOffset() {
        if (this._effectivePageSize) {
            return this._offset + this._effectivePageSize;
        }
        return undefined;
    }
    _prevOffset() {
        if (this._effectivePageSize) {
            return Math.max(this._offset - this._effectivePageSize, 0);
        }
        return undefined;
    }
    _rejectNoPrevPage() {
        return Promise.reject(validationError(messages.queryValidations.noPrevPage(this.query.collectionName)));
    }
    _rejectNoNextPage() {
        return Promise.reject(validationError(messages.queryValidations.noNextPage(this.query.collectionName)));
    }
    // todo: to not forget
    // these properties are used by the client - they shouldn't be defined here....BUT since they are, we'll keep them for now, and move them later on to the client.
    get nextSkipNumber() {
        return this._nextOffset();
    }
    get prevSkipNumber() {
        return this._prevOffset();
    }
}
//# sourceMappingURL=query.js.map