var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
export function mergeSchemas(newSchema, existingSchemas) {
    if (existingSchemas === void 0) { existingSchemas = []; }
    if (!Array.isArray(existingSchemas) || Array.isArray(newSchema)) {
        return [];
    }
    if (!newSchema) {
        return existingSchemas;
    }
    if (!newSchema.children || newSchema.children === '{}') {
        return existingSchemas.map(function (existingSchema) {
            return __assign(__assign({}, existingSchema), { disabled: newSchema.disabled });
        });
    }
    else {
        return __spreadArray(__spreadArray([], existingSchemas, true), [newSchema], false);
    }
}
