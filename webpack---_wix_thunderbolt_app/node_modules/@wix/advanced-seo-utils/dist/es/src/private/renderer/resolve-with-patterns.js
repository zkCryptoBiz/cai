import { applyOgImageModifications } from '../utils/build-og-image';
import { resolvePayload } from './resolve-payload';
import { resolveIsIndexable } from './utils/resolve-is-indexable';
import { resolveStructuredData } from '../tags/structured-data/resolve-structured-data';
import { sort } from './sort';
import { fillInPatternBlob } from '../patterns/fill-in-pattern-blob';
import { removeBlackListedTags } from './utils/remove-black-listed-tags';
import { resolveTwitterImage } from '../utils/resolve-twitter-image';
import { formatRobotsTagForRendering } from '../tags/robots-tag/robots-tag';
import { resolvePagination } from './resolve-pagination';
import { resolveEmptyTitlePrefix } from './resolve-empty-title-prefix';
import { logInfo } from '../utils/log-info';
export function resolveWithPatterns(payload, context, options) {
    if (context === void 0) { context = {}; }
    if (options === void 0) { options = { logError: function () { } }; }
    logInfo(options, { payload: payload }, 'resolvePayload');
    var result = resolvePayload(payload, options);
    logInfo(options, { tags: result.tags }, 'resolvePagination');
    var _a = resolvePagination(result.tags, context), resolvedTags = _a.resolvedTags, resolvedContext = _a.resolvedContext;
    result.tags = resolvedTags;
    logInfo(options, { tags: result.tags }, 'resolveStructuredData');
    result.tags = resolveStructuredData(result.tags, resolvedContext);
    logInfo(options, { tags: result.tags }, 'resolveIsIndexable');
    result.tags = resolveIsIndexable(result.tags, resolvedContext);
    logInfo(options, { tags: result.tags }, 'fillInPatternBlob');
    result = fillInPatternBlob(result, resolvedContext);
    logInfo(options, { tags: result.tags }, 'applyOgImageModifications');
    result.tags = applyOgImageModifications(result.tags);
    logInfo(options, { tags: result.tags }, 'resolveTwitterImage');
    result.tags = resolveTwitterImage(result.tags);
    logInfo(options, { tags: result.tags }, 'removeBlackListedTags');
    result.tags = removeBlackListedTags(result.tags);
    logInfo(options, { tags: result.tags }, 'formatRobotsTagForRendering');
    result.tags = formatRobotsTagForRendering(result.tags);
    logInfo(options, { tags: result.tags }, 'resolveEmptyTitlePrefix');
    result.tags = resolveEmptyTitlePrefix(result.tags);
    logInfo(options, { tags: result.tags }, 'sort');
    result.tags = sort(result.tags);
    logInfo(options, { tags: result.tags }, 'return');
    return result;
}
