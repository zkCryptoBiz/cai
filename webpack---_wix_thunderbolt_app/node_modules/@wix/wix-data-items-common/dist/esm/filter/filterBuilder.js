import filterMixin from './filterMixin';
export class FilterBuilder extends filterMixin() {
    get constructorName() {
        return 'FilterBuilder';
    }
    _build() {
        return this.getFilterModel();
    }
}
export class PlatformizedFilterBuilder extends filterMixin() {
    in(...args) {
        return this._AndSetOperand('$in', '.in', args);
    }
    exists(...args) {
        return this._binaryAnd('$exists', '.exists', args);
    }
    gte(field, value) {
        return this.ge(field, value);
    }
    lte(field, value) {
        return this.le(field, value);
    }
    build() {
        return this.getFilterModel();
    }
    hasAnyFilter() {
        if (this.filterTree === null || this.filterTree === undefined) {
            return false;
        }
        if (!Object.keys(this.filterTree).every((x) => x === '$and')) {
            return false;
        }
        return (this.filterTree?.$and?.length ?? 0) > 0;
    }
}
export function platformizedFilterBuilder(options = {}) {
    return new PlatformizedFilterBuilder(options);
}
export function filterBuilderFactory() {
    return new FilterBuilder({});
}
export default filterBuilderFactory;
//# sourceMappingURL=filterBuilder.js.map