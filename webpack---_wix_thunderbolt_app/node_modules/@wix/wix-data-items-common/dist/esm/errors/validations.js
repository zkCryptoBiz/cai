import { messages } from './errors';
import { isString, isBoolean, isObject, isArray } from '../utils/type-utils';
import { RejectingValidator } from './base-validator';
class ApiValidator extends RejectingValidator {
    arity(method, args, from, to) {
        return this.addValidation(() => args.length <= to && args.length >= from, () => messages.invalidArgumentLength(method, from, to, args.length));
    }
    _isObject(item, collectionName) {
        return this.addValidation(() => isObject(item), () => messages.itemMustBeAnObject(item, collectionName));
    }
    item(item, collectionName, requireId) {
        return this._isObject(item, collectionName).addValidation(() => (item._id !== undefined ? isString(item._id) : !requireId), () => messages.updateItemInvalid());
    }
    items(items, collectionName) {
        return this.addValidation(() => isArray(items) &&
            items.every((item) => isObject(item) &&
                (item._id === undefined || item._id === null || isString(item._id))), () => messages.itemsMustBeArrayOfObjects(collectionName)).addValidation(() => items.length <= 1000, () => messages.itemsMustBeLessThanThousand(collectionName));
    }
    fieldName(fieldName) {
        return this.addValidation(() => isString(fieldName), () => messages.fieldNameMustBeAString());
    }
    itemId(itemId) {
        return this.addValidation(() => isString(itemId), () => messages.itemIdMustBeAString());
    }
    itemIds(itemIds, collectionName) {
        return this.addValidation(() => isArray(itemIds) && itemIds.every((itemId) => isString(itemId)), () => messages.itemIdsMustBeArrayOfStrings()).addValidation(() => itemIds.length <= 1000, () => messages.removeItemsMustBeLessThanThousand(collectionName));
    }
    _options(options, flags) {
        return this.addValidation(() => {
            const validOptions = isObject(options) &&
                flags.every((flag) => {
                    if (flag === 'language') {
                        return isNonEmptyStringIfDefined(options[flag]);
                    }
                    else {
                        return isBooleanIfDefined(options[flag]);
                    }
                });
            return options == null || validOptions;
        }, () => messages.optionsInvalid(flags));
    }
    referenceRemoveParameters(parameters) {
        return this.addValidation(() => isArray(parameters) && parameters.every(isRemoveReferenceParameter), messages.referenceOperationParameterError);
    }
    referenceParameters(parameters) {
        return this.addValidation(() => isArray(parameters) && parameters.every(isReferenceParameter), messages.referenceOperationParameterError);
    }
    referenceParameter(parameter) {
        return this.addValidation(() => isReferenceParameter(parameter), messages.referenceOperationParameterError);
    }
    isNonEmptyString(operand, operandName) {
        return this.addValidation(() => typeof operand === 'string' && operand.length > 0, () => messages.queryValidations.isNonEmptyString(operandName));
    }
    references(refs) {
        return this.addValidation(() => isArray(refs) &&
            refs.every((ref) => isString(ref.relationshipName) &&
                isReferenceParameter(ref.left) &&
                isReferenceParameter(ref.right)), messages.invalidReferenceError);
    }
    options(options) {
        return this._options(options, [
            'suppressAuth',
            'suppressHooks',
            'showDrafts',
            'consistentRead',
            'language',
        ]);
    }
    bulkInsertOptions(options) {
        return this._options(options, [
            'suppressAuth',
            'suppressHooks',
            'overrideExisting',
        ]);
    }
    bulkUpdateOptions(options) {
        return this._options(options, [
            'suppressAuth',
            'suppressHooks',
            'showDrafts',
        ]);
    }
    bulkRemoveOptions(options) {
        return this._options(options, [
            'suppressAuth',
            'suppressHooks',
            'showDrafts',
        ]);
    }
    truncateOptions(options) {
        return this._options(options, ['suppressAuth']);
    }
    collectionName(collectionName) {
        return this.addValidation(() => isString(collectionName), () => messages.collectionNameMustBeAString());
    }
}
export function apiValidator() {
    return new ApiValidator();
}
function isNonEmptyStringIfDefined(value) {
    return value == null || (isString(value) && value.length > 0);
}
function isBooleanIfDefined(value) {
    return value == null || isBoolean(value);
}
function isReferenceParameter(parameter) {
    return ((isString(parameter) && parameter !== '') ||
        (isObject(parameter) && parameter.hasOwnProperty('_id')));
}
function isRemoveReferenceParameter(parameter) {
    return (isString(parameter) ||
        (isObject(parameter) && parameter.hasOwnProperty('_id')));
}
//# sourceMappingURL=validations.js.map