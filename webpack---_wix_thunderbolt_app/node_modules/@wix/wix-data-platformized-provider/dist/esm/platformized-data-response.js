import { messages, wixDataError, codes } from '@wix/wix-data-errors';
import { parseDates } from '@wix/wix-data-utils';
import mapErrorCode from './platformized-code-mapping';
const HooksErrorCode = 'WDE0078';
const PayloadTooLargeCode = 'WDE0109';
const ValidationErrorCode = 'WDE0080';
export const handleJsonResponse = (trace) => (response) => {
    return trace('platformized-data-response', {
        requestId: response.headers?.['x-wix-request-id'],
    })(() => parseDates(response.data));
};
export const handleJsonErrorResponse = (trace) => (error) => {
    return trace('wix-data-error-response', {
        responseData: error?.response?.data,
        status: error?.response?.status,
        requestId: error?.response?.headers?.['x-wix-request-id'],
        error: error?.response ? error.response : error,
    })(() => Promise.resolve())
        .then(() => {
        if (isPayloadTooLarge(error)) {
            return payloadTooLargeError();
        }
        const jsonError = error?.response?.data;
        if (isHookError(jsonError)) {
            return parseHookError(jsonError);
        }
        if (isApplicationError(jsonError)) {
            return parseApplicationError(jsonError);
        }
        if (isValidationError(jsonError)) {
            return parseValidationError(jsonError);
        }
        if (isWdeError(error)) {
            return error;
        }
        return serverInvalidResponse(error);
    })
        .then((parsedError) => Promise.reject(parsedError));
};
function isWdeError(error) {
    return (error?.message || '').startsWith('WDE');
}
function isPayloadTooLarge(error) {
    return error?.response?.status === 413;
}
function payloadTooLargeError() {
    return wixDataError(messages.payloadIsTooLarge(), PayloadTooLargeCode);
}
function isApplicationError(error) {
    return error?.details?.applicationError;
}
function isValidationError(error) {
    return error?.details?.validationError;
}
function isHookError(error) {
    return error?.details?.applicationError?.code === HooksErrorCode;
}
function serverInvalidResponse(error) {
    const stringifyError = (err) => err instanceof Error ? `${err}` : JSON.stringify(err);
    const requestId = error?.response?.headers?.['x-wix-request-id'];
    const status = error?.response?.status;
    const statusText = error?.response?.statusText;
    const details = error?.response ? error.response : error;
    let message = status ? `${status}` : '';
    message += statusText ? `(${statusText})` : '';
    message += requestId ? ` ${requestId}` : '';
    message = message || stringifyError(error);
    return wixDataError(messages.serverInvalidResponse(message), codes.UnknownError, details);
}
function parseHookError(error) {
    const data = error.details.applicationError.data;
    if (data?.jsErrorValue) {
        const { name, message, code } = data.jsErrorValue;
        const result = new Error(message);
        result.name = name;
        // @ts-expect-error
        result.code = code;
        // @ts-expect-error
        result.details = error.details;
        return result;
    }
    return data?.value;
}
export const parseApplicationError = (error) => {
    const code = mapErrorCode(error.details.applicationError.code);
    return wixDataError(error.details.applicationError.description, code, error.details);
};
function parseValidationError(error) {
    const validationMessages = (error.details.validationError.fieldViolations || []).map((v) => `${v.field}: ${v.description}`);
    const message = [error.message, ...validationMessages].join('\n');
    return wixDataError(message, ValidationErrorCode, error.details);
}
export const parseBulkDataItemsError = (items) => (error) => {
    return parseBulkError(items)({
        message: error.itemMetadata.error.description,
        details: {
            applicationError: {
                code: error.itemMetadata.error.code,
                description: error.itemMetadata.error.description,
            },
        },
        originalIndex: error.itemMetadata.originalIndex,
    });
};
export const parseBulkError = (items) => (error) => {
    const { message, code, name } = getBulkErrorDetails(error);
    return {
        message,
        code,
        name,
        originalIndex: error.originalIndex,
        item: items[error.originalIndex],
    };
};
function getBulkErrorDetails(error) {
    const appError = error.details?.applicationError;
    if (isHookError(error)) {
        const jsError = appError.data?.jsErrorValue;
        if (jsError) {
            return {
                message: jsError.message,
                code: jsError.code,
                name: jsError.name,
            };
        }
        const value = appError.data?.value;
        if (typeof value === 'string') {
            return { message: value };
        }
        return {};
    }
    return {
        code: mapErrorCode(appError?.code) || codes.UnknownError,
        message: appError?.description || error.message,
        name: 'Error',
    };
}
//# sourceMappingURL=platformized-data-response.js.map