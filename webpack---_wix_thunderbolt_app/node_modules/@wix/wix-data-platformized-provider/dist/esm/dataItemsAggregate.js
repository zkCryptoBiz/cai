export default function toDataItemsAggregate(platformizedAggregation) {
    const getOperationName = (operation) => {
        switch (Object.keys(operation)[0]) {
            case '$sum':
                return 'sum';
            case '$min':
                return 'min';
            case '$avg':
                return 'average';
            case '$max':
                return 'max';
            default:
                return '';
        }
    };
    const getItemFieldName = (operation) => {
        const operationField = Object.values(operation)[0];
        // Since field comes with dollar prefix, strip it for likes {$min: '$age'} and return `age` as an itemFieldName. But in cases like { $sum: 1 } we should return 1.
        return typeof operationField === 'string' && operationField.startsWith('$')
            ? operationField.substring(1)
            : operationField;
    };
    const operations = typeof platformizedAggregation === 'object'
        ? Object.keys(platformizedAggregation)
            .filter((projectedField) => typeof platformizedAggregation[projectedField] === 'object' &&
            projectedField !== '_id')
            .map((projectedField) => {
            const operation = platformizedAggregation[projectedField];
            const operationName = getOperationName(operation);
            const itemFieldName = getItemFieldName(operation);
            const agg = {
                resultFieldName: projectedField,
            };
            if (operationName === 'sum' && itemFieldName === 1) {
                agg.itemCount = {};
            }
            else {
                agg[operationName] = {
                    itemFieldName,
                };
            }
            return agg;
        })
        : [];
    const fieldsToGroupBy = (platformizedAggregation) => {
        if (typeof platformizedAggregation === 'object') {
            if (typeof platformizedAggregation._id === 'object') {
                return Object.keys(platformizedAggregation._id);
            }
            if (platformizedAggregation._id === '0') {
                return [];
            }
            // Single field to group by, remove preceding $
            return [platformizedAggregation._id.substring(1)];
        }
        return [];
    };
    const aggregation = {
        groupingFields: fieldsToGroupBy(platformizedAggregation),
        operations,
    };
    return aggregation;
}
//# sourceMappingURL=dataItemsAggregate.js.map