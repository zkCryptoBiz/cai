import _defineProperty from "@babel/runtime/helpers/defineProperty";
import { isHttpError, responseDataHasDetails, responseDataHasMessage } from '../util/httpErrorDecoders';
export class ErrorAccessor {
  constructor(params) {
    _defineProperty(this, "inputError", void 0);
    _defineProperty(this, "_error", void 0);
    _defineProperty(this, "_httpError", void 0);
    _defineProperty(this, "_errorDetails", void 0);
    this.inputError = params.error;
  }
  get error() {
    return this._error ??= this.inputError instanceof Error ? this.inputError : null;
  }

  /**
   * The message of the JS error, for example: `Network Error`
   */
  get exceptionMessage() {
    var _this$error;
    return (_this$error = this.error) == null ? void 0 : _this$error.message;
  }

  /**
   * Error object from the http client, including the http response
   */
  get httpError() {
    return this._httpError ??= isHttpError(this.inputError) ? this.inputError : null;
  }

  /**
   * errno symbolic name** like `ENETUNREACH`, Not http status code
   * This code is how the browser represents the error
   */
  get clientCode() {
    var _this$httpError;
    return (_this$httpError = this.httpError) == null ? void 0 : _this$httpError.code;
  }

  /**
   * The http response of the error
   */
  get errorResponse() {
    var _this$httpError2;
    return (_this$httpError2 = this.httpError) == null ? void 0 : _this$httpError2.response;
  }

  /**
   * The http status code of the http response, numeric value (e.g. 404)
   */
  get statusCode() {
    var _this$errorResponse;
    return (_this$errorResponse = this.errorResponse) == null ? void 0 : _this$errorResponse.status;
  }

  /**
   * The data (JSON) of the http response
   */
  get errorData() {
    var _this$errorResponse2;
    return (_this$errorResponse2 = this.errorResponse) == null ? void 0 : _this$errorResponse2.data;
  }

  /**
   * The details of the error, if available
   */
  get errorDetails() {
    const {
      errorData
    } = this;
    return this._errorDetails ??= responseDataHasDetails(errorData) ? errorData.details : null;
  }
  get errorMessage() {
    const {
      errorData
    } = this;
    return responseDataHasMessage(errorData) ? errorData.message : undefined;
  }
  get applicationError() {
    var _this$errorDetails;
    return (_this$errorDetails = this.errorDetails) == null ? void 0 : _this$errorDetails.applicationError;
  }
  get validationError() {
    var _this$errorDetails2;
    return (_this$errorDetails2 = this.errorDetails) == null ? void 0 : _this$errorDetails2.validationError;
  }
}
//# sourceMappingURL=ErrorAccessor.js.map